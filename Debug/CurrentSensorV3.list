
CurrentSensorV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d33c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800d3fc  0800d3fc  0001d3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d714  0800d714  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800d714  0800d714  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d714  0800d714  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d714  0800d714  0001d714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d718  0800d718  0001d718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800d71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20000068  0800d780  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002528  0800d780  00022528  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000204a2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055b4  00000000  00000000  00040571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00045b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d4  00000000  00000000  000473d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201dd  00000000  00000000  000486a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023534  00000000  00000000  00068881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5b97  00000000  00000000  0008bdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059d8  00000000  00000000  0013194c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00137324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d3e4 	.word	0x0800d3e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800d3e4 	.word	0x0800d3e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_dadd>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0004      	movs	r4, r0
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	001f      	movs	r7, r3
 8000402:	030b      	lsls	r3, r1, #12
 8000404:	0010      	movs	r0, r2
 8000406:	004e      	lsls	r6, r1, #1
 8000408:	0a5b      	lsrs	r3, r3, #9
 800040a:	0fcd      	lsrs	r5, r1, #31
 800040c:	0f61      	lsrs	r1, r4, #29
 800040e:	007a      	lsls	r2, r7, #1
 8000410:	4319      	orrs	r1, r3
 8000412:	00e3      	lsls	r3, r4, #3
 8000414:	033c      	lsls	r4, r7, #12
 8000416:	0fff      	lsrs	r7, r7, #31
 8000418:	46bc      	mov	ip, r7
 800041a:	0a64      	lsrs	r4, r4, #9
 800041c:	0f47      	lsrs	r7, r0, #29
 800041e:	4327      	orrs	r7, r4
 8000420:	0d76      	lsrs	r6, r6, #21
 8000422:	0d52      	lsrs	r2, r2, #21
 8000424:	00c0      	lsls	r0, r0, #3
 8000426:	46b9      	mov	r9, r7
 8000428:	4680      	mov	r8, r0
 800042a:	1ab7      	subs	r7, r6, r2
 800042c:	4565      	cmp	r5, ip
 800042e:	d100      	bne.n	8000432 <__aeabi_dadd+0x3e>
 8000430:	e09b      	b.n	800056a <__aeabi_dadd+0x176>
 8000432:	2f00      	cmp	r7, #0
 8000434:	dc00      	bgt.n	8000438 <__aeabi_dadd+0x44>
 8000436:	e084      	b.n	8000542 <__aeabi_dadd+0x14e>
 8000438:	2a00      	cmp	r2, #0
 800043a:	d100      	bne.n	800043e <__aeabi_dadd+0x4a>
 800043c:	e0be      	b.n	80005bc <__aeabi_dadd+0x1c8>
 800043e:	4ac8      	ldr	r2, [pc, #800]	; (8000760 <__aeabi_dadd+0x36c>)
 8000440:	4296      	cmp	r6, r2
 8000442:	d100      	bne.n	8000446 <__aeabi_dadd+0x52>
 8000444:	e124      	b.n	8000690 <__aeabi_dadd+0x29c>
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	464c      	mov	r4, r9
 800044a:	0412      	lsls	r2, r2, #16
 800044c:	4314      	orrs	r4, r2
 800044e:	46a1      	mov	r9, r4
 8000450:	2f38      	cmp	r7, #56	; 0x38
 8000452:	dd00      	ble.n	8000456 <__aeabi_dadd+0x62>
 8000454:	e167      	b.n	8000726 <__aeabi_dadd+0x332>
 8000456:	2f1f      	cmp	r7, #31
 8000458:	dd00      	ble.n	800045c <__aeabi_dadd+0x68>
 800045a:	e1d6      	b.n	800080a <__aeabi_dadd+0x416>
 800045c:	2220      	movs	r2, #32
 800045e:	464c      	mov	r4, r9
 8000460:	1bd2      	subs	r2, r2, r7
 8000462:	4094      	lsls	r4, r2
 8000464:	46a2      	mov	sl, r4
 8000466:	4644      	mov	r4, r8
 8000468:	40fc      	lsrs	r4, r7
 800046a:	0020      	movs	r0, r4
 800046c:	4654      	mov	r4, sl
 800046e:	4304      	orrs	r4, r0
 8000470:	4640      	mov	r0, r8
 8000472:	4090      	lsls	r0, r2
 8000474:	1e42      	subs	r2, r0, #1
 8000476:	4190      	sbcs	r0, r2
 8000478:	464a      	mov	r2, r9
 800047a:	40fa      	lsrs	r2, r7
 800047c:	4304      	orrs	r4, r0
 800047e:	1a89      	subs	r1, r1, r2
 8000480:	1b1c      	subs	r4, r3, r4
 8000482:	42a3      	cmp	r3, r4
 8000484:	4192      	sbcs	r2, r2
 8000486:	4252      	negs	r2, r2
 8000488:	1a8b      	subs	r3, r1, r2
 800048a:	469a      	mov	sl, r3
 800048c:	4653      	mov	r3, sl
 800048e:	021b      	lsls	r3, r3, #8
 8000490:	d400      	bmi.n	8000494 <__aeabi_dadd+0xa0>
 8000492:	e0d4      	b.n	800063e <__aeabi_dadd+0x24a>
 8000494:	4653      	mov	r3, sl
 8000496:	025a      	lsls	r2, r3, #9
 8000498:	0a53      	lsrs	r3, r2, #9
 800049a:	469a      	mov	sl, r3
 800049c:	4653      	mov	r3, sl
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_dadd+0xb0>
 80004a2:	e104      	b.n	80006ae <__aeabi_dadd+0x2ba>
 80004a4:	4650      	mov	r0, sl
 80004a6:	f001 fc9d 	bl	8001de4 <__clzsi2>
 80004aa:	0003      	movs	r3, r0
 80004ac:	3b08      	subs	r3, #8
 80004ae:	2220      	movs	r2, #32
 80004b0:	0020      	movs	r0, r4
 80004b2:	1ad2      	subs	r2, r2, r3
 80004b4:	4651      	mov	r1, sl
 80004b6:	40d0      	lsrs	r0, r2
 80004b8:	4099      	lsls	r1, r3
 80004ba:	0002      	movs	r2, r0
 80004bc:	409c      	lsls	r4, r3
 80004be:	430a      	orrs	r2, r1
 80004c0:	42b3      	cmp	r3, r6
 80004c2:	da00      	bge.n	80004c6 <__aeabi_dadd+0xd2>
 80004c4:	e102      	b.n	80006cc <__aeabi_dadd+0x2d8>
 80004c6:	1b9b      	subs	r3, r3, r6
 80004c8:	1c59      	adds	r1, r3, #1
 80004ca:	291f      	cmp	r1, #31
 80004cc:	dd00      	ble.n	80004d0 <__aeabi_dadd+0xdc>
 80004ce:	e0a7      	b.n	8000620 <__aeabi_dadd+0x22c>
 80004d0:	2320      	movs	r3, #32
 80004d2:	0010      	movs	r0, r2
 80004d4:	0026      	movs	r6, r4
 80004d6:	1a5b      	subs	r3, r3, r1
 80004d8:	409c      	lsls	r4, r3
 80004da:	4098      	lsls	r0, r3
 80004dc:	40ce      	lsrs	r6, r1
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	1e63      	subs	r3, r4, #1
 80004e2:	419c      	sbcs	r4, r3
 80004e4:	4330      	orrs	r0, r6
 80004e6:	4692      	mov	sl, r2
 80004e8:	2600      	movs	r6, #0
 80004ea:	4304      	orrs	r4, r0
 80004ec:	0763      	lsls	r3, r4, #29
 80004ee:	d009      	beq.n	8000504 <__aeabi_dadd+0x110>
 80004f0:	230f      	movs	r3, #15
 80004f2:	4023      	ands	r3, r4
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d005      	beq.n	8000504 <__aeabi_dadd+0x110>
 80004f8:	1d23      	adds	r3, r4, #4
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	41a4      	sbcs	r4, r4
 80004fe:	4264      	negs	r4, r4
 8000500:	44a2      	add	sl, r4
 8000502:	001c      	movs	r4, r3
 8000504:	4653      	mov	r3, sl
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	d400      	bmi.n	800050c <__aeabi_dadd+0x118>
 800050a:	e09b      	b.n	8000644 <__aeabi_dadd+0x250>
 800050c:	4b94      	ldr	r3, [pc, #592]	; (8000760 <__aeabi_dadd+0x36c>)
 800050e:	3601      	adds	r6, #1
 8000510:	429e      	cmp	r6, r3
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x122>
 8000514:	e0b8      	b.n	8000688 <__aeabi_dadd+0x294>
 8000516:	4653      	mov	r3, sl
 8000518:	4992      	ldr	r1, [pc, #584]	; (8000764 <__aeabi_dadd+0x370>)
 800051a:	08e4      	lsrs	r4, r4, #3
 800051c:	400b      	ands	r3, r1
 800051e:	0019      	movs	r1, r3
 8000520:	075b      	lsls	r3, r3, #29
 8000522:	4323      	orrs	r3, r4
 8000524:	0572      	lsls	r2, r6, #21
 8000526:	024c      	lsls	r4, r1, #9
 8000528:	0b24      	lsrs	r4, r4, #12
 800052a:	0d52      	lsrs	r2, r2, #21
 800052c:	0512      	lsls	r2, r2, #20
 800052e:	07ed      	lsls	r5, r5, #31
 8000530:	4322      	orrs	r2, r4
 8000532:	432a      	orrs	r2, r5
 8000534:	0018      	movs	r0, r3
 8000536:	0011      	movs	r1, r2
 8000538:	bce0      	pop	{r5, r6, r7}
 800053a:	46ba      	mov	sl, r7
 800053c:	46b1      	mov	r9, r6
 800053e:	46a8      	mov	r8, r5
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	2f00      	cmp	r7, #0
 8000544:	d048      	beq.n	80005d8 <__aeabi_dadd+0x1e4>
 8000546:	1b97      	subs	r7, r2, r6
 8000548:	2e00      	cmp	r6, #0
 800054a:	d000      	beq.n	800054e <__aeabi_dadd+0x15a>
 800054c:	e10e      	b.n	800076c <__aeabi_dadd+0x378>
 800054e:	000c      	movs	r4, r1
 8000550:	431c      	orrs	r4, r3
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0x162>
 8000554:	e1b7      	b.n	80008c6 <__aeabi_dadd+0x4d2>
 8000556:	1e7c      	subs	r4, r7, #1
 8000558:	2f01      	cmp	r7, #1
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x16a>
 800055c:	e226      	b.n	80009ac <__aeabi_dadd+0x5b8>
 800055e:	4d80      	ldr	r5, [pc, #512]	; (8000760 <__aeabi_dadd+0x36c>)
 8000560:	42af      	cmp	r7, r5
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x172>
 8000564:	e1d5      	b.n	8000912 <__aeabi_dadd+0x51e>
 8000566:	0027      	movs	r7, r4
 8000568:	e107      	b.n	800077a <__aeabi_dadd+0x386>
 800056a:	2f00      	cmp	r7, #0
 800056c:	dc00      	bgt.n	8000570 <__aeabi_dadd+0x17c>
 800056e:	e0b2      	b.n	80006d6 <__aeabi_dadd+0x2e2>
 8000570:	2a00      	cmp	r2, #0
 8000572:	d047      	beq.n	8000604 <__aeabi_dadd+0x210>
 8000574:	4a7a      	ldr	r2, [pc, #488]	; (8000760 <__aeabi_dadd+0x36c>)
 8000576:	4296      	cmp	r6, r2
 8000578:	d100      	bne.n	800057c <__aeabi_dadd+0x188>
 800057a:	e089      	b.n	8000690 <__aeabi_dadd+0x29c>
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	464c      	mov	r4, r9
 8000580:	0412      	lsls	r2, r2, #16
 8000582:	4314      	orrs	r4, r2
 8000584:	46a1      	mov	r9, r4
 8000586:	2f38      	cmp	r7, #56	; 0x38
 8000588:	dc6b      	bgt.n	8000662 <__aeabi_dadd+0x26e>
 800058a:	2f1f      	cmp	r7, #31
 800058c:	dc00      	bgt.n	8000590 <__aeabi_dadd+0x19c>
 800058e:	e16e      	b.n	800086e <__aeabi_dadd+0x47a>
 8000590:	003a      	movs	r2, r7
 8000592:	4648      	mov	r0, r9
 8000594:	3a20      	subs	r2, #32
 8000596:	40d0      	lsrs	r0, r2
 8000598:	4684      	mov	ip, r0
 800059a:	2f20      	cmp	r7, #32
 800059c:	d007      	beq.n	80005ae <__aeabi_dadd+0x1ba>
 800059e:	2240      	movs	r2, #64	; 0x40
 80005a0:	4648      	mov	r0, r9
 80005a2:	1bd2      	subs	r2, r2, r7
 80005a4:	4090      	lsls	r0, r2
 80005a6:	0002      	movs	r2, r0
 80005a8:	4640      	mov	r0, r8
 80005aa:	4310      	orrs	r0, r2
 80005ac:	4680      	mov	r8, r0
 80005ae:	4640      	mov	r0, r8
 80005b0:	1e42      	subs	r2, r0, #1
 80005b2:	4190      	sbcs	r0, r2
 80005b4:	4662      	mov	r2, ip
 80005b6:	0004      	movs	r4, r0
 80005b8:	4314      	orrs	r4, r2
 80005ba:	e057      	b.n	800066c <__aeabi_dadd+0x278>
 80005bc:	464a      	mov	r2, r9
 80005be:	4302      	orrs	r2, r0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x1d0>
 80005c2:	e103      	b.n	80007cc <__aeabi_dadd+0x3d8>
 80005c4:	1e7a      	subs	r2, r7, #1
 80005c6:	2f01      	cmp	r7, #1
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0x1d8>
 80005ca:	e193      	b.n	80008f4 <__aeabi_dadd+0x500>
 80005cc:	4c64      	ldr	r4, [pc, #400]	; (8000760 <__aeabi_dadd+0x36c>)
 80005ce:	42a7      	cmp	r7, r4
 80005d0:	d100      	bne.n	80005d4 <__aeabi_dadd+0x1e0>
 80005d2:	e18a      	b.n	80008ea <__aeabi_dadd+0x4f6>
 80005d4:	0017      	movs	r7, r2
 80005d6:	e73b      	b.n	8000450 <__aeabi_dadd+0x5c>
 80005d8:	4c63      	ldr	r4, [pc, #396]	; (8000768 <__aeabi_dadd+0x374>)
 80005da:	1c72      	adds	r2, r6, #1
 80005dc:	4222      	tst	r2, r4
 80005de:	d000      	beq.n	80005e2 <__aeabi_dadd+0x1ee>
 80005e0:	e0e0      	b.n	80007a4 <__aeabi_dadd+0x3b0>
 80005e2:	000a      	movs	r2, r1
 80005e4:	431a      	orrs	r2, r3
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d000      	beq.n	80005ec <__aeabi_dadd+0x1f8>
 80005ea:	e174      	b.n	80008d6 <__aeabi_dadd+0x4e2>
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_dadd+0x1fe>
 80005f0:	e1d0      	b.n	8000994 <__aeabi_dadd+0x5a0>
 80005f2:	464a      	mov	r2, r9
 80005f4:	4302      	orrs	r2, r0
 80005f6:	d000      	beq.n	80005fa <__aeabi_dadd+0x206>
 80005f8:	e1e3      	b.n	80009c2 <__aeabi_dadd+0x5ce>
 80005fa:	074a      	lsls	r2, r1, #29
 80005fc:	08db      	lsrs	r3, r3, #3
 80005fe:	4313      	orrs	r3, r2
 8000600:	08c9      	lsrs	r1, r1, #3
 8000602:	e029      	b.n	8000658 <__aeabi_dadd+0x264>
 8000604:	464a      	mov	r2, r9
 8000606:	4302      	orrs	r2, r0
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x218>
 800060a:	e17d      	b.n	8000908 <__aeabi_dadd+0x514>
 800060c:	1e7a      	subs	r2, r7, #1
 800060e:	2f01      	cmp	r7, #1
 8000610:	d100      	bne.n	8000614 <__aeabi_dadd+0x220>
 8000612:	e0e0      	b.n	80007d6 <__aeabi_dadd+0x3e2>
 8000614:	4c52      	ldr	r4, [pc, #328]	; (8000760 <__aeabi_dadd+0x36c>)
 8000616:	42a7      	cmp	r7, r4
 8000618:	d100      	bne.n	800061c <__aeabi_dadd+0x228>
 800061a:	e166      	b.n	80008ea <__aeabi_dadd+0x4f6>
 800061c:	0017      	movs	r7, r2
 800061e:	e7b2      	b.n	8000586 <__aeabi_dadd+0x192>
 8000620:	0010      	movs	r0, r2
 8000622:	3b1f      	subs	r3, #31
 8000624:	40d8      	lsrs	r0, r3
 8000626:	2920      	cmp	r1, #32
 8000628:	d003      	beq.n	8000632 <__aeabi_dadd+0x23e>
 800062a:	2340      	movs	r3, #64	; 0x40
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	409a      	lsls	r2, r3
 8000630:	4314      	orrs	r4, r2
 8000632:	1e63      	subs	r3, r4, #1
 8000634:	419c      	sbcs	r4, r3
 8000636:	2300      	movs	r3, #0
 8000638:	2600      	movs	r6, #0
 800063a:	469a      	mov	sl, r3
 800063c:	4304      	orrs	r4, r0
 800063e:	0763      	lsls	r3, r4, #29
 8000640:	d000      	beq.n	8000644 <__aeabi_dadd+0x250>
 8000642:	e755      	b.n	80004f0 <__aeabi_dadd+0xfc>
 8000644:	4652      	mov	r2, sl
 8000646:	08e3      	lsrs	r3, r4, #3
 8000648:	0752      	lsls	r2, r2, #29
 800064a:	4313      	orrs	r3, r2
 800064c:	4652      	mov	r2, sl
 800064e:	0037      	movs	r7, r6
 8000650:	08d1      	lsrs	r1, r2, #3
 8000652:	4a43      	ldr	r2, [pc, #268]	; (8000760 <__aeabi_dadd+0x36c>)
 8000654:	4297      	cmp	r7, r2
 8000656:	d01f      	beq.n	8000698 <__aeabi_dadd+0x2a4>
 8000658:	0309      	lsls	r1, r1, #12
 800065a:	057a      	lsls	r2, r7, #21
 800065c:	0b0c      	lsrs	r4, r1, #12
 800065e:	0d52      	lsrs	r2, r2, #21
 8000660:	e764      	b.n	800052c <__aeabi_dadd+0x138>
 8000662:	4642      	mov	r2, r8
 8000664:	464c      	mov	r4, r9
 8000666:	4314      	orrs	r4, r2
 8000668:	1e62      	subs	r2, r4, #1
 800066a:	4194      	sbcs	r4, r2
 800066c:	18e4      	adds	r4, r4, r3
 800066e:	429c      	cmp	r4, r3
 8000670:	4192      	sbcs	r2, r2
 8000672:	4252      	negs	r2, r2
 8000674:	4692      	mov	sl, r2
 8000676:	448a      	add	sl, r1
 8000678:	4653      	mov	r3, sl
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	d5df      	bpl.n	800063e <__aeabi_dadd+0x24a>
 800067e:	4b38      	ldr	r3, [pc, #224]	; (8000760 <__aeabi_dadd+0x36c>)
 8000680:	3601      	adds	r6, #1
 8000682:	429e      	cmp	r6, r3
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x294>
 8000686:	e0b3      	b.n	80007f0 <__aeabi_dadd+0x3fc>
 8000688:	0032      	movs	r2, r6
 800068a:	2400      	movs	r4, #0
 800068c:	2300      	movs	r3, #0
 800068e:	e74d      	b.n	800052c <__aeabi_dadd+0x138>
 8000690:	074a      	lsls	r2, r1, #29
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	4313      	orrs	r3, r2
 8000696:	08c9      	lsrs	r1, r1, #3
 8000698:	001a      	movs	r2, r3
 800069a:	430a      	orrs	r2, r1
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x2ac>
 800069e:	e200      	b.n	8000aa2 <__aeabi_dadd+0x6ae>
 80006a0:	2480      	movs	r4, #128	; 0x80
 80006a2:	0324      	lsls	r4, r4, #12
 80006a4:	430c      	orrs	r4, r1
 80006a6:	0324      	lsls	r4, r4, #12
 80006a8:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <__aeabi_dadd+0x36c>)
 80006aa:	0b24      	lsrs	r4, r4, #12
 80006ac:	e73e      	b.n	800052c <__aeabi_dadd+0x138>
 80006ae:	0020      	movs	r0, r4
 80006b0:	f001 fb98 	bl	8001de4 <__clzsi2>
 80006b4:	0003      	movs	r3, r0
 80006b6:	3318      	adds	r3, #24
 80006b8:	2b1f      	cmp	r3, #31
 80006ba:	dc00      	bgt.n	80006be <__aeabi_dadd+0x2ca>
 80006bc:	e6f7      	b.n	80004ae <__aeabi_dadd+0xba>
 80006be:	0022      	movs	r2, r4
 80006c0:	3808      	subs	r0, #8
 80006c2:	4082      	lsls	r2, r0
 80006c4:	2400      	movs	r4, #0
 80006c6:	42b3      	cmp	r3, r6
 80006c8:	db00      	blt.n	80006cc <__aeabi_dadd+0x2d8>
 80006ca:	e6fc      	b.n	80004c6 <__aeabi_dadd+0xd2>
 80006cc:	1af6      	subs	r6, r6, r3
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <__aeabi_dadd+0x370>)
 80006d0:	401a      	ands	r2, r3
 80006d2:	4692      	mov	sl, r2
 80006d4:	e70a      	b.n	80004ec <__aeabi_dadd+0xf8>
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d02b      	beq.n	8000732 <__aeabi_dadd+0x33e>
 80006da:	1b97      	subs	r7, r2, r6
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x2ee>
 80006e0:	e0b8      	b.n	8000854 <__aeabi_dadd+0x460>
 80006e2:	4c1f      	ldr	r4, [pc, #124]	; (8000760 <__aeabi_dadd+0x36c>)
 80006e4:	42a2      	cmp	r2, r4
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x2f6>
 80006e8:	e11c      	b.n	8000924 <__aeabi_dadd+0x530>
 80006ea:	2480      	movs	r4, #128	; 0x80
 80006ec:	0424      	lsls	r4, r4, #16
 80006ee:	4321      	orrs	r1, r4
 80006f0:	2f38      	cmp	r7, #56	; 0x38
 80006f2:	dd00      	ble.n	80006f6 <__aeabi_dadd+0x302>
 80006f4:	e11e      	b.n	8000934 <__aeabi_dadd+0x540>
 80006f6:	2f1f      	cmp	r7, #31
 80006f8:	dd00      	ble.n	80006fc <__aeabi_dadd+0x308>
 80006fa:	e19e      	b.n	8000a3a <__aeabi_dadd+0x646>
 80006fc:	2620      	movs	r6, #32
 80006fe:	000c      	movs	r4, r1
 8000700:	1bf6      	subs	r6, r6, r7
 8000702:	0018      	movs	r0, r3
 8000704:	40b3      	lsls	r3, r6
 8000706:	40b4      	lsls	r4, r6
 8000708:	40f8      	lsrs	r0, r7
 800070a:	1e5e      	subs	r6, r3, #1
 800070c:	41b3      	sbcs	r3, r6
 800070e:	40f9      	lsrs	r1, r7
 8000710:	4304      	orrs	r4, r0
 8000712:	431c      	orrs	r4, r3
 8000714:	4489      	add	r9, r1
 8000716:	4444      	add	r4, r8
 8000718:	4544      	cmp	r4, r8
 800071a:	419b      	sbcs	r3, r3
 800071c:	425b      	negs	r3, r3
 800071e:	444b      	add	r3, r9
 8000720:	469a      	mov	sl, r3
 8000722:	0016      	movs	r6, r2
 8000724:	e7a8      	b.n	8000678 <__aeabi_dadd+0x284>
 8000726:	4642      	mov	r2, r8
 8000728:	464c      	mov	r4, r9
 800072a:	4314      	orrs	r4, r2
 800072c:	1e62      	subs	r2, r4, #1
 800072e:	4194      	sbcs	r4, r2
 8000730:	e6a6      	b.n	8000480 <__aeabi_dadd+0x8c>
 8000732:	4c0d      	ldr	r4, [pc, #52]	; (8000768 <__aeabi_dadd+0x374>)
 8000734:	1c72      	adds	r2, r6, #1
 8000736:	4222      	tst	r2, r4
 8000738:	d000      	beq.n	800073c <__aeabi_dadd+0x348>
 800073a:	e0a8      	b.n	800088e <__aeabi_dadd+0x49a>
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	2e00      	cmp	r6, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x352>
 8000744:	e10a      	b.n	800095c <__aeabi_dadd+0x568>
 8000746:	2a00      	cmp	r2, #0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x358>
 800074a:	e15e      	b.n	8000a0a <__aeabi_dadd+0x616>
 800074c:	464a      	mov	r2, r9
 800074e:	4302      	orrs	r2, r0
 8000750:	d000      	beq.n	8000754 <__aeabi_dadd+0x360>
 8000752:	e161      	b.n	8000a18 <__aeabi_dadd+0x624>
 8000754:	074a      	lsls	r2, r1, #29
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	4313      	orrs	r3, r2
 800075a:	08c9      	lsrs	r1, r1, #3
 800075c:	e77c      	b.n	8000658 <__aeabi_dadd+0x264>
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	000007ff 	.word	0x000007ff
 8000764:	ff7fffff 	.word	0xff7fffff
 8000768:	000007fe 	.word	0x000007fe
 800076c:	4ccf      	ldr	r4, [pc, #828]	; (8000aac <__aeabi_dadd+0x6b8>)
 800076e:	42a2      	cmp	r2, r4
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x380>
 8000772:	e0ce      	b.n	8000912 <__aeabi_dadd+0x51e>
 8000774:	2480      	movs	r4, #128	; 0x80
 8000776:	0424      	lsls	r4, r4, #16
 8000778:	4321      	orrs	r1, r4
 800077a:	2f38      	cmp	r7, #56	; 0x38
 800077c:	dc5b      	bgt.n	8000836 <__aeabi_dadd+0x442>
 800077e:	2f1f      	cmp	r7, #31
 8000780:	dd00      	ble.n	8000784 <__aeabi_dadd+0x390>
 8000782:	e0dc      	b.n	800093e <__aeabi_dadd+0x54a>
 8000784:	2520      	movs	r5, #32
 8000786:	000c      	movs	r4, r1
 8000788:	1bed      	subs	r5, r5, r7
 800078a:	001e      	movs	r6, r3
 800078c:	40ab      	lsls	r3, r5
 800078e:	40ac      	lsls	r4, r5
 8000790:	40fe      	lsrs	r6, r7
 8000792:	1e5d      	subs	r5, r3, #1
 8000794:	41ab      	sbcs	r3, r5
 8000796:	4334      	orrs	r4, r6
 8000798:	40f9      	lsrs	r1, r7
 800079a:	431c      	orrs	r4, r3
 800079c:	464b      	mov	r3, r9
 800079e:	1a5b      	subs	r3, r3, r1
 80007a0:	4699      	mov	r9, r3
 80007a2:	e04c      	b.n	800083e <__aeabi_dadd+0x44a>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1a1c      	subs	r4, r3, r0
 80007a8:	1a88      	subs	r0, r1, r2
 80007aa:	42a3      	cmp	r3, r4
 80007ac:	4192      	sbcs	r2, r2
 80007ae:	4252      	negs	r2, r2
 80007b0:	4692      	mov	sl, r2
 80007b2:	0002      	movs	r2, r0
 80007b4:	4650      	mov	r0, sl
 80007b6:	1a12      	subs	r2, r2, r0
 80007b8:	4692      	mov	sl, r2
 80007ba:	0212      	lsls	r2, r2, #8
 80007bc:	d478      	bmi.n	80008b0 <__aeabi_dadd+0x4bc>
 80007be:	4653      	mov	r3, sl
 80007c0:	4323      	orrs	r3, r4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x3d2>
 80007c4:	e66a      	b.n	800049c <__aeabi_dadd+0xa8>
 80007c6:	2100      	movs	r1, #0
 80007c8:	2500      	movs	r5, #0
 80007ca:	e745      	b.n	8000658 <__aeabi_dadd+0x264>
 80007cc:	074a      	lsls	r2, r1, #29
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	08c9      	lsrs	r1, r1, #3
 80007d4:	e73d      	b.n	8000652 <__aeabi_dadd+0x25e>
 80007d6:	181c      	adds	r4, r3, r0
 80007d8:	429c      	cmp	r4, r3
 80007da:	419b      	sbcs	r3, r3
 80007dc:	4449      	add	r1, r9
 80007de:	468a      	mov	sl, r1
 80007e0:	425b      	negs	r3, r3
 80007e2:	449a      	add	sl, r3
 80007e4:	4653      	mov	r3, sl
 80007e6:	2601      	movs	r6, #1
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x3fa>
 80007ec:	e727      	b.n	800063e <__aeabi_dadd+0x24a>
 80007ee:	2602      	movs	r6, #2
 80007f0:	4652      	mov	r2, sl
 80007f2:	4baf      	ldr	r3, [pc, #700]	; (8000ab0 <__aeabi_dadd+0x6bc>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	401a      	ands	r2, r3
 80007f8:	0013      	movs	r3, r2
 80007fa:	4021      	ands	r1, r4
 80007fc:	0862      	lsrs	r2, r4, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	07dc      	lsls	r4, r3, #31
 8000802:	085b      	lsrs	r3, r3, #1
 8000804:	469a      	mov	sl, r3
 8000806:	4314      	orrs	r4, r2
 8000808:	e670      	b.n	80004ec <__aeabi_dadd+0xf8>
 800080a:	003a      	movs	r2, r7
 800080c:	464c      	mov	r4, r9
 800080e:	3a20      	subs	r2, #32
 8000810:	40d4      	lsrs	r4, r2
 8000812:	46a4      	mov	ip, r4
 8000814:	2f20      	cmp	r7, #32
 8000816:	d007      	beq.n	8000828 <__aeabi_dadd+0x434>
 8000818:	2240      	movs	r2, #64	; 0x40
 800081a:	4648      	mov	r0, r9
 800081c:	1bd2      	subs	r2, r2, r7
 800081e:	4090      	lsls	r0, r2
 8000820:	0002      	movs	r2, r0
 8000822:	4640      	mov	r0, r8
 8000824:	4310      	orrs	r0, r2
 8000826:	4680      	mov	r8, r0
 8000828:	4640      	mov	r0, r8
 800082a:	1e42      	subs	r2, r0, #1
 800082c:	4190      	sbcs	r0, r2
 800082e:	4662      	mov	r2, ip
 8000830:	0004      	movs	r4, r0
 8000832:	4314      	orrs	r4, r2
 8000834:	e624      	b.n	8000480 <__aeabi_dadd+0x8c>
 8000836:	4319      	orrs	r1, r3
 8000838:	000c      	movs	r4, r1
 800083a:	1e63      	subs	r3, r4, #1
 800083c:	419c      	sbcs	r4, r3
 800083e:	4643      	mov	r3, r8
 8000840:	1b1c      	subs	r4, r3, r4
 8000842:	45a0      	cmp	r8, r4
 8000844:	419b      	sbcs	r3, r3
 8000846:	4649      	mov	r1, r9
 8000848:	425b      	negs	r3, r3
 800084a:	1acb      	subs	r3, r1, r3
 800084c:	469a      	mov	sl, r3
 800084e:	4665      	mov	r5, ip
 8000850:	0016      	movs	r6, r2
 8000852:	e61b      	b.n	800048c <__aeabi_dadd+0x98>
 8000854:	000c      	movs	r4, r1
 8000856:	431c      	orrs	r4, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x468>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x5f8>
 800085c:	1e7c      	subs	r4, r7, #1
 800085e:	2f01      	cmp	r7, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x470>
 8000862:	e0f9      	b.n	8000a58 <__aeabi_dadd+0x664>
 8000864:	4e91      	ldr	r6, [pc, #580]	; (8000aac <__aeabi_dadd+0x6b8>)
 8000866:	42b7      	cmp	r7, r6
 8000868:	d05c      	beq.n	8000924 <__aeabi_dadd+0x530>
 800086a:	0027      	movs	r7, r4
 800086c:	e740      	b.n	80006f0 <__aeabi_dadd+0x2fc>
 800086e:	2220      	movs	r2, #32
 8000870:	464c      	mov	r4, r9
 8000872:	4640      	mov	r0, r8
 8000874:	1bd2      	subs	r2, r2, r7
 8000876:	4094      	lsls	r4, r2
 8000878:	40f8      	lsrs	r0, r7
 800087a:	4304      	orrs	r4, r0
 800087c:	4640      	mov	r0, r8
 800087e:	4090      	lsls	r0, r2
 8000880:	1e42      	subs	r2, r0, #1
 8000882:	4190      	sbcs	r0, r2
 8000884:	464a      	mov	r2, r9
 8000886:	40fa      	lsrs	r2, r7
 8000888:	4304      	orrs	r4, r0
 800088a:	1889      	adds	r1, r1, r2
 800088c:	e6ee      	b.n	800066c <__aeabi_dadd+0x278>
 800088e:	4c87      	ldr	r4, [pc, #540]	; (8000aac <__aeabi_dadd+0x6b8>)
 8000890:	42a2      	cmp	r2, r4
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x4a2>
 8000894:	e6f9      	b.n	800068a <__aeabi_dadd+0x296>
 8000896:	1818      	adds	r0, r3, r0
 8000898:	4298      	cmp	r0, r3
 800089a:	419b      	sbcs	r3, r3
 800089c:	4449      	add	r1, r9
 800089e:	425b      	negs	r3, r3
 80008a0:	18cb      	adds	r3, r1, r3
 80008a2:	07dc      	lsls	r4, r3, #31
 80008a4:	0840      	lsrs	r0, r0, #1
 80008a6:	085b      	lsrs	r3, r3, #1
 80008a8:	469a      	mov	sl, r3
 80008aa:	0016      	movs	r6, r2
 80008ac:	4304      	orrs	r4, r0
 80008ae:	e6c6      	b.n	800063e <__aeabi_dadd+0x24a>
 80008b0:	4642      	mov	r2, r8
 80008b2:	1ad4      	subs	r4, r2, r3
 80008b4:	45a0      	cmp	r8, r4
 80008b6:	4180      	sbcs	r0, r0
 80008b8:	464b      	mov	r3, r9
 80008ba:	4240      	negs	r0, r0
 80008bc:	1a59      	subs	r1, r3, r1
 80008be:	1a0b      	subs	r3, r1, r0
 80008c0:	469a      	mov	sl, r3
 80008c2:	4665      	mov	r5, ip
 80008c4:	e5ea      	b.n	800049c <__aeabi_dadd+0xa8>
 80008c6:	464b      	mov	r3, r9
 80008c8:	464a      	mov	r2, r9
 80008ca:	08c0      	lsrs	r0, r0, #3
 80008cc:	075b      	lsls	r3, r3, #29
 80008ce:	4665      	mov	r5, ip
 80008d0:	4303      	orrs	r3, r0
 80008d2:	08d1      	lsrs	r1, r2, #3
 80008d4:	e6bd      	b.n	8000652 <__aeabi_dadd+0x25e>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_dadd+0x4e8>
 80008da:	e08e      	b.n	80009fa <__aeabi_dadd+0x606>
 80008dc:	464b      	mov	r3, r9
 80008de:	4303      	orrs	r3, r0
 80008e0:	d117      	bne.n	8000912 <__aeabi_dadd+0x51e>
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	2500      	movs	r5, #0
 80008e6:	0309      	lsls	r1, r1, #12
 80008e8:	e6da      	b.n	80006a0 <__aeabi_dadd+0x2ac>
 80008ea:	074a      	lsls	r2, r1, #29
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	08c9      	lsrs	r1, r1, #3
 80008f2:	e6d1      	b.n	8000698 <__aeabi_dadd+0x2a4>
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	464a      	mov	r2, r9
 80008f8:	42a3      	cmp	r3, r4
 80008fa:	419b      	sbcs	r3, r3
 80008fc:	1a89      	subs	r1, r1, r2
 80008fe:	425b      	negs	r3, r3
 8000900:	1acb      	subs	r3, r1, r3
 8000902:	469a      	mov	sl, r3
 8000904:	2601      	movs	r6, #1
 8000906:	e5c1      	b.n	800048c <__aeabi_dadd+0x98>
 8000908:	074a      	lsls	r2, r1, #29
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	4313      	orrs	r3, r2
 800090e:	08c9      	lsrs	r1, r1, #3
 8000910:	e69f      	b.n	8000652 <__aeabi_dadd+0x25e>
 8000912:	4643      	mov	r3, r8
 8000914:	08d8      	lsrs	r0, r3, #3
 8000916:	464b      	mov	r3, r9
 8000918:	464a      	mov	r2, r9
 800091a:	075b      	lsls	r3, r3, #29
 800091c:	4665      	mov	r5, ip
 800091e:	4303      	orrs	r3, r0
 8000920:	08d1      	lsrs	r1, r2, #3
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x2a4>
 8000924:	4643      	mov	r3, r8
 8000926:	08d8      	lsrs	r0, r3, #3
 8000928:	464b      	mov	r3, r9
 800092a:	464a      	mov	r2, r9
 800092c:	075b      	lsls	r3, r3, #29
 800092e:	4303      	orrs	r3, r0
 8000930:	08d1      	lsrs	r1, r2, #3
 8000932:	e6b1      	b.n	8000698 <__aeabi_dadd+0x2a4>
 8000934:	4319      	orrs	r1, r3
 8000936:	000c      	movs	r4, r1
 8000938:	1e63      	subs	r3, r4, #1
 800093a:	419c      	sbcs	r4, r3
 800093c:	e6eb      	b.n	8000716 <__aeabi_dadd+0x322>
 800093e:	003c      	movs	r4, r7
 8000940:	000d      	movs	r5, r1
 8000942:	3c20      	subs	r4, #32
 8000944:	40e5      	lsrs	r5, r4
 8000946:	2f20      	cmp	r7, #32
 8000948:	d003      	beq.n	8000952 <__aeabi_dadd+0x55e>
 800094a:	2440      	movs	r4, #64	; 0x40
 800094c:	1be4      	subs	r4, r4, r7
 800094e:	40a1      	lsls	r1, r4
 8000950:	430b      	orrs	r3, r1
 8000952:	001c      	movs	r4, r3
 8000954:	1e63      	subs	r3, r4, #1
 8000956:	419c      	sbcs	r4, r3
 8000958:	432c      	orrs	r4, r5
 800095a:	e770      	b.n	800083e <__aeabi_dadd+0x44a>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d0e1      	beq.n	8000924 <__aeabi_dadd+0x530>
 8000960:	464a      	mov	r2, r9
 8000962:	4302      	orrs	r2, r0
 8000964:	d0c1      	beq.n	80008ea <__aeabi_dadd+0x4f6>
 8000966:	074a      	lsls	r2, r1, #29
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	4313      	orrs	r3, r2
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	08c9      	lsrs	r1, r1, #3
 8000970:	0312      	lsls	r2, r2, #12
 8000972:	4211      	tst	r1, r2
 8000974:	d008      	beq.n	8000988 <__aeabi_dadd+0x594>
 8000976:	4648      	mov	r0, r9
 8000978:	08c4      	lsrs	r4, r0, #3
 800097a:	4214      	tst	r4, r2
 800097c:	d104      	bne.n	8000988 <__aeabi_dadd+0x594>
 800097e:	4643      	mov	r3, r8
 8000980:	0021      	movs	r1, r4
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	0742      	lsls	r2, r0, #29
 8000986:	4313      	orrs	r3, r2
 8000988:	0f5a      	lsrs	r2, r3, #29
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	0752      	lsls	r2, r2, #29
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	4313      	orrs	r3, r2
 8000992:	e681      	b.n	8000698 <__aeabi_dadd+0x2a4>
 8000994:	464b      	mov	r3, r9
 8000996:	4303      	orrs	r3, r0
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x5a8>
 800099a:	e714      	b.n	80007c6 <__aeabi_dadd+0x3d2>
 800099c:	464b      	mov	r3, r9
 800099e:	464a      	mov	r2, r9
 80009a0:	08c0      	lsrs	r0, r0, #3
 80009a2:	075b      	lsls	r3, r3, #29
 80009a4:	4665      	mov	r5, ip
 80009a6:	4303      	orrs	r3, r0
 80009a8:	08d1      	lsrs	r1, r2, #3
 80009aa:	e655      	b.n	8000658 <__aeabi_dadd+0x264>
 80009ac:	1ac4      	subs	r4, r0, r3
 80009ae:	45a0      	cmp	r8, r4
 80009b0:	4180      	sbcs	r0, r0
 80009b2:	464b      	mov	r3, r9
 80009b4:	4240      	negs	r0, r0
 80009b6:	1a59      	subs	r1, r3, r1
 80009b8:	1a0b      	subs	r3, r1, r0
 80009ba:	469a      	mov	sl, r3
 80009bc:	4665      	mov	r5, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	e564      	b.n	800048c <__aeabi_dadd+0x98>
 80009c2:	1a1c      	subs	r4, r3, r0
 80009c4:	464a      	mov	r2, r9
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	4180      	sbcs	r0, r0
 80009ca:	1a8a      	subs	r2, r1, r2
 80009cc:	4240      	negs	r0, r0
 80009ce:	1a12      	subs	r2, r2, r0
 80009d0:	4692      	mov	sl, r2
 80009d2:	0212      	lsls	r2, r2, #8
 80009d4:	d549      	bpl.n	8000a6a <__aeabi_dadd+0x676>
 80009d6:	4642      	mov	r2, r8
 80009d8:	1ad4      	subs	r4, r2, r3
 80009da:	45a0      	cmp	r8, r4
 80009dc:	4180      	sbcs	r0, r0
 80009de:	464b      	mov	r3, r9
 80009e0:	4240      	negs	r0, r0
 80009e2:	1a59      	subs	r1, r3, r1
 80009e4:	1a0b      	subs	r3, r1, r0
 80009e6:	469a      	mov	sl, r3
 80009e8:	4665      	mov	r5, ip
 80009ea:	e57f      	b.n	80004ec <__aeabi_dadd+0xf8>
 80009ec:	464b      	mov	r3, r9
 80009ee:	464a      	mov	r2, r9
 80009f0:	08c0      	lsrs	r0, r0, #3
 80009f2:	075b      	lsls	r3, r3, #29
 80009f4:	4303      	orrs	r3, r0
 80009f6:	08d1      	lsrs	r1, r2, #3
 80009f8:	e62b      	b.n	8000652 <__aeabi_dadd+0x25e>
 80009fa:	464a      	mov	r2, r9
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	4302      	orrs	r2, r0
 8000a00:	d138      	bne.n	8000a74 <__aeabi_dadd+0x680>
 8000a02:	074a      	lsls	r2, r1, #29
 8000a04:	4313      	orrs	r3, r2
 8000a06:	08c9      	lsrs	r1, r1, #3
 8000a08:	e646      	b.n	8000698 <__aeabi_dadd+0x2a4>
 8000a0a:	464b      	mov	r3, r9
 8000a0c:	464a      	mov	r2, r9
 8000a0e:	08c0      	lsrs	r0, r0, #3
 8000a10:	075b      	lsls	r3, r3, #29
 8000a12:	4303      	orrs	r3, r0
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	e61f      	b.n	8000658 <__aeabi_dadd+0x264>
 8000a18:	181c      	adds	r4, r3, r0
 8000a1a:	429c      	cmp	r4, r3
 8000a1c:	419b      	sbcs	r3, r3
 8000a1e:	4449      	add	r1, r9
 8000a20:	468a      	mov	sl, r1
 8000a22:	425b      	negs	r3, r3
 8000a24:	449a      	add	sl, r3
 8000a26:	4653      	mov	r3, sl
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	d400      	bmi.n	8000a2e <__aeabi_dadd+0x63a>
 8000a2c:	e607      	b.n	800063e <__aeabi_dadd+0x24a>
 8000a2e:	4652      	mov	r2, sl
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <__aeabi_dadd+0x6bc>)
 8000a32:	2601      	movs	r6, #1
 8000a34:	401a      	ands	r2, r3
 8000a36:	4692      	mov	sl, r2
 8000a38:	e601      	b.n	800063e <__aeabi_dadd+0x24a>
 8000a3a:	003c      	movs	r4, r7
 8000a3c:	000e      	movs	r6, r1
 8000a3e:	3c20      	subs	r4, #32
 8000a40:	40e6      	lsrs	r6, r4
 8000a42:	2f20      	cmp	r7, #32
 8000a44:	d003      	beq.n	8000a4e <__aeabi_dadd+0x65a>
 8000a46:	2440      	movs	r4, #64	; 0x40
 8000a48:	1be4      	subs	r4, r4, r7
 8000a4a:	40a1      	lsls	r1, r4
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	001c      	movs	r4, r3
 8000a50:	1e63      	subs	r3, r4, #1
 8000a52:	419c      	sbcs	r4, r3
 8000a54:	4334      	orrs	r4, r6
 8000a56:	e65e      	b.n	8000716 <__aeabi_dadd+0x322>
 8000a58:	4443      	add	r3, r8
 8000a5a:	4283      	cmp	r3, r0
 8000a5c:	4180      	sbcs	r0, r0
 8000a5e:	4449      	add	r1, r9
 8000a60:	468a      	mov	sl, r1
 8000a62:	4240      	negs	r0, r0
 8000a64:	001c      	movs	r4, r3
 8000a66:	4482      	add	sl, r0
 8000a68:	e6bc      	b.n	80007e4 <__aeabi_dadd+0x3f0>
 8000a6a:	4653      	mov	r3, sl
 8000a6c:	4323      	orrs	r3, r4
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x67e>
 8000a70:	e6a9      	b.n	80007c6 <__aeabi_dadd+0x3d2>
 8000a72:	e5e4      	b.n	800063e <__aeabi_dadd+0x24a>
 8000a74:	074a      	lsls	r2, r1, #29
 8000a76:	4313      	orrs	r3, r2
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	08c9      	lsrs	r1, r1, #3
 8000a7c:	0312      	lsls	r2, r2, #12
 8000a7e:	4211      	tst	r1, r2
 8000a80:	d009      	beq.n	8000a96 <__aeabi_dadd+0x6a2>
 8000a82:	4648      	mov	r0, r9
 8000a84:	08c4      	lsrs	r4, r0, #3
 8000a86:	4214      	tst	r4, r2
 8000a88:	d105      	bne.n	8000a96 <__aeabi_dadd+0x6a2>
 8000a8a:	4643      	mov	r3, r8
 8000a8c:	4665      	mov	r5, ip
 8000a8e:	0021      	movs	r1, r4
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	0742      	lsls	r2, r0, #29
 8000a94:	4313      	orrs	r3, r2
 8000a96:	0f5a      	lsrs	r2, r3, #29
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	0752      	lsls	r2, r2, #29
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	e5fa      	b.n	8000698 <__aeabi_dadd+0x2a4>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4a01      	ldr	r2, [pc, #4]	; (8000aac <__aeabi_dadd+0x6b8>)
 8000aa6:	001c      	movs	r4, r3
 8000aa8:	e540      	b.n	800052c <__aeabi_dadd+0x138>
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	000007ff 	.word	0x000007ff
 8000ab0:	ff7fffff 	.word	0xff7fffff

08000ab4 <__aeabi_ddiv>:
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	4657      	mov	r7, sl
 8000ab8:	464e      	mov	r6, r9
 8000aba:	4645      	mov	r5, r8
 8000abc:	46de      	mov	lr, fp
 8000abe:	b5e0      	push	{r5, r6, r7, lr}
 8000ac0:	030c      	lsls	r4, r1, #12
 8000ac2:	001f      	movs	r7, r3
 8000ac4:	004b      	lsls	r3, r1, #1
 8000ac6:	4681      	mov	r9, r0
 8000ac8:	4692      	mov	sl, r2
 8000aca:	0005      	movs	r5, r0
 8000acc:	b085      	sub	sp, #20
 8000ace:	0b24      	lsrs	r4, r4, #12
 8000ad0:	0d5b      	lsrs	r3, r3, #21
 8000ad2:	0fce      	lsrs	r6, r1, #31
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_ddiv+0x26>
 8000ad8:	e152      	b.n	8000d80 <__aeabi_ddiv+0x2cc>
 8000ada:	4ad2      	ldr	r2, [pc, #840]	; (8000e24 <__aeabi_ddiv+0x370>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_ddiv+0x2e>
 8000ae0:	e16e      	b.n	8000dc0 <__aeabi_ddiv+0x30c>
 8000ae2:	0f42      	lsrs	r2, r0, #29
 8000ae4:	00e4      	lsls	r4, r4, #3
 8000ae6:	4314      	orrs	r4, r2
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	0412      	lsls	r2, r2, #16
 8000aec:	4322      	orrs	r2, r4
 8000aee:	4690      	mov	r8, r2
 8000af0:	4acd      	ldr	r2, [pc, #820]	; (8000e28 <__aeabi_ddiv+0x374>)
 8000af2:	00c5      	lsls	r5, r0, #3
 8000af4:	4693      	mov	fp, r2
 8000af6:	449b      	add	fp, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	4699      	mov	r9, r3
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	033c      	lsls	r4, r7, #12
 8000b00:	007b      	lsls	r3, r7, #1
 8000b02:	4650      	mov	r0, sl
 8000b04:	0b24      	lsrs	r4, r4, #12
 8000b06:	0d5b      	lsrs	r3, r3, #21
 8000b08:	0fff      	lsrs	r7, r7, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_ddiv+0x5c>
 8000b0e:	e11a      	b.n	8000d46 <__aeabi_ddiv+0x292>
 8000b10:	4ac4      	ldr	r2, [pc, #784]	; (8000e24 <__aeabi_ddiv+0x370>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d100      	bne.n	8000b18 <__aeabi_ddiv+0x64>
 8000b16:	e15e      	b.n	8000dd6 <__aeabi_ddiv+0x322>
 8000b18:	0f42      	lsrs	r2, r0, #29
 8000b1a:	00e4      	lsls	r4, r4, #3
 8000b1c:	4322      	orrs	r2, r4
 8000b1e:	2480      	movs	r4, #128	; 0x80
 8000b20:	0424      	lsls	r4, r4, #16
 8000b22:	4314      	orrs	r4, r2
 8000b24:	4ac0      	ldr	r2, [pc, #768]	; (8000e28 <__aeabi_ddiv+0x374>)
 8000b26:	00c1      	lsls	r1, r0, #3
 8000b28:	4694      	mov	ip, r2
 8000b2a:	465a      	mov	r2, fp
 8000b2c:	4463      	add	r3, ip
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	469b      	mov	fp, r3
 8000b32:	2000      	movs	r0, #0
 8000b34:	0033      	movs	r3, r6
 8000b36:	407b      	eors	r3, r7
 8000b38:	469a      	mov	sl, r3
 8000b3a:	464b      	mov	r3, r9
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d827      	bhi.n	8000b90 <__aeabi_ddiv+0xdc>
 8000b40:	4aba      	ldr	r2, [pc, #744]	; (8000e2c <__aeabi_ddiv+0x378>)
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	58d3      	ldr	r3, [r2, r3]
 8000b46:	469f      	mov	pc, r3
 8000b48:	46b2      	mov	sl, r6
 8000b4a:	9b00      	ldr	r3, [sp, #0]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d016      	beq.n	8000b7e <__aeabi_ddiv+0xca>
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d100      	bne.n	8000b56 <__aeabi_ddiv+0xa2>
 8000b54:	e287      	b.n	8001066 <__aeabi_ddiv+0x5b2>
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d000      	beq.n	8000b5c <__aeabi_ddiv+0xa8>
 8000b5a:	e0d5      	b.n	8000d08 <__aeabi_ddiv+0x254>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2500      	movs	r5, #0
 8000b62:	051b      	lsls	r3, r3, #20
 8000b64:	4313      	orrs	r3, r2
 8000b66:	4652      	mov	r2, sl
 8000b68:	07d2      	lsls	r2, r2, #31
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	0028      	movs	r0, r5
 8000b6e:	0019      	movs	r1, r3
 8000b70:	b005      	add	sp, #20
 8000b72:	bcf0      	pop	{r4, r5, r6, r7}
 8000b74:	46bb      	mov	fp, r7
 8000b76:	46b2      	mov	sl, r6
 8000b78:	46a9      	mov	r9, r5
 8000b7a:	46a0      	mov	r8, r4
 8000b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2500      	movs	r5, #0
 8000b82:	4ba8      	ldr	r3, [pc, #672]	; (8000e24 <__aeabi_ddiv+0x370>)
 8000b84:	e7ed      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8000b86:	46ba      	mov	sl, r7
 8000b88:	46a0      	mov	r8, r4
 8000b8a:	000d      	movs	r5, r1
 8000b8c:	9000      	str	r0, [sp, #0]
 8000b8e:	e7dc      	b.n	8000b4a <__aeabi_ddiv+0x96>
 8000b90:	4544      	cmp	r4, r8
 8000b92:	d200      	bcs.n	8000b96 <__aeabi_ddiv+0xe2>
 8000b94:	e1c4      	b.n	8000f20 <__aeabi_ddiv+0x46c>
 8000b96:	d100      	bne.n	8000b9a <__aeabi_ddiv+0xe6>
 8000b98:	e1bf      	b.n	8000f1a <__aeabi_ddiv+0x466>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	469c      	mov	ip, r3
 8000ba0:	002e      	movs	r6, r5
 8000ba2:	4640      	mov	r0, r8
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	44e3      	add	fp, ip
 8000ba8:	0223      	lsls	r3, r4, #8
 8000baa:	0e0c      	lsrs	r4, r1, #24
 8000bac:	431c      	orrs	r4, r3
 8000bae:	0c1b      	lsrs	r3, r3, #16
 8000bb0:	4699      	mov	r9, r3
 8000bb2:	0423      	lsls	r3, r4, #16
 8000bb4:	020a      	lsls	r2, r1, #8
 8000bb6:	0c1f      	lsrs	r7, r3, #16
 8000bb8:	4649      	mov	r1, r9
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	9701      	str	r7, [sp, #4]
 8000bbe:	f7ff fb29 	bl	8000214 <__aeabi_uidivmod>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	437a      	muls	r2, r7
 8000bc6:	040b      	lsls	r3, r1, #16
 8000bc8:	0c31      	lsrs	r1, r6, #16
 8000bca:	4680      	mov	r8, r0
 8000bcc:	4319      	orrs	r1, r3
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	d907      	bls.n	8000be2 <__aeabi_ddiv+0x12e>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	1909      	adds	r1, r1, r4
 8000bda:	44e0      	add	r8, ip
 8000bdc:	428c      	cmp	r4, r1
 8000bde:	d800      	bhi.n	8000be2 <__aeabi_ddiv+0x12e>
 8000be0:	e201      	b.n	8000fe6 <__aeabi_ddiv+0x532>
 8000be2:	1a88      	subs	r0, r1, r2
 8000be4:	4649      	mov	r1, r9
 8000be6:	f7ff fb15 	bl	8000214 <__aeabi_uidivmod>
 8000bea:	9a01      	ldr	r2, [sp, #4]
 8000bec:	0436      	lsls	r6, r6, #16
 8000bee:	4342      	muls	r2, r0
 8000bf0:	0409      	lsls	r1, r1, #16
 8000bf2:	0c36      	lsrs	r6, r6, #16
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	430e      	orrs	r6, r1
 8000bf8:	42b2      	cmp	r2, r6
 8000bfa:	d904      	bls.n	8000c06 <__aeabi_ddiv+0x152>
 8000bfc:	1936      	adds	r6, r6, r4
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	42b4      	cmp	r4, r6
 8000c02:	d800      	bhi.n	8000c06 <__aeabi_ddiv+0x152>
 8000c04:	e1e9      	b.n	8000fda <__aeabi_ddiv+0x526>
 8000c06:	1ab0      	subs	r0, r6, r2
 8000c08:	4642      	mov	r2, r8
 8000c0a:	9e00      	ldr	r6, [sp, #0]
 8000c0c:	0412      	lsls	r2, r2, #16
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	0c33      	lsrs	r3, r6, #16
 8000c12:	001f      	movs	r7, r3
 8000c14:	0c11      	lsrs	r1, r2, #16
 8000c16:	4690      	mov	r8, r2
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	0413      	lsls	r3, r2, #16
 8000c1c:	0432      	lsls	r2, r6, #16
 8000c1e:	0c16      	lsrs	r6, r2, #16
 8000c20:	0032      	movs	r2, r6
 8000c22:	0c1b      	lsrs	r3, r3, #16
 8000c24:	435a      	muls	r2, r3
 8000c26:	9603      	str	r6, [sp, #12]
 8000c28:	437b      	muls	r3, r7
 8000c2a:	434e      	muls	r6, r1
 8000c2c:	4379      	muls	r1, r7
 8000c2e:	0c17      	lsrs	r7, r2, #16
 8000c30:	46bc      	mov	ip, r7
 8000c32:	199b      	adds	r3, r3, r6
 8000c34:	4463      	add	r3, ip
 8000c36:	429e      	cmp	r6, r3
 8000c38:	d903      	bls.n	8000c42 <__aeabi_ddiv+0x18e>
 8000c3a:	2680      	movs	r6, #128	; 0x80
 8000c3c:	0276      	lsls	r6, r6, #9
 8000c3e:	46b4      	mov	ip, r6
 8000c40:	4461      	add	r1, ip
 8000c42:	0c1e      	lsrs	r6, r3, #16
 8000c44:	1871      	adds	r1, r6, r1
 8000c46:	0416      	lsls	r6, r2, #16
 8000c48:	041b      	lsls	r3, r3, #16
 8000c4a:	0c36      	lsrs	r6, r6, #16
 8000c4c:	199e      	adds	r6, r3, r6
 8000c4e:	4288      	cmp	r0, r1
 8000c50:	d302      	bcc.n	8000c58 <__aeabi_ddiv+0x1a4>
 8000c52:	d112      	bne.n	8000c7a <__aeabi_ddiv+0x1c6>
 8000c54:	42b5      	cmp	r5, r6
 8000c56:	d210      	bcs.n	8000c7a <__aeabi_ddiv+0x1c6>
 8000c58:	4643      	mov	r3, r8
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	9b00      	ldr	r3, [sp, #0]
 8000c5e:	469c      	mov	ip, r3
 8000c60:	4465      	add	r5, ip
 8000c62:	001f      	movs	r7, r3
 8000c64:	429d      	cmp	r5, r3
 8000c66:	419b      	sbcs	r3, r3
 8000c68:	425b      	negs	r3, r3
 8000c6a:	191b      	adds	r3, r3, r4
 8000c6c:	18c0      	adds	r0, r0, r3
 8000c6e:	4284      	cmp	r4, r0
 8000c70:	d200      	bcs.n	8000c74 <__aeabi_ddiv+0x1c0>
 8000c72:	e19e      	b.n	8000fb2 <__aeabi_ddiv+0x4fe>
 8000c74:	d100      	bne.n	8000c78 <__aeabi_ddiv+0x1c4>
 8000c76:	e199      	b.n	8000fac <__aeabi_ddiv+0x4f8>
 8000c78:	4690      	mov	r8, r2
 8000c7a:	1bae      	subs	r6, r5, r6
 8000c7c:	42b5      	cmp	r5, r6
 8000c7e:	41ad      	sbcs	r5, r5
 8000c80:	1a40      	subs	r0, r0, r1
 8000c82:	426d      	negs	r5, r5
 8000c84:	1b40      	subs	r0, r0, r5
 8000c86:	4284      	cmp	r4, r0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_ddiv+0x1d8>
 8000c8a:	e1d2      	b.n	8001032 <__aeabi_ddiv+0x57e>
 8000c8c:	4649      	mov	r1, r9
 8000c8e:	f7ff fac1 	bl	8000214 <__aeabi_uidivmod>
 8000c92:	9a01      	ldr	r2, [sp, #4]
 8000c94:	040b      	lsls	r3, r1, #16
 8000c96:	4342      	muls	r2, r0
 8000c98:	0c31      	lsrs	r1, r6, #16
 8000c9a:	0005      	movs	r5, r0
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	428a      	cmp	r2, r1
 8000ca0:	d900      	bls.n	8000ca4 <__aeabi_ddiv+0x1f0>
 8000ca2:	e16c      	b.n	8000f7e <__aeabi_ddiv+0x4ca>
 8000ca4:	1a88      	subs	r0, r1, r2
 8000ca6:	4649      	mov	r1, r9
 8000ca8:	f7ff fab4 	bl	8000214 <__aeabi_uidivmod>
 8000cac:	9a01      	ldr	r2, [sp, #4]
 8000cae:	0436      	lsls	r6, r6, #16
 8000cb0:	4342      	muls	r2, r0
 8000cb2:	0409      	lsls	r1, r1, #16
 8000cb4:	0c36      	lsrs	r6, r6, #16
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	430e      	orrs	r6, r1
 8000cba:	42b2      	cmp	r2, r6
 8000cbc:	d900      	bls.n	8000cc0 <__aeabi_ddiv+0x20c>
 8000cbe:	e153      	b.n	8000f68 <__aeabi_ddiv+0x4b4>
 8000cc0:	9803      	ldr	r0, [sp, #12]
 8000cc2:	1ab6      	subs	r6, r6, r2
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	042d      	lsls	r5, r5, #16
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	9f02      	ldr	r7, [sp, #8]
 8000ccc:	042b      	lsls	r3, r5, #16
 8000cce:	0c1b      	lsrs	r3, r3, #16
 8000cd0:	435a      	muls	r2, r3
 8000cd2:	437b      	muls	r3, r7
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	0c29      	lsrs	r1, r5, #16
 8000cd8:	4348      	muls	r0, r1
 8000cda:	0c13      	lsrs	r3, r2, #16
 8000cdc:	4484      	add	ip, r0
 8000cde:	4463      	add	r3, ip
 8000ce0:	4379      	muls	r1, r7
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d903      	bls.n	8000cee <__aeabi_ddiv+0x23a>
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	0240      	lsls	r0, r0, #9
 8000cea:	4684      	mov	ip, r0
 8000cec:	4461      	add	r1, ip
 8000cee:	0c18      	lsrs	r0, r3, #16
 8000cf0:	0412      	lsls	r2, r2, #16
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	0c12      	lsrs	r2, r2, #16
 8000cf6:	1840      	adds	r0, r0, r1
 8000cf8:	189b      	adds	r3, r3, r2
 8000cfa:	4286      	cmp	r6, r0
 8000cfc:	d200      	bcs.n	8000d00 <__aeabi_ddiv+0x24c>
 8000cfe:	e100      	b.n	8000f02 <__aeabi_ddiv+0x44e>
 8000d00:	d100      	bne.n	8000d04 <__aeabi_ddiv+0x250>
 8000d02:	e0fb      	b.n	8000efc <__aeabi_ddiv+0x448>
 8000d04:	2301      	movs	r3, #1
 8000d06:	431d      	orrs	r5, r3
 8000d08:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <__aeabi_ddiv+0x37c>)
 8000d0a:	445b      	add	r3, fp
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_ddiv+0x25e>
 8000d10:	e0aa      	b.n	8000e68 <__aeabi_ddiv+0x3b4>
 8000d12:	076a      	lsls	r2, r5, #29
 8000d14:	d000      	beq.n	8000d18 <__aeabi_ddiv+0x264>
 8000d16:	e13d      	b.n	8000f94 <__aeabi_ddiv+0x4e0>
 8000d18:	08e9      	lsrs	r1, r5, #3
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	01d2      	lsls	r2, r2, #7
 8000d1e:	d506      	bpl.n	8000d2e <__aeabi_ddiv+0x27a>
 8000d20:	4642      	mov	r2, r8
 8000d22:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <__aeabi_ddiv+0x380>)
 8000d24:	401a      	ands	r2, r3
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	4690      	mov	r8, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	445b      	add	r3, fp
 8000d2e:	4a42      	ldr	r2, [pc, #264]	; (8000e38 <__aeabi_ddiv+0x384>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	dd00      	ble.n	8000d36 <__aeabi_ddiv+0x282>
 8000d34:	e723      	b.n	8000b7e <__aeabi_ddiv+0xca>
 8000d36:	4642      	mov	r2, r8
 8000d38:	055b      	lsls	r3, r3, #21
 8000d3a:	0755      	lsls	r5, r2, #29
 8000d3c:	0252      	lsls	r2, r2, #9
 8000d3e:	430d      	orrs	r5, r1
 8000d40:	0b12      	lsrs	r2, r2, #12
 8000d42:	0d5b      	lsrs	r3, r3, #21
 8000d44:	e70d      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8000d46:	4651      	mov	r1, sl
 8000d48:	4321      	orrs	r1, r4
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_ddiv+0x29a>
 8000d4c:	e07c      	b.n	8000e48 <__aeabi_ddiv+0x394>
 8000d4e:	2c00      	cmp	r4, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x2a0>
 8000d52:	e0fb      	b.n	8000f4c <__aeabi_ddiv+0x498>
 8000d54:	0020      	movs	r0, r4
 8000d56:	f001 f845 	bl	8001de4 <__clzsi2>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	3a0b      	subs	r2, #11
 8000d5e:	231d      	movs	r3, #29
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	4652      	mov	r2, sl
 8000d64:	0001      	movs	r1, r0
 8000d66:	40da      	lsrs	r2, r3
 8000d68:	4653      	mov	r3, sl
 8000d6a:	3908      	subs	r1, #8
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	408c      	lsls	r4, r1
 8000d70:	0019      	movs	r1, r3
 8000d72:	4314      	orrs	r4, r2
 8000d74:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <__aeabi_ddiv+0x388>)
 8000d76:	4458      	add	r0, fp
 8000d78:	469b      	mov	fp, r3
 8000d7a:	4483      	add	fp, r0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e6d9      	b.n	8000b34 <__aeabi_ddiv+0x80>
 8000d80:	0003      	movs	r3, r0
 8000d82:	4323      	orrs	r3, r4
 8000d84:	4698      	mov	r8, r3
 8000d86:	d044      	beq.n	8000e12 <__aeabi_ddiv+0x35e>
 8000d88:	2c00      	cmp	r4, #0
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_ddiv+0x2da>
 8000d8c:	e0cf      	b.n	8000f2e <__aeabi_ddiv+0x47a>
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f001 f828 	bl	8001de4 <__clzsi2>
 8000d94:	0001      	movs	r1, r0
 8000d96:	0002      	movs	r2, r0
 8000d98:	390b      	subs	r1, #11
 8000d9a:	231d      	movs	r3, #29
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	4649      	mov	r1, r9
 8000da0:	0010      	movs	r0, r2
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	3808      	subs	r0, #8
 8000da6:	4084      	lsls	r4, r0
 8000da8:	000b      	movs	r3, r1
 8000daa:	464d      	mov	r5, r9
 8000dac:	4323      	orrs	r3, r4
 8000dae:	4698      	mov	r8, r3
 8000db0:	4085      	lsls	r5, r0
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <__aeabi_ddiv+0x38c>)
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	469b      	mov	fp, r3
 8000db8:	2300      	movs	r3, #0
 8000dba:	4699      	mov	r9, r3
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	e69e      	b.n	8000afe <__aeabi_ddiv+0x4a>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	4322      	orrs	r2, r4
 8000dc4:	4690      	mov	r8, r2
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_ddiv+0x350>
 8000dc8:	2208      	movs	r2, #8
 8000dca:	469b      	mov	fp, r3
 8000dcc:	2302      	movs	r3, #2
 8000dce:	2500      	movs	r5, #0
 8000dd0:	4691      	mov	r9, r2
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	e693      	b.n	8000afe <__aeabi_ddiv+0x4a>
 8000dd6:	4651      	mov	r1, sl
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	d109      	bne.n	8000df0 <__aeabi_ddiv+0x33c>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	464a      	mov	r2, r9
 8000de0:	431a      	orrs	r2, r3
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <__aeabi_ddiv+0x390>)
 8000de4:	4691      	mov	r9, r2
 8000de6:	469c      	mov	ip, r3
 8000de8:	2400      	movs	r4, #0
 8000dea:	2002      	movs	r0, #2
 8000dec:	44e3      	add	fp, ip
 8000dee:	e6a1      	b.n	8000b34 <__aeabi_ddiv+0x80>
 8000df0:	2303      	movs	r3, #3
 8000df2:	464a      	mov	r2, r9
 8000df4:	431a      	orrs	r2, r3
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <__aeabi_ddiv+0x390>)
 8000df8:	4691      	mov	r9, r2
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	4651      	mov	r1, sl
 8000dfe:	2003      	movs	r0, #3
 8000e00:	44e3      	add	fp, ip
 8000e02:	e697      	b.n	8000b34 <__aeabi_ddiv+0x80>
 8000e04:	220c      	movs	r2, #12
 8000e06:	469b      	mov	fp, r3
 8000e08:	2303      	movs	r3, #3
 8000e0a:	46a0      	mov	r8, r4
 8000e0c:	4691      	mov	r9, r2
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	e675      	b.n	8000afe <__aeabi_ddiv+0x4a>
 8000e12:	2304      	movs	r3, #4
 8000e14:	4699      	mov	r9, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	469b      	mov	fp, r3
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	2500      	movs	r5, #0
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	e66d      	b.n	8000afe <__aeabi_ddiv+0x4a>
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	000007ff 	.word	0x000007ff
 8000e28:	fffffc01 	.word	0xfffffc01
 8000e2c:	0800d4b4 	.word	0x0800d4b4
 8000e30:	000003ff 	.word	0x000003ff
 8000e34:	feffffff 	.word	0xfeffffff
 8000e38:	000007fe 	.word	0x000007fe
 8000e3c:	000003f3 	.word	0x000003f3
 8000e40:	fffffc0d 	.word	0xfffffc0d
 8000e44:	fffff801 	.word	0xfffff801
 8000e48:	464a      	mov	r2, r9
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4691      	mov	r9, r2
 8000e50:	2400      	movs	r4, #0
 8000e52:	2001      	movs	r0, #1
 8000e54:	e66e      	b.n	8000b34 <__aeabi_ddiv+0x80>
 8000e56:	2300      	movs	r3, #0
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	469a      	mov	sl, r3
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	4b88      	ldr	r3, [pc, #544]	; (8001080 <__aeabi_ddiv+0x5cc>)
 8000e60:	0312      	lsls	r2, r2, #12
 8000e62:	e67e      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8000e64:	2501      	movs	r5, #1
 8000e66:	426d      	negs	r5, r5
 8000e68:	2201      	movs	r2, #1
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	2a38      	cmp	r2, #56	; 0x38
 8000e6e:	dd00      	ble.n	8000e72 <__aeabi_ddiv+0x3be>
 8000e70:	e674      	b.n	8000b5c <__aeabi_ddiv+0xa8>
 8000e72:	2a1f      	cmp	r2, #31
 8000e74:	dc00      	bgt.n	8000e78 <__aeabi_ddiv+0x3c4>
 8000e76:	e0bd      	b.n	8000ff4 <__aeabi_ddiv+0x540>
 8000e78:	211f      	movs	r1, #31
 8000e7a:	4249      	negs	r1, r1
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	4641      	mov	r1, r8
 8000e80:	40d9      	lsrs	r1, r3
 8000e82:	000b      	movs	r3, r1
 8000e84:	2a20      	cmp	r2, #32
 8000e86:	d004      	beq.n	8000e92 <__aeabi_ddiv+0x3de>
 8000e88:	4641      	mov	r1, r8
 8000e8a:	4a7e      	ldr	r2, [pc, #504]	; (8001084 <__aeabi_ddiv+0x5d0>)
 8000e8c:	445a      	add	r2, fp
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	430d      	orrs	r5, r1
 8000e92:	0029      	movs	r1, r5
 8000e94:	1e4a      	subs	r2, r1, #1
 8000e96:	4191      	sbcs	r1, r2
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	001d      	movs	r5, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	400d      	ands	r5, r1
 8000ea2:	420b      	tst	r3, r1
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_ddiv+0x3f4>
 8000ea6:	e0d0      	b.n	800104a <__aeabi_ddiv+0x596>
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	2300      	movs	r3, #0
 8000eac:	400a      	ands	r2, r1
 8000eae:	2a04      	cmp	r2, #4
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_ddiv+0x400>
 8000eb2:	e0c7      	b.n	8001044 <__aeabi_ddiv+0x590>
 8000eb4:	1d0a      	adds	r2, r1, #4
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	4189      	sbcs	r1, r1
 8000eba:	4249      	negs	r1, r1
 8000ebc:	185b      	adds	r3, r3, r1
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	021a      	lsls	r2, r3, #8
 8000ec2:	d400      	bmi.n	8000ec6 <__aeabi_ddiv+0x412>
 8000ec4:	e0be      	b.n	8001044 <__aeabi_ddiv+0x590>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2500      	movs	r5, #0
 8000ecc:	e649      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	0312      	lsls	r2, r2, #12
 8000ed4:	4213      	tst	r3, r2
 8000ed6:	d008      	beq.n	8000eea <__aeabi_ddiv+0x436>
 8000ed8:	4214      	tst	r4, r2
 8000eda:	d106      	bne.n	8000eea <__aeabi_ddiv+0x436>
 8000edc:	4322      	orrs	r2, r4
 8000ede:	0312      	lsls	r2, r2, #12
 8000ee0:	46ba      	mov	sl, r7
 8000ee2:	000d      	movs	r5, r1
 8000ee4:	4b66      	ldr	r3, [pc, #408]	; (8001080 <__aeabi_ddiv+0x5cc>)
 8000ee6:	0b12      	lsrs	r2, r2, #12
 8000ee8:	e63b      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	4643      	mov	r3, r8
 8000eee:	0312      	lsls	r2, r2, #12
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	0312      	lsls	r2, r2, #12
 8000ef4:	46b2      	mov	sl, r6
 8000ef6:	4b62      	ldr	r3, [pc, #392]	; (8001080 <__aeabi_ddiv+0x5cc>)
 8000ef8:	0b12      	lsrs	r2, r2, #12
 8000efa:	e632      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0x44e>
 8000f00:	e702      	b.n	8000d08 <__aeabi_ddiv+0x254>
 8000f02:	19a6      	adds	r6, r4, r6
 8000f04:	1e6a      	subs	r2, r5, #1
 8000f06:	42a6      	cmp	r6, r4
 8000f08:	d200      	bcs.n	8000f0c <__aeabi_ddiv+0x458>
 8000f0a:	e089      	b.n	8001020 <__aeabi_ddiv+0x56c>
 8000f0c:	4286      	cmp	r6, r0
 8000f0e:	d200      	bcs.n	8000f12 <__aeabi_ddiv+0x45e>
 8000f10:	e09f      	b.n	8001052 <__aeabi_ddiv+0x59e>
 8000f12:	d100      	bne.n	8000f16 <__aeabi_ddiv+0x462>
 8000f14:	e0af      	b.n	8001076 <__aeabi_ddiv+0x5c2>
 8000f16:	0015      	movs	r5, r2
 8000f18:	e6f4      	b.n	8000d04 <__aeabi_ddiv+0x250>
 8000f1a:	42a9      	cmp	r1, r5
 8000f1c:	d900      	bls.n	8000f20 <__aeabi_ddiv+0x46c>
 8000f1e:	e63c      	b.n	8000b9a <__aeabi_ddiv+0xe6>
 8000f20:	4643      	mov	r3, r8
 8000f22:	07de      	lsls	r6, r3, #31
 8000f24:	0858      	lsrs	r0, r3, #1
 8000f26:	086b      	lsrs	r3, r5, #1
 8000f28:	431e      	orrs	r6, r3
 8000f2a:	07ed      	lsls	r5, r5, #31
 8000f2c:	e63c      	b.n	8000ba8 <__aeabi_ddiv+0xf4>
 8000f2e:	f000 ff59 	bl	8001de4 <__clzsi2>
 8000f32:	0001      	movs	r1, r0
 8000f34:	0002      	movs	r2, r0
 8000f36:	3115      	adds	r1, #21
 8000f38:	3220      	adds	r2, #32
 8000f3a:	291c      	cmp	r1, #28
 8000f3c:	dc00      	bgt.n	8000f40 <__aeabi_ddiv+0x48c>
 8000f3e:	e72c      	b.n	8000d9a <__aeabi_ddiv+0x2e6>
 8000f40:	464b      	mov	r3, r9
 8000f42:	3808      	subs	r0, #8
 8000f44:	4083      	lsls	r3, r0
 8000f46:	2500      	movs	r5, #0
 8000f48:	4698      	mov	r8, r3
 8000f4a:	e732      	b.n	8000db2 <__aeabi_ddiv+0x2fe>
 8000f4c:	f000 ff4a 	bl	8001de4 <__clzsi2>
 8000f50:	0003      	movs	r3, r0
 8000f52:	001a      	movs	r2, r3
 8000f54:	3215      	adds	r2, #21
 8000f56:	3020      	adds	r0, #32
 8000f58:	2a1c      	cmp	r2, #28
 8000f5a:	dc00      	bgt.n	8000f5e <__aeabi_ddiv+0x4aa>
 8000f5c:	e6ff      	b.n	8000d5e <__aeabi_ddiv+0x2aa>
 8000f5e:	4654      	mov	r4, sl
 8000f60:	3b08      	subs	r3, #8
 8000f62:	2100      	movs	r1, #0
 8000f64:	409c      	lsls	r4, r3
 8000f66:	e705      	b.n	8000d74 <__aeabi_ddiv+0x2c0>
 8000f68:	1936      	adds	r6, r6, r4
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	42b4      	cmp	r4, r6
 8000f6e:	d900      	bls.n	8000f72 <__aeabi_ddiv+0x4be>
 8000f70:	e6a6      	b.n	8000cc0 <__aeabi_ddiv+0x20c>
 8000f72:	42b2      	cmp	r2, r6
 8000f74:	d800      	bhi.n	8000f78 <__aeabi_ddiv+0x4c4>
 8000f76:	e6a3      	b.n	8000cc0 <__aeabi_ddiv+0x20c>
 8000f78:	1e83      	subs	r3, r0, #2
 8000f7a:	1936      	adds	r6, r6, r4
 8000f7c:	e6a0      	b.n	8000cc0 <__aeabi_ddiv+0x20c>
 8000f7e:	1909      	adds	r1, r1, r4
 8000f80:	3d01      	subs	r5, #1
 8000f82:	428c      	cmp	r4, r1
 8000f84:	d900      	bls.n	8000f88 <__aeabi_ddiv+0x4d4>
 8000f86:	e68d      	b.n	8000ca4 <__aeabi_ddiv+0x1f0>
 8000f88:	428a      	cmp	r2, r1
 8000f8a:	d800      	bhi.n	8000f8e <__aeabi_ddiv+0x4da>
 8000f8c:	e68a      	b.n	8000ca4 <__aeabi_ddiv+0x1f0>
 8000f8e:	1e85      	subs	r5, r0, #2
 8000f90:	1909      	adds	r1, r1, r4
 8000f92:	e687      	b.n	8000ca4 <__aeabi_ddiv+0x1f0>
 8000f94:	220f      	movs	r2, #15
 8000f96:	402a      	ands	r2, r5
 8000f98:	2a04      	cmp	r2, #4
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x4ea>
 8000f9c:	e6bc      	b.n	8000d18 <__aeabi_ddiv+0x264>
 8000f9e:	1d29      	adds	r1, r5, #4
 8000fa0:	42a9      	cmp	r1, r5
 8000fa2:	41ad      	sbcs	r5, r5
 8000fa4:	426d      	negs	r5, r5
 8000fa6:	08c9      	lsrs	r1, r1, #3
 8000fa8:	44a8      	add	r8, r5
 8000faa:	e6b6      	b.n	8000d1a <__aeabi_ddiv+0x266>
 8000fac:	42af      	cmp	r7, r5
 8000fae:	d900      	bls.n	8000fb2 <__aeabi_ddiv+0x4fe>
 8000fb0:	e662      	b.n	8000c78 <__aeabi_ddiv+0x1c4>
 8000fb2:	4281      	cmp	r1, r0
 8000fb4:	d804      	bhi.n	8000fc0 <__aeabi_ddiv+0x50c>
 8000fb6:	d000      	beq.n	8000fba <__aeabi_ddiv+0x506>
 8000fb8:	e65e      	b.n	8000c78 <__aeabi_ddiv+0x1c4>
 8000fba:	42ae      	cmp	r6, r5
 8000fbc:	d800      	bhi.n	8000fc0 <__aeabi_ddiv+0x50c>
 8000fbe:	e65b      	b.n	8000c78 <__aeabi_ddiv+0x1c4>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	425b      	negs	r3, r3
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	9b00      	ldr	r3, [sp, #0]
 8000fc8:	44e0      	add	r8, ip
 8000fca:	469c      	mov	ip, r3
 8000fcc:	4465      	add	r5, ip
 8000fce:	429d      	cmp	r5, r3
 8000fd0:	419b      	sbcs	r3, r3
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	191b      	adds	r3, r3, r4
 8000fd6:	18c0      	adds	r0, r0, r3
 8000fd8:	e64f      	b.n	8000c7a <__aeabi_ddiv+0x1c6>
 8000fda:	42b2      	cmp	r2, r6
 8000fdc:	d800      	bhi.n	8000fe0 <__aeabi_ddiv+0x52c>
 8000fde:	e612      	b.n	8000c06 <__aeabi_ddiv+0x152>
 8000fe0:	1e83      	subs	r3, r0, #2
 8000fe2:	1936      	adds	r6, r6, r4
 8000fe4:	e60f      	b.n	8000c06 <__aeabi_ddiv+0x152>
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x538>
 8000fea:	e5fa      	b.n	8000be2 <__aeabi_ddiv+0x12e>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	4698      	mov	r8, r3
 8000ff0:	1909      	adds	r1, r1, r4
 8000ff2:	e5f6      	b.n	8000be2 <__aeabi_ddiv+0x12e>
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <__aeabi_ddiv+0x5d4>)
 8000ff6:	0028      	movs	r0, r5
 8000ff8:	445b      	add	r3, fp
 8000ffa:	4641      	mov	r1, r8
 8000ffc:	409d      	lsls	r5, r3
 8000ffe:	4099      	lsls	r1, r3
 8001000:	40d0      	lsrs	r0, r2
 8001002:	1e6b      	subs	r3, r5, #1
 8001004:	419d      	sbcs	r5, r3
 8001006:	4643      	mov	r3, r8
 8001008:	4301      	orrs	r1, r0
 800100a:	4329      	orrs	r1, r5
 800100c:	40d3      	lsrs	r3, r2
 800100e:	074a      	lsls	r2, r1, #29
 8001010:	d100      	bne.n	8001014 <__aeabi_ddiv+0x560>
 8001012:	e755      	b.n	8000ec0 <__aeabi_ddiv+0x40c>
 8001014:	220f      	movs	r2, #15
 8001016:	400a      	ands	r2, r1
 8001018:	2a04      	cmp	r2, #4
 800101a:	d000      	beq.n	800101e <__aeabi_ddiv+0x56a>
 800101c:	e74a      	b.n	8000eb4 <__aeabi_ddiv+0x400>
 800101e:	e74f      	b.n	8000ec0 <__aeabi_ddiv+0x40c>
 8001020:	0015      	movs	r5, r2
 8001022:	4286      	cmp	r6, r0
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0x574>
 8001026:	e66d      	b.n	8000d04 <__aeabi_ddiv+0x250>
 8001028:	9a00      	ldr	r2, [sp, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d000      	beq.n	8001030 <__aeabi_ddiv+0x57c>
 800102e:	e669      	b.n	8000d04 <__aeabi_ddiv+0x250>
 8001030:	e66a      	b.n	8000d08 <__aeabi_ddiv+0x254>
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <__aeabi_ddiv+0x5d8>)
 8001034:	445b      	add	r3, fp
 8001036:	2b00      	cmp	r3, #0
 8001038:	dc00      	bgt.n	800103c <__aeabi_ddiv+0x588>
 800103a:	e713      	b.n	8000e64 <__aeabi_ddiv+0x3b0>
 800103c:	2501      	movs	r5, #1
 800103e:	2100      	movs	r1, #0
 8001040:	44a8      	add	r8, r5
 8001042:	e66a      	b.n	8000d1a <__aeabi_ddiv+0x266>
 8001044:	075d      	lsls	r5, r3, #29
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	0b1a      	lsrs	r2, r3, #12
 800104a:	08c9      	lsrs	r1, r1, #3
 800104c:	2300      	movs	r3, #0
 800104e:	430d      	orrs	r5, r1
 8001050:	e587      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8001052:	9900      	ldr	r1, [sp, #0]
 8001054:	3d02      	subs	r5, #2
 8001056:	004a      	lsls	r2, r1, #1
 8001058:	428a      	cmp	r2, r1
 800105a:	41bf      	sbcs	r7, r7
 800105c:	427f      	negs	r7, r7
 800105e:	193f      	adds	r7, r7, r4
 8001060:	19f6      	adds	r6, r6, r7
 8001062:	9200      	str	r2, [sp, #0]
 8001064:	e7dd      	b.n	8001022 <__aeabi_ddiv+0x56e>
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	4643      	mov	r3, r8
 800106a:	0312      	lsls	r2, r2, #12
 800106c:	431a      	orrs	r2, r3
 800106e:	0312      	lsls	r2, r2, #12
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <__aeabi_ddiv+0x5cc>)
 8001072:	0b12      	lsrs	r2, r2, #12
 8001074:	e575      	b.n	8000b62 <__aeabi_ddiv+0xae>
 8001076:	9900      	ldr	r1, [sp, #0]
 8001078:	4299      	cmp	r1, r3
 800107a:	d3ea      	bcc.n	8001052 <__aeabi_ddiv+0x59e>
 800107c:	0015      	movs	r5, r2
 800107e:	e7d3      	b.n	8001028 <__aeabi_ddiv+0x574>
 8001080:	000007ff 	.word	0x000007ff
 8001084:	0000043e 	.word	0x0000043e
 8001088:	0000041e 	.word	0x0000041e
 800108c:	000003ff 	.word	0x000003ff

08001090 <__aeabi_dmul>:
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	4645      	mov	r5, r8
 8001094:	46de      	mov	lr, fp
 8001096:	4657      	mov	r7, sl
 8001098:	464e      	mov	r6, r9
 800109a:	b5e0      	push	{r5, r6, r7, lr}
 800109c:	001f      	movs	r7, r3
 800109e:	030b      	lsls	r3, r1, #12
 80010a0:	0b1b      	lsrs	r3, r3, #12
 80010a2:	469b      	mov	fp, r3
 80010a4:	004d      	lsls	r5, r1, #1
 80010a6:	0fcb      	lsrs	r3, r1, #31
 80010a8:	0004      	movs	r4, r0
 80010aa:	4691      	mov	r9, r2
 80010ac:	4698      	mov	r8, r3
 80010ae:	b087      	sub	sp, #28
 80010b0:	0d6d      	lsrs	r5, r5, #21
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dmul+0x26>
 80010b4:	e1cd      	b.n	8001452 <__aeabi_dmul+0x3c2>
 80010b6:	4bce      	ldr	r3, [pc, #824]	; (80013f0 <__aeabi_dmul+0x360>)
 80010b8:	429d      	cmp	r5, r3
 80010ba:	d100      	bne.n	80010be <__aeabi_dmul+0x2e>
 80010bc:	e1e9      	b.n	8001492 <__aeabi_dmul+0x402>
 80010be:	465a      	mov	r2, fp
 80010c0:	0f43      	lsrs	r3, r0, #29
 80010c2:	00d2      	lsls	r2, r2, #3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	0412      	lsls	r2, r2, #16
 80010ca:	431a      	orrs	r2, r3
 80010cc:	00c3      	lsls	r3, r0, #3
 80010ce:	469a      	mov	sl, r3
 80010d0:	4bc8      	ldr	r3, [pc, #800]	; (80013f4 <__aeabi_dmul+0x364>)
 80010d2:	4693      	mov	fp, r2
 80010d4:	469c      	mov	ip, r3
 80010d6:	2300      	movs	r3, #0
 80010d8:	2600      	movs	r6, #0
 80010da:	4465      	add	r5, ip
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	033c      	lsls	r4, r7, #12
 80010e0:	007b      	lsls	r3, r7, #1
 80010e2:	4648      	mov	r0, r9
 80010e4:	0b24      	lsrs	r4, r4, #12
 80010e6:	0d5b      	lsrs	r3, r3, #21
 80010e8:	0fff      	lsrs	r7, r7, #31
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dmul+0x60>
 80010ee:	e189      	b.n	8001404 <__aeabi_dmul+0x374>
 80010f0:	4abf      	ldr	r2, [pc, #764]	; (80013f0 <__aeabi_dmul+0x360>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <__aeabi_dmul+0x9a>
 80010f6:	0f42      	lsrs	r2, r0, #29
 80010f8:	00e4      	lsls	r4, r4, #3
 80010fa:	4322      	orrs	r2, r4
 80010fc:	2480      	movs	r4, #128	; 0x80
 80010fe:	0424      	lsls	r4, r4, #16
 8001100:	4314      	orrs	r4, r2
 8001102:	4abc      	ldr	r2, [pc, #752]	; (80013f4 <__aeabi_dmul+0x364>)
 8001104:	2100      	movs	r1, #0
 8001106:	4694      	mov	ip, r2
 8001108:	4642      	mov	r2, r8
 800110a:	4463      	add	r3, ip
 800110c:	195b      	adds	r3, r3, r5
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	9b01      	ldr	r3, [sp, #4]
 8001112:	407a      	eors	r2, r7
 8001114:	3301      	adds	r3, #1
 8001116:	00c0      	lsls	r0, r0, #3
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2e0a      	cmp	r6, #10
 800111e:	dd1c      	ble.n	800115a <__aeabi_dmul+0xca>
 8001120:	003a      	movs	r2, r7
 8001122:	2e0b      	cmp	r6, #11
 8001124:	d05e      	beq.n	80011e4 <__aeabi_dmul+0x154>
 8001126:	4647      	mov	r7, r8
 8001128:	e056      	b.n	80011d8 <__aeabi_dmul+0x148>
 800112a:	4649      	mov	r1, r9
 800112c:	4bb0      	ldr	r3, [pc, #704]	; (80013f0 <__aeabi_dmul+0x360>)
 800112e:	4321      	orrs	r1, r4
 8001130:	18eb      	adds	r3, r5, r3
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2900      	cmp	r1, #0
 8001136:	d12a      	bne.n	800118e <__aeabi_dmul+0xfe>
 8001138:	2080      	movs	r0, #128	; 0x80
 800113a:	2202      	movs	r2, #2
 800113c:	0100      	lsls	r0, r0, #4
 800113e:	002b      	movs	r3, r5
 8001140:	4684      	mov	ip, r0
 8001142:	4316      	orrs	r6, r2
 8001144:	4642      	mov	r2, r8
 8001146:	4463      	add	r3, ip
 8001148:	407a      	eors	r2, r7
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2e0a      	cmp	r6, #10
 8001150:	dd00      	ble.n	8001154 <__aeabi_dmul+0xc4>
 8001152:	e231      	b.n	80015b8 <__aeabi_dmul+0x528>
 8001154:	2000      	movs	r0, #0
 8001156:	2400      	movs	r4, #0
 8001158:	2102      	movs	r1, #2
 800115a:	2e02      	cmp	r6, #2
 800115c:	dc26      	bgt.n	80011ac <__aeabi_dmul+0x11c>
 800115e:	3e01      	subs	r6, #1
 8001160:	2e01      	cmp	r6, #1
 8001162:	d852      	bhi.n	800120a <__aeabi_dmul+0x17a>
 8001164:	2902      	cmp	r1, #2
 8001166:	d04c      	beq.n	8001202 <__aeabi_dmul+0x172>
 8001168:	2901      	cmp	r1, #1
 800116a:	d000      	beq.n	800116e <__aeabi_dmul+0xde>
 800116c:	e118      	b.n	80013a0 <__aeabi_dmul+0x310>
 800116e:	2300      	movs	r3, #0
 8001170:	2400      	movs	r4, #0
 8001172:	2500      	movs	r5, #0
 8001174:	051b      	lsls	r3, r3, #20
 8001176:	4323      	orrs	r3, r4
 8001178:	07d2      	lsls	r2, r2, #31
 800117a:	4313      	orrs	r3, r2
 800117c:	0028      	movs	r0, r5
 800117e:	0019      	movs	r1, r3
 8001180:	b007      	add	sp, #28
 8001182:	bcf0      	pop	{r4, r5, r6, r7}
 8001184:	46bb      	mov	fp, r7
 8001186:	46b2      	mov	sl, r6
 8001188:	46a9      	mov	r9, r5
 800118a:	46a0      	mov	r8, r4
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	2203      	movs	r2, #3
 8001192:	0109      	lsls	r1, r1, #4
 8001194:	002b      	movs	r3, r5
 8001196:	468c      	mov	ip, r1
 8001198:	4316      	orrs	r6, r2
 800119a:	4642      	mov	r2, r8
 800119c:	4463      	add	r3, ip
 800119e:	407a      	eors	r2, r7
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2e0a      	cmp	r6, #10
 80011a6:	dd00      	ble.n	80011aa <__aeabi_dmul+0x11a>
 80011a8:	e228      	b.n	80015fc <__aeabi_dmul+0x56c>
 80011aa:	2103      	movs	r1, #3
 80011ac:	2501      	movs	r5, #1
 80011ae:	40b5      	lsls	r5, r6
 80011b0:	46ac      	mov	ip, r5
 80011b2:	26a6      	movs	r6, #166	; 0xa6
 80011b4:	4663      	mov	r3, ip
 80011b6:	00f6      	lsls	r6, r6, #3
 80011b8:	4035      	ands	r5, r6
 80011ba:	4233      	tst	r3, r6
 80011bc:	d10b      	bne.n	80011d6 <__aeabi_dmul+0x146>
 80011be:	2690      	movs	r6, #144	; 0x90
 80011c0:	00b6      	lsls	r6, r6, #2
 80011c2:	4233      	tst	r3, r6
 80011c4:	d118      	bne.n	80011f8 <__aeabi_dmul+0x168>
 80011c6:	3eb9      	subs	r6, #185	; 0xb9
 80011c8:	3eff      	subs	r6, #255	; 0xff
 80011ca:	421e      	tst	r6, r3
 80011cc:	d01d      	beq.n	800120a <__aeabi_dmul+0x17a>
 80011ce:	46a3      	mov	fp, r4
 80011d0:	4682      	mov	sl, r0
 80011d2:	9100      	str	r1, [sp, #0]
 80011d4:	e000      	b.n	80011d8 <__aeabi_dmul+0x148>
 80011d6:	0017      	movs	r7, r2
 80011d8:	9900      	ldr	r1, [sp, #0]
 80011da:	003a      	movs	r2, r7
 80011dc:	2902      	cmp	r1, #2
 80011de:	d010      	beq.n	8001202 <__aeabi_dmul+0x172>
 80011e0:	465c      	mov	r4, fp
 80011e2:	4650      	mov	r0, sl
 80011e4:	2903      	cmp	r1, #3
 80011e6:	d1bf      	bne.n	8001168 <__aeabi_dmul+0xd8>
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	031b      	lsls	r3, r3, #12
 80011ec:	431c      	orrs	r4, r3
 80011ee:	0324      	lsls	r4, r4, #12
 80011f0:	0005      	movs	r5, r0
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <__aeabi_dmul+0x360>)
 80011f4:	0b24      	lsrs	r4, r4, #12
 80011f6:	e7bd      	b.n	8001174 <__aeabi_dmul+0xe4>
 80011f8:	2480      	movs	r4, #128	; 0x80
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <__aeabi_dmul+0x360>)
 80011fe:	0324      	lsls	r4, r4, #12
 8001200:	e7b8      	b.n	8001174 <__aeabi_dmul+0xe4>
 8001202:	2400      	movs	r4, #0
 8001204:	2500      	movs	r5, #0
 8001206:	4b7a      	ldr	r3, [pc, #488]	; (80013f0 <__aeabi_dmul+0x360>)
 8001208:	e7b4      	b.n	8001174 <__aeabi_dmul+0xe4>
 800120a:	4653      	mov	r3, sl
 800120c:	041e      	lsls	r6, r3, #16
 800120e:	0c36      	lsrs	r6, r6, #16
 8001210:	0c1f      	lsrs	r7, r3, #16
 8001212:	0033      	movs	r3, r6
 8001214:	0c01      	lsrs	r1, r0, #16
 8001216:	0400      	lsls	r0, r0, #16
 8001218:	0c00      	lsrs	r0, r0, #16
 800121a:	4343      	muls	r3, r0
 800121c:	4698      	mov	r8, r3
 800121e:	0003      	movs	r3, r0
 8001220:	437b      	muls	r3, r7
 8001222:	4699      	mov	r9, r3
 8001224:	0033      	movs	r3, r6
 8001226:	434b      	muls	r3, r1
 8001228:	469c      	mov	ip, r3
 800122a:	4643      	mov	r3, r8
 800122c:	000d      	movs	r5, r1
 800122e:	0c1b      	lsrs	r3, r3, #16
 8001230:	469a      	mov	sl, r3
 8001232:	437d      	muls	r5, r7
 8001234:	44cc      	add	ip, r9
 8001236:	44d4      	add	ip, sl
 8001238:	9500      	str	r5, [sp, #0]
 800123a:	45e1      	cmp	r9, ip
 800123c:	d904      	bls.n	8001248 <__aeabi_dmul+0x1b8>
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	4699      	mov	r9, r3
 8001244:	444d      	add	r5, r9
 8001246:	9500      	str	r5, [sp, #0]
 8001248:	4663      	mov	r3, ip
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	001d      	movs	r5, r3
 800124e:	4663      	mov	r3, ip
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	469c      	mov	ip, r3
 8001254:	4643      	mov	r3, r8
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	0c1b      	lsrs	r3, r3, #16
 800125a:	4698      	mov	r8, r3
 800125c:	4663      	mov	r3, ip
 800125e:	4443      	add	r3, r8
 8001260:	9303      	str	r3, [sp, #12]
 8001262:	0c23      	lsrs	r3, r4, #16
 8001264:	4698      	mov	r8, r3
 8001266:	0033      	movs	r3, r6
 8001268:	0424      	lsls	r4, r4, #16
 800126a:	0c24      	lsrs	r4, r4, #16
 800126c:	4363      	muls	r3, r4
 800126e:	469c      	mov	ip, r3
 8001270:	0023      	movs	r3, r4
 8001272:	437b      	muls	r3, r7
 8001274:	4699      	mov	r9, r3
 8001276:	4643      	mov	r3, r8
 8001278:	435e      	muls	r6, r3
 800127a:	435f      	muls	r7, r3
 800127c:	444e      	add	r6, r9
 800127e:	4663      	mov	r3, ip
 8001280:	46b2      	mov	sl, r6
 8001282:	0c1e      	lsrs	r6, r3, #16
 8001284:	4456      	add	r6, sl
 8001286:	45b1      	cmp	r9, r6
 8001288:	d903      	bls.n	8001292 <__aeabi_dmul+0x202>
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	4699      	mov	r9, r3
 8001290:	444f      	add	r7, r9
 8001292:	0c33      	lsrs	r3, r6, #16
 8001294:	4699      	mov	r9, r3
 8001296:	003b      	movs	r3, r7
 8001298:	444b      	add	r3, r9
 800129a:	9305      	str	r3, [sp, #20]
 800129c:	4663      	mov	r3, ip
 800129e:	46ac      	mov	ip, r5
 80012a0:	041f      	lsls	r7, r3, #16
 80012a2:	0c3f      	lsrs	r7, r7, #16
 80012a4:	0436      	lsls	r6, r6, #16
 80012a6:	19f6      	adds	r6, r6, r7
 80012a8:	44b4      	add	ip, r6
 80012aa:	4663      	mov	r3, ip
 80012ac:	9304      	str	r3, [sp, #16]
 80012ae:	465b      	mov	r3, fp
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	469c      	mov	ip, r3
 80012b4:	465b      	mov	r3, fp
 80012b6:	041f      	lsls	r7, r3, #16
 80012b8:	0c3f      	lsrs	r7, r7, #16
 80012ba:	003b      	movs	r3, r7
 80012bc:	4343      	muls	r3, r0
 80012be:	4699      	mov	r9, r3
 80012c0:	4663      	mov	r3, ip
 80012c2:	4343      	muls	r3, r0
 80012c4:	469a      	mov	sl, r3
 80012c6:	464b      	mov	r3, r9
 80012c8:	4660      	mov	r0, ip
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	469b      	mov	fp, r3
 80012ce:	4348      	muls	r0, r1
 80012d0:	4379      	muls	r1, r7
 80012d2:	4451      	add	r1, sl
 80012d4:	4459      	add	r1, fp
 80012d6:	458a      	cmp	sl, r1
 80012d8:	d903      	bls.n	80012e2 <__aeabi_dmul+0x252>
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	025b      	lsls	r3, r3, #9
 80012de:	469a      	mov	sl, r3
 80012e0:	4450      	add	r0, sl
 80012e2:	0c0b      	lsrs	r3, r1, #16
 80012e4:	469a      	mov	sl, r3
 80012e6:	464b      	mov	r3, r9
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	4699      	mov	r9, r3
 80012ee:	003b      	movs	r3, r7
 80012f0:	4363      	muls	r3, r4
 80012f2:	0409      	lsls	r1, r1, #16
 80012f4:	4645      	mov	r5, r8
 80012f6:	4449      	add	r1, r9
 80012f8:	4699      	mov	r9, r3
 80012fa:	4663      	mov	r3, ip
 80012fc:	435c      	muls	r4, r3
 80012fe:	436b      	muls	r3, r5
 8001300:	469c      	mov	ip, r3
 8001302:	464b      	mov	r3, r9
 8001304:	0c1b      	lsrs	r3, r3, #16
 8001306:	4698      	mov	r8, r3
 8001308:	436f      	muls	r7, r5
 800130a:	193f      	adds	r7, r7, r4
 800130c:	4447      	add	r7, r8
 800130e:	4450      	add	r0, sl
 8001310:	42bc      	cmp	r4, r7
 8001312:	d903      	bls.n	800131c <__aeabi_dmul+0x28c>
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	4698      	mov	r8, r3
 800131a:	44c4      	add	ip, r8
 800131c:	9b04      	ldr	r3, [sp, #16]
 800131e:	9d00      	ldr	r5, [sp, #0]
 8001320:	4698      	mov	r8, r3
 8001322:	4445      	add	r5, r8
 8001324:	42b5      	cmp	r5, r6
 8001326:	41b6      	sbcs	r6, r6
 8001328:	4273      	negs	r3, r6
 800132a:	4698      	mov	r8, r3
 800132c:	464b      	mov	r3, r9
 800132e:	041e      	lsls	r6, r3, #16
 8001330:	9b05      	ldr	r3, [sp, #20]
 8001332:	043c      	lsls	r4, r7, #16
 8001334:	4699      	mov	r9, r3
 8001336:	0c36      	lsrs	r6, r6, #16
 8001338:	19a4      	adds	r4, r4, r6
 800133a:	444c      	add	r4, r9
 800133c:	46a1      	mov	r9, r4
 800133e:	4683      	mov	fp, r0
 8001340:	186e      	adds	r6, r5, r1
 8001342:	44c1      	add	r9, r8
 8001344:	428e      	cmp	r6, r1
 8001346:	4189      	sbcs	r1, r1
 8001348:	44cb      	add	fp, r9
 800134a:	465d      	mov	r5, fp
 800134c:	4249      	negs	r1, r1
 800134e:	186d      	adds	r5, r5, r1
 8001350:	429c      	cmp	r4, r3
 8001352:	41a4      	sbcs	r4, r4
 8001354:	45c1      	cmp	r9, r8
 8001356:	419b      	sbcs	r3, r3
 8001358:	4583      	cmp	fp, r0
 800135a:	4180      	sbcs	r0, r0
 800135c:	428d      	cmp	r5, r1
 800135e:	4189      	sbcs	r1, r1
 8001360:	425b      	negs	r3, r3
 8001362:	4264      	negs	r4, r4
 8001364:	431c      	orrs	r4, r3
 8001366:	4240      	negs	r0, r0
 8001368:	9b03      	ldr	r3, [sp, #12]
 800136a:	4249      	negs	r1, r1
 800136c:	4301      	orrs	r1, r0
 800136e:	0270      	lsls	r0, r6, #9
 8001370:	0c3f      	lsrs	r7, r7, #16
 8001372:	4318      	orrs	r0, r3
 8001374:	19e4      	adds	r4, r4, r7
 8001376:	1e47      	subs	r7, r0, #1
 8001378:	41b8      	sbcs	r0, r7
 800137a:	1864      	adds	r4, r4, r1
 800137c:	4464      	add	r4, ip
 800137e:	0df6      	lsrs	r6, r6, #23
 8001380:	0261      	lsls	r1, r4, #9
 8001382:	4330      	orrs	r0, r6
 8001384:	0dec      	lsrs	r4, r5, #23
 8001386:	026e      	lsls	r6, r5, #9
 8001388:	430c      	orrs	r4, r1
 800138a:	4330      	orrs	r0, r6
 800138c:	01c9      	lsls	r1, r1, #7
 800138e:	d400      	bmi.n	8001392 <__aeabi_dmul+0x302>
 8001390:	e0f1      	b.n	8001576 <__aeabi_dmul+0x4e6>
 8001392:	2101      	movs	r1, #1
 8001394:	0843      	lsrs	r3, r0, #1
 8001396:	4001      	ands	r1, r0
 8001398:	430b      	orrs	r3, r1
 800139a:	07e0      	lsls	r0, r4, #31
 800139c:	4318      	orrs	r0, r3
 800139e:	0864      	lsrs	r4, r4, #1
 80013a0:	4915      	ldr	r1, [pc, #84]	; (80013f8 <__aeabi_dmul+0x368>)
 80013a2:	9b02      	ldr	r3, [sp, #8]
 80013a4:	468c      	mov	ip, r1
 80013a6:	4463      	add	r3, ip
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dc00      	bgt.n	80013ae <__aeabi_dmul+0x31e>
 80013ac:	e097      	b.n	80014de <__aeabi_dmul+0x44e>
 80013ae:	0741      	lsls	r1, r0, #29
 80013b0:	d009      	beq.n	80013c6 <__aeabi_dmul+0x336>
 80013b2:	210f      	movs	r1, #15
 80013b4:	4001      	ands	r1, r0
 80013b6:	2904      	cmp	r1, #4
 80013b8:	d005      	beq.n	80013c6 <__aeabi_dmul+0x336>
 80013ba:	1d01      	adds	r1, r0, #4
 80013bc:	4281      	cmp	r1, r0
 80013be:	4180      	sbcs	r0, r0
 80013c0:	4240      	negs	r0, r0
 80013c2:	1824      	adds	r4, r4, r0
 80013c4:	0008      	movs	r0, r1
 80013c6:	01e1      	lsls	r1, r4, #7
 80013c8:	d506      	bpl.n	80013d8 <__aeabi_dmul+0x348>
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	00c9      	lsls	r1, r1, #3
 80013ce:	468c      	mov	ip, r1
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <__aeabi_dmul+0x36c>)
 80013d2:	401c      	ands	r4, r3
 80013d4:	9b02      	ldr	r3, [sp, #8]
 80013d6:	4463      	add	r3, ip
 80013d8:	4909      	ldr	r1, [pc, #36]	; (8001400 <__aeabi_dmul+0x370>)
 80013da:	428b      	cmp	r3, r1
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dmul+0x350>
 80013de:	e710      	b.n	8001202 <__aeabi_dmul+0x172>
 80013e0:	0761      	lsls	r1, r4, #29
 80013e2:	08c5      	lsrs	r5, r0, #3
 80013e4:	0264      	lsls	r4, r4, #9
 80013e6:	055b      	lsls	r3, r3, #21
 80013e8:	430d      	orrs	r5, r1
 80013ea:	0b24      	lsrs	r4, r4, #12
 80013ec:	0d5b      	lsrs	r3, r3, #21
 80013ee:	e6c1      	b.n	8001174 <__aeabi_dmul+0xe4>
 80013f0:	000007ff 	.word	0x000007ff
 80013f4:	fffffc01 	.word	0xfffffc01
 80013f8:	000003ff 	.word	0x000003ff
 80013fc:	feffffff 	.word	0xfeffffff
 8001400:	000007fe 	.word	0x000007fe
 8001404:	464b      	mov	r3, r9
 8001406:	4323      	orrs	r3, r4
 8001408:	d059      	beq.n	80014be <__aeabi_dmul+0x42e>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_dmul+0x380>
 800140e:	e0a3      	b.n	8001558 <__aeabi_dmul+0x4c8>
 8001410:	0020      	movs	r0, r4
 8001412:	f000 fce7 	bl	8001de4 <__clzsi2>
 8001416:	0001      	movs	r1, r0
 8001418:	0003      	movs	r3, r0
 800141a:	390b      	subs	r1, #11
 800141c:	221d      	movs	r2, #29
 800141e:	1a52      	subs	r2, r2, r1
 8001420:	4649      	mov	r1, r9
 8001422:	0018      	movs	r0, r3
 8001424:	40d1      	lsrs	r1, r2
 8001426:	464a      	mov	r2, r9
 8001428:	3808      	subs	r0, #8
 800142a:	4082      	lsls	r2, r0
 800142c:	4084      	lsls	r4, r0
 800142e:	0010      	movs	r0, r2
 8001430:	430c      	orrs	r4, r1
 8001432:	4a74      	ldr	r2, [pc, #464]	; (8001604 <__aeabi_dmul+0x574>)
 8001434:	1aeb      	subs	r3, r5, r3
 8001436:	4694      	mov	ip, r2
 8001438:	4642      	mov	r2, r8
 800143a:	4463      	add	r3, ip
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	9b01      	ldr	r3, [sp, #4]
 8001440:	407a      	eors	r2, r7
 8001442:	3301      	adds	r3, #1
 8001444:	2100      	movs	r1, #0
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2e0a      	cmp	r6, #10
 800144c:	dd00      	ble.n	8001450 <__aeabi_dmul+0x3c0>
 800144e:	e667      	b.n	8001120 <__aeabi_dmul+0x90>
 8001450:	e683      	b.n	800115a <__aeabi_dmul+0xca>
 8001452:	465b      	mov	r3, fp
 8001454:	4303      	orrs	r3, r0
 8001456:	469a      	mov	sl, r3
 8001458:	d02a      	beq.n	80014b0 <__aeabi_dmul+0x420>
 800145a:	465b      	mov	r3, fp
 800145c:	2b00      	cmp	r3, #0
 800145e:	d06d      	beq.n	800153c <__aeabi_dmul+0x4ac>
 8001460:	4658      	mov	r0, fp
 8001462:	f000 fcbf 	bl	8001de4 <__clzsi2>
 8001466:	0001      	movs	r1, r0
 8001468:	0003      	movs	r3, r0
 800146a:	390b      	subs	r1, #11
 800146c:	221d      	movs	r2, #29
 800146e:	1a52      	subs	r2, r2, r1
 8001470:	0021      	movs	r1, r4
 8001472:	0018      	movs	r0, r3
 8001474:	465d      	mov	r5, fp
 8001476:	40d1      	lsrs	r1, r2
 8001478:	3808      	subs	r0, #8
 800147a:	4085      	lsls	r5, r0
 800147c:	000a      	movs	r2, r1
 800147e:	4084      	lsls	r4, r0
 8001480:	432a      	orrs	r2, r5
 8001482:	4693      	mov	fp, r2
 8001484:	46a2      	mov	sl, r4
 8001486:	4d5f      	ldr	r5, [pc, #380]	; (8001604 <__aeabi_dmul+0x574>)
 8001488:	2600      	movs	r6, #0
 800148a:	1aed      	subs	r5, r5, r3
 800148c:	2300      	movs	r3, #0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	e625      	b.n	80010de <__aeabi_dmul+0x4e>
 8001492:	465b      	mov	r3, fp
 8001494:	4303      	orrs	r3, r0
 8001496:	469a      	mov	sl, r3
 8001498:	d105      	bne.n	80014a6 <__aeabi_dmul+0x416>
 800149a:	2300      	movs	r3, #0
 800149c:	469b      	mov	fp, r3
 800149e:	3302      	adds	r3, #2
 80014a0:	2608      	movs	r6, #8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	e61b      	b.n	80010de <__aeabi_dmul+0x4e>
 80014a6:	2303      	movs	r3, #3
 80014a8:	4682      	mov	sl, r0
 80014aa:	260c      	movs	r6, #12
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	e616      	b.n	80010de <__aeabi_dmul+0x4e>
 80014b0:	2300      	movs	r3, #0
 80014b2:	469b      	mov	fp, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	2604      	movs	r6, #4
 80014b8:	2500      	movs	r5, #0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	e60f      	b.n	80010de <__aeabi_dmul+0x4e>
 80014be:	4642      	mov	r2, r8
 80014c0:	3301      	adds	r3, #1
 80014c2:	9501      	str	r5, [sp, #4]
 80014c4:	431e      	orrs	r6, r3
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	407a      	eors	r2, r7
 80014ca:	3301      	adds	r3, #1
 80014cc:	2400      	movs	r4, #0
 80014ce:	2000      	movs	r0, #0
 80014d0:	2101      	movs	r1, #1
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	2e0a      	cmp	r6, #10
 80014d8:	dd00      	ble.n	80014dc <__aeabi_dmul+0x44c>
 80014da:	e621      	b.n	8001120 <__aeabi_dmul+0x90>
 80014dc:	e63d      	b.n	800115a <__aeabi_dmul+0xca>
 80014de:	2101      	movs	r1, #1
 80014e0:	1ac9      	subs	r1, r1, r3
 80014e2:	2938      	cmp	r1, #56	; 0x38
 80014e4:	dd00      	ble.n	80014e8 <__aeabi_dmul+0x458>
 80014e6:	e642      	b.n	800116e <__aeabi_dmul+0xde>
 80014e8:	291f      	cmp	r1, #31
 80014ea:	dd47      	ble.n	800157c <__aeabi_dmul+0x4ec>
 80014ec:	261f      	movs	r6, #31
 80014ee:	0025      	movs	r5, r4
 80014f0:	4276      	negs	r6, r6
 80014f2:	1af3      	subs	r3, r6, r3
 80014f4:	40dd      	lsrs	r5, r3
 80014f6:	002b      	movs	r3, r5
 80014f8:	2920      	cmp	r1, #32
 80014fa:	d005      	beq.n	8001508 <__aeabi_dmul+0x478>
 80014fc:	4942      	ldr	r1, [pc, #264]	; (8001608 <__aeabi_dmul+0x578>)
 80014fe:	9d02      	ldr	r5, [sp, #8]
 8001500:	468c      	mov	ip, r1
 8001502:	4465      	add	r5, ip
 8001504:	40ac      	lsls	r4, r5
 8001506:	4320      	orrs	r0, r4
 8001508:	1e41      	subs	r1, r0, #1
 800150a:	4188      	sbcs	r0, r1
 800150c:	4318      	orrs	r0, r3
 800150e:	2307      	movs	r3, #7
 8001510:	001d      	movs	r5, r3
 8001512:	2400      	movs	r4, #0
 8001514:	4005      	ands	r5, r0
 8001516:	4203      	tst	r3, r0
 8001518:	d04a      	beq.n	80015b0 <__aeabi_dmul+0x520>
 800151a:	230f      	movs	r3, #15
 800151c:	2400      	movs	r4, #0
 800151e:	4003      	ands	r3, r0
 8001520:	2b04      	cmp	r3, #4
 8001522:	d042      	beq.n	80015aa <__aeabi_dmul+0x51a>
 8001524:	1d03      	adds	r3, r0, #4
 8001526:	4283      	cmp	r3, r0
 8001528:	4180      	sbcs	r0, r0
 800152a:	4240      	negs	r0, r0
 800152c:	1824      	adds	r4, r4, r0
 800152e:	0018      	movs	r0, r3
 8001530:	0223      	lsls	r3, r4, #8
 8001532:	d53a      	bpl.n	80015aa <__aeabi_dmul+0x51a>
 8001534:	2301      	movs	r3, #1
 8001536:	2400      	movs	r4, #0
 8001538:	2500      	movs	r5, #0
 800153a:	e61b      	b.n	8001174 <__aeabi_dmul+0xe4>
 800153c:	f000 fc52 	bl	8001de4 <__clzsi2>
 8001540:	0001      	movs	r1, r0
 8001542:	0003      	movs	r3, r0
 8001544:	3115      	adds	r1, #21
 8001546:	3320      	adds	r3, #32
 8001548:	291c      	cmp	r1, #28
 800154a:	dd8f      	ble.n	800146c <__aeabi_dmul+0x3dc>
 800154c:	3808      	subs	r0, #8
 800154e:	2200      	movs	r2, #0
 8001550:	4084      	lsls	r4, r0
 8001552:	4692      	mov	sl, r2
 8001554:	46a3      	mov	fp, r4
 8001556:	e796      	b.n	8001486 <__aeabi_dmul+0x3f6>
 8001558:	f000 fc44 	bl	8001de4 <__clzsi2>
 800155c:	0001      	movs	r1, r0
 800155e:	0003      	movs	r3, r0
 8001560:	3115      	adds	r1, #21
 8001562:	3320      	adds	r3, #32
 8001564:	291c      	cmp	r1, #28
 8001566:	dc00      	bgt.n	800156a <__aeabi_dmul+0x4da>
 8001568:	e758      	b.n	800141c <__aeabi_dmul+0x38c>
 800156a:	0002      	movs	r2, r0
 800156c:	464c      	mov	r4, r9
 800156e:	3a08      	subs	r2, #8
 8001570:	2000      	movs	r0, #0
 8001572:	4094      	lsls	r4, r2
 8001574:	e75d      	b.n	8001432 <__aeabi_dmul+0x3a2>
 8001576:	9b01      	ldr	r3, [sp, #4]
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	e711      	b.n	80013a0 <__aeabi_dmul+0x310>
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <__aeabi_dmul+0x57c>)
 800157e:	0026      	movs	r6, r4
 8001580:	469c      	mov	ip, r3
 8001582:	0003      	movs	r3, r0
 8001584:	9d02      	ldr	r5, [sp, #8]
 8001586:	40cb      	lsrs	r3, r1
 8001588:	4465      	add	r5, ip
 800158a:	40ae      	lsls	r6, r5
 800158c:	431e      	orrs	r6, r3
 800158e:	0003      	movs	r3, r0
 8001590:	40ab      	lsls	r3, r5
 8001592:	1e58      	subs	r0, r3, #1
 8001594:	4183      	sbcs	r3, r0
 8001596:	0030      	movs	r0, r6
 8001598:	4318      	orrs	r0, r3
 800159a:	40cc      	lsrs	r4, r1
 800159c:	0743      	lsls	r3, r0, #29
 800159e:	d0c7      	beq.n	8001530 <__aeabi_dmul+0x4a0>
 80015a0:	230f      	movs	r3, #15
 80015a2:	4003      	ands	r3, r0
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d1bd      	bne.n	8001524 <__aeabi_dmul+0x494>
 80015a8:	e7c2      	b.n	8001530 <__aeabi_dmul+0x4a0>
 80015aa:	0765      	lsls	r5, r4, #29
 80015ac:	0264      	lsls	r4, r4, #9
 80015ae:	0b24      	lsrs	r4, r4, #12
 80015b0:	08c0      	lsrs	r0, r0, #3
 80015b2:	2300      	movs	r3, #0
 80015b4:	4305      	orrs	r5, r0
 80015b6:	e5dd      	b.n	8001174 <__aeabi_dmul+0xe4>
 80015b8:	2500      	movs	r5, #0
 80015ba:	2302      	movs	r3, #2
 80015bc:	2e0f      	cmp	r6, #15
 80015be:	d10c      	bne.n	80015da <__aeabi_dmul+0x54a>
 80015c0:	2480      	movs	r4, #128	; 0x80
 80015c2:	465b      	mov	r3, fp
 80015c4:	0324      	lsls	r4, r4, #12
 80015c6:	4223      	tst	r3, r4
 80015c8:	d00e      	beq.n	80015e8 <__aeabi_dmul+0x558>
 80015ca:	4221      	tst	r1, r4
 80015cc:	d10c      	bne.n	80015e8 <__aeabi_dmul+0x558>
 80015ce:	430c      	orrs	r4, r1
 80015d0:	0324      	lsls	r4, r4, #12
 80015d2:	003a      	movs	r2, r7
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <__aeabi_dmul+0x580>)
 80015d6:	0b24      	lsrs	r4, r4, #12
 80015d8:	e5cc      	b.n	8001174 <__aeabi_dmul+0xe4>
 80015da:	2e0b      	cmp	r6, #11
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dmul+0x550>
 80015de:	e5a2      	b.n	8001126 <__aeabi_dmul+0x96>
 80015e0:	468b      	mov	fp, r1
 80015e2:	46aa      	mov	sl, r5
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	e5f7      	b.n	80011d8 <__aeabi_dmul+0x148>
 80015e8:	2480      	movs	r4, #128	; 0x80
 80015ea:	465b      	mov	r3, fp
 80015ec:	0324      	lsls	r4, r4, #12
 80015ee:	431c      	orrs	r4, r3
 80015f0:	0324      	lsls	r4, r4, #12
 80015f2:	4642      	mov	r2, r8
 80015f4:	4655      	mov	r5, sl
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <__aeabi_dmul+0x580>)
 80015f8:	0b24      	lsrs	r4, r4, #12
 80015fa:	e5bb      	b.n	8001174 <__aeabi_dmul+0xe4>
 80015fc:	464d      	mov	r5, r9
 80015fe:	0021      	movs	r1, r4
 8001600:	2303      	movs	r3, #3
 8001602:	e7db      	b.n	80015bc <__aeabi_dmul+0x52c>
 8001604:	fffffc0d 	.word	0xfffffc0d
 8001608:	0000043e 	.word	0x0000043e
 800160c:	0000041e 	.word	0x0000041e
 8001610:	000007ff 	.word	0x000007ff

08001614 <__aeabi_dsub>:
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	4645      	mov	r5, r8
 800161c:	46de      	mov	lr, fp
 800161e:	b5e0      	push	{r5, r6, r7, lr}
 8001620:	000d      	movs	r5, r1
 8001622:	0004      	movs	r4, r0
 8001624:	0019      	movs	r1, r3
 8001626:	0010      	movs	r0, r2
 8001628:	032b      	lsls	r3, r5, #12
 800162a:	0a5b      	lsrs	r3, r3, #9
 800162c:	0f62      	lsrs	r2, r4, #29
 800162e:	431a      	orrs	r2, r3
 8001630:	00e3      	lsls	r3, r4, #3
 8001632:	030c      	lsls	r4, r1, #12
 8001634:	0a64      	lsrs	r4, r4, #9
 8001636:	0f47      	lsrs	r7, r0, #29
 8001638:	4327      	orrs	r7, r4
 800163a:	4cd0      	ldr	r4, [pc, #832]	; (800197c <__aeabi_dsub+0x368>)
 800163c:	006e      	lsls	r6, r5, #1
 800163e:	4691      	mov	r9, r2
 8001640:	b083      	sub	sp, #12
 8001642:	004a      	lsls	r2, r1, #1
 8001644:	00c0      	lsls	r0, r0, #3
 8001646:	4698      	mov	r8, r3
 8001648:	46a2      	mov	sl, r4
 800164a:	0d76      	lsrs	r6, r6, #21
 800164c:	0fed      	lsrs	r5, r5, #31
 800164e:	0d52      	lsrs	r2, r2, #21
 8001650:	0fc9      	lsrs	r1, r1, #31
 8001652:	9001      	str	r0, [sp, #4]
 8001654:	42a2      	cmp	r2, r4
 8001656:	d100      	bne.n	800165a <__aeabi_dsub+0x46>
 8001658:	e0b9      	b.n	80017ce <__aeabi_dsub+0x1ba>
 800165a:	2401      	movs	r4, #1
 800165c:	4061      	eors	r1, r4
 800165e:	468b      	mov	fp, r1
 8001660:	428d      	cmp	r5, r1
 8001662:	d100      	bne.n	8001666 <__aeabi_dsub+0x52>
 8001664:	e08d      	b.n	8001782 <__aeabi_dsub+0x16e>
 8001666:	1ab4      	subs	r4, r6, r2
 8001668:	46a4      	mov	ip, r4
 800166a:	2c00      	cmp	r4, #0
 800166c:	dc00      	bgt.n	8001670 <__aeabi_dsub+0x5c>
 800166e:	e0b7      	b.n	80017e0 <__aeabi_dsub+0x1cc>
 8001670:	2a00      	cmp	r2, #0
 8001672:	d100      	bne.n	8001676 <__aeabi_dsub+0x62>
 8001674:	e0cb      	b.n	800180e <__aeabi_dsub+0x1fa>
 8001676:	4ac1      	ldr	r2, [pc, #772]	; (800197c <__aeabi_dsub+0x368>)
 8001678:	4296      	cmp	r6, r2
 800167a:	d100      	bne.n	800167e <__aeabi_dsub+0x6a>
 800167c:	e186      	b.n	800198c <__aeabi_dsub+0x378>
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	0412      	lsls	r2, r2, #16
 8001682:	4317      	orrs	r7, r2
 8001684:	4662      	mov	r2, ip
 8001686:	2a38      	cmp	r2, #56	; 0x38
 8001688:	dd00      	ble.n	800168c <__aeabi_dsub+0x78>
 800168a:	e1a4      	b.n	80019d6 <__aeabi_dsub+0x3c2>
 800168c:	2a1f      	cmp	r2, #31
 800168e:	dd00      	ble.n	8001692 <__aeabi_dsub+0x7e>
 8001690:	e21d      	b.n	8001ace <__aeabi_dsub+0x4ba>
 8001692:	4661      	mov	r1, ip
 8001694:	2220      	movs	r2, #32
 8001696:	003c      	movs	r4, r7
 8001698:	1a52      	subs	r2, r2, r1
 800169a:	0001      	movs	r1, r0
 800169c:	4090      	lsls	r0, r2
 800169e:	4094      	lsls	r4, r2
 80016a0:	1e42      	subs	r2, r0, #1
 80016a2:	4190      	sbcs	r0, r2
 80016a4:	4662      	mov	r2, ip
 80016a6:	46a0      	mov	r8, r4
 80016a8:	4664      	mov	r4, ip
 80016aa:	40d7      	lsrs	r7, r2
 80016ac:	464a      	mov	r2, r9
 80016ae:	40e1      	lsrs	r1, r4
 80016b0:	4644      	mov	r4, r8
 80016b2:	1bd2      	subs	r2, r2, r7
 80016b4:	4691      	mov	r9, r2
 80016b6:	430c      	orrs	r4, r1
 80016b8:	4304      	orrs	r4, r0
 80016ba:	1b1c      	subs	r4, r3, r4
 80016bc:	42a3      	cmp	r3, r4
 80016be:	4192      	sbcs	r2, r2
 80016c0:	464b      	mov	r3, r9
 80016c2:	4252      	negs	r2, r2
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	469a      	mov	sl, r3
 80016c8:	4653      	mov	r3, sl
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	d400      	bmi.n	80016d0 <__aeabi_dsub+0xbc>
 80016ce:	e12b      	b.n	8001928 <__aeabi_dsub+0x314>
 80016d0:	4653      	mov	r3, sl
 80016d2:	025a      	lsls	r2, r3, #9
 80016d4:	0a53      	lsrs	r3, r2, #9
 80016d6:	469a      	mov	sl, r3
 80016d8:	4653      	mov	r3, sl
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0xcc>
 80016de:	e166      	b.n	80019ae <__aeabi_dsub+0x39a>
 80016e0:	4650      	mov	r0, sl
 80016e2:	f000 fb7f 	bl	8001de4 <__clzsi2>
 80016e6:	0003      	movs	r3, r0
 80016e8:	3b08      	subs	r3, #8
 80016ea:	2220      	movs	r2, #32
 80016ec:	0020      	movs	r0, r4
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	4651      	mov	r1, sl
 80016f2:	40d0      	lsrs	r0, r2
 80016f4:	4099      	lsls	r1, r3
 80016f6:	0002      	movs	r2, r0
 80016f8:	409c      	lsls	r4, r3
 80016fa:	430a      	orrs	r2, r1
 80016fc:	429e      	cmp	r6, r3
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dsub+0xee>
 8001700:	e164      	b.n	80019cc <__aeabi_dsub+0x3b8>
 8001702:	1b9b      	subs	r3, r3, r6
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	291f      	cmp	r1, #31
 8001708:	dd00      	ble.n	800170c <__aeabi_dsub+0xf8>
 800170a:	e0fe      	b.n	800190a <__aeabi_dsub+0x2f6>
 800170c:	2320      	movs	r3, #32
 800170e:	0010      	movs	r0, r2
 8001710:	0026      	movs	r6, r4
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	409c      	lsls	r4, r3
 8001716:	4098      	lsls	r0, r3
 8001718:	40ce      	lsrs	r6, r1
 800171a:	40ca      	lsrs	r2, r1
 800171c:	1e63      	subs	r3, r4, #1
 800171e:	419c      	sbcs	r4, r3
 8001720:	4330      	orrs	r0, r6
 8001722:	4692      	mov	sl, r2
 8001724:	2600      	movs	r6, #0
 8001726:	4304      	orrs	r4, r0
 8001728:	0763      	lsls	r3, r4, #29
 800172a:	d009      	beq.n	8001740 <__aeabi_dsub+0x12c>
 800172c:	230f      	movs	r3, #15
 800172e:	4023      	ands	r3, r4
 8001730:	2b04      	cmp	r3, #4
 8001732:	d005      	beq.n	8001740 <__aeabi_dsub+0x12c>
 8001734:	1d23      	adds	r3, r4, #4
 8001736:	42a3      	cmp	r3, r4
 8001738:	41a4      	sbcs	r4, r4
 800173a:	4264      	negs	r4, r4
 800173c:	44a2      	add	sl, r4
 800173e:	001c      	movs	r4, r3
 8001740:	4653      	mov	r3, sl
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	d400      	bmi.n	8001748 <__aeabi_dsub+0x134>
 8001746:	e0f2      	b.n	800192e <__aeabi_dsub+0x31a>
 8001748:	4b8c      	ldr	r3, [pc, #560]	; (800197c <__aeabi_dsub+0x368>)
 800174a:	3601      	adds	r6, #1
 800174c:	429e      	cmp	r6, r3
 800174e:	d100      	bne.n	8001752 <__aeabi_dsub+0x13e>
 8001750:	e10f      	b.n	8001972 <__aeabi_dsub+0x35e>
 8001752:	4653      	mov	r3, sl
 8001754:	498a      	ldr	r1, [pc, #552]	; (8001980 <__aeabi_dsub+0x36c>)
 8001756:	08e4      	lsrs	r4, r4, #3
 8001758:	400b      	ands	r3, r1
 800175a:	0019      	movs	r1, r3
 800175c:	075b      	lsls	r3, r3, #29
 800175e:	4323      	orrs	r3, r4
 8001760:	0572      	lsls	r2, r6, #21
 8001762:	024c      	lsls	r4, r1, #9
 8001764:	0b24      	lsrs	r4, r4, #12
 8001766:	0d52      	lsrs	r2, r2, #21
 8001768:	0512      	lsls	r2, r2, #20
 800176a:	4322      	orrs	r2, r4
 800176c:	07ed      	lsls	r5, r5, #31
 800176e:	432a      	orrs	r2, r5
 8001770:	0018      	movs	r0, r3
 8001772:	0011      	movs	r1, r2
 8001774:	b003      	add	sp, #12
 8001776:	bcf0      	pop	{r4, r5, r6, r7}
 8001778:	46bb      	mov	fp, r7
 800177a:	46b2      	mov	sl, r6
 800177c:	46a9      	mov	r9, r5
 800177e:	46a0      	mov	r8, r4
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	1ab4      	subs	r4, r6, r2
 8001784:	46a4      	mov	ip, r4
 8001786:	2c00      	cmp	r4, #0
 8001788:	dd59      	ble.n	800183e <__aeabi_dsub+0x22a>
 800178a:	2a00      	cmp	r2, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_dsub+0x17c>
 800178e:	e0b0      	b.n	80018f2 <__aeabi_dsub+0x2de>
 8001790:	4556      	cmp	r6, sl
 8001792:	d100      	bne.n	8001796 <__aeabi_dsub+0x182>
 8001794:	e0fa      	b.n	800198c <__aeabi_dsub+0x378>
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	0412      	lsls	r2, r2, #16
 800179a:	4317      	orrs	r7, r2
 800179c:	4662      	mov	r2, ip
 800179e:	2a38      	cmp	r2, #56	; 0x38
 80017a0:	dd00      	ble.n	80017a4 <__aeabi_dsub+0x190>
 80017a2:	e0d4      	b.n	800194e <__aeabi_dsub+0x33a>
 80017a4:	2a1f      	cmp	r2, #31
 80017a6:	dc00      	bgt.n	80017aa <__aeabi_dsub+0x196>
 80017a8:	e1c0      	b.n	8001b2c <__aeabi_dsub+0x518>
 80017aa:	0039      	movs	r1, r7
 80017ac:	3a20      	subs	r2, #32
 80017ae:	40d1      	lsrs	r1, r2
 80017b0:	4662      	mov	r2, ip
 80017b2:	2a20      	cmp	r2, #32
 80017b4:	d006      	beq.n	80017c4 <__aeabi_dsub+0x1b0>
 80017b6:	4664      	mov	r4, ip
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	1b12      	subs	r2, r2, r4
 80017bc:	003c      	movs	r4, r7
 80017be:	4094      	lsls	r4, r2
 80017c0:	4304      	orrs	r4, r0
 80017c2:	9401      	str	r4, [sp, #4]
 80017c4:	9c01      	ldr	r4, [sp, #4]
 80017c6:	1e62      	subs	r2, r4, #1
 80017c8:	4194      	sbcs	r4, r2
 80017ca:	430c      	orrs	r4, r1
 80017cc:	e0c3      	b.n	8001956 <__aeabi_dsub+0x342>
 80017ce:	003c      	movs	r4, r7
 80017d0:	4304      	orrs	r4, r0
 80017d2:	d02b      	beq.n	800182c <__aeabi_dsub+0x218>
 80017d4:	468b      	mov	fp, r1
 80017d6:	428d      	cmp	r5, r1
 80017d8:	d02e      	beq.n	8001838 <__aeabi_dsub+0x224>
 80017da:	4c6a      	ldr	r4, [pc, #424]	; (8001984 <__aeabi_dsub+0x370>)
 80017dc:	46a4      	mov	ip, r4
 80017de:	44b4      	add	ip, r6
 80017e0:	4664      	mov	r4, ip
 80017e2:	2c00      	cmp	r4, #0
 80017e4:	d05f      	beq.n	80018a6 <__aeabi_dsub+0x292>
 80017e6:	1b94      	subs	r4, r2, r6
 80017e8:	46a4      	mov	ip, r4
 80017ea:	2e00      	cmp	r6, #0
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dsub+0x1dc>
 80017ee:	e120      	b.n	8001a32 <__aeabi_dsub+0x41e>
 80017f0:	464c      	mov	r4, r9
 80017f2:	431c      	orrs	r4, r3
 80017f4:	d100      	bne.n	80017f8 <__aeabi_dsub+0x1e4>
 80017f6:	e1c7      	b.n	8001b88 <__aeabi_dsub+0x574>
 80017f8:	4661      	mov	r1, ip
 80017fa:	1e4c      	subs	r4, r1, #1
 80017fc:	2901      	cmp	r1, #1
 80017fe:	d100      	bne.n	8001802 <__aeabi_dsub+0x1ee>
 8001800:	e223      	b.n	8001c4a <__aeabi_dsub+0x636>
 8001802:	4d5e      	ldr	r5, [pc, #376]	; (800197c <__aeabi_dsub+0x368>)
 8001804:	45ac      	cmp	ip, r5
 8001806:	d100      	bne.n	800180a <__aeabi_dsub+0x1f6>
 8001808:	e1d8      	b.n	8001bbc <__aeabi_dsub+0x5a8>
 800180a:	46a4      	mov	ip, r4
 800180c:	e11a      	b.n	8001a44 <__aeabi_dsub+0x430>
 800180e:	003a      	movs	r2, r7
 8001810:	4302      	orrs	r2, r0
 8001812:	d100      	bne.n	8001816 <__aeabi_dsub+0x202>
 8001814:	e0e4      	b.n	80019e0 <__aeabi_dsub+0x3cc>
 8001816:	0022      	movs	r2, r4
 8001818:	3a01      	subs	r2, #1
 800181a:	2c01      	cmp	r4, #1
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x20c>
 800181e:	e1c3      	b.n	8001ba8 <__aeabi_dsub+0x594>
 8001820:	4956      	ldr	r1, [pc, #344]	; (800197c <__aeabi_dsub+0x368>)
 8001822:	428c      	cmp	r4, r1
 8001824:	d100      	bne.n	8001828 <__aeabi_dsub+0x214>
 8001826:	e0b1      	b.n	800198c <__aeabi_dsub+0x378>
 8001828:	4694      	mov	ip, r2
 800182a:	e72b      	b.n	8001684 <__aeabi_dsub+0x70>
 800182c:	2401      	movs	r4, #1
 800182e:	4061      	eors	r1, r4
 8001830:	468b      	mov	fp, r1
 8001832:	428d      	cmp	r5, r1
 8001834:	d000      	beq.n	8001838 <__aeabi_dsub+0x224>
 8001836:	e716      	b.n	8001666 <__aeabi_dsub+0x52>
 8001838:	4952      	ldr	r1, [pc, #328]	; (8001984 <__aeabi_dsub+0x370>)
 800183a:	468c      	mov	ip, r1
 800183c:	44b4      	add	ip, r6
 800183e:	4664      	mov	r4, ip
 8001840:	2c00      	cmp	r4, #0
 8001842:	d100      	bne.n	8001846 <__aeabi_dsub+0x232>
 8001844:	e0d3      	b.n	80019ee <__aeabi_dsub+0x3da>
 8001846:	1b91      	subs	r1, r2, r6
 8001848:	468c      	mov	ip, r1
 800184a:	2e00      	cmp	r6, #0
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0x23c>
 800184e:	e15e      	b.n	8001b0e <__aeabi_dsub+0x4fa>
 8001850:	494a      	ldr	r1, [pc, #296]	; (800197c <__aeabi_dsub+0x368>)
 8001852:	428a      	cmp	r2, r1
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x244>
 8001856:	e1be      	b.n	8001bd6 <__aeabi_dsub+0x5c2>
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	464c      	mov	r4, r9
 800185c:	0409      	lsls	r1, r1, #16
 800185e:	430c      	orrs	r4, r1
 8001860:	46a1      	mov	r9, r4
 8001862:	4661      	mov	r1, ip
 8001864:	2938      	cmp	r1, #56	; 0x38
 8001866:	dd00      	ble.n	800186a <__aeabi_dsub+0x256>
 8001868:	e1ba      	b.n	8001be0 <__aeabi_dsub+0x5cc>
 800186a:	291f      	cmp	r1, #31
 800186c:	dd00      	ble.n	8001870 <__aeabi_dsub+0x25c>
 800186e:	e227      	b.n	8001cc0 <__aeabi_dsub+0x6ac>
 8001870:	2420      	movs	r4, #32
 8001872:	1a64      	subs	r4, r4, r1
 8001874:	4649      	mov	r1, r9
 8001876:	40a1      	lsls	r1, r4
 8001878:	001e      	movs	r6, r3
 800187a:	4688      	mov	r8, r1
 800187c:	4661      	mov	r1, ip
 800187e:	40a3      	lsls	r3, r4
 8001880:	40ce      	lsrs	r6, r1
 8001882:	4641      	mov	r1, r8
 8001884:	1e5c      	subs	r4, r3, #1
 8001886:	41a3      	sbcs	r3, r4
 8001888:	4331      	orrs	r1, r6
 800188a:	4319      	orrs	r1, r3
 800188c:	000c      	movs	r4, r1
 800188e:	4663      	mov	r3, ip
 8001890:	4649      	mov	r1, r9
 8001892:	40d9      	lsrs	r1, r3
 8001894:	187f      	adds	r7, r7, r1
 8001896:	1824      	adds	r4, r4, r0
 8001898:	4284      	cmp	r4, r0
 800189a:	419b      	sbcs	r3, r3
 800189c:	425b      	negs	r3, r3
 800189e:	469a      	mov	sl, r3
 80018a0:	0016      	movs	r6, r2
 80018a2:	44ba      	add	sl, r7
 80018a4:	e05d      	b.n	8001962 <__aeabi_dsub+0x34e>
 80018a6:	4c38      	ldr	r4, [pc, #224]	; (8001988 <__aeabi_dsub+0x374>)
 80018a8:	1c72      	adds	r2, r6, #1
 80018aa:	4222      	tst	r2, r4
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dsub+0x29c>
 80018ae:	e0df      	b.n	8001a70 <__aeabi_dsub+0x45c>
 80018b0:	464a      	mov	r2, r9
 80018b2:	431a      	orrs	r2, r3
 80018b4:	2e00      	cmp	r6, #0
 80018b6:	d000      	beq.n	80018ba <__aeabi_dsub+0x2a6>
 80018b8:	e15c      	b.n	8001b74 <__aeabi_dsub+0x560>
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x2ac>
 80018be:	e1cf      	b.n	8001c60 <__aeabi_dsub+0x64c>
 80018c0:	003a      	movs	r2, r7
 80018c2:	4302      	orrs	r2, r0
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x2b4>
 80018c6:	e17f      	b.n	8001bc8 <__aeabi_dsub+0x5b4>
 80018c8:	1a1c      	subs	r4, r3, r0
 80018ca:	464a      	mov	r2, r9
 80018cc:	42a3      	cmp	r3, r4
 80018ce:	4189      	sbcs	r1, r1
 80018d0:	1bd2      	subs	r2, r2, r7
 80018d2:	4249      	negs	r1, r1
 80018d4:	1a52      	subs	r2, r2, r1
 80018d6:	4692      	mov	sl, r2
 80018d8:	0212      	lsls	r2, r2, #8
 80018da:	d400      	bmi.n	80018de <__aeabi_dsub+0x2ca>
 80018dc:	e20a      	b.n	8001cf4 <__aeabi_dsub+0x6e0>
 80018de:	1ac4      	subs	r4, r0, r3
 80018e0:	42a0      	cmp	r0, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1aff      	subs	r7, r7, r3
 80018ea:	1a3b      	subs	r3, r7, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	465d      	mov	r5, fp
 80018f0:	e71a      	b.n	8001728 <__aeabi_dsub+0x114>
 80018f2:	003a      	movs	r2, r7
 80018f4:	4302      	orrs	r2, r0
 80018f6:	d073      	beq.n	80019e0 <__aeabi_dsub+0x3cc>
 80018f8:	0022      	movs	r2, r4
 80018fa:	3a01      	subs	r2, #1
 80018fc:	2c01      	cmp	r4, #1
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x2ee>
 8001900:	e0cb      	b.n	8001a9a <__aeabi_dsub+0x486>
 8001902:	4554      	cmp	r4, sl
 8001904:	d042      	beq.n	800198c <__aeabi_dsub+0x378>
 8001906:	4694      	mov	ip, r2
 8001908:	e748      	b.n	800179c <__aeabi_dsub+0x188>
 800190a:	0010      	movs	r0, r2
 800190c:	3b1f      	subs	r3, #31
 800190e:	40d8      	lsrs	r0, r3
 8001910:	2920      	cmp	r1, #32
 8001912:	d003      	beq.n	800191c <__aeabi_dsub+0x308>
 8001914:	2340      	movs	r3, #64	; 0x40
 8001916:	1a5b      	subs	r3, r3, r1
 8001918:	409a      	lsls	r2, r3
 800191a:	4314      	orrs	r4, r2
 800191c:	1e63      	subs	r3, r4, #1
 800191e:	419c      	sbcs	r4, r3
 8001920:	2300      	movs	r3, #0
 8001922:	2600      	movs	r6, #0
 8001924:	469a      	mov	sl, r3
 8001926:	4304      	orrs	r4, r0
 8001928:	0763      	lsls	r3, r4, #29
 800192a:	d000      	beq.n	800192e <__aeabi_dsub+0x31a>
 800192c:	e6fe      	b.n	800172c <__aeabi_dsub+0x118>
 800192e:	4652      	mov	r2, sl
 8001930:	08e3      	lsrs	r3, r4, #3
 8001932:	0752      	lsls	r2, r2, #29
 8001934:	4313      	orrs	r3, r2
 8001936:	4652      	mov	r2, sl
 8001938:	46b4      	mov	ip, r6
 800193a:	08d2      	lsrs	r2, r2, #3
 800193c:	490f      	ldr	r1, [pc, #60]	; (800197c <__aeabi_dsub+0x368>)
 800193e:	458c      	cmp	ip, r1
 8001940:	d02a      	beq.n	8001998 <__aeabi_dsub+0x384>
 8001942:	0312      	lsls	r2, r2, #12
 8001944:	0b14      	lsrs	r4, r2, #12
 8001946:	4662      	mov	r2, ip
 8001948:	0552      	lsls	r2, r2, #21
 800194a:	0d52      	lsrs	r2, r2, #21
 800194c:	e70c      	b.n	8001768 <__aeabi_dsub+0x154>
 800194e:	003c      	movs	r4, r7
 8001950:	4304      	orrs	r4, r0
 8001952:	1e62      	subs	r2, r4, #1
 8001954:	4194      	sbcs	r4, r2
 8001956:	18e4      	adds	r4, r4, r3
 8001958:	429c      	cmp	r4, r3
 800195a:	4192      	sbcs	r2, r2
 800195c:	4252      	negs	r2, r2
 800195e:	444a      	add	r2, r9
 8001960:	4692      	mov	sl, r2
 8001962:	4653      	mov	r3, sl
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	d5df      	bpl.n	8001928 <__aeabi_dsub+0x314>
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__aeabi_dsub+0x368>)
 800196a:	3601      	adds	r6, #1
 800196c:	429e      	cmp	r6, r3
 800196e:	d000      	beq.n	8001972 <__aeabi_dsub+0x35e>
 8001970:	e0a0      	b.n	8001ab4 <__aeabi_dsub+0x4a0>
 8001972:	0032      	movs	r2, r6
 8001974:	2400      	movs	r4, #0
 8001976:	2300      	movs	r3, #0
 8001978:	e6f6      	b.n	8001768 <__aeabi_dsub+0x154>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	000007ff 	.word	0x000007ff
 8001980:	ff7fffff 	.word	0xff7fffff
 8001984:	fffff801 	.word	0xfffff801
 8001988:	000007fe 	.word	0x000007fe
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	464a      	mov	r2, r9
 8001990:	0752      	lsls	r2, r2, #29
 8001992:	4313      	orrs	r3, r2
 8001994:	464a      	mov	r2, r9
 8001996:	08d2      	lsrs	r2, r2, #3
 8001998:	0019      	movs	r1, r3
 800199a:	4311      	orrs	r1, r2
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x38c>
 800199e:	e1b5      	b.n	8001d0c <__aeabi_dsub+0x6f8>
 80019a0:	2480      	movs	r4, #128	; 0x80
 80019a2:	0324      	lsls	r4, r4, #12
 80019a4:	4314      	orrs	r4, r2
 80019a6:	0324      	lsls	r4, r4, #12
 80019a8:	4ad5      	ldr	r2, [pc, #852]	; (8001d00 <__aeabi_dsub+0x6ec>)
 80019aa:	0b24      	lsrs	r4, r4, #12
 80019ac:	e6dc      	b.n	8001768 <__aeabi_dsub+0x154>
 80019ae:	0020      	movs	r0, r4
 80019b0:	f000 fa18 	bl	8001de4 <__clzsi2>
 80019b4:	0003      	movs	r3, r0
 80019b6:	3318      	adds	r3, #24
 80019b8:	2b1f      	cmp	r3, #31
 80019ba:	dc00      	bgt.n	80019be <__aeabi_dsub+0x3aa>
 80019bc:	e695      	b.n	80016ea <__aeabi_dsub+0xd6>
 80019be:	0022      	movs	r2, r4
 80019c0:	3808      	subs	r0, #8
 80019c2:	4082      	lsls	r2, r0
 80019c4:	2400      	movs	r4, #0
 80019c6:	429e      	cmp	r6, r3
 80019c8:	dc00      	bgt.n	80019cc <__aeabi_dsub+0x3b8>
 80019ca:	e69a      	b.n	8001702 <__aeabi_dsub+0xee>
 80019cc:	1af6      	subs	r6, r6, r3
 80019ce:	4bcd      	ldr	r3, [pc, #820]	; (8001d04 <__aeabi_dsub+0x6f0>)
 80019d0:	401a      	ands	r2, r3
 80019d2:	4692      	mov	sl, r2
 80019d4:	e6a8      	b.n	8001728 <__aeabi_dsub+0x114>
 80019d6:	003c      	movs	r4, r7
 80019d8:	4304      	orrs	r4, r0
 80019da:	1e62      	subs	r2, r4, #1
 80019dc:	4194      	sbcs	r4, r2
 80019de:	e66c      	b.n	80016ba <__aeabi_dsub+0xa6>
 80019e0:	464a      	mov	r2, r9
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	0752      	lsls	r2, r2, #29
 80019e6:	4313      	orrs	r3, r2
 80019e8:	464a      	mov	r2, r9
 80019ea:	08d2      	lsrs	r2, r2, #3
 80019ec:	e7a6      	b.n	800193c <__aeabi_dsub+0x328>
 80019ee:	4cc6      	ldr	r4, [pc, #792]	; (8001d08 <__aeabi_dsub+0x6f4>)
 80019f0:	1c72      	adds	r2, r6, #1
 80019f2:	4222      	tst	r2, r4
 80019f4:	d000      	beq.n	80019f8 <__aeabi_dsub+0x3e4>
 80019f6:	e0ac      	b.n	8001b52 <__aeabi_dsub+0x53e>
 80019f8:	464a      	mov	r2, r9
 80019fa:	431a      	orrs	r2, r3
 80019fc:	2e00      	cmp	r6, #0
 80019fe:	d000      	beq.n	8001a02 <__aeabi_dsub+0x3ee>
 8001a00:	e105      	b.n	8001c0e <__aeabi_dsub+0x5fa>
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x3f4>
 8001a06:	e156      	b.n	8001cb6 <__aeabi_dsub+0x6a2>
 8001a08:	003a      	movs	r2, r7
 8001a0a:	4302      	orrs	r2, r0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x3fc>
 8001a0e:	e0db      	b.n	8001bc8 <__aeabi_dsub+0x5b4>
 8001a10:	181c      	adds	r4, r3, r0
 8001a12:	429c      	cmp	r4, r3
 8001a14:	419b      	sbcs	r3, r3
 8001a16:	444f      	add	r7, r9
 8001a18:	46ba      	mov	sl, r7
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	449a      	add	sl, r3
 8001a1e:	4653      	mov	r3, sl
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	d400      	bmi.n	8001a26 <__aeabi_dsub+0x412>
 8001a24:	e780      	b.n	8001928 <__aeabi_dsub+0x314>
 8001a26:	4652      	mov	r2, sl
 8001a28:	4bb6      	ldr	r3, [pc, #728]	; (8001d04 <__aeabi_dsub+0x6f0>)
 8001a2a:	2601      	movs	r6, #1
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	4692      	mov	sl, r2
 8001a30:	e77a      	b.n	8001928 <__aeabi_dsub+0x314>
 8001a32:	4cb3      	ldr	r4, [pc, #716]	; (8001d00 <__aeabi_dsub+0x6ec>)
 8001a34:	42a2      	cmp	r2, r4
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dsub+0x426>
 8001a38:	e0c0      	b.n	8001bbc <__aeabi_dsub+0x5a8>
 8001a3a:	2480      	movs	r4, #128	; 0x80
 8001a3c:	464d      	mov	r5, r9
 8001a3e:	0424      	lsls	r4, r4, #16
 8001a40:	4325      	orrs	r5, r4
 8001a42:	46a9      	mov	r9, r5
 8001a44:	4664      	mov	r4, ip
 8001a46:	2c38      	cmp	r4, #56	; 0x38
 8001a48:	dc53      	bgt.n	8001af2 <__aeabi_dsub+0x4de>
 8001a4a:	4661      	mov	r1, ip
 8001a4c:	2c1f      	cmp	r4, #31
 8001a4e:	dd00      	ble.n	8001a52 <__aeabi_dsub+0x43e>
 8001a50:	e0cd      	b.n	8001bee <__aeabi_dsub+0x5da>
 8001a52:	2520      	movs	r5, #32
 8001a54:	001e      	movs	r6, r3
 8001a56:	1b2d      	subs	r5, r5, r4
 8001a58:	464c      	mov	r4, r9
 8001a5a:	40ab      	lsls	r3, r5
 8001a5c:	40ac      	lsls	r4, r5
 8001a5e:	40ce      	lsrs	r6, r1
 8001a60:	1e5d      	subs	r5, r3, #1
 8001a62:	41ab      	sbcs	r3, r5
 8001a64:	4334      	orrs	r4, r6
 8001a66:	4323      	orrs	r3, r4
 8001a68:	464c      	mov	r4, r9
 8001a6a:	40cc      	lsrs	r4, r1
 8001a6c:	1b3f      	subs	r7, r7, r4
 8001a6e:	e045      	b.n	8001afc <__aeabi_dsub+0x4e8>
 8001a70:	464a      	mov	r2, r9
 8001a72:	1a1c      	subs	r4, r3, r0
 8001a74:	1bd1      	subs	r1, r2, r7
 8001a76:	42a3      	cmp	r3, r4
 8001a78:	4192      	sbcs	r2, r2
 8001a7a:	4252      	negs	r2, r2
 8001a7c:	4692      	mov	sl, r2
 8001a7e:	000a      	movs	r2, r1
 8001a80:	4651      	mov	r1, sl
 8001a82:	1a52      	subs	r2, r2, r1
 8001a84:	4692      	mov	sl, r2
 8001a86:	0212      	lsls	r2, r2, #8
 8001a88:	d500      	bpl.n	8001a8c <__aeabi_dsub+0x478>
 8001a8a:	e083      	b.n	8001b94 <__aeabi_dsub+0x580>
 8001a8c:	4653      	mov	r3, sl
 8001a8e:	4323      	orrs	r3, r4
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x480>
 8001a92:	e621      	b.n	80016d8 <__aeabi_dsub+0xc4>
 8001a94:	2200      	movs	r2, #0
 8001a96:	2500      	movs	r5, #0
 8001a98:	e753      	b.n	8001942 <__aeabi_dsub+0x32e>
 8001a9a:	181c      	adds	r4, r3, r0
 8001a9c:	429c      	cmp	r4, r3
 8001a9e:	419b      	sbcs	r3, r3
 8001aa0:	444f      	add	r7, r9
 8001aa2:	46ba      	mov	sl, r7
 8001aa4:	425b      	negs	r3, r3
 8001aa6:	449a      	add	sl, r3
 8001aa8:	4653      	mov	r3, sl
 8001aaa:	2601      	movs	r6, #1
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	d400      	bmi.n	8001ab2 <__aeabi_dsub+0x49e>
 8001ab0:	e73a      	b.n	8001928 <__aeabi_dsub+0x314>
 8001ab2:	2602      	movs	r6, #2
 8001ab4:	4652      	mov	r2, sl
 8001ab6:	4b93      	ldr	r3, [pc, #588]	; (8001d04 <__aeabi_dsub+0x6f0>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	401a      	ands	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	4021      	ands	r1, r4
 8001ac0:	0862      	lsrs	r2, r4, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	07dc      	lsls	r4, r3, #31
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	469a      	mov	sl, r3
 8001aca:	4314      	orrs	r4, r2
 8001acc:	e62c      	b.n	8001728 <__aeabi_dsub+0x114>
 8001ace:	0039      	movs	r1, r7
 8001ad0:	3a20      	subs	r2, #32
 8001ad2:	40d1      	lsrs	r1, r2
 8001ad4:	4662      	mov	r2, ip
 8001ad6:	2a20      	cmp	r2, #32
 8001ad8:	d006      	beq.n	8001ae8 <__aeabi_dsub+0x4d4>
 8001ada:	4664      	mov	r4, ip
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	1b12      	subs	r2, r2, r4
 8001ae0:	003c      	movs	r4, r7
 8001ae2:	4094      	lsls	r4, r2
 8001ae4:	4304      	orrs	r4, r0
 8001ae6:	9401      	str	r4, [sp, #4]
 8001ae8:	9c01      	ldr	r4, [sp, #4]
 8001aea:	1e62      	subs	r2, r4, #1
 8001aec:	4194      	sbcs	r4, r2
 8001aee:	430c      	orrs	r4, r1
 8001af0:	e5e3      	b.n	80016ba <__aeabi_dsub+0xa6>
 8001af2:	4649      	mov	r1, r9
 8001af4:	4319      	orrs	r1, r3
 8001af6:	000b      	movs	r3, r1
 8001af8:	1e5c      	subs	r4, r3, #1
 8001afa:	41a3      	sbcs	r3, r4
 8001afc:	1ac4      	subs	r4, r0, r3
 8001afe:	42a0      	cmp	r0, r4
 8001b00:	419b      	sbcs	r3, r3
 8001b02:	425b      	negs	r3, r3
 8001b04:	1afb      	subs	r3, r7, r3
 8001b06:	469a      	mov	sl, r3
 8001b08:	465d      	mov	r5, fp
 8001b0a:	0016      	movs	r6, r2
 8001b0c:	e5dc      	b.n	80016c8 <__aeabi_dsub+0xb4>
 8001b0e:	4649      	mov	r1, r9
 8001b10:	4319      	orrs	r1, r3
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x502>
 8001b14:	e0ae      	b.n	8001c74 <__aeabi_dsub+0x660>
 8001b16:	4661      	mov	r1, ip
 8001b18:	4664      	mov	r4, ip
 8001b1a:	3901      	subs	r1, #1
 8001b1c:	2c01      	cmp	r4, #1
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x50e>
 8001b20:	e0e0      	b.n	8001ce4 <__aeabi_dsub+0x6d0>
 8001b22:	4c77      	ldr	r4, [pc, #476]	; (8001d00 <__aeabi_dsub+0x6ec>)
 8001b24:	45a4      	cmp	ip, r4
 8001b26:	d056      	beq.n	8001bd6 <__aeabi_dsub+0x5c2>
 8001b28:	468c      	mov	ip, r1
 8001b2a:	e69a      	b.n	8001862 <__aeabi_dsub+0x24e>
 8001b2c:	4661      	mov	r1, ip
 8001b2e:	2220      	movs	r2, #32
 8001b30:	003c      	movs	r4, r7
 8001b32:	1a52      	subs	r2, r2, r1
 8001b34:	4094      	lsls	r4, r2
 8001b36:	0001      	movs	r1, r0
 8001b38:	4090      	lsls	r0, r2
 8001b3a:	46a0      	mov	r8, r4
 8001b3c:	4664      	mov	r4, ip
 8001b3e:	1e42      	subs	r2, r0, #1
 8001b40:	4190      	sbcs	r0, r2
 8001b42:	4662      	mov	r2, ip
 8001b44:	40e1      	lsrs	r1, r4
 8001b46:	4644      	mov	r4, r8
 8001b48:	40d7      	lsrs	r7, r2
 8001b4a:	430c      	orrs	r4, r1
 8001b4c:	4304      	orrs	r4, r0
 8001b4e:	44b9      	add	r9, r7
 8001b50:	e701      	b.n	8001956 <__aeabi_dsub+0x342>
 8001b52:	496b      	ldr	r1, [pc, #428]	; (8001d00 <__aeabi_dsub+0x6ec>)
 8001b54:	428a      	cmp	r2, r1
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x546>
 8001b58:	e70c      	b.n	8001974 <__aeabi_dsub+0x360>
 8001b5a:	1818      	adds	r0, r3, r0
 8001b5c:	4298      	cmp	r0, r3
 8001b5e:	419b      	sbcs	r3, r3
 8001b60:	444f      	add	r7, r9
 8001b62:	425b      	negs	r3, r3
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	07dc      	lsls	r4, r3, #31
 8001b68:	0840      	lsrs	r0, r0, #1
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	469a      	mov	sl, r3
 8001b6e:	0016      	movs	r6, r2
 8001b70:	4304      	orrs	r4, r0
 8001b72:	e6d9      	b.n	8001928 <__aeabi_dsub+0x314>
 8001b74:	2a00      	cmp	r2, #0
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dsub+0x566>
 8001b78:	e081      	b.n	8001c7e <__aeabi_dsub+0x66a>
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	4303      	orrs	r3, r0
 8001b7e:	d11d      	bne.n	8001bbc <__aeabi_dsub+0x5a8>
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	2500      	movs	r5, #0
 8001b84:	0312      	lsls	r2, r2, #12
 8001b86:	e70b      	b.n	80019a0 <__aeabi_dsub+0x38c>
 8001b88:	08c0      	lsrs	r0, r0, #3
 8001b8a:	077b      	lsls	r3, r7, #29
 8001b8c:	465d      	mov	r5, fp
 8001b8e:	4303      	orrs	r3, r0
 8001b90:	08fa      	lsrs	r2, r7, #3
 8001b92:	e6d3      	b.n	800193c <__aeabi_dsub+0x328>
 8001b94:	1ac4      	subs	r4, r0, r3
 8001b96:	42a0      	cmp	r0, r4
 8001b98:	4180      	sbcs	r0, r0
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	4240      	negs	r0, r0
 8001b9e:	1aff      	subs	r7, r7, r3
 8001ba0:	1a3b      	subs	r3, r7, r0
 8001ba2:	469a      	mov	sl, r3
 8001ba4:	465d      	mov	r5, fp
 8001ba6:	e597      	b.n	80016d8 <__aeabi_dsub+0xc4>
 8001ba8:	1a1c      	subs	r4, r3, r0
 8001baa:	464a      	mov	r2, r9
 8001bac:	42a3      	cmp	r3, r4
 8001bae:	419b      	sbcs	r3, r3
 8001bb0:	1bd7      	subs	r7, r2, r7
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	1afb      	subs	r3, r7, r3
 8001bb6:	469a      	mov	sl, r3
 8001bb8:	2601      	movs	r6, #1
 8001bba:	e585      	b.n	80016c8 <__aeabi_dsub+0xb4>
 8001bbc:	08c0      	lsrs	r0, r0, #3
 8001bbe:	077b      	lsls	r3, r7, #29
 8001bc0:	465d      	mov	r5, fp
 8001bc2:	4303      	orrs	r3, r0
 8001bc4:	08fa      	lsrs	r2, r7, #3
 8001bc6:	e6e7      	b.n	8001998 <__aeabi_dsub+0x384>
 8001bc8:	464a      	mov	r2, r9
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	0752      	lsls	r2, r2, #29
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	464a      	mov	r2, r9
 8001bd2:	08d2      	lsrs	r2, r2, #3
 8001bd4:	e6b5      	b.n	8001942 <__aeabi_dsub+0x32e>
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	077b      	lsls	r3, r7, #29
 8001bda:	4303      	orrs	r3, r0
 8001bdc:	08fa      	lsrs	r2, r7, #3
 8001bde:	e6db      	b.n	8001998 <__aeabi_dsub+0x384>
 8001be0:	4649      	mov	r1, r9
 8001be2:	4319      	orrs	r1, r3
 8001be4:	000b      	movs	r3, r1
 8001be6:	1e59      	subs	r1, r3, #1
 8001be8:	418b      	sbcs	r3, r1
 8001bea:	001c      	movs	r4, r3
 8001bec:	e653      	b.n	8001896 <__aeabi_dsub+0x282>
 8001bee:	464d      	mov	r5, r9
 8001bf0:	3c20      	subs	r4, #32
 8001bf2:	40e5      	lsrs	r5, r4
 8001bf4:	2920      	cmp	r1, #32
 8001bf6:	d005      	beq.n	8001c04 <__aeabi_dsub+0x5f0>
 8001bf8:	2440      	movs	r4, #64	; 0x40
 8001bfa:	1a64      	subs	r4, r4, r1
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	40a1      	lsls	r1, r4
 8001c00:	430b      	orrs	r3, r1
 8001c02:	4698      	mov	r8, r3
 8001c04:	4643      	mov	r3, r8
 8001c06:	1e5c      	subs	r4, r3, #1
 8001c08:	41a3      	sbcs	r3, r4
 8001c0a:	432b      	orrs	r3, r5
 8001c0c:	e776      	b.n	8001afc <__aeabi_dsub+0x4e8>
 8001c0e:	2a00      	cmp	r2, #0
 8001c10:	d0e1      	beq.n	8001bd6 <__aeabi_dsub+0x5c2>
 8001c12:	003a      	movs	r2, r7
 8001c14:	08db      	lsrs	r3, r3, #3
 8001c16:	4302      	orrs	r2, r0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x608>
 8001c1a:	e6b8      	b.n	800198e <__aeabi_dsub+0x37a>
 8001c1c:	464a      	mov	r2, r9
 8001c1e:	0752      	lsls	r2, r2, #29
 8001c20:	2480      	movs	r4, #128	; 0x80
 8001c22:	4313      	orrs	r3, r2
 8001c24:	464a      	mov	r2, r9
 8001c26:	0324      	lsls	r4, r4, #12
 8001c28:	08d2      	lsrs	r2, r2, #3
 8001c2a:	4222      	tst	r2, r4
 8001c2c:	d007      	beq.n	8001c3e <__aeabi_dsub+0x62a>
 8001c2e:	08fe      	lsrs	r6, r7, #3
 8001c30:	4226      	tst	r6, r4
 8001c32:	d104      	bne.n	8001c3e <__aeabi_dsub+0x62a>
 8001c34:	465d      	mov	r5, fp
 8001c36:	0032      	movs	r2, r6
 8001c38:	08c3      	lsrs	r3, r0, #3
 8001c3a:	077f      	lsls	r7, r7, #29
 8001c3c:	433b      	orrs	r3, r7
 8001c3e:	0f59      	lsrs	r1, r3, #29
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	0749      	lsls	r1, r1, #29
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	430b      	orrs	r3, r1
 8001c48:	e6a6      	b.n	8001998 <__aeabi_dsub+0x384>
 8001c4a:	1ac4      	subs	r4, r0, r3
 8001c4c:	42a0      	cmp	r0, r4
 8001c4e:	4180      	sbcs	r0, r0
 8001c50:	464b      	mov	r3, r9
 8001c52:	4240      	negs	r0, r0
 8001c54:	1aff      	subs	r7, r7, r3
 8001c56:	1a3b      	subs	r3, r7, r0
 8001c58:	469a      	mov	sl, r3
 8001c5a:	465d      	mov	r5, fp
 8001c5c:	2601      	movs	r6, #1
 8001c5e:	e533      	b.n	80016c8 <__aeabi_dsub+0xb4>
 8001c60:	003b      	movs	r3, r7
 8001c62:	4303      	orrs	r3, r0
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x654>
 8001c66:	e715      	b.n	8001a94 <__aeabi_dsub+0x480>
 8001c68:	08c0      	lsrs	r0, r0, #3
 8001c6a:	077b      	lsls	r3, r7, #29
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	4303      	orrs	r3, r0
 8001c70:	08fa      	lsrs	r2, r7, #3
 8001c72:	e666      	b.n	8001942 <__aeabi_dsub+0x32e>
 8001c74:	08c0      	lsrs	r0, r0, #3
 8001c76:	077b      	lsls	r3, r7, #29
 8001c78:	4303      	orrs	r3, r0
 8001c7a:	08fa      	lsrs	r2, r7, #3
 8001c7c:	e65e      	b.n	800193c <__aeabi_dsub+0x328>
 8001c7e:	003a      	movs	r2, r7
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	4302      	orrs	r2, r0
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x674>
 8001c86:	e682      	b.n	800198e <__aeabi_dsub+0x37a>
 8001c88:	464a      	mov	r2, r9
 8001c8a:	0752      	lsls	r2, r2, #29
 8001c8c:	2480      	movs	r4, #128	; 0x80
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	464a      	mov	r2, r9
 8001c92:	0324      	lsls	r4, r4, #12
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	4222      	tst	r2, r4
 8001c98:	d007      	beq.n	8001caa <__aeabi_dsub+0x696>
 8001c9a:	08fe      	lsrs	r6, r7, #3
 8001c9c:	4226      	tst	r6, r4
 8001c9e:	d104      	bne.n	8001caa <__aeabi_dsub+0x696>
 8001ca0:	465d      	mov	r5, fp
 8001ca2:	0032      	movs	r2, r6
 8001ca4:	08c3      	lsrs	r3, r0, #3
 8001ca6:	077f      	lsls	r7, r7, #29
 8001ca8:	433b      	orrs	r3, r7
 8001caa:	0f59      	lsrs	r1, r3, #29
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0749      	lsls	r1, r1, #29
 8001cb2:	430b      	orrs	r3, r1
 8001cb4:	e670      	b.n	8001998 <__aeabi_dsub+0x384>
 8001cb6:	08c0      	lsrs	r0, r0, #3
 8001cb8:	077b      	lsls	r3, r7, #29
 8001cba:	4303      	orrs	r3, r0
 8001cbc:	08fa      	lsrs	r2, r7, #3
 8001cbe:	e640      	b.n	8001942 <__aeabi_dsub+0x32e>
 8001cc0:	464c      	mov	r4, r9
 8001cc2:	3920      	subs	r1, #32
 8001cc4:	40cc      	lsrs	r4, r1
 8001cc6:	4661      	mov	r1, ip
 8001cc8:	2920      	cmp	r1, #32
 8001cca:	d006      	beq.n	8001cda <__aeabi_dsub+0x6c6>
 8001ccc:	4666      	mov	r6, ip
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	1b89      	subs	r1, r1, r6
 8001cd2:	464e      	mov	r6, r9
 8001cd4:	408e      	lsls	r6, r1
 8001cd6:	4333      	orrs	r3, r6
 8001cd8:	4698      	mov	r8, r3
 8001cda:	4643      	mov	r3, r8
 8001cdc:	1e59      	subs	r1, r3, #1
 8001cde:	418b      	sbcs	r3, r1
 8001ce0:	431c      	orrs	r4, r3
 8001ce2:	e5d8      	b.n	8001896 <__aeabi_dsub+0x282>
 8001ce4:	181c      	adds	r4, r3, r0
 8001ce6:	4284      	cmp	r4, r0
 8001ce8:	4180      	sbcs	r0, r0
 8001cea:	444f      	add	r7, r9
 8001cec:	46ba      	mov	sl, r7
 8001cee:	4240      	negs	r0, r0
 8001cf0:	4482      	add	sl, r0
 8001cf2:	e6d9      	b.n	8001aa8 <__aeabi_dsub+0x494>
 8001cf4:	4653      	mov	r3, sl
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x6e8>
 8001cfa:	e6cb      	b.n	8001a94 <__aeabi_dsub+0x480>
 8001cfc:	e614      	b.n	8001928 <__aeabi_dsub+0x314>
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	000007ff 	.word	0x000007ff
 8001d04:	ff7fffff 	.word	0xff7fffff
 8001d08:	000007fe 	.word	0x000007fe
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4a01      	ldr	r2, [pc, #4]	; (8001d14 <__aeabi_dsub+0x700>)
 8001d10:	001c      	movs	r4, r3
 8001d12:	e529      	b.n	8001768 <__aeabi_dsub+0x154>
 8001d14:	000007ff 	.word	0x000007ff

08001d18 <__aeabi_d2iz>:
 8001d18:	000a      	movs	r2, r1
 8001d1a:	b530      	push	{r4, r5, lr}
 8001d1c:	4c13      	ldr	r4, [pc, #76]	; (8001d6c <__aeabi_d2iz+0x54>)
 8001d1e:	0053      	lsls	r3, r2, #1
 8001d20:	0309      	lsls	r1, r1, #12
 8001d22:	0005      	movs	r5, r0
 8001d24:	0b09      	lsrs	r1, r1, #12
 8001d26:	2000      	movs	r0, #0
 8001d28:	0d5b      	lsrs	r3, r3, #21
 8001d2a:	0fd2      	lsrs	r2, r2, #31
 8001d2c:	42a3      	cmp	r3, r4
 8001d2e:	dd04      	ble.n	8001d3a <__aeabi_d2iz+0x22>
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <__aeabi_d2iz+0x58>)
 8001d32:	4283      	cmp	r3, r0
 8001d34:	dd02      	ble.n	8001d3c <__aeabi_d2iz+0x24>
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <__aeabi_d2iz+0x5c>)
 8001d38:	18d0      	adds	r0, r2, r3
 8001d3a:	bd30      	pop	{r4, r5, pc}
 8001d3c:	2080      	movs	r0, #128	; 0x80
 8001d3e:	0340      	lsls	r0, r0, #13
 8001d40:	4301      	orrs	r1, r0
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <__aeabi_d2iz+0x60>)
 8001d44:	1ac0      	subs	r0, r0, r3
 8001d46:	281f      	cmp	r0, #31
 8001d48:	dd08      	ble.n	8001d5c <__aeabi_d2iz+0x44>
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <__aeabi_d2iz+0x64>)
 8001d4c:	1ac3      	subs	r3, r0, r3
 8001d4e:	40d9      	lsrs	r1, r3
 8001d50:	000b      	movs	r3, r1
 8001d52:	4258      	negs	r0, r3
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d1f0      	bne.n	8001d3a <__aeabi_d2iz+0x22>
 8001d58:	0018      	movs	r0, r3
 8001d5a:	e7ee      	b.n	8001d3a <__aeabi_d2iz+0x22>
 8001d5c:	4c08      	ldr	r4, [pc, #32]	; (8001d80 <__aeabi_d2iz+0x68>)
 8001d5e:	40c5      	lsrs	r5, r0
 8001d60:	46a4      	mov	ip, r4
 8001d62:	4463      	add	r3, ip
 8001d64:	4099      	lsls	r1, r3
 8001d66:	000b      	movs	r3, r1
 8001d68:	432b      	orrs	r3, r5
 8001d6a:	e7f2      	b.n	8001d52 <__aeabi_d2iz+0x3a>
 8001d6c:	000003fe 	.word	0x000003fe
 8001d70:	0000041d 	.word	0x0000041d
 8001d74:	7fffffff 	.word	0x7fffffff
 8001d78:	00000433 	.word	0x00000433
 8001d7c:	00000413 	.word	0x00000413
 8001d80:	fffffbed 	.word	0xfffffbed

08001d84 <__aeabi_i2d>:
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d016      	beq.n	8001db8 <__aeabi_i2d+0x34>
 8001d8a:	17c3      	asrs	r3, r0, #31
 8001d8c:	18c5      	adds	r5, r0, r3
 8001d8e:	405d      	eors	r5, r3
 8001d90:	0fc4      	lsrs	r4, r0, #31
 8001d92:	0028      	movs	r0, r5
 8001d94:	f000 f826 	bl	8001de4 <__clzsi2>
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <__aeabi_i2d+0x5c>)
 8001d9a:	1a1b      	subs	r3, r3, r0
 8001d9c:	280a      	cmp	r0, #10
 8001d9e:	dc16      	bgt.n	8001dce <__aeabi_i2d+0x4a>
 8001da0:	0002      	movs	r2, r0
 8001da2:	002e      	movs	r6, r5
 8001da4:	3215      	adds	r2, #21
 8001da6:	4096      	lsls	r6, r2
 8001da8:	220b      	movs	r2, #11
 8001daa:	1a12      	subs	r2, r2, r0
 8001dac:	40d5      	lsrs	r5, r2
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	032d      	lsls	r5, r5, #12
 8001db2:	0b2d      	lsrs	r5, r5, #12
 8001db4:	0d5b      	lsrs	r3, r3, #21
 8001db6:	e003      	b.n	8001dc0 <__aeabi_i2d+0x3c>
 8001db8:	2400      	movs	r4, #0
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	051b      	lsls	r3, r3, #20
 8001dc2:	432b      	orrs	r3, r5
 8001dc4:	07e4      	lsls	r4, r4, #31
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	0030      	movs	r0, r6
 8001dca:	0019      	movs	r1, r3
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
 8001dce:	380b      	subs	r0, #11
 8001dd0:	4085      	lsls	r5, r0
 8001dd2:	055b      	lsls	r3, r3, #21
 8001dd4:	032d      	lsls	r5, r5, #12
 8001dd6:	2600      	movs	r6, #0
 8001dd8:	0b2d      	lsrs	r5, r5, #12
 8001dda:	0d5b      	lsrs	r3, r3, #21
 8001ddc:	e7f0      	b.n	8001dc0 <__aeabi_i2d+0x3c>
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	0000041e 	.word	0x0000041e

08001de4 <__clzsi2>:
 8001de4:	211c      	movs	r1, #28
 8001de6:	2301      	movs	r3, #1
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	4298      	cmp	r0, r3
 8001dec:	d301      	bcc.n	8001df2 <__clzsi2+0xe>
 8001dee:	0c00      	lsrs	r0, r0, #16
 8001df0:	3910      	subs	r1, #16
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	4298      	cmp	r0, r3
 8001df6:	d301      	bcc.n	8001dfc <__clzsi2+0x18>
 8001df8:	0a00      	lsrs	r0, r0, #8
 8001dfa:	3908      	subs	r1, #8
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	4298      	cmp	r0, r3
 8001e00:	d301      	bcc.n	8001e06 <__clzsi2+0x22>
 8001e02:	0900      	lsrs	r0, r0, #4
 8001e04:	3904      	subs	r1, #4
 8001e06:	a202      	add	r2, pc, #8	; (adr r2, 8001e10 <__clzsi2+0x2c>)
 8001e08:	5c10      	ldrb	r0, [r2, r0]
 8001e0a:	1840      	adds	r0, r0, r1
 8001e0c:	4770      	bx	lr
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	02020304 	.word	0x02020304
 8001e14:	01010101 	.word	0x01010101
	...

08001e20 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 31 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e01a      	b.n	8001e64 <GetPage+0x44>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <GetPage+0x54>)
 8001e32:	4694      	mov	ip, r2
 8001e34:	4463      	add	r3, ip
 8001e36:	02db      	lsls	r3, r3, #11
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d20f      	bcs.n	8001e5e <GetPage+0x3e>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	0252      	lsls	r2, r2, #9
 8001e44:	4694      	mov	ip, r2
 8001e46:	4463      	add	r3, ip
 8001e48:	02db      	lsls	r3, r3, #11
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d306      	bcc.n	8001e5e <GetPage+0x3e>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0252      	lsls	r2, r2, #9
 8001e56:	4694      	mov	ip, r2
 8001e58:	4463      	add	r3, ip
 8001e5a:	02db      	lsls	r3, r3, #11
 8001e5c:	e006      	b.n	8001e6c <GetPage+0x4c>
  for (int indx=0; indx<128; indx++)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b7f      	cmp	r3, #127	; 0x7f
 8001e68:	dde1      	ble.n	8001e2e <GetPage+0xe>
	  }
  }

  return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b004      	add	sp, #16
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	00010001 	.word	0x00010001

08001e78 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	1dbb      	adds	r3, r7, #6
 8001e84:	801a      	strh	r2, [r3, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8001e8a:	f002 f809 	bl	8003ea0 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ffc5 	bl	8001e20 <GetPage>
 8001e96:	0003      	movs	r3, r0
 8001e98:	623b      	str	r3, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	189b      	adds	r3, r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7ff ffb8 	bl	8001e20 <GetPage>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	61bb      	str	r3, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001eb4:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <Flash_Write_Data+0xc0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <Flash_Write_Data+0xc0>)
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	0adb      	lsrs	r3, r3, #11
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <Flash_Write_Data+0xc0>)
 8001ecc:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001ece:	2314      	movs	r3, #20
 8001ed0:	18fa      	adds	r2, r7, r3
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <Flash_Write_Data+0xc0>)
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f002 f8ac 	bl	8004034 <HAL_FLASHEx_Erase>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d01e      	beq.n	8001f1e <Flash_Write_Data+0xa6>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8001ee0:	f002 f812 	bl	8003f08 <HAL_FLASH_GetError>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	e022      	b.n	8001f2e <Flash_Write_Data+0xb6>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	18d3      	adds	r3, r2, r3
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	001c      	movs	r4, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	001d      	movs	r5, r3
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	0022      	movs	r2, r4
 8001efc:	002b      	movs	r3, r5
 8001efe:	2002      	movs	r0, #2
 8001f00:	f001 ff38 	bl	8003d74 <HAL_FLASH_Program>
 8001f04:	1e03      	subs	r3, r0, #0
 8001f06:	d106      	bne.n	8001f16 <Flash_Write_Data+0x9e>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3301      	adds	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	e003      	b.n	8001f1e <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001f16:	f001 fff7 	bl	8003f08 <HAL_FLASH_GetError>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	e007      	b.n	8001f2e <Flash_Write_Data+0xb6>
	   while (sofar<numberofwords)
 8001f1e:	1dbb      	adds	r3, r7, #6
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbdf      	blt.n	8001ee8 <Flash_Write_Data+0x70>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8001f28:	f001 ffe0 	bl	8003eec <HAL_FLASH_Lock>

	   return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b00a      	add	sp, #40	; 0x28
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000084 	.word	0x20000084

08001f3c <HAL_GPIO_EXTI_Callback>:
#include "main.h"
#include "InterruptHandlers.h"

extern osThreadId_t ADCTaskHandle;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	0002      	movs	r2, r0
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == ADC_INT_Pin) {
 8001f48:	1dbb      	adds	r3, r7, #6
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d109      	bne.n	8001f64 <HAL_GPIO_EXTI_Callback+0x28>
		if (ADCTaskHandle != 0) {
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x30>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_GPIO_EXTI_Callback+0x28>
			vTaskNotifyGiveFromISR(ADCTaskHandle, NULL);
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x30>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f00a f990 	bl	800c284 <vTaskNotifyGiveFromISR>
		}
	}
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200000e8 	.word	0x200000e8

08001f70 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
	uint32_t PRESCALER = 8;		// 500 kbps
 8001f76:	2308      	movs	r3, #8
 8001f78:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(CAN250_GPIO_Port, ADDR1_Pin)) {
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <MX_CAN_Init+0x80>)
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f002 fa7c 	bl	800447c <HAL_GPIO_ReadPin>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d001      	beq.n	8001f8c <MX_CAN_Init+0x1c>
		PRESCALER = 16;		// 250kbps
 8001f88:	2310      	movs	r3, #16
 8001f8a:	607b      	str	r3, [r7, #4]
	}
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <MX_CAN_Init+0x88>)
 8001f90:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = PRESCALER;
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fa6:	22c0      	movs	r2, #192	; 0xc0
 8001fa8:	0292      	lsls	r2, r2, #10
 8001faa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fae:	22c0      	movs	r2, #192	; 0xc0
 8001fb0:	03d2      	lsls	r2, r2, #15
 8001fb2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_CAN_Init+0x84>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f001 f826 	bl	800302c <HAL_CAN_Init>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_CAN_Init+0x78>
  {
    Error_Handler();
 8001fe4:	f000 fd76 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	48000400 	.word	0x48000400
 8001ff4:	20000090 	.word	0x20000090
 8001ff8:	40006400 	.word	0x40006400

08001ffc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b08b      	sub	sp, #44	; 0x2c
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	2414      	movs	r4, #20
 8002006:	193b      	adds	r3, r7, r4
 8002008:	0018      	movs	r0, r3
 800200a:	2314      	movs	r3, #20
 800200c:	001a      	movs	r2, r3
 800200e:	2100      	movs	r1, #0
 8002010:	f00b f8f8 	bl	800d204 <memset>
  if(canHandle->Instance==CAN)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_CAN_MspInit+0xa0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d13a      	bne.n	8002094 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_CAN_MspInit+0xa4>)
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_CAN_MspInit+0xa4>)
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0489      	lsls	r1, r1, #18
 8002028:	430a      	orrs	r2, r1
 800202a:	61da      	str	r2, [r3, #28]
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_CAN_MspInit+0xa4>)
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	049b      	lsls	r3, r3, #18
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_CAN_MspInit+0xa4>)
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_CAN_MspInit+0xa4>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	02c9      	lsls	r1, r1, #11
 8002044:	430a      	orrs	r2, r1
 8002046:	615a      	str	r2, [r3, #20]
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_CAN_MspInit+0xa4>)
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	02db      	lsls	r3, r3, #11
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002056:	193b      	adds	r3, r7, r4
 8002058:	22c0      	movs	r2, #192	; 0xc0
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	0021      	movs	r1, r4
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2202      	movs	r2, #2
 8002064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	2203      	movs	r2, #3
 8002070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2204      	movs	r2, #4
 8002076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	187b      	adds	r3, r7, r1
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_CAN_MspInit+0xa8>)
 800207c:	0019      	movs	r1, r3
 800207e:	0010      	movs	r0, r2
 8002080:	f002 f884 	bl	800418c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 3, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2103      	movs	r1, #3
 8002088:	201e      	movs	r0, #30
 800208a:	f001 fdc3 	bl	8003c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800208e:	201e      	movs	r0, #30
 8002090:	f001 fdd5 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b00b      	add	sp, #44	; 0x2c
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	40006400 	.word	0x40006400
 80020a0:	40021000 	.word	0x40021000
 80020a4:	48000400 	.word	0x48000400

080020a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t               RxData[8];

extern osMessageQueueId_t RelayOuputQueueHandle;

// Receiving CAN frames
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	2100      	movs	r1, #0
 80020b8:	f001 f9c0 	bl	800343c <HAL_CAN_GetRxMessage>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d002      	beq.n	80020c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		/* Reception Error */
		Error_Handler();
 80020c0:	f000 fd08 	bl	8002ad4 <Error_Handler>
		return;
 80020c4:	46c0      	nop			; (mov r8, r8)
	}
	// TODO - Handle incoming CAN frames
}
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200000d4 	.word	0x200000d4
 80020d0:	200000b8 	.word	0x200000b8

080020d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	ModbusH.uModbusType = MB_SLAVE;
 80020da:	4b4c      	ldr	r3, [pc, #304]	; (800220c <MX_FREERTOS_Init+0x138>)
 80020dc:	2203      	movs	r2, #3
 80020de:	701a      	strb	r2, [r3, #0]
	ModbusH.port =  &huart1;
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <MX_FREERTOS_Init+0x138>)
 80020e2:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <MX_FREERTOS_Init+0x13c>)
 80020e4:	605a      	str	r2, [r3, #4]

	// Links 0..2 set the low byte of the Modbus address so it ranges from 0x10 to 0x17
	int ModbusAddressOffset = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(ADDR0_GPIO_Port, ADDR0_Pin)) {
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <MX_FREERTOS_Init+0x140>)
 80020ec:	2104      	movs	r1, #4
 80020ee:	0018      	movs	r0, r3
 80020f0:	f002 f9c4 	bl	800447c <HAL_GPIO_ReadPin>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d00a      	beq.n	800210e <MX_FREERTOS_Init+0x3a>
		ModbusAddressOffset |= 1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4313      	orrs	r3, r2
 80020fe:	607b      	str	r3, [r7, #4]
		CANBaseAddress |= 0x04;
 8002100:	4b45      	ldr	r3, [pc, #276]	; (8002218 <MX_FREERTOS_Init+0x144>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	2204      	movs	r2, #4
 8002106:	4313      	orrs	r3, r2
 8002108:	b29a      	uxth	r2, r3
 800210a:	4b43      	ldr	r3, [pc, #268]	; (8002218 <MX_FREERTOS_Init+0x144>)
 800210c:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(ADDR1_GPIO_Port, ADDR1_Pin)) {
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <MX_FREERTOS_Init+0x140>)
 8002110:	2108      	movs	r1, #8
 8002112:	0018      	movs	r0, r3
 8002114:	f002 f9b2 	bl	800447c <HAL_GPIO_ReadPin>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d00a      	beq.n	8002132 <MX_FREERTOS_Init+0x5e>
		ModbusAddressOffset |= 2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	4313      	orrs	r3, r2
 8002122:	607b      	str	r3, [r7, #4]
		CANBaseAddress |= 0x08;
 8002124:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <MX_FREERTOS_Init+0x144>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2208      	movs	r2, #8
 800212a:	4313      	orrs	r3, r2
 800212c:	b29a      	uxth	r2, r3
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <MX_FREERTOS_Init+0x144>)
 8002130:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(ADDR2_GPIO_Port, ADDR2_Pin)) {
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <MX_FREERTOS_Init+0x140>)
 8002134:	2110      	movs	r1, #16
 8002136:	0018      	movs	r0, r3
 8002138:	f002 f9a0 	bl	800447c <HAL_GPIO_ReadPin>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d00a      	beq.n	8002156 <MX_FREERTOS_Init+0x82>
		ModbusAddressOffset |= 4;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	4313      	orrs	r3, r2
 8002146:	607b      	str	r3, [r7, #4]
		CANBaseAddress |= 0x10;
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <MX_FREERTOS_Init+0x144>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	2210      	movs	r2, #16
 800214e:	4313      	orrs	r3, r2
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <MX_FREERTOS_Init+0x144>)
 8002154:	801a      	strh	r2, [r3, #0]
	}
	ModbusH.u8id = ModbusSlaveID + ModbusAddressOffset;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	330a      	adds	r3, #10
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <MX_FREERTOS_Init+0x138>)
 8002160:	721a      	strb	r2, [r3, #8]
	ModbusH.u16timeOut = ModbusTimeoutMs;			// Modbus timeout in Milliseconds
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <MX_FREERTOS_Init+0x138>)
 8002164:	22a2      	movs	r2, #162	; 0xa2
 8002166:	2164      	movs	r1, #100	; 0x64
 8002168:	5299      	strh	r1, [r3, r2]

	//  ModbusH.EN_Port = NULL;
	// Port for the TXEN line to enable the RS485 driver
	ModbusH.EN_Port = RS485_TXEN_GPIO_Port;
 800216a:	4b28      	ldr	r3, [pc, #160]	; (800220c <MX_FREERTOS_Init+0x138>)
 800216c:	2290      	movs	r2, #144	; 0x90
 800216e:	05d2      	lsls	r2, r2, #23
 8002170:	60da      	str	r2, [r3, #12]
	ModbusH.EN_Pin = RS485_TXEN_Pin;
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <MX_FREERTOS_Init+0x138>)
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	0052      	lsls	r2, r2, #1
 8002178:	821a      	strh	r2, [r3, #16]

	ModbusH.u16regs = ModbusDATA;
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <MX_FREERTOS_Init+0x138>)
 800217c:	2198      	movs	r1, #152	; 0x98
 800217e:	4a27      	ldr	r2, [pc, #156]	; (800221c <MX_FREERTOS_Init+0x148>)
 8002180:	505a      	str	r2, [r3, r1]
	ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <MX_FREERTOS_Init+0x138>)
 8002184:	22a4      	movs	r2, #164	; 0xa4
 8002186:	2126      	movs	r1, #38	; 0x26
 8002188:	5299      	strh	r1, [r3, r2]
	ModbusH.xTypeHW = USART_HW;
 800218a:	4a20      	ldr	r2, [pc, #128]	; (800220c <MX_FREERTOS_Init+0x138>)
 800218c:	23a0      	movs	r3, #160	; 0xa0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2101      	movs	r1, #1
 8002192:	54d1      	strb	r1, [r2, r3]
	//Initialize Modbus library
	ModbusInit(&ModbusH);
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <MX_FREERTOS_Init+0x138>)
 8002196:	0018      	movs	r0, r3
 8002198:	f005 fc6e 	bl	8007a78 <ModbusInit>

	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH);
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_FREERTOS_Init+0x138>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f005 fd14 	bl	8007bcc <ModbusStart>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of GreenLedOffTimer */
  GreenLedOffTimerHandle = osTimerNew(TurnOffGreenLED, osTimerOnce, NULL, &GreenLedOffTimer_attributes);
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_FREERTOS_Init+0x14c>)
 80021a6:	481f      	ldr	r0, [pc, #124]	; (8002224 <MX_FREERTOS_Init+0x150>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	f007 ff7a 	bl	800a0a4 <osTimerNew>
 80021b0:	0002      	movs	r2, r0
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <MX_FREERTOS_Init+0x154>)
 80021b4:	601a      	str	r2, [r3, #0]

  /* creation of RedLedOffTimer */
  RedLedOffTimerHandle = osTimerNew(TurnOffRedLED, osTimerOnce, NULL, &RedLedOffTimer_attributes);
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <MX_FREERTOS_Init+0x158>)
 80021b8:	481d      	ldr	r0, [pc, #116]	; (8002230 <MX_FREERTOS_Init+0x15c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	f007 ff71 	bl	800a0a4 <osTimerNew>
 80021c2:	0002      	movs	r2, r0
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <MX_FREERTOS_Init+0x160>)
 80021c6:	601a      	str	r2, [r3, #0]

  /* creation of sendCANDataTimer */
  sendCANDataTimerHandle = osTimerNew(sendCANData, osTimerPeriodic, NULL, &sendCANDataTimer_attributes);
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <MX_FREERTOS_Init+0x164>)
 80021ca:	481c      	ldr	r0, [pc, #112]	; (800223c <MX_FREERTOS_Init+0x168>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	2101      	movs	r1, #1
 80021d0:	f007 ff68 	bl	800a0a4 <osTimerNew>
 80021d4:	0002      	movs	r2, r0
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <MX_FREERTOS_Init+0x16c>)
 80021d8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	xTimerStart(sendCANDataTimerHandle, 10);
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_FREERTOS_Init+0x16c>)
 80021dc:	681c      	ldr	r4, [r3, #0]
 80021de:	f009 fa4d 	bl	800b67c <xTaskGetTickCount>
 80021e2:	0002      	movs	r2, r0
 80021e4:	230a      	movs	r3, #10
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2300      	movs	r3, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	0020      	movs	r0, r4
 80021ee:	f00a f9cd 	bl	800c58c <xTimerGenericCommand>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 80021f2:	4a14      	ldr	r2, [pc, #80]	; (8002244 <MX_FREERTOS_Init+0x170>)
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <MX_FREERTOS_Init+0x174>)
 80021f6:	2100      	movs	r1, #0
 80021f8:	0018      	movs	r0, r3
 80021fa:	f007 fe93 	bl	8009f24 <osThreadNew>
 80021fe:	0002      	movs	r2, r0
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_FREERTOS_Init+0x178>)
 8002202:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b003      	add	sp, #12
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	20000450 	.word	0x20000450
 8002210:	20000644 	.word	0x20000644
 8002214:	48000400 	.word	0x48000400
 8002218:	20000000 	.word	0x20000000
 800221c:	20000594 	.word	0x20000594
 8002220:	0800d518 	.word	0x0800d518
 8002224:	080026bd 	.word	0x080026bd
 8002228:	200000ec 	.word	0x200000ec
 800222c:	0800d528 	.word	0x0800d528
 8002230:	080026dd 	.word	0x080026dd
 8002234:	200000f0 	.word	0x200000f0
 8002238:	0800d538 	.word	0x0800d538
 800223c:	080026fd 	.word	0x080026fd
 8002240:	200000f4 	.word	0x200000f4
 8002244:	0800d4f4 	.word	0x0800d4f4
 8002248:	08002509 	.word	0x08002509
 800224c:	200000e8 	.word	0x200000e8

08002250 <ResetBuffer>:
} adcBuffer;

/**
 * Clears the ADC buffer
 */
void ResetBuffer() {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
	for (int i = 0; i < BufferSize; i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	e019      	b.n	8002290 <ResetBuffer+0x40>
		adcBuffer.voltage.data[i] = 0;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <ResetBuffer+0x50>)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	2100      	movs	r1, #0
 8002264:	50d1      	str	r1, [r2, r3]
		adcBuffer.voltage.dataPtr = 0;
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <ResetBuffer+0x50>)
 8002268:	23c8      	movs	r3, #200	; 0xc8
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2100      	movs	r1, #0
 800226e:	50d1      	str	r1, [r2, r3]
		adcBuffer.current.data[i] = 0;
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <ResetBuffer+0x50>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3364      	adds	r3, #100	; 0x64
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	18d3      	adds	r3, r2, r3
 800227a:	3304      	adds	r3, #4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
		adcBuffer.current.dataPtr = 0;
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <ResetBuffer+0x50>)
 8002282:	23c9      	movs	r3, #201	; 0xc9
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	2100      	movs	r1, #0
 8002288:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < BufferSize; i++) {
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b63      	cmp	r3, #99	; 0x63
 8002294:	dde2      	ble.n	800225c <ResetBuffer+0xc>
	}
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200000f8 	.word	0x200000f8

080022a4 <CalculateAverageVoltage>:

/**
 * Calculate average voltage
 */
int32_t CalculateAverageVoltage() {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	int32_t voltage = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	e009      	b.n	80022c8 <CalculateAverageVoltage+0x24>
		voltage += adcBuffer.voltage.data[i];
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <CalculateAverageVoltage+0x40>)
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	58d3      	ldr	r3, [r2, r3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	18d3      	adds	r3, r2, r3
 80022c0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b63      	cmp	r3, #99	; 0x63
 80022cc:	ddf2      	ble.n	80022b4 <CalculateAverageVoltage+0x10>
	}
	return voltage / BufferSize;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2164      	movs	r1, #100	; 0x64
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fd ffa2 	bl	800021c <__divsi3>
 80022d8:	0003      	movs	r3, r0
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	200000f8 	.word	0x200000f8

080022e8 <CalculateActualVoltage>:

/**
 * Applies the calibration values to calculate the actual voltage
 */
int16_t  CalculateActualVoltage(double rawVoltage) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6038      	str	r0, [r7, #0]
 80022f0:	6079      	str	r1, [r7, #4]
	double m;
	double c;
	double v;
	GetVoltageCalibration(&m, &c);
 80022f2:	2308      	movs	r3, #8
 80022f4:	18fa      	adds	r2, r7, r3
 80022f6:	2310      	movs	r3, #16
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f007 fbc1 	bl	8009a84 <GetVoltageCalibration>
	v = (m * rawVoltage) + c;
 8002302:	6938      	ldr	r0, [r7, #16]
 8002304:	6979      	ldr	r1, [r7, #20]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f7fe fec1 	bl	8001090 <__aeabi_dmul>
 800230e:	0002      	movs	r2, r0
 8002310:	000b      	movs	r3, r1
 8002312:	0010      	movs	r0, r2
 8002314:	0019      	movs	r1, r3
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f7fe f86b 	bl	80003f4 <__aeabi_dadd>
 800231e:	0002      	movs	r2, r0
 8002320:	000b      	movs	r3, r1
 8002322:	61ba      	str	r2, [r7, #24]
 8002324:	61fb      	str	r3, [r7, #28]
	return (int16_t)v;
 8002326:	69b8      	ldr	r0, [r7, #24]
 8002328:	69f9      	ldr	r1, [r7, #28]
 800232a:	f7ff fcf5 	bl	8001d18 <__aeabi_d2iz>
 800232e:	0003      	movs	r3, r0
 8002330:	b21b      	sxth	r3, r3
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b008      	add	sp, #32
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <CalculateAverageCurrent>:

/**
 * Calculate average current
 */
int32_t CalculateAverageCurrent() {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
	int32_t current = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	e00e      	b.n	800236a <CalculateAverageCurrent+0x2e>
		current += adcBuffer.current.data[i] * 100;
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <CalculateAverageCurrent+0x48>)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	3364      	adds	r3, #100	; 0x64
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	18d3      	adds	r3, r2, r3
 8002356:	3304      	adds	r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2264      	movs	r2, #100	; 0x64
 800235c:	4353      	muls	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	18d3      	adds	r3, r2, r3
 8002362:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b63      	cmp	r3, #99	; 0x63
 800236e:	dded      	ble.n	800234c <CalculateAverageCurrent+0x10>
	}
	return current  / BufferSize;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2164      	movs	r1, #100	; 0x64
 8002374:	0018      	movs	r0, r3
 8002376:	f7fd ff51 	bl	800021c <__divsi3>
 800237a:	0003      	movs	r3, r0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200000f8 	.word	0x200000f8

08002388 <CalculateActualCurrent>:

/**
 * Applies the calibration values to calculate the actual current
 */
int32_t CalculateActualCurrent(double rawCurrent) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6038      	str	r0, [r7, #0]
 8002390:	6079      	str	r1, [r7, #4]
	double m;
	double c;
	double i;
	GetCurrentCalibration(&m, &c);
 8002392:	2308      	movs	r3, #8
 8002394:	18fa      	adds	r2, r7, r3
 8002396:	2310      	movs	r3, #16
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f007 fbd1 	bl	8009b44 <GetCurrentCalibration>
	i = (m * rawCurrent) + c;
 80023a2:	6938      	ldr	r0, [r7, #16]
 80023a4:	6979      	ldr	r1, [r7, #20]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f7fe fe71 	bl	8001090 <__aeabi_dmul>
 80023ae:	0002      	movs	r2, r0
 80023b0:	000b      	movs	r3, r1
 80023b2:	0010      	movs	r0, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f7fe f81b 	bl	80003f4 <__aeabi_dadd>
 80023be:	0002      	movs	r2, r0
 80023c0:	000b      	movs	r3, r1
 80023c2:	61ba      	str	r2, [r7, #24]
 80023c4:	61fb      	str	r3, [r7, #28]
	return (int32_t)i;
 80023c6:	69b8      	ldr	r0, [r7, #24]
 80023c8:	69f9      	ldr	r1, [r7, #28]
 80023ca:	f7ff fca5 	bl	8001d18 <__aeabi_d2iz>
 80023ce:	0003      	movs	r3, r0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b008      	add	sp, #32
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <SendBufferOverCAN>:

uint8_t CANBuffer[8];	// Define an 8 byte buffer for information sent on the CAN bus
CAN_TxHeaderTypeDef msg;

void SendBufferOverCAN(int16_t messageID) {
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	0002      	movs	r2, r0
 80023e0:	1dbb      	adds	r3, r7, #6
 80023e2:	801a      	strh	r2, [r3, #0]
	uint32_t mb;	// TxMailbox returned by the HAL driver

	msg.DLC = 8;	// 8 bytes of data
 80023e4:	4b21      	ldr	r3, [pc, #132]	; (800246c <SendBufferOverCAN+0x94>)
 80023e6:	2208      	movs	r2, #8
 80023e8:	611a      	str	r2, [r3, #16]
	msg.ExtId = 0;
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <SendBufferOverCAN+0x94>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
	msg.StdId = CANBaseAddress + messageID;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <SendBufferOverCAN+0x98>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	001a      	movs	r2, r3
 80023f6:	1dbb      	adds	r3, r7, #6
 80023f8:	2100      	movs	r1, #0
 80023fa:	5e5b      	ldrsh	r3, [r3, r1]
 80023fc:	18d3      	adds	r3, r2, r3
 80023fe:	001a      	movs	r2, r3
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <SendBufferOverCAN+0x94>)
 8002402:	601a      	str	r2, [r3, #0]
	msg.IDE = CAN_ID_STD;
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <SendBufferOverCAN+0x94>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
	msg.RTR = CAN_RTR_DATA;
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <SendBufferOverCAN+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
	msg.TransmitGlobalTime = DISABLE;
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <SendBufferOverCAN+0x94>)
 8002412:	2200      	movs	r2, #0
 8002414:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <SendBufferOverCAN+0x9c>)
 8002418:	0018      	movs	r0, r3
 800241a:	f000 ffd7 	bl	80033cc <HAL_CAN_GetTxMailboxesFreeLevel>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d020      	beq.n	8002464 <SendBufferOverCAN+0x8c>

		HAL_StatusTypeDef st = HAL_CAN_AddTxMessage(&hcan, &msg, CANBuffer, &mb);
 8002422:	250f      	movs	r5, #15
 8002424:	197c      	adds	r4, r7, r5
 8002426:	2308      	movs	r3, #8
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <SendBufferOverCAN+0xa0>)
 800242c:	490f      	ldr	r1, [pc, #60]	; (800246c <SendBufferOverCAN+0x94>)
 800242e:	4811      	ldr	r0, [pc, #68]	; (8002474 <SendBufferOverCAN+0x9c>)
 8002430:	f000 fefa 	bl	8003228 <HAL_CAN_AddTxMessage>
 8002434:	0003      	movs	r3, r0
 8002436:	7023      	strb	r3, [r4, #0]
		if (st != HAL_OK) {
 8002438:	197b      	adds	r3, r7, r5
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d011      	beq.n	8002464 <SendBufferOverCAN+0x8c>
			// Turn on Red LED to indicate there is a problem
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <SendBufferOverCAN+0xa4>)
 8002442:	2201      	movs	r2, #1
 8002444:	2101      	movs	r1, #1
 8002446:	0018      	movs	r0, r3
 8002448:	f002 f835 	bl	80044b6 <HAL_GPIO_WritePin>
			xTimerStart(RedLedOffTimerHandle, 75);
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <SendBufferOverCAN+0xa8>)
 800244e:	681c      	ldr	r4, [r3, #0]
 8002450:	f009 f914 	bl	800b67c <xTaskGetTickCount>
 8002454:	0002      	movs	r2, r0
 8002456:	234b      	movs	r3, #75	; 0x4b
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2300      	movs	r3, #0
 800245c:	2101      	movs	r1, #1
 800245e:	0020      	movs	r0, r4
 8002460:	f00a f894 	bl	800c58c <xTimerGenericCommand>
//			case HAL_CAN_ERROR_PARAM : err =   "Parameter error ";
//			break;
//			}
		}
	}
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bdb0      	pop	{r4, r5, r7, pc}
 800246c:	20000428 	.word	0x20000428
 8002470:	20000000 	.word	0x20000000
 8002474:	20000090 	.word	0x20000090
 8002478:	20000420 	.word	0x20000420
 800247c:	48000400 	.word	0x48000400
 8002480:	200000f0 	.word	0x200000f0

08002484 <SendVoltageOverCAN>:

void SendVoltageOverCAN(int32_t raw, int16_t calculated) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	000a      	movs	r2, r1
 800248e:	1cbb      	adds	r3, r7, #2
 8002490:	801a      	strh	r2, [r3, #0]
	memset(CANBuffer, 0, sizeof(CANBuffer));
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <SendVoltageOverCAN+0x3c>)
 8002494:	2208      	movs	r2, #8
 8002496:	2100      	movs	r1, #0
 8002498:	0018      	movs	r0, r3
 800249a:	f00a feb3 	bl	800d204 <memset>
 800249e:	1cbb      	adds	r3, r7, #2
 80024a0:	881a      	ldrh	r2, [r3, #0]
	memcpy(CANBuffer, &calculated, 2);			// Calculated value goes in the first two bytes
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <SendVoltageOverCAN+0x3c>)
 80024a4:	801a      	strh	r2, [r3, #0]
	memcpy(CANBuffer + 4, &raw, 4);				// Raw value goes in byte 3 to 6
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <SendVoltageOverCAN+0x40>)
 80024a8:	1d39      	adds	r1, r7, #4
 80024aa:	2204      	movs	r2, #4
 80024ac:	0018      	movs	r0, r3
 80024ae:	f00a ff35 	bl	800d31c <memcpy>

	SendBufferOverCAN(0);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff ff90 	bl	80023d8 <SendBufferOverCAN>
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000420 	.word	0x20000420
 80024c4:	20000424 	.word	0x20000424

080024c8 <SendCurrentOverCAN>:

void SendCurrentOverCAN(int32_t raw, int32_t calculated) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	memset(CANBuffer, 0, sizeof(CANBuffer));
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <SendCurrentOverCAN+0x38>)
 80024d4:	2208      	movs	r2, #8
 80024d6:	2100      	movs	r1, #0
 80024d8:	0018      	movs	r0, r3
 80024da:	f00a fe93 	bl	800d204 <memset>
 80024de:	683a      	ldr	r2, [r7, #0]
	memcpy(CANBuffer, &calculated, 4);			// Calculated value goes in the first four bytes
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <SendCurrentOverCAN+0x38>)
 80024e2:	601a      	str	r2, [r3, #0]
	memcpy(CANBuffer + 4, &raw, 4);				// Raw value goes in byte 3 to 6
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <SendCurrentOverCAN+0x3c>)
 80024e6:	1d39      	adds	r1, r7, #4
 80024e8:	2204      	movs	r2, #4
 80024ea:	0018      	movs	r0, r3
 80024ec:	f00a ff16 	bl	800d31c <memcpy>

	SendBufferOverCAN(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7ff ff71 	bl	80023d8 <SendBufferOverCAN>
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	20000420 	.word	0x20000420
 8002504:	20000424 	.word	0x20000424

08002508 <StartADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADCTask */
	uint8_t status;
	int16_t	value16;
	int32_t	value32;
	uint8_t channel;
	ResetBuffer();
 8002510:	f7ff fe9e 	bl	8002250 <ResetBuffer>

  MCP3462_ADCInit();
 8002514:	f00a fdba 	bl	800d08c <MCP3462_ADCInit>
 // StartCANReception(hcan);

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(0, osWaitForever);
 8002518:	2301      	movs	r3, #1
 800251a:	425b      	negs	r3, r3
 800251c:	0019      	movs	r1, r3
 800251e:	2000      	movs	r0, #0
 8002520:	f009 fd26 	bl	800bf70 <ulTaskNotifyTake>

	  HAL_IWDG_Refresh(&hiwdg);
 8002524:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <StartADCTask+0x198>)
 8002526:	0018      	movs	r0, r3
 8002528:	f001 fffe 	bl	8004528 <HAL_IWDG_Refresh>

	  // Read the A-D converter
	  status = MCP3462_ADCRead(&value32, &channel);
 800252c:	2517      	movs	r5, #23
 800252e:	197c      	adds	r4, r7, r5
 8002530:	230f      	movs	r3, #15
 8002532:	18fa      	adds	r2, r7, r3
 8002534:	2310      	movs	r3, #16
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	0011      	movs	r1, r2
 800253a:	0018      	movs	r0, r3
 800253c:	f00a fe06 	bl	800d14c <MCP3462_ADCRead>
 8002540:	0003      	movs	r3, r0
 8002542:	7023      	strb	r3, [r4, #0]
	  if (((status & 0x18) == 0) || ((status & 0x18) == 0x18)) {
 8002544:	197b      	adds	r3, r7, r5
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2218      	movs	r2, #24
 800254a:	4013      	ands	r3, r2
 800254c:	d005      	beq.n	800255a <StartADCTask+0x52>
 800254e:	197b      	adds	r3, r7, r5
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2218      	movs	r2, #24
 8002554:	4013      	ands	r3, r2
 8002556:	2b18      	cmp	r3, #24
 8002558:	d103      	bne.n	8002562 <StartADCTask+0x5a>
		  // No device is answering us
		  status = 0b01000000;
 800255a:	2317      	movs	r3, #23
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	701a      	strb	r2, [r3, #0]
	  }

	  // If we have new data
	  if ((status & 0b01000000) == 0) {
 8002562:	2317      	movs	r3, #23
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2240      	movs	r2, #64	; 0x40
 800256a:	4013      	ands	r3, r2
 800256c:	d1d4      	bne.n	8002518 <StartADCTask+0x10>
		  if (channel == 0) {
 800256e:	230f      	movs	r3, #15
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d144      	bne.n	8002602 <StartADCTask+0xfa>
			  lastVoltage = value32;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <StartADCTask+0x19c>)
 800257c:	601a      	str	r2, [r3, #0]
			  newVoltage = true;
 800257e:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <StartADCTask+0x1a0>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
			  adcBuffer.voltage.data[adcBuffer.voltage.dataPtr++] = value32;
 8002584:	4a49      	ldr	r2, [pc, #292]	; (80026ac <StartADCTask+0x1a4>)
 8002586:	23c8      	movs	r3, #200	; 0xc8
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	58d3      	ldr	r3, [r2, r3]
 800258c:	1c58      	adds	r0, r3, #1
 800258e:	4947      	ldr	r1, [pc, #284]	; (80026ac <StartADCTask+0x1a4>)
 8002590:	22c8      	movs	r2, #200	; 0xc8
 8002592:	0052      	lsls	r2, r2, #1
 8002594:	5088      	str	r0, [r1, r2]
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	4a44      	ldr	r2, [pc, #272]	; (80026ac <StartADCTask+0x1a4>)
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	5099      	str	r1, [r3, r2]
			  if (adcBuffer.voltage.dataPtr >= BufferSize) {
 800259e:	4a43      	ldr	r2, [pc, #268]	; (80026ac <StartADCTask+0x1a4>)
 80025a0:	23c8      	movs	r3, #200	; 0xc8
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	58d3      	ldr	r3, [r2, r3]
 80025a6:	2b63      	cmp	r3, #99	; 0x63
 80025a8:	dd04      	ble.n	80025b4 <StartADCTask+0xac>
				  adcBuffer.voltage.dataPtr = 0;
 80025aa:	4a40      	ldr	r2, [pc, #256]	; (80026ac <StartADCTask+0x1a4>)
 80025ac:	23c8      	movs	r3, #200	; 0xc8
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2100      	movs	r1, #0
 80025b2:	50d1      	str	r1, [r2, r3]
			  }
			  value16 = CalculateActualVoltage((double)CalculateAverageVoltage());
 80025b4:	f7ff fe76 	bl	80022a4 <CalculateAverageVoltage>
 80025b8:	0003      	movs	r3, r0
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff fbe2 	bl	8001d84 <__aeabi_i2d>
 80025c0:	0002      	movs	r2, r0
 80025c2:	000b      	movs	r3, r1
 80025c4:	2514      	movs	r5, #20
 80025c6:	197c      	adds	r4, r7, r5
 80025c8:	0010      	movs	r0, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	f7ff fe8c 	bl	80022e8 <CalculateActualVoltage>
 80025d0:	0003      	movs	r3, r0
 80025d2:	8023      	strh	r3, [r4, #0]
			  // Put the average data in the modbus registers
			  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <StartADCTask+0x1a8>)
 80025d6:	22b8      	movs	r2, #184	; 0xb8
 80025d8:	589b      	ldr	r3, [r3, r2]
 80025da:	2164      	movs	r1, #100	; 0x64
 80025dc:	0018      	movs	r0, r3
 80025de:	f008 fb19 	bl	800ac14 <xQueueSemaphoreTake>
			  ModbusH.u16regs[InputRegistersStart + VoltageRegister] = (uint16_t)value16;
 80025e2:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <StartADCTask+0x1a8>)
 80025e4:	2298      	movs	r2, #152	; 0x98
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	3304      	adds	r3, #4
 80025ea:	197a      	adds	r2, r7, r5
 80025ec:	8812      	ldrh	r2, [r2, #0]
 80025ee:	801a      	strh	r2, [r3, #0]
			  xSemaphoreGive(ModbusH.ModBusSphrHandle);
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <StartADCTask+0x1a8>)
 80025f2:	22b8      	movs	r2, #184	; 0xb8
 80025f4:	5898      	ldr	r0, [r3, r2]
 80025f6:	2300      	movs	r3, #0
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	f008 f920 	bl	800a840 <xQueueGenericSend>
 8002600:	e78a      	b.n	8002518 <StartADCTask+0x10>
		  } else {
			  lastCurrent = value32;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <StartADCTask+0x1ac>)
 8002606:	601a      	str	r2, [r3, #0]
			  newCurrent = true;
 8002608:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <StartADCTask+0x1b0>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
			  adcBuffer.current.data[adcBuffer.current.dataPtr++] = value32;
 800260e:	4a27      	ldr	r2, [pc, #156]	; (80026ac <StartADCTask+0x1a4>)
 8002610:	23c9      	movs	r3, #201	; 0xc9
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	58d3      	ldr	r3, [r2, r3]
 8002616:	1c58      	adds	r0, r3, #1
 8002618:	4924      	ldr	r1, [pc, #144]	; (80026ac <StartADCTask+0x1a4>)
 800261a:	22c9      	movs	r2, #201	; 0xc9
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	5088      	str	r0, [r1, r2]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4922      	ldr	r1, [pc, #136]	; (80026ac <StartADCTask+0x1a4>)
 8002624:	3364      	adds	r3, #100	; 0x64
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	18cb      	adds	r3, r1, r3
 800262a:	3304      	adds	r3, #4
 800262c:	601a      	str	r2, [r3, #0]
			  if (adcBuffer.current.dataPtr >= BufferSize) {
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <StartADCTask+0x1a4>)
 8002630:	23c9      	movs	r3, #201	; 0xc9
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	58d3      	ldr	r3, [r2, r3]
 8002636:	2b63      	cmp	r3, #99	; 0x63
 8002638:	dd04      	ble.n	8002644 <StartADCTask+0x13c>
				  adcBuffer.current.dataPtr = 0;
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <StartADCTask+0x1a4>)
 800263c:	23c9      	movs	r3, #201	; 0xc9
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	2100      	movs	r1, #0
 8002642:	50d1      	str	r1, [r2, r3]
			  }
			  value32 = CalculateActualCurrent((double)CalculateAverageCurrent());
 8002644:	f7ff fe7a 	bl	800233c <CalculateAverageCurrent>
 8002648:	0003      	movs	r3, r0
 800264a:	0018      	movs	r0, r3
 800264c:	f7ff fb9a 	bl	8001d84 <__aeabi_i2d>
 8002650:	0002      	movs	r2, r0
 8002652:	000b      	movs	r3, r1
 8002654:	0010      	movs	r0, r2
 8002656:	0019      	movs	r1, r3
 8002658:	f7ff fe96 	bl	8002388 <CalculateActualCurrent>
 800265c:	0003      	movs	r3, r0
 800265e:	613b      	str	r3, [r7, #16]
			  // Put the average data in the modbus registers
			  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <StartADCTask+0x1a8>)
 8002662:	22b8      	movs	r2, #184	; 0xb8
 8002664:	589b      	ldr	r3, [r3, r2]
 8002666:	2164      	movs	r1, #100	; 0x64
 8002668:	0018      	movs	r0, r3
 800266a:	f008 fad3 	bl	800ac14 <xQueueSemaphoreTake>
			  ModbusH.u16regs[InputRegistersStart + CurrentLow] = (uint16_t)(value32 & 0xffff);
 800266e:	6939      	ldr	r1, [r7, #16]
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <StartADCTask+0x1a8>)
 8002672:	2298      	movs	r2, #152	; 0x98
 8002674:	589b      	ldr	r3, [r3, r2]
 8002676:	3306      	adds	r3, #6
 8002678:	b28a      	uxth	r2, r1
 800267a:	801a      	strh	r2, [r3, #0]
			  ModbusH.u16regs[InputRegistersStart + CurrentHigh] = (uint16_t)((value32 >> 16) & 0xffff);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1419      	asrs	r1, r3, #16
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <StartADCTask+0x1a8>)
 8002682:	2298      	movs	r2, #152	; 0x98
 8002684:	589b      	ldr	r3, [r3, r2]
 8002686:	3308      	adds	r3, #8
 8002688:	b28a      	uxth	r2, r1
 800268a:	801a      	strh	r2, [r3, #0]
			  xSemaphoreGive(ModbusH.ModBusSphrHandle);
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <StartADCTask+0x1a8>)
 800268e:	22b8      	movs	r2, #184	; 0xb8
 8002690:	5898      	ldr	r0, [r3, r2]
 8002692:	2300      	movs	r3, #0
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	f008 f8d2 	bl	800a840 <xQueueGenericSend>
	  ulTaskNotifyTake(0, osWaitForever);
 800269c:	e73c      	b.n	8002518 <StartADCTask+0x10>
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	20000440 	.word	0x20000440
 80026a4:	200000e0 	.word	0x200000e0
 80026a8:	200000e4 	.word	0x200000e4
 80026ac:	200000f8 	.word	0x200000f8
 80026b0:	20000450 	.word	0x20000450
 80026b4:	200000dc 	.word	0x200000dc
 80026b8:	200000e5 	.word	0x200000e5

080026bc <TurnOffGreenLED>:
  /* USER CODE END StartADCTask */
}

/* TurnOffGreenLED function */
void TurnOffGreenLED(void *argument)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TurnOffGreenLED */
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <TurnOffGreenLED+0x1c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	2102      	movs	r1, #2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f001 fef3 	bl	80044b6 <HAL_GPIO_WritePin>

  /* USER CODE END TurnOffGreenLED */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	48000400 	.word	0x48000400

080026dc <TurnOffRedLED>:

/* TurnOffRedLED function */
void TurnOffRedLED(void *argument)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TurnOffRedLED */
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <TurnOffRedLED+0x1c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	2101      	movs	r1, #1
 80026ea:	0018      	movs	r0, r3
 80026ec:	f001 fee3 	bl	80044b6 <HAL_GPIO_WritePin>

  /* USER CODE END TurnOffRedLED */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	48000400 	.word	0x48000400

080026fc <sendCANData>:

/* sendCANData function */
void sendCANData(void *argument)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendCANData */
	int32_t voltage;
	int32_t current;

	  voltage = lastVoltage;
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <sendCANData+0x78>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
	  current = lastCurrent;
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <sendCANData+0x7c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60bb      	str	r3, [r7, #8]
	  if (newVoltage ) {
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <sendCANData+0x80>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <sendCANData+0x42>
		  SendVoltageOverCAN(voltage, CalculateActualVoltage(voltage));
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff fb33 	bl	8001d84 <__aeabi_i2d>
 800271e:	0002      	movs	r2, r0
 8002720:	000b      	movs	r3, r1
 8002722:	0010      	movs	r0, r2
 8002724:	0019      	movs	r1, r3
 8002726:	f7ff fddf 	bl	80022e8 <CalculateActualVoltage>
 800272a:	0003      	movs	r3, r0
 800272c:	001a      	movs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f7ff fea6 	bl	8002484 <SendVoltageOverCAN>
		  newVoltage = false;
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <sendCANData+0x80>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
	  }
	  if (newCurrent) {
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <sendCANData+0x84>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d011      	beq.n	800276a <sendCANData+0x6e>
		  SendCurrentOverCAN(current, CalculateActualCurrent(current));
 8002746:	68b8      	ldr	r0, [r7, #8]
 8002748:	f7ff fb1c 	bl	8001d84 <__aeabi_i2d>
 800274c:	0002      	movs	r2, r0
 800274e:	000b      	movs	r3, r1
 8002750:	0010      	movs	r0, r2
 8002752:	0019      	movs	r1, r3
 8002754:	f7ff fe18 	bl	8002388 <CalculateActualCurrent>
 8002758:	0002      	movs	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff feb2 	bl	80024c8 <SendCurrentOverCAN>
		  newCurrent = false;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <sendCANData+0x84>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
	  }

  /* USER CODE END sendCANData */
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	200000e0 	.word	0x200000e0
 8002778:	200000dc 	.word	0x200000dc
 800277c:	200000e4 	.word	0x200000e4
 8002780:	200000e5 	.word	0x200000e5

08002784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08b      	sub	sp, #44	; 0x2c
 8002788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	2414      	movs	r4, #20
 800278c:	193b      	adds	r3, r7, r4
 800278e:	0018      	movs	r0, r3
 8002790:	2314      	movs	r3, #20
 8002792:	001a      	movs	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	f00a fd35 	bl	800d204 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <MX_GPIO_Init+0x18c>)
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	4b5c      	ldr	r3, [pc, #368]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0309      	lsls	r1, r1, #12
 80027a4:	430a      	orrs	r2, r1
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	031b      	lsls	r3, r3, #12
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027b6:	4b56      	ldr	r3, [pc, #344]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	4b55      	ldr	r3, [pc, #340]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	03c9      	lsls	r1, r1, #15
 80027c0:	430a      	orrs	r2, r1
 80027c2:	615a      	str	r2, [r3, #20]
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	03db      	lsls	r3, r3, #15
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0289      	lsls	r1, r1, #10
 80027dc:	430a      	orrs	r2, r1
 80027de:	615a      	str	r2, [r3, #20]
 80027e0:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	02c9      	lsls	r1, r1, #11
 80027f8:	430a      	orrs	r2, r1
 80027fa:	615a      	str	r2, [r3, #20]
 80027fc:	4b44      	ldr	r3, [pc, #272]	; (8002910 <MX_GPIO_Init+0x18c>)
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	02db      	lsls	r3, r3, #11
 8002804:	4013      	ands	r3, r2
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin|RS485_TXEN_Pin, GPIO_PIN_RESET);
 800280a:	2388      	movs	r3, #136	; 0x88
 800280c:	0059      	lsls	r1, r3, #1
 800280e:	2390      	movs	r3, #144	; 0x90
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	2200      	movs	r2, #0
 8002814:	0018      	movs	r0, r3
 8002816:	f001 fe4e 	bl	80044b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <MX_GPIO_Init+0x190>)
 800281c:	2200      	movs	r2, #0
 800281e:	2103      	movs	r1, #3
 8002820:	0018      	movs	r0, r3
 8002822:	f001 fe48 	bl	80044b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002826:	193b      	adds	r3, r7, r4
 8002828:	22e0      	movs	r2, #224	; 0xe0
 800282a:	0212      	lsls	r2, r2, #8
 800282c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002834:	193b      	adds	r3, r7, r4
 8002836:	2201      	movs	r2, #1
 8002838:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	193b      	adds	r3, r7, r4
 800283c:	4a36      	ldr	r2, [pc, #216]	; (8002918 <MX_GPIO_Init+0x194>)
 800283e:	0019      	movs	r1, r3
 8002840:	0010      	movs	r0, r2
 8002842:	f001 fca3 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8002846:	193b      	adds	r3, r7, r4
 8002848:	4a34      	ldr	r2, [pc, #208]	; (800291c <MX_GPIO_Init+0x198>)
 800284a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284c:	193b      	adds	r3, r7, r4
 800284e:	2200      	movs	r2, #0
 8002850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002852:	193b      	adds	r3, r7, r4
 8002854:	2201      	movs	r2, #1
 8002856:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	193a      	adds	r2, r7, r4
 800285a:	2390      	movs	r3, #144	; 0x90
 800285c:	05db      	lsls	r3, r3, #23
 800285e:	0011      	movs	r1, r2
 8002860:	0018      	movs	r0, r3
 8002862:	f001 fc93 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_INT_Pin;
 8002866:	193b      	adds	r3, r7, r4
 8002868:	2208      	movs	r2, #8
 800286a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800286c:	193b      	adds	r3, r7, r4
 800286e:	2284      	movs	r2, #132	; 0x84
 8002870:	0392      	lsls	r2, r2, #14
 8002872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002874:	193b      	adds	r3, r7, r4
 8002876:	2201      	movs	r2, #1
 8002878:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_INT_GPIO_Port, &GPIO_InitStruct);
 800287a:	193a      	adds	r2, r7, r4
 800287c:	2390      	movs	r3, #144	; 0x90
 800287e:	05db      	lsls	r3, r3, #23
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f001 fc82 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|RS485_TXEN_Pin;
 8002888:	0021      	movs	r1, r4
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2288      	movs	r2, #136	; 0x88
 800288e:	0052      	lsls	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	000c      	movs	r4, r1
 8002894:	193b      	adds	r3, r7, r4
 8002896:	2201      	movs	r2, #1
 8002898:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	193b      	adds	r3, r7, r4
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	193a      	adds	r2, r7, r4
 80028a8:	2390      	movs	r3, #144	; 0x90
 80028aa:	05db      	lsls	r3, r3, #23
 80028ac:	0011      	movs	r1, r2
 80028ae:	0018      	movs	r0, r3
 80028b0:	f001 fc6c 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2203      	movs	r2, #3
 80028b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2201      	movs	r2, #1
 80028be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	193b      	adds	r3, r7, r4
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	193b      	adds	r3, r7, r4
 80028ce:	4a11      	ldr	r2, [pc, #68]	; (8002914 <MX_GPIO_Init+0x190>)
 80028d0:	0019      	movs	r1, r3
 80028d2:	0010      	movs	r0, r2
 80028d4:	f001 fc5a 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB10 PB11 PB12
                           PB13 PB14 PB15 PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ADDR0_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80028d8:	0021      	movs	r1, r4
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	4a10      	ldr	r2, [pc, #64]	; (8002920 <MX_GPIO_Init+0x19c>)
 80028de:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|ADDR1_Pin
                          |ADDR2_Pin|LK3_Pin|CAN250_Pin|MODBUS9600_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	2201      	movs	r2, #1
 80028ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <MX_GPIO_Init+0x190>)
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f001 fc4a 	bl	800418c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2103      	movs	r1, #3
 80028fc:	2006      	movs	r0, #6
 80028fe:	f001 f989 	bl	8003c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002902:	2006      	movs	r0, #6
 8002904:	f001 f99b 	bl	8003c3e <HAL_NVIC_EnableIRQ>

}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	b00b      	add	sp, #44	; 0x2c
 800290e:	bd90      	pop	{r4, r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	48000400 	.word	0x48000400
 8002918:	48000800 	.word	0x48000800
 800291c:	00008007 	.word	0x00008007
 8002920:	0000fcfc 	.word	0x0000fcfc

08002924 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <MX_IWDG_Init+0x24>)
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <MX_IWDG_Init+0x28>)
 800292c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <MX_IWDG_Init+0x24>)
 8002930:	2205      	movs	r2, #5
 8002932:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <MX_IWDG_Init+0x24>)
 8002936:	4a06      	ldr	r2, [pc, #24]	; (8002950 <MX_IWDG_Init+0x2c>)
 8002938:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <MX_IWDG_Init+0x24>)
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <MX_IWDG_Init+0x2c>)
 800293e:	609a      	str	r2, [r3, #8]
#endif
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	20000440 	.word	0x20000440
 800294c:	40003000 	.word	0x40003000
 8002950:	00000fff 	.word	0x00000fff

08002954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295a:	f000 fadf 	bl	8002f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800295e:	f000 f857 	bl	8002a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002962:	f7ff ff0f 	bl	8002784 <MX_GPIO_Init>
  MX_CAN_Init();
 8002966:	f7ff fb03 	bl	8001f70 <MX_CAN_Init>
  MX_SPI1_Init();
 800296a:	f000 f8cd 	bl	8002b08 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800296e:	f000 f9cf 	bl	8002d10 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002972:	f000 fa63 	bl	8002e3c <MX_USB_PCD_Init>
  MX_IWDG_Init();
 8002976:	f7ff ffd5 	bl	8002924 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* Get the slope and offset parameters from Flash memory */
  LoadCalibrationData();
 800297a:	f007 f84f 	bl	8009a1c <LoadCalibrationData>

  /* flash LEDs to show startup */
  for ( int i = 0; i < 5; i++) {
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	e026      	b.n	80029d2 <main+0x7e>
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <main+0xb8>)
 8002986:	2201      	movs	r2, #1
 8002988:	2102      	movs	r1, #2
 800298a:	0018      	movs	r0, r3
 800298c:	f001 fd93 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	f000 fb27 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <main+0xb8>)
 8002998:	2201      	movs	r2, #1
 800299a:	2101      	movs	r1, #1
 800299c:	0018      	movs	r0, r3
 800299e:	f001 fd8a 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80029a2:	2064      	movs	r0, #100	; 0x64
 80029a4:	f000 fb1e 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <main+0xb8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	2102      	movs	r1, #2
 80029ae:	0018      	movs	r0, r3
 80029b0:	f001 fd81 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80029b4:	2064      	movs	r0, #100	; 0x64
 80029b6:	f000 fb15 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <main+0xb8>)
 80029bc:	2200      	movs	r2, #0
 80029be:	2101      	movs	r1, #1
 80029c0:	0018      	movs	r0, r3
 80029c2:	f001 fd78 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80029c6:	2064      	movs	r0, #100	; 0x64
 80029c8:	f000 fb0c 	bl	8002fe4 <HAL_Delay>
  for ( int i = 0; i < 5; i++) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3301      	adds	r3, #1
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	ddd5      	ble.n	8002984 <main+0x30>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80029d8:	f007 fa4a 	bl	8009e70 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80029dc:	f7ff fb7a 	bl	80020d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80029e0:	f007 fa72 	bl	8009ec8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <main+0xb8>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	2101      	movs	r1, #1
 80029ea:	0018      	movs	r0, r3
 80029ec:	f001 fd63 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80029f0:	20c8      	movs	r0, #200	; 0xc8
 80029f2:	f000 faf7 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <main+0xb8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	2101      	movs	r1, #1
 80029fc:	0018      	movs	r0, r3
 80029fe:	f001 fd5a 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002a02:	2064      	movs	r0, #100	; 0x64
 8002a04:	f000 faee 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002a08:	e7ec      	b.n	80029e4 <main+0x90>
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	48000400 	.word	0x48000400

08002a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b099      	sub	sp, #100	; 0x64
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	242c      	movs	r4, #44	; 0x2c
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	2334      	movs	r3, #52	; 0x34
 8002a1e:	001a      	movs	r2, r3
 8002a20:	2100      	movs	r1, #0
 8002a22:	f00a fbef 	bl	800d204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a26:	231c      	movs	r3, #28
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	001a      	movs	r2, r3
 8002a30:	2100      	movs	r1, #0
 8002a32:	f00a fbe7 	bl	800d204 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a36:	003b      	movs	r3, r7
 8002a38:	0018      	movs	r0, r3
 8002a3a:	231c      	movs	r3, #28
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f00a fbe0 	bl	800d204 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002a44:	0021      	movs	r1, r4
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	222a      	movs	r2, #42	; 0x2a
 8002a4a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2201      	movs	r2, #1
 8002a50:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2201      	movs	r2, #1
 8002a56:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2201      	movs	r2, #1
 8002a62:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f001 fe95 	bl	800479c <HAL_RCC_OscConfig>
 8002a72:	1e03      	subs	r3, r0, #0
 8002a74:	d001      	beq.n	8002a7a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002a76:	f000 f82d 	bl	8002ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a7a:	211c      	movs	r1, #28
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	2207      	movs	r2, #7
 8002a80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	2203      	movs	r2, #3
 8002a86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2101      	movs	r1, #1
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f002 fa05 	bl	8004ea8 <HAL_RCC_ClockConfig>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d001      	beq.n	8002aa6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002aa2:	f000 f817 	bl	8002ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002aa6:	003b      	movs	r3, r7
 8002aa8:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <SystemClock_Config+0xc0>)
 8002aaa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002aac:	003b      	movs	r3, r7
 8002aae:	2203      	movs	r2, #3
 8002ab0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002ab2:	003b      	movs	r3, r7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab8:	003b      	movs	r3, r7
 8002aba:	0018      	movs	r0, r3
 8002abc:	f002 fb60 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002ac4:	f000 f806 	bl	8002ad4 <Error_Handler>
  }
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b019      	add	sp, #100	; 0x64
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	00020001 	.word	0x00020001

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	46c0      	nop			; (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  /* flash thee RED LED to show we hit a problem. The watchdog will reset us eventually. */
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <Error_Handler+0x30>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 fce7 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8002ae8:	2032      	movs	r0, #50	; 0x32
 8002aea:	f000 fa7b 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <Error_Handler+0x30>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	2101      	movs	r1, #1
 8002af4:	0018      	movs	r0, r3
 8002af6:	f001 fcde 	bl	80044b6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002afa:	2064      	movs	r0, #100	; 0x64
 8002afc:	f000 fa72 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002b00:	e7ec      	b.n	8002adc <Error_Handler+0x8>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	48000400 	.word	0x48000400

08002b08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <MX_SPI1_Init+0x78>)
 8002b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b14:	2282      	movs	r2, #130	; 0x82
 8002b16:	0052      	lsls	r2, r2, #1
 8002b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b22:	22e0      	movs	r2, #224	; 0xe0
 8002b24:	00d2      	lsls	r2, r2, #3
 8002b26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b3e:	2228      	movs	r2, #40	; 0x28
 8002b40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b56:	2207      	movs	r2, #7
 8002b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b62:	2208      	movs	r2, #8
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f002 fc07 	bl	800537c <HAL_SPI_Init>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d001      	beq.n	8002b76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b72:	f7ff ffaf 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200005e0 	.word	0x200005e0
 8002b80:	40013000 	.word	0x40013000

08002b84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b08b      	sub	sp, #44	; 0x2c
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	2414      	movs	r4, #20
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	0018      	movs	r0, r3
 8002b92:	2314      	movs	r3, #20
 8002b94:	001a      	movs	r2, r3
 8002b96:	2100      	movs	r1, #0
 8002b98:	f00a fb34 	bl	800d204 <memset>
  if(spiHandle->Instance==SPI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_SPI_MspInit+0x90>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d132      	bne.n	8002c0c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <HAL_SPI_MspInit+0x94>)
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_SPI_MspInit+0x94>)
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	0149      	lsls	r1, r1, #5
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	619a      	str	r2, [r3, #24]
 8002bb4:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_SPI_MspInit+0x94>)
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	015b      	lsls	r3, r3, #5
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_SPI_MspInit+0x94>)
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_SPI_MspInit+0x94>)
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0289      	lsls	r1, r1, #10
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_SPI_MspInit+0x94>)
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	029b      	lsls	r3, r3, #10
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bde:	0021      	movs	r1, r4
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	22e0      	movs	r2, #224	; 0xe0
 8002be4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2202      	movs	r2, #2
 8002bea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	187a      	adds	r2, r7, r1
 8002c00:	2390      	movs	r3, #144	; 0x90
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f001 fac0 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b00b      	add	sp, #44	; 0x2c
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	40013000 	.word	0x40013000
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_MspInit+0x50>)
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_MspInit+0x50>)
 8002c28:	2101      	movs	r1, #1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	619a      	str	r2, [r3, #24]
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_MspInit+0x50>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2201      	movs	r2, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_MspInit+0x50>)
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_MspInit+0x50>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	0549      	lsls	r1, r1, #21
 8002c44:	430a      	orrs	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_MspInit+0x50>)
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	055b      	lsls	r3, r3, #21
 8002c50:	4013      	ands	r3, r2
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002c56:	2302      	movs	r3, #2
 8002c58:	425b      	negs	r3, r3
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2103      	movs	r1, #3
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 ffd8 	bl	8003c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <NMI_Handler+0x4>
	...

08002c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  while (1)
	  {
		  /* flash thee RED LED to show we hit a problem. The watchdog will reset us eventually. */
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HardFault_Handler+0x2c>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	2101      	movs	r1, #1
 8002c82:	0018      	movs	r0, r3
 8002c84:	f001 fc17 	bl	80044b6 <HAL_GPIO_WritePin>
		  HAL_Delay(50);
 8002c88:	2032      	movs	r0, #50	; 0x32
 8002c8a:	f000 f9ab 	bl	8002fe4 <HAL_Delay>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HardFault_Handler+0x2c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	2101      	movs	r1, #1
 8002c94:	0018      	movs	r0, r3
 8002c96:	f001 fc0e 	bl	80044b6 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8002c9a:	2064      	movs	r0, #100	; 0x64
 8002c9c:	f000 f9a2 	bl	8002fe4 <HAL_Delay>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002ca0:	e7ec      	b.n	8002c7c <HardFault_Handler+0x4>
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	48000400 	.word	0x48000400

08002ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cac:	f000 f97e 	bl	8002fac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002cb0:	f008 fff2 	bl	800bc98 <xTaskGetSchedulerState>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002cba:	f00a f805 	bl	800ccc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC_INT_Pin);
 8002cc8:	2008      	movs	r0, #8
 8002cca:	f001 fc11 	bl	80044f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <USART1_IRQHandler+0x14>)
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f003 faa2 	bl	8006224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	20000644 	.word	0x20000644

08002cec <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <CEC_CAN_IRQHandler+0x14>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fccd 	bl	8003692 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	20000090 	.word	0x20000090

08002d04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	uint32_t BAUDRATE = 19200;
 8002d16:	2396      	movs	r3, #150	; 0x96
 8002d18:	01db      	lsls	r3, r3, #7
 8002d1a:	607b      	str	r3, [r7, #4]
	if (!HAL_GPIO_ReadPin(MODBUS9600_GPIO_Port, MODBUS9600_Pin)) {
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <MX_USART1_UART_Init+0x74>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0018      	movs	r0, r3
 8002d22:	f001 fbab 	bl	800447c <HAL_GPIO_ReadPin>
 8002d26:	1e03      	subs	r3, r0, #0
 8002d28:	d102      	bne.n	8002d30 <MX_USART1_UART_Init+0x20>
		BAUDRATE = 9600;
 8002d2a:	2396      	movs	r3, #150	; 0x96
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d32:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <MX_USART1_UART_Init+0x7c>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = BAUDRATE;
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d50:	220c      	movs	r2, #12
 8002d52:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <MX_USART1_UART_Init+0x78>)
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f003 f874 	bl	8005e5c <HAL_UART_Init>
 8002d74:	1e03      	subs	r3, r0, #0
 8002d76:	d001      	beq.n	8002d7c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002d78:	f7ff feac 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	48000400 	.word	0x48000400
 8002d88:	20000644 	.word	0x20000644
 8002d8c:	40013800 	.word	0x40013800

08002d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b08b      	sub	sp, #44	; 0x2c
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	2414      	movs	r4, #20
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	2314      	movs	r3, #20
 8002da0:	001a      	movs	r2, r3
 8002da2:	2100      	movs	r1, #0
 8002da4:	f00a fa2e 	bl	800d204 <memset>
  if(uartHandle->Instance==USART1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <HAL_UART_MspInit+0xa4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d13b      	bne.n	8002e2a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_UART_MspInit+0xa8>)
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_UART_MspInit+0xa8>)
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	01c9      	lsls	r1, r1, #7
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	619a      	str	r2, [r3, #24]
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_UART_MspInit+0xa8>)
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	01db      	lsls	r3, r3, #7
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_UART_MspInit+0xa8>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_UART_MspInit+0xa8>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0289      	lsls	r1, r1, #10
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_UART_MspInit+0xa8>)
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	22c0      	movs	r2, #192	; 0xc0
 8002dee:	00d2      	lsls	r2, r2, #3
 8002df0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	0021      	movs	r1, r4
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2202      	movs	r2, #2
 8002df8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2203      	movs	r2, #3
 8002e04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2201      	movs	r2, #1
 8002e0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0c:	187a      	adds	r2, r7, r1
 8002e0e:	2390      	movs	r3, #144	; 0x90
 8002e10:	05db      	lsls	r3, r3, #23
 8002e12:	0011      	movs	r1, r2
 8002e14:	0018      	movs	r0, r3
 8002e16:	f001 f9b9 	bl	800418c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	201b      	movs	r0, #27
 8002e20:	f000 fef8 	bl	8003c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e24:	201b      	movs	r0, #27
 8002e26:	f000 ff0a 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b00b      	add	sp, #44	; 0x2c
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40021000 	.word	0x40021000

08002e3c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <MX_USB_PCD_Init+0x48>)
 8002e44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e48:	2208      	movs	r2, #8
 8002e4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e4e:	2202      	movs	r2, #2
 8002e50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <MX_USB_PCD_Init+0x44>)
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f001 fb6b 	bl	8004548 <HAL_PCD_Init>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8002e76:	f7ff fe2d 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200006cc 	.word	0x200006cc
 8002e84:	40005c00 	.word	0x40005c00

08002e88 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_PCD_MspInit+0x38>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10d      	bne.n	8002eb6 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_PCD_MspInit+0x3c>)
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_PCD_MspInit+0x3c>)
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	0409      	lsls	r1, r1, #16
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_PCD_MspInit+0x3c>)
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40005c00 	.word	0x40005c00
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec8:	480d      	ldr	r0, [pc, #52]	; (8002f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ecc:	f7ff ff1a 	bl	8002d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ed2:	490d      	ldr	r1, [pc, #52]	; (8002f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <LoopForever+0xe>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed8:	e002      	b.n	8002ee0 <LoopCopyDataInit>

08002eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ede:	3304      	adds	r3, #4

08002ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee4:	d3f9      	bcc.n	8002eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee8:	4c0a      	ldr	r4, [pc, #40]	; (8002f14 <LoopForever+0x16>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eec:	e001      	b.n	8002ef2 <LoopFillZerobss>

08002eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef0:	3204      	adds	r2, #4

08002ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef4:	d3fb      	bcc.n	8002eee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ef6:	f00a f9eb 	bl	800d2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002efa:	f7ff fd2b 	bl	8002954 <main>

08002efe <LoopForever>:

LoopForever:
    b LoopForever
 8002efe:	e7fe      	b.n	8002efe <LoopForever>
  ldr   r0, =_estack
 8002f00:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f08:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002f0c:	0800d71c 	.word	0x0800d71c
  ldr r2, =_sbss
 8002f10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002f14:	20002528 	.word	0x20002528

08002f18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC1_COMP_IRQHandler>
	...

08002f1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_Init+0x24>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_Init+0x24>)
 8002f26:	2110      	movs	r1, #16
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f809 	bl	8002f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f32:	f7ff fe73 	bl	8002c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	40022000 	.word	0x40022000

08002f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_InitTick+0x5c>)
 8002f4e:	681c      	ldr	r4, [r3, #0]
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_InitTick+0x60>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	0019      	movs	r1, r3
 8002f56:	23fa      	movs	r3, #250	; 0xfa
 8002f58:	0098      	lsls	r0, r3, #2
 8002f5a:	f7fd f8d5 	bl	8000108 <__udivsi3>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	0019      	movs	r1, r3
 8002f62:	0020      	movs	r0, r4
 8002f64:	f7fd f8d0 	bl	8000108 <__udivsi3>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 fe77 	bl	8003c5e <HAL_SYSTICK_Config>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e00f      	b.n	8002f98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d80b      	bhi.n	8002f96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	2301      	movs	r3, #1
 8002f82:	425b      	negs	r3, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 fe44 	bl	8003c14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_InitTick+0x64>)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b003      	add	sp, #12
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	2000000c 	.word	0x2000000c
 8002fa8:	20000008 	.word	0x20000008

08002fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_IncTick+0x1c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	18d2      	adds	r2, r2, r3
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_IncTick+0x20>)
 8002fbe:	601a      	str	r2, [r3, #0]
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	200009c0 	.word	0x200009c0

08002fd0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <HAL_GetTick+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	200009c0 	.word	0x200009c0

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff fff0 	bl	8002fd0 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	001a      	movs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	189b      	adds	r3, r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	f7ff ffe0 	bl	8002fd0 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	b004      	add	sp, #16
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	2000000c 	.word	0x2000000c

0800302c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0f0      	b.n	8003220 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	5c9b      	ldrb	r3, [r3, r2]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f7fe ffd5 	bl	8001ffc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003062:	f7ff ffb5 	bl	8002fd0 <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800306a:	e013      	b.n	8003094 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800306c:	f7ff ffb0 	bl	8002fd0 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b0a      	cmp	r3, #10
 8003078:	d90c      	bls.n	8003094 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	0292      	lsls	r2, r2, #10
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	2105      	movs	r1, #5
 800308e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0c5      	b.n	8003220 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d0e5      	beq.n	800306c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2102      	movs	r1, #2
 80030ac:	438a      	bics	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b0:	f7ff ff8e 	bl	8002fd0 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030b8:	e013      	b.n	80030e2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030ba:	f7ff ff89 	bl	8002fd0 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b0a      	cmp	r3, #10
 80030c6:	d90c      	bls.n	80030e2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	0292      	lsls	r2, r2, #10
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	2105      	movs	r1, #5
 80030dc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e09e      	b.n	8003220 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d1e5      	bne.n	80030ba <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7e1b      	ldrb	r3, [r3, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e007      	b.n	8003118 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	438a      	bics	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7e5b      	ldrb	r3, [r3, #25]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d108      	bne.n	8003132 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e007      	b.n	8003142 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2140      	movs	r1, #64	; 0x40
 800313e:	438a      	bics	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7e9b      	ldrb	r3, [r3, #26]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2120      	movs	r1, #32
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e007      	b.n	800316c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2120      	movs	r1, #32
 8003168:	438a      	bics	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7edb      	ldrb	r3, [r3, #27]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2110      	movs	r1, #16
 8003180:	438a      	bics	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e007      	b.n	8003196 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2110      	movs	r1, #16
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7f1b      	ldrb	r3, [r3, #28]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2108      	movs	r1, #8
 80031aa:	430a      	orrs	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e007      	b.n	80031c0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2108      	movs	r1, #8
 80031bc:	438a      	bics	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7f5b      	ldrb	r3, [r3, #29]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2104      	movs	r1, #4
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e007      	b.n	80031ea <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2104      	movs	r1, #4
 80031e6:	438a      	bics	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	431a      	orrs	r2, r3
 8003200:	0011      	movs	r1, r2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b004      	add	sp, #16
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003236:	201f      	movs	r0, #31
 8003238:	183b      	adds	r3, r7, r0
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	2120      	movs	r1, #32
 800323e:	5c52      	ldrb	r2, [r2, r1]
 8003240:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800324a:	183b      	adds	r3, r7, r0
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d004      	beq.n	800325c <HAL_CAN_AddTxMessage+0x34>
 8003252:	183b      	adds	r3, r7, r0
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d000      	beq.n	800325c <HAL_CAN_AddTxMessage+0x34>
 800325a:	e0ab      	b.n	80033b4 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	04db      	lsls	r3, r3, #19
 8003262:	4013      	ands	r3, r2
 8003264:	d10a      	bne.n	800327c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	051b      	lsls	r3, r3, #20
 800326c:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800326e:	d105      	bne.n	800327c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	055b      	lsls	r3, r3, #21
 8003276:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003278:	d100      	bne.n	800327c <HAL_CAN_AddTxMessage+0x54>
 800327a:	e092      	b.n	80033a2 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	0e1b      	lsrs	r3, r3, #24
 8003280:	2203      	movs	r2, #3
 8003282:	4013      	ands	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003286:	2201      	movs	r2, #1
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10c      	bne.n	80032b2 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4311      	orrs	r1, r2
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	3218      	adds	r2, #24
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	50d1      	str	r1, [r2, r3]
 80032b0:	e00f      	b.n	80032d2 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032bc:	431a      	orrs	r2, r3
 80032be:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80032c8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	3218      	adds	r2, #24
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3318      	adds	r3, #24
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	18cb      	adds	r3, r1, r3
 80032e2:	3304      	adds	r3, #4
 80032e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	7d1b      	ldrb	r3, [r3, #20]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d112      	bne.n	8003314 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3318      	adds	r3, #24
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	3304      	adds	r3, #4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3318      	adds	r3, #24
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	18cb      	adds	r3, r1, r3
 8003310:	3304      	adds	r3, #4
 8003312:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3307      	adds	r3, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	061a      	lsls	r2, r3, #24
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3306      	adds	r3, #6
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3305      	adds	r3, #5
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	0019      	movs	r1, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	23c6      	movs	r3, #198	; 0xc6
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	0109      	lsls	r1, r1, #4
 8003346:	1841      	adds	r1, r0, r1
 8003348:	18cb      	adds	r3, r1, r3
 800334a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3303      	adds	r3, #3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	061a      	lsls	r2, r3, #24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3302      	adds	r3, #2
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3301      	adds	r3, #1
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	0019      	movs	r1, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	6979      	ldr	r1, [r7, #20]
 8003376:	23c4      	movs	r3, #196	; 0xc4
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	0109      	lsls	r1, r1, #4
 800337c:	1841      	adds	r1, r0, r1
 800337e:	18cb      	adds	r3, r1, r3
 8003380:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	3218      	adds	r2, #24
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	58d2      	ldr	r2, [r2, r3]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	4311      	orrs	r1, r2
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	3218      	adds	r2, #24
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e010      	b.n	80033c4 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2280      	movs	r2, #128	; 0x80
 80033a8:	0392      	lsls	r2, r2, #14
 80033aa:	431a      	orrs	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	02d2      	lsls	r2, r2, #11
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
  }
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b008      	add	sp, #32
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033d8:	200b      	movs	r0, #11
 80033da:	183b      	adds	r3, r7, r0
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	2120      	movs	r1, #32
 80033e0:	5c52      	ldrb	r2, [r2, r1]
 80033e2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80033e4:	0002      	movs	r2, r0
 80033e6:	18bb      	adds	r3, r7, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d003      	beq.n	80033f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 80033ee:	18bb      	adds	r3, r7, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d11d      	bne.n	8003432 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	04db      	lsls	r3, r3, #19
 8003400:	4013      	ands	r3, r2
 8003402:	d002      	beq.n	800340a <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	051b      	lsls	r3, r3, #20
 8003414:	4013      	ands	r3, r2
 8003416:	d002      	beq.n	800341e <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3301      	adds	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	055b      	lsls	r3, r3, #21
 8003428:	4013      	ands	r3, r2
 800342a:	d002      	beq.n	8003432 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800344a:	2017      	movs	r0, #23
 800344c:	183b      	adds	r3, r7, r0
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	2120      	movs	r1, #32
 8003452:	5c52      	ldrb	r2, [r2, r1]
 8003454:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003456:	0002      	movs	r2, r0
 8003458:	18bb      	adds	r3, r7, r2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d004      	beq.n	800346a <HAL_CAN_GetRxMessage+0x2e>
 8003460:	18bb      	adds	r3, r7, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d000      	beq.n	800346a <HAL_CAN_GetRxMessage+0x2e>
 8003468:	e107      	b.n	800367a <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10e      	bne.n	800348e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2203      	movs	r2, #3
 8003478:	4013      	ands	r3, r2
 800347a:	d117      	bne.n	80034ac <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	0392      	lsls	r2, r2, #14
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0fd      	b.n	800368a <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2203      	movs	r2, #3
 8003496:	4013      	ands	r3, r2
 8003498:	d108      	bne.n	80034ac <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	0392      	lsls	r2, r2, #14
 80034a2:	431a      	orrs	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0ee      	b.n	800368a <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	321b      	adds	r2, #27
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	58d3      	ldr	r3, [r2, r3]
 80034b8:	2204      	movs	r2, #4
 80034ba:	401a      	ands	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	321b      	adds	r2, #27
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	58d3      	ldr	r3, [r2, r3]
 80034d4:	0d5b      	lsrs	r3, r3, #21
 80034d6:	055b      	lsls	r3, r3, #21
 80034d8:	0d5a      	lsrs	r2, r3, #21
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00a      	b.n	80034f6 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	321b      	adds	r2, #27
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	58d3      	ldr	r3, [r2, r3]
 80034ec:	08db      	lsrs	r3, r3, #3
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	321b      	adds	r2, #27
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	58d3      	ldr	r3, [r2, r3]
 8003502:	2202      	movs	r2, #2
 8003504:	401a      	ands	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	331b      	adds	r3, #27
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	18d3      	adds	r3, r2, r3
 8003516:	3304      	adds	r3, #4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2208      	movs	r2, #8
 800351c:	4013      	ands	r3, r2
 800351e:	d003      	beq.n	8003528 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2208      	movs	r2, #8
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	e00b      	b.n	8003540 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	331b      	adds	r3, #27
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	18d3      	adds	r3, r2, r3
 8003534:	3304      	adds	r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	220f      	movs	r2, #15
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	331b      	adds	r3, #27
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	18d3      	adds	r3, r2, r3
 800354c:	3304      	adds	r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	401a      	ands	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	331b      	adds	r3, #27
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	18d3      	adds	r3, r2, r3
 8003566:	3304      	adds	r3, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	0c1a      	lsrs	r2, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	23dc      	movs	r3, #220	; 0xdc
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	188a      	adds	r2, r1, r2
 8003582:	18d3      	adds	r3, r2, r3
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	23dc      	movs	r3, #220	; 0xdc
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	188a      	adds	r2, r1, r2
 800359a:	18d3      	adds	r3, r2, r3
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0a1a      	lsrs	r2, r3, #8
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	3301      	adds	r3, #1
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	23dc      	movs	r3, #220	; 0xdc
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	188a      	adds	r2, r1, r2
 80035b6:	18d3      	adds	r3, r2, r3
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0c1a      	lsrs	r2, r3, #16
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	3302      	adds	r3, #2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	23dc      	movs	r3, #220	; 0xdc
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	0112      	lsls	r2, r2, #4
 80035d0:	188a      	adds	r2, r1, r2
 80035d2:	18d3      	adds	r3, r2, r3
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0e1a      	lsrs	r2, r3, #24
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	3303      	adds	r3, #3
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	23de      	movs	r3, #222	; 0xde
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	188a      	adds	r2, r1, r2
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	23de      	movs	r3, #222	; 0xde
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	0112      	lsls	r2, r2, #4
 8003606:	188a      	adds	r2, r1, r2
 8003608:	18d3      	adds	r3, r2, r3
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0a1a      	lsrs	r2, r3, #8
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3305      	adds	r3, #5
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6819      	ldr	r1, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	23de      	movs	r3, #222	; 0xde
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	188a      	adds	r2, r1, r2
 8003624:	18d3      	adds	r3, r2, r3
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0c1a      	lsrs	r2, r3, #16
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	3306      	adds	r3, #6
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	23de      	movs	r3, #222	; 0xde
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	188a      	adds	r2, r1, r2
 8003640:	18d3      	adds	r3, r2, r3
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e1a      	lsrs	r2, r3, #24
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	3307      	adds	r3, #7
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2120      	movs	r1, #32
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	e007      	b.n	8003676 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2120      	movs	r1, #32
 8003672:	430a      	orrs	r2, r1
 8003674:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e007      	b.n	800368a <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	02d2      	lsls	r2, r2, #11
 8003682:	431a      	orrs	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
  }
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b006      	add	sp, #24
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08a      	sub	sp, #40	; 0x28
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	2201      	movs	r2, #1
 80036d2:	4013      	ands	r3, r2
 80036d4:	d100      	bne.n	80036d8 <HAL_CAN_IRQHandler+0x46>
 80036d6:	e084      	b.n	80037e2 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2201      	movs	r2, #1
 80036dc:	4013      	ands	r3, r2
 80036de:	d024      	beq.n	800372a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f981 	bl	80039fa <HAL_CAN_TxMailbox0CompleteCallback>
 80036f8:	e017      	b.n	800372a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2204      	movs	r2, #4
 80036fe:	4013      	ands	r3, r2
 8003700:	d005      	beq.n	800370e <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	4313      	orrs	r3, r2
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
 800370c:	e00d      	b.n	800372a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2208      	movs	r2, #8
 8003712:	4013      	ands	r3, r2
 8003714:	d005      	beq.n	8003722 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	0152      	lsls	r2, r2, #5
 800371c:	4313      	orrs	r3, r2
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	e003      	b.n	800372a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f980 	bl	8003a2a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4013      	ands	r3, r2
 8003732:	d028      	beq.n	8003786 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	0052      	lsls	r2, r2, #1
 800373c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4013      	ands	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f95d 	bl	8003a0a <HAL_CAN_TxMailbox1CompleteCallback>
 8003750:	e019      	b.n	8003786 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4013      	ands	r3, r2
 800375a:	d005      	beq.n	8003768 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	0192      	lsls	r2, r2, #6
 8003762:	4313      	orrs	r3, r2
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
 8003766:	e00e      	b.n	8003786 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	4013      	ands	r3, r2
 8003770:	d005      	beq.n	800377e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	01d2      	lsls	r2, r2, #7
 8003778:	4313      	orrs	r3, r2
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	e003      	b.n	8003786 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f95a 	bl	8003a3a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	025b      	lsls	r3, r3, #9
 800378c:	4013      	ands	r3, r2
 800378e:	d028      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2280      	movs	r2, #128	; 0x80
 8003796:	0252      	lsls	r2, r2, #9
 8003798:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	029b      	lsls	r3, r3, #10
 80037a0:	4013      	ands	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 f937 	bl	8003a1a <HAL_CAN_TxMailbox2CompleteCallback>
 80037ac:	e019      	b.n	80037e2 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	02db      	lsls	r3, r3, #11
 80037b4:	4013      	ands	r3, r2
 80037b6:	d005      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	0212      	lsls	r2, r2, #8
 80037be:	4313      	orrs	r3, r2
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	e00e      	b.n	80037e2 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	031b      	lsls	r3, r3, #12
 80037ca:	4013      	ands	r3, r2
 80037cc:	d005      	beq.n	80037da <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	0252      	lsls	r2, r2, #9
 80037d4:	4313      	orrs	r3, r2
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e003      	b.n	80037e2 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 f934 	bl	8003a4a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2208      	movs	r2, #8
 80037e6:	4013      	ands	r3, r2
 80037e8:	d00c      	beq.n	8003804 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2210      	movs	r2, #16
 80037ee:	4013      	ands	r3, r2
 80037f0:	d008      	beq.n	8003804 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4313      	orrs	r3, r2
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2210      	movs	r2, #16
 8003802:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	2204      	movs	r2, #4
 8003808:	4013      	ands	r3, r2
 800380a:	d00b      	beq.n	8003824 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2208      	movs	r2, #8
 8003810:	4013      	ands	r3, r2
 8003812:	d007      	beq.n	8003824 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2208      	movs	r2, #8
 800381a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	0018      	movs	r0, r3
 8003820:	f000 f91b 	bl	8003a5a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2202      	movs	r2, #2
 8003828:	4013      	ands	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2203      	movs	r2, #3
 8003834:	4013      	ands	r3, r2
 8003836:	d003      	beq.n	8003840 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f7fe fc34 	bl	80020a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	2240      	movs	r2, #64	; 0x40
 8003844:	4013      	ands	r3, r2
 8003846:	d00c      	beq.n	8003862 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2210      	movs	r2, #16
 800384c:	4013      	ands	r3, r2
 800384e:	d008      	beq.n	8003862 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	00d2      	lsls	r2, r2, #3
 8003856:	4313      	orrs	r3, r2
 8003858:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2210      	movs	r2, #16
 8003860:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2220      	movs	r2, #32
 8003866:	4013      	ands	r3, r2
 8003868:	d00b      	beq.n	8003882 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2208      	movs	r2, #8
 800386e:	4013      	ands	r3, r2
 8003870:	d007      	beq.n	8003882 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2208      	movs	r2, #8
 8003878:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f000 f8fc 	bl	8003a7a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2210      	movs	r2, #16
 8003886:	4013      	ands	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2203      	movs	r2, #3
 8003892:	4013      	ands	r3, r2
 8003894:	d003      	beq.n	800389e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f8e6 	bl	8003a6a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800389e:	6a3a      	ldr	r2, [r7, #32]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	029b      	lsls	r3, r3, #10
 80038a4:	4013      	ands	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2210      	movs	r2, #16
 80038ac:	4013      	ands	r3, r2
 80038ae:	d007      	beq.n	80038c0 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 f8e5 	bl	8003a8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038c0:	6a3a      	ldr	r2, [r7, #32]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	025b      	lsls	r3, r3, #9
 80038c6:	4013      	ands	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	2208      	movs	r2, #8
 80038ce:	4013      	ands	r3, r2
 80038d0:	d007      	beq.n	80038e2 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2208      	movs	r2, #8
 80038d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f8dc 	bl	8003a9a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	4013      	ands	r3, r2
 80038ea:	d100      	bne.n	80038ee <HAL_CAN_IRQHandler+0x25c>
 80038ec:	e074      	b.n	80039d8 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	2204      	movs	r2, #4
 80038f2:	4013      	ands	r3, r2
 80038f4:	d100      	bne.n	80038f8 <HAL_CAN_IRQHandler+0x266>
 80038f6:	e06b      	b.n	80039d0 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003908:	d003      	beq.n	8003912 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2201      	movs	r2, #1
 800390e:	4313      	orrs	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4013      	ands	r3, r2
 800391a:	d007      	beq.n	800392c <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2202      	movs	r2, #2
 8003920:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003922:	d003      	beq.n	800392c <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	2202      	movs	r2, #2
 8003928:	4313      	orrs	r3, r2
 800392a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4013      	ands	r3, r2
 8003934:	d007      	beq.n	8003946 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2204      	movs	r2, #4
 800393a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800393c:	d003      	beq.n	8003946 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	2204      	movs	r2, #4
 8003942:	4313      	orrs	r3, r2
 8003944:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4013      	ands	r3, r2
 800394e:	d03f      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2270      	movs	r2, #112	; 0x70
 8003954:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003956:	d03b      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2270      	movs	r2, #112	; 0x70
 800395c:	4013      	ands	r3, r2
 800395e:	2b60      	cmp	r3, #96	; 0x60
 8003960:	d027      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x320>
 8003962:	d82c      	bhi.n	80039be <HAL_CAN_IRQHandler+0x32c>
 8003964:	2b50      	cmp	r3, #80	; 0x50
 8003966:	d01f      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x316>
 8003968:	d829      	bhi.n	80039be <HAL_CAN_IRQHandler+0x32c>
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d017      	beq.n	800399e <HAL_CAN_IRQHandler+0x30c>
 800396e:	d826      	bhi.n	80039be <HAL_CAN_IRQHandler+0x32c>
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d00f      	beq.n	8003994 <HAL_CAN_IRQHandler+0x302>
 8003974:	d823      	bhi.n	80039be <HAL_CAN_IRQHandler+0x32c>
 8003976:	2b10      	cmp	r3, #16
 8003978:	d002      	beq.n	8003980 <HAL_CAN_IRQHandler+0x2ee>
 800397a:	2b20      	cmp	r3, #32
 800397c:	d005      	beq.n	800398a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800397e:	e01e      	b.n	80039be <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	2208      	movs	r2, #8
 8003984:	4313      	orrs	r3, r2
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003988:	e01a      	b.n	80039c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	2210      	movs	r2, #16
 800398e:	4313      	orrs	r3, r2
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003992:	e015      	b.n	80039c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	2220      	movs	r2, #32
 8003998:	4313      	orrs	r3, r2
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800399c:	e010      	b.n	80039c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	4313      	orrs	r3, r2
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039a6:	e00b      	b.n	80039c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	4313      	orrs	r3, r2
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039b0:	e006      	b.n	80039c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0052      	lsls	r2, r2, #1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039bc:	e000      	b.n	80039c0 <HAL_CAN_IRQHandler+0x32e>
            break;
 80039be:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2170      	movs	r1, #112	; 0x70
 80039cc:	438a      	bics	r2, r1
 80039ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2204      	movs	r2, #4
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 f85c 	bl	8003aaa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b00a      	add	sp, #40	; 0x28
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b002      	add	sp, #8
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b002      	add	sp, #8
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b002      	add	sp, #8
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b002      	add	sp, #8
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b002      	add	sp, #8
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b002      	add	sp, #8
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	1dfb      	adds	r3, r7, #7
 8003ac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ace:	d809      	bhi.n	8003ae4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	231f      	movs	r3, #31
 8003ad8:	401a      	ands	r2, r3
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <__NVIC_EnableIRQ+0x30>)
 8003adc:	2101      	movs	r1, #1
 8003ade:	4091      	lsls	r1, r2
 8003ae0:	000a      	movs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
  }
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	e000e100 	.word	0xe000e100

08003af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	0002      	movs	r2, r0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b7f      	cmp	r3, #127	; 0x7f
 8003b04:	d828      	bhi.n	8003b58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b06:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <__NVIC_SetPriority+0xd4>)
 8003b08:	1dfb      	adds	r3, r7, #7
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	33c0      	adds	r3, #192	; 0xc0
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	589b      	ldr	r3, [r3, r2]
 8003b16:	1dfa      	adds	r2, r7, #7
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	400a      	ands	r2, r1
 8003b20:	00d2      	lsls	r2, r2, #3
 8003b22:	21ff      	movs	r1, #255	; 0xff
 8003b24:	4091      	lsls	r1, r2
 8003b26:	000a      	movs	r2, r1
 8003b28:	43d2      	mvns	r2, r2
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	019b      	lsls	r3, r3, #6
 8003b32:	22ff      	movs	r2, #255	; 0xff
 8003b34:	401a      	ands	r2, r3
 8003b36:	1dfb      	adds	r3, r7, #7
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	4003      	ands	r3, r0
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b44:	481f      	ldr	r0, [pc, #124]	; (8003bc4 <__NVIC_SetPriority+0xd4>)
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	33c0      	adds	r3, #192	; 0xc0
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003b56:	e031      	b.n	8003bbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <__NVIC_SetPriority+0xd8>)
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	0019      	movs	r1, r3
 8003b60:	230f      	movs	r3, #15
 8003b62:	400b      	ands	r3, r1
 8003b64:	3b08      	subs	r3, #8
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	3306      	adds	r3, #6
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	18d3      	adds	r3, r2, r3
 8003b6e:	3304      	adds	r3, #4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	1dfa      	adds	r2, r7, #7
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	0011      	movs	r1, r2
 8003b78:	2203      	movs	r2, #3
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	00d2      	lsls	r2, r2, #3
 8003b7e:	21ff      	movs	r1, #255	; 0xff
 8003b80:	4091      	lsls	r1, r2
 8003b82:	000a      	movs	r2, r1
 8003b84:	43d2      	mvns	r2, r2
 8003b86:	401a      	ands	r2, r3
 8003b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	019b      	lsls	r3, r3, #6
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	401a      	ands	r2, r3
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	0018      	movs	r0, r3
 8003b98:	2303      	movs	r3, #3
 8003b9a:	4003      	ands	r3, r0
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ba0:	4809      	ldr	r0, [pc, #36]	; (8003bc8 <__NVIC_SetPriority+0xd8>)
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	001c      	movs	r4, r3
 8003ba8:	230f      	movs	r3, #15
 8003baa:	4023      	ands	r3, r4
 8003bac:	3b08      	subs	r3, #8
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	3306      	adds	r3, #6
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	18c3      	adds	r3, r0, r3
 8003bb8:	3304      	adds	r3, #4
 8003bba:	601a      	str	r2, [r3, #0]
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b003      	add	sp, #12
 8003bc2:	bd90      	pop	{r4, r7, pc}
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1e5a      	subs	r2, r3, #1
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	045b      	lsls	r3, r3, #17
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d301      	bcc.n	8003be4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003be0:	2301      	movs	r3, #1
 8003be2:	e010      	b.n	8003c06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <SysTick_Config+0x44>)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	3a01      	subs	r2, #1
 8003bea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bec:	2301      	movs	r3, #1
 8003bee:	425b      	negs	r3, r3
 8003bf0:	2103      	movs	r1, #3
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7ff ff7c 	bl	8003af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <SysTick_Config+0x44>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <SysTick_Config+0x44>)
 8003c00:	2207      	movs	r2, #7
 8003c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b002      	add	sp, #8
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	e000e010 	.word	0xe000e010

08003c14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	210f      	movs	r1, #15
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	1c02      	adds	r2, r0, #0
 8003c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	0011      	movs	r1, r2
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7ff ff5d 	bl	8003af0 <__NVIC_SetPriority>
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	0002      	movs	r2, r0
 8003c46:	1dfb      	adds	r3, r7, #7
 8003c48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7ff ff33 	bl	8003abc <__NVIC_EnableIRQ>
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b002      	add	sp, #8
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7ff ffaf 	bl	8003bcc <SysTick_Config>
 8003c6e:	0003      	movs	r3, r0
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d008      	beq.n	8003c9e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e020      	b.n	8003ce0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	210e      	movs	r1, #14
 8003caa:	438a      	bics	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	438a      	bics	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4091      	lsls	r1, r2
 8003cca:	000a      	movs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2221      	movs	r2, #33	; 0x21
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	210f      	movs	r1, #15
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2221      	movs	r2, #33	; 0x21
 8003cfc:	5c9b      	ldrb	r3, [r3, r2]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d006      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2204      	movs	r2, #4
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e028      	b.n	8003d64 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	210e      	movs	r1, #14
 8003d1e:	438a      	bics	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	438a      	bics	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4091      	lsls	r1, r2
 8003d3e:	000a      	movs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2221      	movs	r2, #33	; 0x21
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	0010      	movs	r0, r2
 8003d62:	4798      	blx	r3
    }
  }
  return status;
 8003d64:	230f      	movs	r3, #15
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	781b      	ldrb	r3, [r3, #0]
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603a      	str	r2, [r7, #0]
 8003d80:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d82:	2317      	movs	r3, #23
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8003d8a:	2316      	movs	r3, #22
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8003d92:	2315      	movs	r3, #21
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_FLASH_Program+0x120>)
 8003d9c:	7e1b      	ldrb	r3, [r3, #24]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_FLASH_Program+0x32>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e072      	b.n	8003e8c <HAL_FLASH_Program+0x118>
 8003da6:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <HAL_FLASH_Program+0x120>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dac:	2317      	movs	r3, #23
 8003dae:	18fe      	adds	r6, r7, r3
 8003db0:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <HAL_FLASH_Program+0x124>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f000 f8ce 	bl	8003f54 <FLASH_WaitForLastOperation>
 8003db8:	0003      	movs	r3, r0
 8003dba:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8003dbc:	2317      	movs	r3, #23
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d15c      	bne.n	8003e80 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d104      	bne.n	8003dd6 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003dcc:	2315      	movs	r3, #21
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e00b      	b.n	8003dee <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d104      	bne.n	8003de6 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003ddc:	2315      	movs	r3, #21
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	2202      	movs	r2, #2
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e003      	b.n	8003dee <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003de6:	2315      	movs	r3, #21
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2204      	movs	r2, #4
 8003dec:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8003dee:	2316      	movs	r3, #22
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e039      	b.n	8003e6c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003df8:	2116      	movs	r1, #22
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	005a      	lsls	r2, r3, #1
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	18d0      	adds	r0, r2, r3
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	3a20      	subs	r2, #32
 8003e0e:	2a00      	cmp	r2, #0
 8003e10:	db03      	blt.n	8003e1a <HAL_FLASH_Program+0xa6>
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	40d1      	lsrs	r1, r2
 8003e16:	000c      	movs	r4, r1
 8003e18:	e008      	b.n	8003e2c <HAL_FLASH_Program+0xb8>
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	1ad2      	subs	r2, r2, r3
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4091      	lsls	r1, r2
 8003e22:	000a      	movs	r2, r1
 8003e24:	6839      	ldr	r1, [r7, #0]
 8003e26:	40d9      	lsrs	r1, r3
 8003e28:	000c      	movs	r4, r1
 8003e2a:	4314      	orrs	r4, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	40da      	lsrs	r2, r3
 8003e30:	0015      	movs	r5, r2
 8003e32:	b2a3      	uxth	r3, r4
 8003e34:	0019      	movs	r1, r3
 8003e36:	f000 f871 	bl	8003f1c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e3a:	2317      	movs	r3, #23
 8003e3c:	18fe      	adds	r6, r7, r3
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_FLASH_Program+0x124>)
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 f887 	bl	8003f54 <FLASH_WaitForLastOperation>
 8003e46:	0003      	movs	r3, r0
 8003e48:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_FLASH_Program+0x128>)
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <HAL_FLASH_Program+0x128>)
 8003e50:	2101      	movs	r1, #1
 8003e52:	438a      	bics	r2, r1
 8003e54:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003e56:	2317      	movs	r3, #23
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10e      	bne.n	8003e7e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8003e60:	2116      	movs	r1, #22
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	3201      	adds	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	2316      	movs	r3, #22
 8003e6e:	18fa      	adds	r2, r7, r3
 8003e70:	2315      	movs	r3, #21
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3bd      	bcc.n	8003df8 <HAL_FLASH_Program+0x84>
 8003e7c:	e000      	b.n	8003e80 <HAL_FLASH_Program+0x10c>
      {
        break;
 8003e7e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <HAL_FLASH_Program+0x120>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	761a      	strb	r2, [r3, #24]

  return status;
 8003e86:	2317      	movs	r3, #23
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	781b      	ldrb	r3, [r3, #0]
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b007      	add	sp, #28
 8003e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e94:	200009c8 	.word	0x200009c8
 8003e98:	0000c350 	.word	0x0000c350
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_FLASH_Unlock+0x44>)
 8003eba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <HAL_FLASH_Unlock+0x48>)
 8003ec0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d002      	beq.n	8003ed2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003ecc:	1dfb      	adds	r3, r7, #7
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003ed2:	1dfb      	adds	r3, r7, #7
 8003ed4:	781b      	ldrb	r3, [r3, #0]
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b002      	add	sp, #8
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	40022000 	.word	0x40022000
 8003ee4:	45670123 	.word	0x45670123
 8003ee8:	cdef89ab 	.word	0xcdef89ab

08003eec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <HAL_FLASH_Lock+0x18>)
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_FLASH_Lock+0x18>)
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40022000 	.word	0x40022000

08003f08 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003f0c:	4b02      	ldr	r3, [pc, #8]	; (8003f18 <HAL_FLASH_GetError+0x10>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	200009c8 	.word	0x200009c8

08003f1c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	000a      	movs	r2, r1
 8003f26:	1cbb      	adds	r3, r7, #2
 8003f28:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <FLASH_Program_HalfWord+0x30>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <FLASH_Program_HalfWord+0x34>)
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <FLASH_Program_HalfWord+0x34>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1cba      	adds	r2, r7, #2
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	801a      	strh	r2, [r3, #0]
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200009c8 	.word	0x200009c8
 8003f50:	40022000 	.word	0x40022000

08003f54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7ff f838 	bl	8002fd0 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f64:	e00f      	b.n	8003f86 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	d00c      	beq.n	8003f86 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <FLASH_WaitForLastOperation+0x2e>
 8003f72:	f7ff f82d 	bl	8002fd0 <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d201      	bcs.n	8003f86 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e01f      	b.n	8003fc6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <FLASH_WaitForLastOperation+0x7c>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d0e9      	beq.n	8003f66 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <FLASH_WaitForLastOperation+0x7c>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d102      	bne.n	8003fa4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <FLASH_WaitForLastOperation+0x7c>)
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <FLASH_WaitForLastOperation+0x7c>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d005      	beq.n	8003fbc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <FLASH_WaitForLastOperation+0x7c>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d103      	bne.n	8003fc4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003fbc:	f000 f80a 	bl	8003fd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	40022000 	.word	0x40022000

08003fd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003fde:	4b13      	ldr	r3, [pc, #76]	; (800402c <FLASH_SetErrorCode+0x58>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d109      	bne.n	8003ffe <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fea:	4b11      	ldr	r3, [pc, #68]	; (8004030 <FLASH_SetErrorCode+0x5c>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <FLASH_SetErrorCode+0x5c>)
 8003ff4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	; (800402c <FLASH_SetErrorCode+0x58>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2204      	movs	r2, #4
 8004004:	4013      	ands	r3, r2
 8004006:	2b04      	cmp	r3, #4
 8004008:	d109      	bne.n	800401e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <FLASH_SetErrorCode+0x5c>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	2201      	movs	r2, #1
 8004010:	431a      	orrs	r2, r3
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <FLASH_SetErrorCode+0x5c>)
 8004014:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2204      	movs	r2, #4
 800401a:	4313      	orrs	r3, r2
 800401c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800401e:	4b03      	ldr	r3, [pc, #12]	; (800402c <FLASH_SetErrorCode+0x58>)
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
}  
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40022000 	.word	0x40022000
 8004030:	200009c8 	.word	0x200009c8

08004034 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004034:	b5b0      	push	{r4, r5, r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800403e:	230f      	movs	r3, #15
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800404a:	4b32      	ldr	r3, [pc, #200]	; (8004114 <HAL_FLASHEx_Erase+0xe0>)
 800404c:	7e1b      	ldrb	r3, [r3, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_FLASHEx_Erase+0x22>
 8004052:	2302      	movs	r3, #2
 8004054:	e05a      	b.n	800410c <HAL_FLASHEx_Erase+0xd8>
 8004056:	4b2f      	ldr	r3, [pc, #188]	; (8004114 <HAL_FLASHEx_Erase+0xe0>)
 8004058:	2201      	movs	r2, #1
 800405a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d116      	bne.n	8004092 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_FLASHEx_Erase+0xe4>)
 8004066:	0018      	movs	r0, r3
 8004068:	f7ff ff74 	bl	8003f54 <FLASH_WaitForLastOperation>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d147      	bne.n	8004100 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004070:	f000 f856 	bl	8004120 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004074:	230f      	movs	r3, #15
 8004076:	18fc      	adds	r4, r7, r3
 8004078:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_FLASHEx_Erase+0xe4>)
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff ff6a 	bl	8003f54 <FLASH_WaitForLastOperation>
 8004080:	0003      	movs	r3, r0
 8004082:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <HAL_FLASHEx_Erase+0xe8>)
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_FLASHEx_Erase+0xe8>)
 800408a:	2104      	movs	r1, #4
 800408c:	438a      	bics	r2, r1
 800408e:	611a      	str	r2, [r3, #16]
 8004090:	e036      	b.n	8004100 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <HAL_FLASHEx_Erase+0xe4>)
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff ff5d 	bl	8003f54 <FLASH_WaitForLastOperation>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d130      	bne.n	8004100 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4252      	negs	r2, r2
 80040a4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	e01f      	b.n	80040ee <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f84d 	bl	8004150 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040b6:	250f      	movs	r5, #15
 80040b8:	197c      	adds	r4, r7, r5
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_FLASHEx_Erase+0xe4>)
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff ff49 	bl	8003f54 <FLASH_WaitForLastOperation>
 80040c2:	0003      	movs	r3, r0
 80040c4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_FLASHEx_Erase+0xe8>)
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_FLASHEx_Erase+0xe8>)
 80040cc:	2102      	movs	r1, #2
 80040ce:	438a      	bics	r2, r1
 80040d0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80040d2:	197b      	adds	r3, r7, r5
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	601a      	str	r2, [r3, #0]
            break;
 80040e0:	e00e      	b.n	8004100 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	0112      	lsls	r2, r2, #4
 80040e8:	4694      	mov	ip, r2
 80040ea:	4463      	add	r3, ip
 80040ec:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	02da      	lsls	r2, r3, #11
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	18d3      	adds	r3, r2, r3
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3d6      	bcc.n	80040ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <HAL_FLASHEx_Erase+0xe0>)
 8004102:	2200      	movs	r2, #0
 8004104:	761a      	strb	r2, [r3, #24]

  return status;
 8004106:	230f      	movs	r3, #15
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	781b      	ldrb	r3, [r3, #0]
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b004      	add	sp, #16
 8004112:	bdb0      	pop	{r4, r5, r7, pc}
 8004114:	200009c8 	.word	0x200009c8
 8004118:	0000c350 	.word	0x0000c350
 800411c:	40022000 	.word	0x40022000

08004120 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <FLASH_MassErase+0x28>)
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <FLASH_MassErase+0x2c>)
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <FLASH_MassErase+0x2c>)
 8004130:	2104      	movs	r1, #4
 8004132:	430a      	orrs	r2, r1
 8004134:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <FLASH_MassErase+0x2c>)
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <FLASH_MassErase+0x2c>)
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	430a      	orrs	r2, r1
 8004140:	611a      	str	r2, [r3, #16]
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200009c8 	.word	0x200009c8
 800414c:	40022000 	.word	0x40022000

08004150 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <FLASH_PageErase+0x34>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <FLASH_PageErase+0x38>)
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <FLASH_PageErase+0x38>)
 8004164:	2102      	movs	r1, #2
 8004166:	430a      	orrs	r2, r1
 8004168:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <FLASH_PageErase+0x38>)
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <FLASH_PageErase+0x38>)
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <FLASH_PageErase+0x38>)
 8004176:	2140      	movs	r1, #64	; 0x40
 8004178:	430a      	orrs	r2, r1
 800417a:	611a      	str	r2, [r3, #16]
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200009c8 	.word	0x200009c8
 8004188:	40022000 	.word	0x40022000

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800419a:	e155      	b.n	8004448 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4091      	lsls	r1, r2
 80041a6:	000a      	movs	r2, r1
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d100      	bne.n	80041b4 <HAL_GPIO_Init+0x28>
 80041b2:	e146      	b.n	8004442 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2203      	movs	r2, #3
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d005      	beq.n	80041cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2203      	movs	r2, #3
 80041c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d130      	bne.n	800422e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	409a      	lsls	r2, r3
 80041da:	0013      	movs	r3, r2
 80041dc:	43da      	mvns	r2, r3
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	409a      	lsls	r2, r3
 80041ee:	0013      	movs	r3, r2
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004202:	2201      	movs	r2, #1
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	43da      	mvns	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	2201      	movs	r2, #1
 800421a:	401a      	ands	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	409a      	lsls	r2, r3
 8004220:	0013      	movs	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2203      	movs	r2, #3
 8004234:	4013      	ands	r3, r2
 8004236:	2b03      	cmp	r3, #3
 8004238:	d017      	beq.n	800426a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	409a      	lsls	r2, r3
 8004248:	0013      	movs	r3, r2
 800424a:	43da      	mvns	r2, r3
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	0013      	movs	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2203      	movs	r2, #3
 8004270:	4013      	ands	r3, r2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d123      	bne.n	80042be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	08da      	lsrs	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3208      	adds	r2, #8
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	58d3      	ldr	r3, [r2, r3]
 8004282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2207      	movs	r2, #7
 8004288:	4013      	ands	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	409a      	lsls	r2, r3
 8004290:	0013      	movs	r3, r2
 8004292:	43da      	mvns	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2107      	movs	r1, #7
 80042a2:	400b      	ands	r3, r1
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	08da      	lsrs	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3208      	adds	r2, #8
 80042b8:	0092      	lsls	r2, r2, #2
 80042ba:	6939      	ldr	r1, [r7, #16]
 80042bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	409a      	lsls	r2, r3
 80042cc:	0013      	movs	r3, r2
 80042ce:	43da      	mvns	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2203      	movs	r2, #3
 80042dc:	401a      	ands	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	409a      	lsls	r2, r3
 80042e4:	0013      	movs	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	23c0      	movs	r3, #192	; 0xc0
 80042f8:	029b      	lsls	r3, r3, #10
 80042fa:	4013      	ands	r3, r2
 80042fc:	d100      	bne.n	8004300 <HAL_GPIO_Init+0x174>
 80042fe:	e0a0      	b.n	8004442 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004300:	4b57      	ldr	r3, [pc, #348]	; (8004460 <HAL_GPIO_Init+0x2d4>)
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	4b56      	ldr	r3, [pc, #344]	; (8004460 <HAL_GPIO_Init+0x2d4>)
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	4b54      	ldr	r3, [pc, #336]	; (8004460 <HAL_GPIO_Init+0x2d4>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2201      	movs	r2, #1
 8004312:	4013      	ands	r3, r2
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004318:	4a52      	ldr	r2, [pc, #328]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	3302      	adds	r3, #2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	589b      	ldr	r3, [r3, r2]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2203      	movs	r2, #3
 800432a:	4013      	ands	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	220f      	movs	r2, #15
 8004330:	409a      	lsls	r2, r3
 8004332:	0013      	movs	r3, r2
 8004334:	43da      	mvns	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	2390      	movs	r3, #144	; 0x90
 8004340:	05db      	lsls	r3, r3, #23
 8004342:	429a      	cmp	r2, r3
 8004344:	d019      	beq.n	800437a <HAL_GPIO_Init+0x1ee>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a47      	ldr	r2, [pc, #284]	; (8004468 <HAL_GPIO_Init+0x2dc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <HAL_GPIO_Init+0x1ea>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a46      	ldr	r2, [pc, #280]	; (800446c <HAL_GPIO_Init+0x2e0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00d      	beq.n	8004372 <HAL_GPIO_Init+0x1e6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a45      	ldr	r2, [pc, #276]	; (8004470 <HAL_GPIO_Init+0x2e4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d007      	beq.n	800436e <HAL_GPIO_Init+0x1e2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a44      	ldr	r2, [pc, #272]	; (8004474 <HAL_GPIO_Init+0x2e8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_GPIO_Init+0x1de>
 8004366:	2304      	movs	r3, #4
 8004368:	e008      	b.n	800437c <HAL_GPIO_Init+0x1f0>
 800436a:	2305      	movs	r3, #5
 800436c:	e006      	b.n	800437c <HAL_GPIO_Init+0x1f0>
 800436e:	2303      	movs	r3, #3
 8004370:	e004      	b.n	800437c <HAL_GPIO_Init+0x1f0>
 8004372:	2302      	movs	r3, #2
 8004374:	e002      	b.n	800437c <HAL_GPIO_Init+0x1f0>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_GPIO_Init+0x1f0>
 800437a:	2300      	movs	r3, #0
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	2103      	movs	r1, #3
 8004380:	400a      	ands	r2, r1
 8004382:	0092      	lsls	r2, r2, #2
 8004384:	4093      	lsls	r3, r2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800438c:	4935      	ldr	r1, [pc, #212]	; (8004464 <HAL_GPIO_Init+0x2d8>)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	3302      	adds	r3, #2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800439a:	4b37      	ldr	r3, [pc, #220]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	43da      	mvns	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	035b      	lsls	r3, r3, #13
 80043b2:	4013      	ands	r3, r2
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043be:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043c4:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	039b      	lsls	r3, r3, #14
 80043dc:	4013      	ands	r3, r2
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043e8:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80043ee:	4b22      	ldr	r3, [pc, #136]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43da      	mvns	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	029b      	lsls	r3, r3, #10
 8004406:	4013      	ands	r3, r2
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004412:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004418:	4b17      	ldr	r3, [pc, #92]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	43da      	mvns	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	025b      	lsls	r3, r3, #9
 8004430:	4013      	ands	r3, r2
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <HAL_GPIO_Init+0x2ec>)
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	3301      	adds	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	40da      	lsrs	r2, r3
 8004450:	1e13      	subs	r3, r2, #0
 8004452:	d000      	beq.n	8004456 <HAL_GPIO_Init+0x2ca>
 8004454:	e6a2      	b.n	800419c <HAL_GPIO_Init+0x10>
  } 
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	40010000 	.word	0x40010000
 8004468:	48000400 	.word	0x48000400
 800446c:	48000800 	.word	0x48000800
 8004470:	48000c00 	.word	0x48000c00
 8004474:	48001000 	.word	0x48001000
 8004478:	40010400 	.word	0x40010400

0800447c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	000a      	movs	r2, r1
 8004486:	1cbb      	adds	r3, r7, #2
 8004488:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	1cba      	adds	r2, r7, #2
 8004490:	8812      	ldrh	r2, [r2, #0]
 8004492:	4013      	ands	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004496:	230f      	movs	r3, #15
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e003      	b.n	80044a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044a0:	230f      	movs	r3, #15
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	781b      	ldrb	r3, [r3, #0]
  }
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	0008      	movs	r0, r1
 80044c0:	0011      	movs	r1, r2
 80044c2:	1cbb      	adds	r3, r7, #2
 80044c4:	1c02      	adds	r2, r0, #0
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	1c7b      	adds	r3, r7, #1
 80044ca:	1c0a      	adds	r2, r1, #0
 80044cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ce:	1c7b      	adds	r3, r7, #1
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044d6:	1cbb      	adds	r3, r7, #2
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044de:	e003      	b.n	80044e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044e0:	1cbb      	adds	r3, r7, #2
 80044e2:	881a      	ldrh	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0002      	movs	r2, r0
 80044f8:	1dbb      	adds	r3, r7, #6
 80044fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	1dba      	adds	r2, r7, #6
 8004502:	8812      	ldrh	r2, [r2, #0]
 8004504:	4013      	ands	r3, r2
 8004506:	d008      	beq.n	800451a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800450a:	1dba      	adds	r2, r7, #6
 800450c:	8812      	ldrh	r2, [r2, #0]
 800450e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	0018      	movs	r0, r3
 8004516:	f7fd fd11 	bl	8001f3c <HAL_GPIO_EXTI_Callback>
  }
}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	46bd      	mov	sp, r7
 800451e:	b002      	add	sp, #8
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	40010400 	.word	0x40010400

08004528 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a03      	ldr	r2, [pc, #12]	; (8004544 <HAL_IWDG_Refresh+0x1c>)
 8004536:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b002      	add	sp, #8
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	0000aaaa 	.word	0x0000aaaa

08004548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454a:	b08b      	sub	sp, #44	; 0x2c
 800454c:	af06      	add	r7, sp, #24
 800454e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e0f0      	b.n	800473c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a79      	ldr	r2, [pc, #484]	; (8004744 <HAL_PCD_Init+0x1fc>)
 800455e:	5c9b      	ldrb	r3, [r3, r2]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d108      	bne.n	8004578 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	23aa      	movs	r3, #170	; 0xaa
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	2100      	movs	r1, #0
 800456e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	0018      	movs	r0, r3
 8004574:	f7fe fc88 	bl	8002e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a72      	ldr	r2, [pc, #456]	; (8004744 <HAL_PCD_Init+0x1fc>)
 800457c:	2103      	movs	r1, #3
 800457e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0018      	movs	r0, r3
 8004586:	f003 f957 	bl	8007838 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800458a:	230f      	movs	r3, #15
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e049      	b.n	8004628 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004594:	200f      	movs	r0, #15
 8004596:	183b      	adds	r3, r7, r0
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	0013      	movs	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	189b      	adds	r3, r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	18cb      	adds	r3, r1, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045ae:	183b      	adds	r3, r7, r0
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	0013      	movs	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	183a      	adds	r2, r7, r0
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045c4:	183b      	adds	r3, r7, r0
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	0013      	movs	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	18cb      	adds	r3, r1, r3
 80045d6:	3303      	adds	r3, #3
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	0013      	movs	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	18cb      	adds	r3, r1, r3
 80045ec:	3338      	adds	r3, #56	; 0x38
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045f2:	183b      	adds	r3, r7, r0
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	0013      	movs	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	189b      	adds	r3, r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	18cb      	adds	r3, r1, r3
 8004602:	333c      	adds	r3, #60	; 0x3c
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004608:	183b      	adds	r3, r7, r0
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	0013      	movs	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	189b      	adds	r3, r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	18cb      	adds	r3, r1, r3
 8004618:	3340      	adds	r3, #64	; 0x40
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461e:	183b      	adds	r3, r7, r0
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	183b      	adds	r3, r7, r0
 8004624:	3201      	adds	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	210f      	movs	r1, #15
 800462a:	187b      	adds	r3, r7, r1
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3ae      	bcc.n	8004594 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004636:	187b      	adds	r3, r7, r1
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e056      	b.n	80046ec <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800463e:	240f      	movs	r4, #15
 8004640:	193b      	adds	r3, r7, r4
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	236a      	movs	r3, #106	; 0x6a
 8004648:	33ff      	adds	r3, #255	; 0xff
 800464a:	0019      	movs	r1, r3
 800464c:	0013      	movs	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	189b      	adds	r3, r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	18c3      	adds	r3, r0, r3
 8004656:	185b      	adds	r3, r3, r1
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800465c:	193b      	adds	r3, r7, r4
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	23b4      	movs	r3, #180	; 0xb4
 8004664:	0059      	lsls	r1, r3, #1
 8004666:	0013      	movs	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	189b      	adds	r3, r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	18c3      	adds	r3, r0, r3
 8004670:	185b      	adds	r3, r3, r1
 8004672:	193a      	adds	r2, r7, r4
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004678:	193b      	adds	r3, r7, r4
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	236c      	movs	r3, #108	; 0x6c
 8004680:	33ff      	adds	r3, #255	; 0xff
 8004682:	0019      	movs	r1, r3
 8004684:	0013      	movs	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	189b      	adds	r3, r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	18c3      	adds	r3, r0, r3
 800468e:	185b      	adds	r3, r3, r1
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004694:	193b      	adds	r3, r7, r4
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	23bc      	movs	r3, #188	; 0xbc
 800469c:	0059      	lsls	r1, r3, #1
 800469e:	0013      	movs	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	18c3      	adds	r3, r0, r3
 80046a8:	185b      	adds	r3, r3, r1
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046ae:	193b      	adds	r3, r7, r4
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	23be      	movs	r3, #190	; 0xbe
 80046b6:	0059      	lsls	r1, r3, #1
 80046b8:	0013      	movs	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	189b      	adds	r3, r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	18c3      	adds	r3, r0, r3
 80046c2:	185b      	adds	r3, r3, r1
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046c8:	193b      	adds	r3, r7, r4
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	23c0      	movs	r3, #192	; 0xc0
 80046d0:	0059      	lsls	r1, r3, #1
 80046d2:	0013      	movs	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	18c3      	adds	r3, r0, r3
 80046dc:	185b      	adds	r3, r3, r1
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e2:	193b      	adds	r3, r7, r4
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	3201      	adds	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	230f      	movs	r3, #15
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d3a1      	bcc.n	800463e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	466a      	mov	r2, sp
 8004702:	0011      	movs	r1, r2
 8004704:	001a      	movs	r2, r3
 8004706:	3210      	adds	r2, #16
 8004708:	ca70      	ldmia	r2!, {r4, r5, r6}
 800470a:	c170      	stmia	r1!, {r4, r5, r6}
 800470c:	ca30      	ldmia	r2!, {r4, r5}
 800470e:	c130      	stmia	r1!, {r4, r5}
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 f8a9 	bl	800786c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2224      	movs	r2, #36	; 0x24
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a07      	ldr	r2, [pc, #28]	; (8004744 <HAL_PCD_Init+0x1fc>)
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d103      	bne.n	800473a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 f807 	bl	8004748 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b005      	add	sp, #20
 8004742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004744:	000002a9 	.word	0x000002a9

08004748 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	23ba      	movs	r3, #186	; 0xba
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	2101      	movs	r1, #1
 800475e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	23b8      	movs	r3, #184	; 0xb8
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	2100      	movs	r1, #0
 8004768:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2254      	movs	r2, #84	; 0x54
 800476e:	5a9b      	ldrh	r3, [r3, r2]
 8004770:	b29b      	uxth	r3, r3
 8004772:	2201      	movs	r2, #1
 8004774:	4313      	orrs	r3, r2
 8004776:	b299      	uxth	r1, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2254      	movs	r2, #84	; 0x54
 800477c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2254      	movs	r2, #84	; 0x54
 8004782:	5a9b      	ldrh	r3, [r3, r2]
 8004784:	b29b      	uxth	r3, r3
 8004786:	2202      	movs	r2, #2
 8004788:	4313      	orrs	r3, r2
 800478a:	b299      	uxth	r1, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2254      	movs	r2, #84	; 0x54
 8004790:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f000 fb76 	bl	8004e9c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	4013      	ands	r3, r2
 80047b8:	d100      	bne.n	80047bc <HAL_RCC_OscConfig+0x20>
 80047ba:	e08e      	b.n	80048da <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047bc:	4bc5      	ldr	r3, [pc, #788]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	220c      	movs	r2, #12
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d00e      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047c8:	4bc2      	ldr	r3, [pc, #776]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	220c      	movs	r2, #12
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d117      	bne.n	8004804 <HAL_RCC_OscConfig+0x68>
 80047d4:	4bbf      	ldr	r3, [pc, #764]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	23c0      	movs	r3, #192	; 0xc0
 80047da:	025b      	lsls	r3, r3, #9
 80047dc:	401a      	ands	r2, r3
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d10e      	bne.n	8004804 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e6:	4bbb      	ldr	r3, [pc, #748]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	029b      	lsls	r3, r3, #10
 80047ee:	4013      	ands	r3, r2
 80047f0:	d100      	bne.n	80047f4 <HAL_RCC_OscConfig+0x58>
 80047f2:	e071      	b.n	80048d8 <HAL_RCC_OscConfig+0x13c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d000      	beq.n	80047fe <HAL_RCC_OscConfig+0x62>
 80047fc:	e06c      	b.n	80048d8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f000 fb4c 	bl	8004e9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_RCC_OscConfig+0x80>
 800480c:	4bb1      	ldr	r3, [pc, #708]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4bb0      	ldr	r3, [pc, #704]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	0249      	lsls	r1, r1, #9
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e02f      	b.n	800487c <HAL_RCC_OscConfig+0xe0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10c      	bne.n	800483e <HAL_RCC_OscConfig+0xa2>
 8004824:	4bab      	ldr	r3, [pc, #684]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4baa      	ldr	r3, [pc, #680]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 800482a:	49ab      	ldr	r1, [pc, #684]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800482c:	400a      	ands	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	4ba8      	ldr	r3, [pc, #672]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4ba7      	ldr	r3, [pc, #668]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004836:	49a9      	ldr	r1, [pc, #676]	; (8004adc <HAL_RCC_OscConfig+0x340>)
 8004838:	400a      	ands	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e01e      	b.n	800487c <HAL_RCC_OscConfig+0xe0>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d10e      	bne.n	8004864 <HAL_RCC_OscConfig+0xc8>
 8004846:	4ba3      	ldr	r3, [pc, #652]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4ba2      	ldr	r3, [pc, #648]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	02c9      	lsls	r1, r1, #11
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	4b9f      	ldr	r3, [pc, #636]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b9e      	ldr	r3, [pc, #632]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 800485a:	2180      	movs	r1, #128	; 0x80
 800485c:	0249      	lsls	r1, r1, #9
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e00b      	b.n	800487c <HAL_RCC_OscConfig+0xe0>
 8004864:	4b9b      	ldr	r3, [pc, #620]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b9a      	ldr	r3, [pc, #616]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 800486a:	499b      	ldr	r1, [pc, #620]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800486c:	400a      	ands	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b97      	ldr	r3, [pc, #604]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004876:	4999      	ldr	r1, [pc, #612]	; (8004adc <HAL_RCC_OscConfig+0x340>)
 8004878:	400a      	ands	r2, r1
 800487a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d014      	beq.n	80048ae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fe fba4 	bl	8002fd0 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800488e:	f7fe fb9f 	bl	8002fd0 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b64      	cmp	r3, #100	; 0x64
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e2fd      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a0:	4b8c      	ldr	r3, [pc, #560]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	029b      	lsls	r3, r3, #10
 80048a8:	4013      	ands	r3, r2
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0xf2>
 80048ac:	e015      	b.n	80048da <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fe fb8f 	bl	8002fd0 <HAL_GetTick>
 80048b2:	0003      	movs	r3, r0
 80048b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b8:	f7fe fb8a 	bl	8002fd0 <HAL_GetTick>
 80048bc:	0002      	movs	r2, r0
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e2e8      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	4b82      	ldr	r3, [pc, #520]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	029b      	lsls	r3, r3, #10
 80048d2:	4013      	ands	r3, r2
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x11c>
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2202      	movs	r2, #2
 80048e0:	4013      	ands	r3, r2
 80048e2:	d100      	bne.n	80048e6 <HAL_RCC_OscConfig+0x14a>
 80048e4:	e06c      	b.n	80049c0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048e6:	4b7b      	ldr	r3, [pc, #492]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	220c      	movs	r2, #12
 80048ec:	4013      	ands	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048f0:	4b78      	ldr	r3, [pc, #480]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	220c      	movs	r2, #12
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d11f      	bne.n	800493c <HAL_RCC_OscConfig+0x1a0>
 80048fc:	4b75      	ldr	r3, [pc, #468]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	23c0      	movs	r3, #192	; 0xc0
 8004902:	025b      	lsls	r3, r3, #9
 8004904:	401a      	ands	r2, r3
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	429a      	cmp	r2, r3
 800490c:	d116      	bne.n	800493c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	4b71      	ldr	r3, [pc, #452]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2202      	movs	r2, #2
 8004914:	4013      	ands	r3, r2
 8004916:	d005      	beq.n	8004924 <HAL_RCC_OscConfig+0x188>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d001      	beq.n	8004924 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e2bb      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b6b      	ldr	r3, [pc, #428]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	22f8      	movs	r2, #248	; 0xf8
 800492a:	4393      	bics	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00da      	lsls	r2, r3, #3
 8004934:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004936:	430a      	orrs	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	e041      	b.n	80049c0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d024      	beq.n	800498e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004944:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b62      	ldr	r3, [pc, #392]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe fb3e 	bl	8002fd0 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800495a:	f7fe fb39 	bl	8002fd0 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e297      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2202      	movs	r2, #2
 8004972:	4013      	ands	r3, r2
 8004974:	d0f1      	beq.n	800495a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004976:	4b57      	ldr	r3, [pc, #348]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	22f8      	movs	r2, #248	; 0xf8
 800497c:	4393      	bics	r3, r2
 800497e:	0019      	movs	r1, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	00da      	lsls	r2, r3, #3
 8004986:	4b53      	ldr	r3, [pc, #332]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004988:	430a      	orrs	r2, r1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	4b51      	ldr	r3, [pc, #324]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b50      	ldr	r3, [pc, #320]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004994:	2101      	movs	r1, #1
 8004996:	438a      	bics	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499a:	f7fe fb19 	bl	8002fd0 <HAL_GetTick>
 800499e:	0003      	movs	r3, r0
 80049a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a4:	f7fe fb14 	bl	8002fd0 <HAL_GetTick>
 80049a8:	0002      	movs	r2, r0
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e272      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	4b47      	ldr	r3, [pc, #284]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2202      	movs	r2, #2
 80049bc:	4013      	ands	r3, r2
 80049be:	d1f1      	bne.n	80049a4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2208      	movs	r2, #8
 80049c6:	4013      	ands	r3, r2
 80049c8:	d036      	beq.n	8004a38 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d019      	beq.n	8004a06 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d2:	4b40      	ldr	r3, [pc, #256]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80049d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d6:	4b3f      	ldr	r3, [pc, #252]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80049d8:	2101      	movs	r1, #1
 80049da:	430a      	orrs	r2, r1
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fe faf7 	bl	8002fd0 <HAL_GetTick>
 80049e2:	0003      	movs	r3, r0
 80049e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e8:	f7fe faf2 	bl	8002fd0 <HAL_GetTick>
 80049ec:	0002      	movs	r2, r0
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e250      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2202      	movs	r2, #2
 8004a00:	4013      	ands	r3, r2
 8004a02:	d0f1      	beq.n	80049e8 <HAL_RCC_OscConfig+0x24c>
 8004a04:	e018      	b.n	8004a38 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0a:	4b32      	ldr	r3, [pc, #200]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	438a      	bics	r2, r1
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a12:	f7fe fadd 	bl	8002fd0 <HAL_GetTick>
 8004a16:	0003      	movs	r3, r0
 8004a18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fad8 	bl	8002fd0 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e236      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2e:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2202      	movs	r2, #2
 8004a34:	4013      	ands	r3, r2
 8004a36:	d1f1      	bne.n	8004a1c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d100      	bne.n	8004a44 <HAL_RCC_OscConfig+0x2a8>
 8004a42:	e0b5      	b.n	8004bb0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a44:	201f      	movs	r0, #31
 8004a46:	183b      	adds	r3, r7, r0
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	055b      	lsls	r3, r3, #21
 8004a54:	4013      	ands	r3, r2
 8004a56:	d110      	bne.n	8004a7a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a58:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	0549      	lsls	r1, r1, #21
 8004a62:	430a      	orrs	r2, r1
 8004a64:	61da      	str	r2, [r3, #28]
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	055b      	lsls	r3, r3, #21
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a74:	183b      	adds	r3, r7, r0
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_RCC_OscConfig+0x344>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4013      	ands	r3, r2
 8004a84:	d11a      	bne.n	8004abc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a86:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <HAL_RCC_OscConfig+0x344>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_RCC_OscConfig+0x344>)
 8004a8c:	2180      	movs	r1, #128	; 0x80
 8004a8e:	0049      	lsls	r1, r1, #1
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a94:	f7fe fa9c 	bl	8002fd0 <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fe fa97 	bl	8002fd0 <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	; 0x64
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1f5      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_RCC_OscConfig+0x344>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x348>
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	4b02      	ldr	r3, [pc, #8]	; (8004ad4 <HAL_RCC_OscConfig+0x338>)
 8004aca:	2101      	movs	r1, #1
 8004acc:	430a      	orrs	r2, r1
 8004ace:	621a      	str	r2, [r3, #32]
 8004ad0:	e036      	b.n	8004b40 <HAL_RCC_OscConfig+0x3a4>
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	fffeffff 	.word	0xfffeffff
 8004adc:	fffbffff 	.word	0xfffbffff
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x36a>
 8004aec:	4bca      	ldr	r3, [pc, #808]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004aee:	6a1a      	ldr	r2, [r3, #32]
 8004af0:	4bc9      	ldr	r3, [pc, #804]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004af2:	2101      	movs	r1, #1
 8004af4:	438a      	bics	r2, r1
 8004af6:	621a      	str	r2, [r3, #32]
 8004af8:	4bc7      	ldr	r3, [pc, #796]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	4bc6      	ldr	r3, [pc, #792]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004afe:	2104      	movs	r1, #4
 8004b00:	438a      	bics	r2, r1
 8004b02:	621a      	str	r2, [r3, #32]
 8004b04:	e01c      	b.n	8004b40 <HAL_RCC_OscConfig+0x3a4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x38c>
 8004b0e:	4bc2      	ldr	r3, [pc, #776]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b10:	6a1a      	ldr	r2, [r3, #32]
 8004b12:	4bc1      	ldr	r3, [pc, #772]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b14:	2104      	movs	r1, #4
 8004b16:	430a      	orrs	r2, r1
 8004b18:	621a      	str	r2, [r3, #32]
 8004b1a:	4bbf      	ldr	r3, [pc, #764]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	4bbe      	ldr	r3, [pc, #760]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b20:	2101      	movs	r1, #1
 8004b22:	430a      	orrs	r2, r1
 8004b24:	621a      	str	r2, [r3, #32]
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_OscConfig+0x3a4>
 8004b28:	4bbb      	ldr	r3, [pc, #748]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b2a:	6a1a      	ldr	r2, [r3, #32]
 8004b2c:	4bba      	ldr	r3, [pc, #744]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b2e:	2101      	movs	r1, #1
 8004b30:	438a      	bics	r2, r1
 8004b32:	621a      	str	r2, [r3, #32]
 8004b34:	4bb8      	ldr	r3, [pc, #736]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	4bb7      	ldr	r3, [pc, #732]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b3a:	2104      	movs	r1, #4
 8004b3c:	438a      	bics	r2, r1
 8004b3e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d014      	beq.n	8004b72 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b48:	f7fe fa42 	bl	8002fd0 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b50:	e009      	b.n	8004b66 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fe fa3d 	bl	8002fd0 <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	4aaf      	ldr	r2, [pc, #700]	; (8004e1c <HAL_RCC_OscConfig+0x680>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e19a      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b66:	4bac      	ldr	r3, [pc, #688]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x3b6>
 8004b70:	e013      	b.n	8004b9a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b72:	f7fe fa2d 	bl	8002fd0 <HAL_GetTick>
 8004b76:	0003      	movs	r3, r0
 8004b78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7a:	e009      	b.n	8004b90 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fe fa28 	bl	8002fd0 <HAL_GetTick>
 8004b80:	0002      	movs	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	4aa5      	ldr	r2, [pc, #660]	; (8004e1c <HAL_RCC_OscConfig+0x680>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e185      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b90:	4ba1      	ldr	r3, [pc, #644]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	2202      	movs	r2, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b9a:	231f      	movs	r3, #31
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba4:	4b9c      	ldr	r3, [pc, #624]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	4b9b      	ldr	r3, [pc, #620]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004baa:	499d      	ldr	r1, [pc, #628]	; (8004e20 <HAL_RCC_OscConfig+0x684>)
 8004bac:	400a      	ands	r2, r1
 8004bae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d12a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004bc2:	4b95      	ldr	r3, [pc, #596]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc6:	4b94      	ldr	r3, [pc, #592]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004bc8:	2104      	movs	r1, #4
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004bce:	4b92      	ldr	r3, [pc, #584]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd2:	4b91      	ldr	r3, [pc, #580]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fe f9f9 	bl	8002fd0 <HAL_GetTick>
 8004bde:	0003      	movs	r3, r0
 8004be0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004be4:	f7fe f9f4 	bl	8002fd0 <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e152      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004bf6:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0f1      	beq.n	8004be4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c00:	4b85      	ldr	r3, [pc, #532]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c04:	22f8      	movs	r2, #248	; 0xf8
 8004c06:	4393      	bics	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	00da      	lsls	r2, r3, #3
 8004c10:	4b81      	ldr	r3, [pc, #516]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c12:	430a      	orrs	r2, r1
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34
 8004c16:	e034      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	3305      	adds	r3, #5
 8004c1e:	d111      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004c20:	4b7d      	ldr	r3, [pc, #500]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c24:	4b7c      	ldr	r3, [pc, #496]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c26:	2104      	movs	r1, #4
 8004c28:	438a      	bics	r2, r1
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c2c:	4b7a      	ldr	r3, [pc, #488]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c30:	22f8      	movs	r2, #248	; 0xf8
 8004c32:	4393      	bics	r3, r2
 8004c34:	0019      	movs	r1, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	00da      	lsls	r2, r3, #3
 8004c3c:	4b76      	ldr	r3, [pc, #472]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	635a      	str	r2, [r3, #52]	; 0x34
 8004c42:	e01e      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c44:	4b74      	ldr	r3, [pc, #464]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c48:	4b73      	ldr	r3, [pc, #460]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c4a:	2104      	movs	r1, #4
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004c50:	4b71      	ldr	r3, [pc, #452]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c54:	4b70      	ldr	r3, [pc, #448]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c56:	2101      	movs	r1, #1
 8004c58:	438a      	bics	r2, r1
 8004c5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5c:	f7fe f9b8 	bl	8002fd0 <HAL_GetTick>
 8004c60:	0003      	movs	r3, r0
 8004c62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c66:	f7fe f9b3 	bl	8002fd0 <HAL_GetTick>
 8004c6a:	0002      	movs	r2, r0
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e111      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c78:	4b67      	ldr	r3, [pc, #412]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d1f1      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2220      	movs	r2, #32
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d05c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004c8c:	4b62      	ldr	r3, [pc, #392]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	220c      	movs	r2, #12
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d00e      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004c98:	4b5f      	ldr	r3, [pc, #380]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	220c      	movs	r2, #12
 8004c9e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d114      	bne.n	8004cce <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004ca4:	4b5c      	ldr	r3, [pc, #368]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	23c0      	movs	r3, #192	; 0xc0
 8004caa:	025b      	lsls	r3, r3, #9
 8004cac:	401a      	ands	r2, r3
 8004cae:	23c0      	movs	r3, #192	; 0xc0
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d10b      	bne.n	8004cce <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004cb6:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d040      	beq.n	8004d44 <HAL_RCC_OscConfig+0x5a8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d03c      	beq.n	8004d44 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0e6      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01b      	beq.n	8004d0e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004cd6:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cda:	4b4f      	ldr	r3, [pc, #316]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004cdc:	2180      	movs	r1, #128	; 0x80
 8004cde:	0249      	lsls	r1, r1, #9
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe f974 	bl	8002fd0 <HAL_GetTick>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cee:	f7fe f96f 	bl	8002fd0 <HAL_GetTick>
 8004cf2:	0002      	movs	r2, r0
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e0cd      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d00:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	029b      	lsls	r3, r3, #10
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x552>
 8004d0c:	e01b      	b.n	8004d46 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004d0e:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d14:	4943      	ldr	r1, [pc, #268]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d16:	400a      	ands	r2, r1
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fe f959 	bl	8002fd0 <HAL_GetTick>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d24:	f7fe f954 	bl	8002fd0 <HAL_GetTick>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0b2      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d36:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	029b      	lsls	r3, r3, #10
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x588>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d44:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d100      	bne.n	8004d50 <HAL_RCC_OscConfig+0x5b4>
 8004d4e:	e0a4      	b.n	8004e9a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d50:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	220c      	movs	r2, #12
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d100      	bne.n	8004d5e <HAL_RCC_OscConfig+0x5c2>
 8004d5c:	e078      	b.n	8004e50 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d14c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d6c:	492e      	ldr	r1, [pc, #184]	; (8004e28 <HAL_RCC_OscConfig+0x68c>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fe f92d 	bl	8002fd0 <HAL_GetTick>
 8004d76:	0003      	movs	r3, r0
 8004d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fe f928 	bl	8002fd0 <HAL_GetTick>
 8004d80:	0002      	movs	r2, r0
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e086      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8e:	4b22      	ldr	r3, [pc, #136]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	049b      	lsls	r3, r3, #18
 8004d96:	4013      	ands	r3, r2
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	220f      	movs	r2, #15
 8004da0:	4393      	bics	r3, r2
 8004da2:	0019      	movs	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004daa:	430a      	orrs	r2, r1
 8004dac:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_RCC_OscConfig+0x690>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	0449      	lsls	r1, r1, #17
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fe f8fb 	bl	8002fd0 <HAL_GetTick>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fe f8f6 	bl	8002fd0 <HAL_GetTick>
 8004de4:	0002      	movs	r2, r0
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e054      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	049b      	lsls	r3, r3, #18
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x644>
 8004dfe:	e04c      	b.n	8004e9a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <HAL_RCC_OscConfig+0x67c>)
 8004e06:	4908      	ldr	r1, [pc, #32]	; (8004e28 <HAL_RCC_OscConfig+0x68c>)
 8004e08:	400a      	ands	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fe f8e0 	bl	8002fd0 <HAL_GetTick>
 8004e10:	0003      	movs	r3, r0
 8004e12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x6a6>
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	00001388 	.word	0x00001388
 8004e20:	efffffff 	.word	0xefffffff
 8004e24:	fffeffff 	.word	0xfffeffff
 8004e28:	feffffff 	.word	0xfeffffff
 8004e2c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fe f8ce 	bl	8002fd0 <HAL_GetTick>
 8004e34:	0002      	movs	r2, r0
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e02c      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e42:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <HAL_RCC_OscConfig+0x708>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	049b      	lsls	r3, r3, #18
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x694>
 8004e4e:	e024      	b.n	8004e9a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e01f      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <HAL_RCC_OscConfig+0x708>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <HAL_RCC_OscConfig+0x708>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	23c0      	movs	r3, #192	; 0xc0
 8004e6c:	025b      	lsls	r3, r3, #9
 8004e6e:	401a      	ands	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d10e      	bne.n	8004e96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	401a      	ands	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	23f0      	movs	r3, #240	; 0xf0
 8004e8a:	039b      	lsls	r3, r3, #14
 8004e8c:	401a      	ands	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b008      	add	sp, #32
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0bf      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b61      	ldr	r3, [pc, #388]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d911      	bls.n	8004eee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b5e      	ldr	r3, [pc, #376]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	4393      	bics	r3, r2
 8004ed2:	0019      	movs	r1, r3
 8004ed4:	4b5b      	ldr	r3, [pc, #364]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004edc:	4b59      	ldr	r3, [pc, #356]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0a6      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d015      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2204      	movs	r2, #4
 8004efe:	4013      	ands	r3, r2
 8004f00:	d006      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f02:	4b51      	ldr	r3, [pc, #324]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b50      	ldr	r3, [pc, #320]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f08:	21e0      	movs	r1, #224	; 0xe0
 8004f0a:	00c9      	lsls	r1, r1, #3
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b4d      	ldr	r3, [pc, #308]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	22f0      	movs	r2, #240	; 0xf0
 8004f16:	4393      	bics	r3, r2
 8004f18:	0019      	movs	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	4b4a      	ldr	r3, [pc, #296]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d04c      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b44      	ldr	r3, [pc, #272]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d120      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e07a      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4e:	4b3e      	ldr	r3, [pc, #248]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	049b      	lsls	r3, r3, #18
 8004f56:	4013      	ands	r3, r2
 8004f58:	d114      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e06e      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f66:	4b38      	ldr	r3, [pc, #224]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d108      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e062      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	4b34      	ldr	r3, [pc, #208]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e05b      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f84:	4b30      	ldr	r3, [pc, #192]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2203      	movs	r2, #3
 8004f8a:	4393      	bics	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f98:	f7fe f81a 	bl	8002fd0 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa0:	e009      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa2:	f7fe f815 	bl	8002fd0 <HAL_GetTick>
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	4a27      	ldr	r2, [pc, #156]	; (800504c <HAL_RCC_ClockConfig+0x1a4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e042      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	220c      	movs	r2, #12
 8004fbc:	401a      	ands	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1ec      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d211      	bcs.n	8004ffa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4393      	bics	r3, r2
 8004fde:	0019      	movs	r1, r3
 8004fe0:	4b18      	ldr	r3, [pc, #96]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe8:	4b16      	ldr	r3, [pc, #88]	; (8005044 <HAL_RCC_ClockConfig+0x19c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2201      	movs	r2, #1
 8004fee:	4013      	ands	r3, r2
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e020      	b.n	800503c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2204      	movs	r2, #4
 8005000:	4013      	ands	r3, r2
 8005002:	d009      	beq.n	8005018 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005004:	4b10      	ldr	r3, [pc, #64]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4a11      	ldr	r2, [pc, #68]	; (8005050 <HAL_RCC_ClockConfig+0x1a8>)
 800500a:	4013      	ands	r3, r2
 800500c:	0019      	movs	r1, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005018:	f000 f820 	bl	800505c <HAL_RCC_GetSysClockFreq>
 800501c:	0001      	movs	r1, r0
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <HAL_RCC_ClockConfig+0x1a0>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	220f      	movs	r2, #15
 8005026:	4013      	ands	r3, r2
 8005028:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <HAL_RCC_ClockConfig+0x1ac>)
 800502a:	5cd3      	ldrb	r3, [r2, r3]
 800502c:	000a      	movs	r2, r1
 800502e:	40da      	lsrs	r2, r3
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <HAL_RCC_ClockConfig+0x1b0>)
 8005032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005034:	2003      	movs	r0, #3
 8005036:	f7fd ff85 	bl	8002f44 <HAL_InitTick>
  
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	0018      	movs	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	b004      	add	sp, #16
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40022000 	.word	0x40022000
 8005048:	40021000 	.word	0x40021000
 800504c:	00001388 	.word	0x00001388
 8005050:	fffff8ff 	.word	0xfffff8ff
 8005054:	0800d548 	.word	0x0800d548
 8005058:	20000004 	.word	0x20000004

0800505c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	220c      	movs	r2, #12
 8005080:	4013      	ands	r3, r2
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d046      	beq.n	8005114 <HAL_RCC_GetSysClockFreq+0xb8>
 8005086:	d848      	bhi.n	800511a <HAL_RCC_GetSysClockFreq+0xbe>
 8005088:	2b04      	cmp	r3, #4
 800508a:	d002      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x36>
 800508c:	2b08      	cmp	r3, #8
 800508e:	d003      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x3c>
 8005090:	e043      	b.n	800511a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005092:	4b27      	ldr	r3, [pc, #156]	; (8005130 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005094:	613b      	str	r3, [r7, #16]
      break;
 8005096:	e043      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0c9b      	lsrs	r3, r3, #18
 800509c:	220f      	movs	r2, #15
 800509e:	4013      	ands	r3, r2
 80050a0:	4a24      	ldr	r2, [pc, #144]	; (8005134 <HAL_RCC_GetSysClockFreq+0xd8>)
 80050a2:	5cd3      	ldrb	r3, [r2, r3]
 80050a4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80050a6:	4b21      	ldr	r3, [pc, #132]	; (800512c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	220f      	movs	r2, #15
 80050ac:	4013      	ands	r3, r2
 80050ae:	4a22      	ldr	r2, [pc, #136]	; (8005138 <HAL_RCC_GetSysClockFreq+0xdc>)
 80050b0:	5cd3      	ldrb	r3, [r2, r3]
 80050b2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	23c0      	movs	r3, #192	; 0xc0
 80050b8:	025b      	lsls	r3, r3, #9
 80050ba:	401a      	ands	r2, r3
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	025b      	lsls	r3, r3, #9
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d109      	bne.n	80050d8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	481a      	ldr	r0, [pc, #104]	; (8005130 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050c8:	f7fb f81e 	bl	8000108 <__udivsi3>
 80050cc:	0003      	movs	r3, r0
 80050ce:	001a      	movs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4353      	muls	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e01a      	b.n	800510e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	23c0      	movs	r3, #192	; 0xc0
 80050dc:	025b      	lsls	r3, r3, #9
 80050de:	401a      	ands	r2, r3
 80050e0:	23c0      	movs	r3, #192	; 0xc0
 80050e2:	025b      	lsls	r3, r3, #9
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d109      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4814      	ldr	r0, [pc, #80]	; (800513c <HAL_RCC_GetSysClockFreq+0xe0>)
 80050ec:	f7fb f80c 	bl	8000108 <__udivsi3>
 80050f0:	0003      	movs	r3, r0
 80050f2:	001a      	movs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4353      	muls	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e008      	b.n	800510e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	480c      	ldr	r0, [pc, #48]	; (8005130 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005100:	f7fb f802 	bl	8000108 <__udivsi3>
 8005104:	0003      	movs	r3, r0
 8005106:	001a      	movs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4353      	muls	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	613b      	str	r3, [r7, #16]
      break;
 8005112:	e005      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCC_GetSysClockFreq+0xe0>)
 8005116:	613b      	str	r3, [r7, #16]
      break;
 8005118:	e002      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetSysClockFreq+0xd4>)
 800511c:	613b      	str	r3, [r7, #16]
      break;
 800511e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005120:	693b      	ldr	r3, [r7, #16]
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b006      	add	sp, #24
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	40021000 	.word	0x40021000
 8005130:	007a1200 	.word	0x007a1200
 8005134:	0800d560 	.word	0x0800d560
 8005138:	0800d570 	.word	0x0800d570
 800513c:	02dc6c00 	.word	0x02dc6c00

08005140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005144:	4b02      	ldr	r3, [pc, #8]	; (8005150 <HAL_RCC_GetHCLKFreq+0x10>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	20000004 	.word	0x20000004

08005154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005158:	f7ff fff2 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 800515c:	0001      	movs	r1, r0
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	2207      	movs	r2, #7
 8005166:	4013      	ands	r3, r2
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <HAL_RCC_GetPCLK1Freq+0x28>)
 800516a:	5cd3      	ldrb	r3, [r2, r3]
 800516c:	40d9      	lsrs	r1, r3
 800516e:	000b      	movs	r3, r1
}    
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	40021000 	.word	0x40021000
 800517c:	0800d558 	.word	0x0800d558

08005180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	025b      	lsls	r3, r3, #9
 8005198:	4013      	ands	r3, r2
 800519a:	d100      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800519c:	e08e      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800519e:	2017      	movs	r0, #23
 80051a0:	183b      	adds	r3, r7, r0
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a6:	4b6e      	ldr	r3, [pc, #440]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051a8:	69da      	ldr	r2, [r3, #28]
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	055b      	lsls	r3, r3, #21
 80051ae:	4013      	ands	r3, r2
 80051b0:	d110      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	4b6b      	ldr	r3, [pc, #428]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	4b6a      	ldr	r3, [pc, #424]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	0549      	lsls	r1, r1, #21
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
 80051c0:	4b67      	ldr	r3, [pc, #412]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	055b      	lsls	r3, r3, #21
 80051c8:	4013      	ands	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ce:	183b      	adds	r3, r7, r0
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	4b63      	ldr	r3, [pc, #396]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	4013      	ands	r3, r2
 80051de:	d11a      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e0:	4b60      	ldr	r3, [pc, #384]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b5f      	ldr	r3, [pc, #380]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051e6:	2180      	movs	r1, #128	; 0x80
 80051e8:	0049      	lsls	r1, r1, #1
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fd feef 	bl	8002fd0 <HAL_GetTick>
 80051f2:	0003      	movs	r3, r0
 80051f4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	e008      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f8:	f7fd feea 	bl	8002fd0 <HAL_GetTick>
 80051fc:	0002      	movs	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e0a6      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520a:	4b56      	ldr	r3, [pc, #344]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4013      	ands	r3, r2
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005216:	4b52      	ldr	r3, [pc, #328]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005218:	6a1a      	ldr	r2, [r3, #32]
 800521a:	23c0      	movs	r3, #192	; 0xc0
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4013      	ands	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d034      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	23c0      	movs	r3, #192	; 0xc0
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4013      	ands	r3, r2
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	429a      	cmp	r2, r3
 8005236:	d02c      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005238:	4b49      	ldr	r3, [pc, #292]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800523e:	4013      	ands	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	4b46      	ldr	r3, [pc, #280]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005248:	2180      	movs	r1, #128	; 0x80
 800524a:	0249      	lsls	r1, r1, #9
 800524c:	430a      	orrs	r2, r1
 800524e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005250:	4b43      	ldr	r3, [pc, #268]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	4b42      	ldr	r3, [pc, #264]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005256:	4945      	ldr	r1, [pc, #276]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005258:	400a      	ands	r2, r1
 800525a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800525c:	4b40      	ldr	r3, [pc, #256]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	4013      	ands	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526a:	f7fd feb1 	bl	8002fd0 <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	e009      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fd feac 	bl	8002fd0 <HAL_GetTick>
 8005278:	0002      	movs	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	4a3c      	ldr	r2, [pc, #240]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e067      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005288:	4b35      	ldr	r3, [pc, #212]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	2202      	movs	r2, #2
 800528e:	4013      	ands	r3, r2
 8005290:	d0f0      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005292:	4b33      	ldr	r3, [pc, #204]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4a34      	ldr	r2, [pc, #208]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005298:	4013      	ands	r3, r2
 800529a:	0019      	movs	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052a2:	430a      	orrs	r2, r1
 80052a4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052a6:	2317      	movs	r3, #23
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b0:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052b6:	492f      	ldr	r1, [pc, #188]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80052b8:	400a      	ands	r2, r1
 80052ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	4013      	ands	r3, r2
 80052c4:	d009      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c6:	4b26      	ldr	r3, [pc, #152]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	2203      	movs	r2, #3
 80052cc:	4393      	bics	r3, r2
 80052ce:	0019      	movs	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	4b22      	ldr	r3, [pc, #136]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052d6:	430a      	orrs	r2, r1
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2202      	movs	r2, #2
 80052e0:	4013      	ands	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052e4:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	4a23      	ldr	r2, [pc, #140]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	0019      	movs	r1, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052f4:	430a      	orrs	r2, r1
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2220      	movs	r2, #32
 80052fe:	4013      	ands	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	2210      	movs	r2, #16
 8005308:	4393      	bics	r3, r2
 800530a:	0019      	movs	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	4b13      	ldr	r3, [pc, #76]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005312:	430a      	orrs	r2, r1
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	2380      	movs	r3, #128	; 0x80
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	4013      	ands	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	4393      	bics	r3, r2
 800532a:	0019      	movs	r1, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005332:	430a      	orrs	r2, r1
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4013      	ands	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005342:	4b07      	ldr	r3, [pc, #28]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	2240      	movs	r2, #64	; 0x40
 8005348:	4393      	bics	r3, r2
 800534a:	0019      	movs	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005352:	430a      	orrs	r2, r1
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	0018      	movs	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	b006      	add	sp, #24
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021000 	.word	0x40021000
 8005364:	40007000 	.word	0x40007000
 8005368:	fffffcff 	.word	0xfffffcff
 800536c:	fffeffff 	.word	0xfffeffff
 8005370:	00001388 	.word	0x00001388
 8005374:	efffffff 	.word	0xefffffff
 8005378:	fffcffff 	.word	0xfffcffff

0800537c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0a8      	b.n	80054e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	2382      	movs	r3, #130	; 0x82
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	429a      	cmp	r2, r3
 80053a0:	d009      	beq.n	80053b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	61da      	str	r2, [r3, #28]
 80053a8:	e005      	b.n	80053b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	225d      	movs	r2, #93	; 0x5d
 80053c0:	5c9b      	ldrb	r3, [r3, r2]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d107      	bne.n	80053d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	225c      	movs	r2, #92	; 0x5c
 80053cc:	2100      	movs	r1, #0
 80053ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7fd fbd6 	bl	8002b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	225d      	movs	r2, #93	; 0x5d
 80053dc:	2102      	movs	r1, #2
 80053de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2140      	movs	r1, #64	; 0x40
 80053ec:	438a      	bics	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	23e0      	movs	r3, #224	; 0xe0
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d902      	bls.n	8005402 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e002      	b.n	8005408 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	015b      	lsls	r3, r3, #5
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	23f0      	movs	r3, #240	; 0xf0
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	429a      	cmp	r2, r3
 8005412:	d008      	beq.n	8005426 <HAL_SPI_Init+0xaa>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	23e0      	movs	r3, #224	; 0xe0
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	429a      	cmp	r2, r3
 800541e:	d002      	beq.n	8005426 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	2382      	movs	r3, #130	; 0x82
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	401a      	ands	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6899      	ldr	r1, [r3, #8]
 8005434:	2384      	movs	r3, #132	; 0x84
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	400b      	ands	r3, r1
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2102      	movs	r1, #2
 8005442:	400b      	ands	r3, r1
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2101      	movs	r1, #1
 800544c:	400b      	ands	r3, r1
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6999      	ldr	r1, [r3, #24]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	400b      	ands	r3, r1
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	2138      	movs	r1, #56	; 0x38
 8005462:	400b      	ands	r3, r1
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	400b      	ands	r3, r1
 800546e:	431a      	orrs	r2, r3
 8005470:	0011      	movs	r1, r2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	401a      	ands	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	2204      	movs	r2, #4
 800548c:	401a      	ands	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2110      	movs	r1, #16
 8005494:	400b      	ands	r3, r1
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	2108      	movs	r1, #8
 800549e:	400b      	ands	r3, r1
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68d9      	ldr	r1, [r3, #12]
 80054a6:	23f0      	movs	r3, #240	; 0xf0
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	400b      	ands	r3, r1
 80054ac:	431a      	orrs	r2, r3
 80054ae:	0011      	movs	r1, r2
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	015b      	lsls	r3, r3, #5
 80054b6:	401a      	ands	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4907      	ldr	r1, [pc, #28]	; (80054e8 <HAL_SPI_Init+0x16c>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	225d      	movs	r2, #93	; 0x5d
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	0018      	movs	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b004      	add	sp, #16
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	fffff7ff 	.word	0xfffff7ff

080054ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	1dbb      	adds	r3, r7, #6
 80054fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fc:	231f      	movs	r3, #31
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	225c      	movs	r2, #92	; 0x5c
 8005508:	5c9b      	ldrb	r3, [r3, r2]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_SPI_Transmit+0x26>
 800550e:	2302      	movs	r3, #2
 8005510:	e147      	b.n	80057a2 <HAL_SPI_Transmit+0x2b6>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	225c      	movs	r2, #92	; 0x5c
 8005516:	2101      	movs	r1, #1
 8005518:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800551a:	f7fd fd59 	bl	8002fd0 <HAL_GetTick>
 800551e:	0003      	movs	r3, r0
 8005520:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005522:	2316      	movs	r3, #22
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	1dba      	adds	r2, r7, #6
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	225d      	movs	r2, #93	; 0x5d
 8005530:	5c9b      	ldrb	r3, [r3, r2]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d004      	beq.n	8005542 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005538:	231f      	movs	r3, #31
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2202      	movs	r2, #2
 800553e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005540:	e128      	b.n	8005794 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_SPI_Transmit+0x64>
 8005548:	1dbb      	adds	r3, r7, #6
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005550:	231f      	movs	r3, #31
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
    goto error;
 8005558:	e11c      	b.n	8005794 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	225d      	movs	r2, #93	; 0x5d
 800555e:	2103      	movs	r1, #3
 8005560:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1dba      	adds	r2, r7, #6
 8005572:	8812      	ldrh	r2, [r2, #0]
 8005574:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1dba      	adds	r2, r7, #6
 800557a:	8812      	ldrh	r2, [r2, #0]
 800557c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2244      	movs	r2, #68	; 0x44
 8005588:	2100      	movs	r1, #0
 800558a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2246      	movs	r2, #70	; 0x46
 8005590:	2100      	movs	r1, #0
 8005592:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d110      	bne.n	80055ce <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2140      	movs	r1, #64	; 0x40
 80055b8:	438a      	bics	r2, r1
 80055ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	01c9      	lsls	r1, r1, #7
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2240      	movs	r2, #64	; 0x40
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d007      	beq.n	80055ec <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2140      	movs	r1, #64	; 0x40
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	23e0      	movs	r3, #224	; 0xe0
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d952      	bls.n	800569e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <HAL_SPI_Transmit+0x11e>
 8005600:	2316      	movs	r3, #22
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d143      	bne.n	8005692 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	881a      	ldrh	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800562e:	e030      	b.n	8005692 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2202      	movs	r2, #2
 8005638:	4013      	ands	r3, r2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d112      	bne.n	8005664 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	1c9a      	adds	r2, r3, #2
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005662:	e016      	b.n	8005692 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005664:	f7fd fcb4 	bl	8002fd0 <HAL_GetTick>
 8005668:	0002      	movs	r2, r0
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d802      	bhi.n	800567a <HAL_SPI_Transmit+0x18e>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	d102      	bne.n	8005680 <HAL_SPI_Transmit+0x194>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d108      	bne.n	8005692 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005680:	231f      	movs	r3, #31
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	2203      	movs	r2, #3
 8005686:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	225d      	movs	r2, #93	; 0x5d
 800568c:	2101      	movs	r1, #1
 800568e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005690:	e080      	b.n	8005794 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1c9      	bne.n	8005630 <HAL_SPI_Transmit+0x144>
 800569c:	e053      	b.n	8005746 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <HAL_SPI_Transmit+0x1c4>
 80056a6:	2316      	movs	r3, #22
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d145      	bne.n	800573c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	7812      	ldrb	r2, [r2, #0]
 80056bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80056d6:	e031      	b.n	800573c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2202      	movs	r2, #2
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d113      	bne.n	800570e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800570c:	e016      	b.n	800573c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570e:	f7fd fc5f 	bl	8002fd0 <HAL_GetTick>
 8005712:	0002      	movs	r2, r0
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d802      	bhi.n	8005724 <HAL_SPI_Transmit+0x238>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	d102      	bne.n	800572a <HAL_SPI_Transmit+0x23e>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800572a:	231f      	movs	r3, #31
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	2203      	movs	r2, #3
 8005730:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	225d      	movs	r2, #93	; 0x5d
 8005736:	2101      	movs	r1, #1
 8005738:	5499      	strb	r1, [r3, r2]
          goto error;
 800573a:	e02b      	b.n	8005794 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1c8      	bne.n	80056d8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	0018      	movs	r0, r3
 800574e:	f000 fb3f 	bl	8005dd0 <SPI_EndRxTxTransaction>
 8005752:	1e03      	subs	r3, r0, #0
 8005754:	d002      	beq.n	800575c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005782:	231f      	movs	r3, #31
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e003      	b.n	8005794 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	225d      	movs	r2, #93	; 0x5d
 8005790:	2101      	movs	r1, #1
 8005792:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	225c      	movs	r2, #92	; 0x5c
 8005798:	2100      	movs	r1, #0
 800579a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800579c:	231f      	movs	r3, #31
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	781b      	ldrb	r3, [r3, #0]
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b008      	add	sp, #32
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	001a      	movs	r2, r3
 80057ba:	1cbb      	adds	r3, r7, #2
 80057bc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057be:	2301      	movs	r3, #1
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057c2:	2323      	movs	r3, #35	; 0x23
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	225c      	movs	r2, #92	; 0x5c
 80057ce:	5c9b      	ldrb	r3, [r3, r2]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_SPI_TransmitReceive+0x2c>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e1c4      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x3b6>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	225c      	movs	r2, #92	; 0x5c
 80057dc:	2101      	movs	r1, #1
 80057de:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057e0:	f7fd fbf6 	bl	8002fd0 <HAL_GetTick>
 80057e4:	0003      	movs	r3, r0
 80057e6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057e8:	201b      	movs	r0, #27
 80057ea:	183b      	adds	r3, r7, r0
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	215d      	movs	r1, #93	; 0x5d
 80057f0:	5c52      	ldrb	r2, [r2, r1]
 80057f2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057fa:	2312      	movs	r3, #18
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	1cba      	adds	r2, r7, #2
 8005800:	8812      	ldrh	r2, [r2, #0]
 8005802:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005804:	183b      	adds	r3, r7, r0
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d011      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x84>
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	2382      	movs	r3, #130	; 0x82
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	429a      	cmp	r2, r3
 8005814:	d107      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x7a>
 800581e:	183b      	adds	r3, r7, r0
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d004      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005826:	2323      	movs	r3, #35	; 0x23
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2202      	movs	r2, #2
 800582c:	701a      	strb	r2, [r3, #0]
    goto error;
 800582e:	e191      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d006      	beq.n	8005844 <HAL_SPI_TransmitReceive+0x98>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_SPI_TransmitReceive+0x98>
 800583c:	1cbb      	adds	r3, r7, #2
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005844:	2323      	movs	r3, #35	; 0x23
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
    goto error;
 800584c:	e182      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	225d      	movs	r2, #93	; 0x5d
 8005852:	5c9b      	ldrb	r3, [r3, r2]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b04      	cmp	r3, #4
 8005858:	d003      	beq.n	8005862 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	225d      	movs	r2, #93	; 0x5d
 800585e:	2105      	movs	r1, #5
 8005860:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1cba      	adds	r2, r7, #2
 8005872:	2146      	movs	r1, #70	; 0x46
 8005874:	8812      	ldrh	r2, [r2, #0]
 8005876:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	1cba      	adds	r2, r7, #2
 800587c:	2144      	movs	r1, #68	; 0x44
 800587e:	8812      	ldrh	r2, [r2, #0]
 8005880:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1cba      	adds	r2, r7, #2
 800588c:	8812      	ldrh	r2, [r2, #0]
 800588e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1cba      	adds	r2, r7, #2
 8005894:	8812      	ldrh	r2, [r2, #0]
 8005896:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	23e0      	movs	r3, #224	; 0xe0
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d908      	bls.n	80058c2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	49ac      	ldr	r1, [pc, #688]	; (8005b6c <HAL_SPI_TransmitReceive+0x3c0>)
 80058bc:	400a      	ands	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
 80058c0:	e008      	b.n	80058d4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	0149      	lsls	r1, r1, #5
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2240      	movs	r2, #64	; 0x40
 80058dc:	4013      	ands	r3, r2
 80058de:	2b40      	cmp	r3, #64	; 0x40
 80058e0:	d007      	beq.n	80058f2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2140      	movs	r1, #64	; 0x40
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	23e0      	movs	r3, #224	; 0xe0
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d800      	bhi.n	8005900 <HAL_SPI_TransmitReceive+0x154>
 80058fe:	e083      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_SPI_TransmitReceive+0x168>
 8005908:	2312      	movs	r3, #18
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d000      	beq.n	8005914 <HAL_SPI_TransmitReceive+0x168>
 8005912:	e06d      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	881a      	ldrh	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005938:	e05a      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2202      	movs	r2, #2
 8005942:	4013      	ands	r3, r2
 8005944:	2b02      	cmp	r3, #2
 8005946:	d11b      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x1d4>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x1d4>
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	2b01      	cmp	r3, #1
 8005956:	d113      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	881a      	ldrh	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2201      	movs	r2, #1
 8005988:	4013      	ands	r3, r2
 800598a:	2b01      	cmp	r3, #1
 800598c:	d11c      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x21c>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2246      	movs	r2, #70	; 0x46
 8005992:	5a9b      	ldrh	r3, [r3, r2]
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d016      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	b292      	uxth	r2, r2
 80059a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2246      	movs	r2, #70	; 0x46
 80059b6:	5a9b      	ldrh	r3, [r3, r2]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b299      	uxth	r1, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2246      	movs	r2, #70	; 0x46
 80059c2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059c4:	2301      	movs	r3, #1
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059c8:	f7fd fb02 	bl	8002fd0 <HAL_GetTick>
 80059cc:	0002      	movs	r2, r0
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d80b      	bhi.n	80059f0 <HAL_SPI_TransmitReceive+0x244>
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	3301      	adds	r3, #1
 80059dc:	d008      	beq.n	80059f0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80059de:	2323      	movs	r3, #35	; 0x23
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	2203      	movs	r2, #3
 80059e4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	225d      	movs	r2, #93	; 0x5d
 80059ea:	2101      	movs	r1, #1
 80059ec:	5499      	strb	r1, [r3, r2]
        goto error;
 80059ee:	e0b1      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d19f      	bne.n	800593a <HAL_SPI_TransmitReceive+0x18e>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2246      	movs	r2, #70	; 0x46
 80059fe:	5a9b      	ldrh	r3, [r3, r2]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d199      	bne.n	800593a <HAL_SPI_TransmitReceive+0x18e>
 8005a06:	e089      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x270>
 8005a10:	2312      	movs	r3, #18
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d000      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x270>
 8005a1a:	e074      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	7812      	ldrb	r2, [r2, #0]
 8005a28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a42:	e060      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d11c      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x2e0>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d017      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x2e0>
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d114      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2201      	movs	r2, #1
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d11e      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x32c>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2246      	movs	r2, #70	; 0x46
 8005a9e:	5a9b      	ldrh	r3, [r3, r2]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d018      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	001a      	movs	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	7812      	ldrb	r2, [r2, #0]
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2246      	movs	r2, #70	; 0x46
 8005ac6:	5a9b      	ldrh	r3, [r3, r2]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b299      	uxth	r1, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2246      	movs	r2, #70	; 0x46
 8005ad2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ad8:	f7fd fa7a 	bl	8002fd0 <HAL_GetTick>
 8005adc:	0002      	movs	r2, r0
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d802      	bhi.n	8005aee <HAL_SPI_TransmitReceive+0x342>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	3301      	adds	r3, #1
 8005aec:	d102      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x348>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d108      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005af4:	2323      	movs	r3, #35	; 0x23
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	2203      	movs	r2, #3
 8005afa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	225d      	movs	r2, #93	; 0x5d
 8005b00:	2101      	movs	r1, #1
 8005b02:	5499      	strb	r1, [r3, r2]
        goto error;
 8005b04:	e026      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d199      	bne.n	8005a44 <HAL_SPI_TransmitReceive+0x298>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2246      	movs	r2, #70	; 0x46
 8005b14:	5a9b      	ldrh	r3, [r3, r2]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d193      	bne.n	8005a44 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 f954 	bl	8005dd0 <SPI_EndRxTxTransaction>
 8005b28:	1e03      	subs	r3, r0, #0
 8005b2a:	d006      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005b2c:	2323      	movs	r3, #35	; 0x23
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005b42:	2323      	movs	r3, #35	; 0x23
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	e003      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	225d      	movs	r2, #93	; 0x5d
 8005b50:	2101      	movs	r1, #1
 8005b52:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	225c      	movs	r2, #92	; 0x5c
 8005b58:	2100      	movs	r1, #0
 8005b5a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b5c:	2323      	movs	r3, #35	; 0x23
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	781b      	ldrb	r3, [r3, #0]
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b00a      	add	sp, #40	; 0x28
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	ffffefff 	.word	0xffffefff

08005b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	1dfb      	adds	r3, r7, #7
 8005b7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b80:	f7fd fa26 	bl	8002fd0 <HAL_GetTick>
 8005b84:	0002      	movs	r2, r0
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	18d3      	adds	r3, r2, r3
 8005b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b90:	f7fd fa1e 	bl	8002fd0 <HAL_GetTick>
 8005b94:	0003      	movs	r3, r0
 8005b96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b98:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	015b      	lsls	r3, r3, #5
 8005b9e:	0d1b      	lsrs	r3, r3, #20
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	4353      	muls	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba6:	e058      	b.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	3301      	adds	r3, #1
 8005bac:	d055      	beq.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bae:	f7fd fa0f 	bl	8002fd0 <HAL_GetTick>
 8005bb2:	0002      	movs	r2, r0
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d902      	bls.n	8005bc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d142      	bne.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	21e0      	movs	r1, #224	; 0xe0
 8005bd0:	438a      	bics	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	2382      	movs	r3, #130	; 0x82
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d113      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d005      	beq.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d107      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2140      	movs	r1, #64	; 0x40
 8005c04:	438a      	bics	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	019b      	lsls	r3, r3, #6
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d110      	bne.n	8005c36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	491a      	ldr	r1, [pc, #104]	; (8005c88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	0189      	lsls	r1, r1, #6
 8005c32:	430a      	orrs	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	225d      	movs	r2, #93	; 0x5d
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	225c      	movs	r2, #92	; 0x5c
 8005c42:	2100      	movs	r1, #0
 8005c44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e017      	b.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	4013      	ands	r3, r2
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	425a      	negs	r2, r3
 8005c6a:	4153      	adcs	r3, r2
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	001a      	movs	r2, r3
 8005c70:	1dfb      	adds	r3, r7, #7
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d197      	bne.n	8005ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b008      	add	sp, #32
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	20000004 	.word	0x20000004
 8005c88:	ffffdfff 	.word	0xffffdfff

08005c8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c9a:	2317      	movs	r3, #23
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ca2:	f7fd f995 	bl	8002fd0 <HAL_GetTick>
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	18d3      	adds	r3, r2, r3
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005cb2:	f7fd f98d 	bl	8002fd0 <HAL_GetTick>
 8005cb6:	0003      	movs	r3, r0
 8005cb8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005cc2:	4b41      	ldr	r3, [pc, #260]	; (8005dc8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	0013      	movs	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	189b      	adds	r3, r3, r2
 8005ccc:	00da      	lsls	r2, r3, #3
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	0d1b      	lsrs	r3, r3, #20
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	4353      	muls	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005cd8:	e068      	b.n	8005dac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	23c0      	movs	r3, #192	; 0xc0
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d10a      	bne.n	8005cfa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	2117      	movs	r1, #23
 8005cf2:	187b      	adds	r3, r7, r1
 8005cf4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	d055      	beq.n	8005dac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d00:	f7fd f966 	bl	8002fd0 <HAL_GetTick>
 8005d04:	0002      	movs	r2, r0
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d902      	bls.n	8005d16 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d142      	bne.n	8005d9c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	21e0      	movs	r1, #224	; 0xe0
 8005d22:	438a      	bics	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	2382      	movs	r3, #130	; 0x82
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d113      	bne.n	8005d5a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d005      	beq.n	8005d4a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	2380      	movs	r3, #128	; 0x80
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d107      	bne.n	8005d5a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2140      	movs	r1, #64	; 0x40
 8005d56:	438a      	bics	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d110      	bne.n	8005d88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4916      	ldr	r1, [pc, #88]	; (8005dcc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005d72:	400a      	ands	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2180      	movs	r1, #128	; 0x80
 8005d82:	0189      	lsls	r1, r1, #6
 8005d84:	430a      	orrs	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	225d      	movs	r2, #93	; 0x5d
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	225c      	movs	r2, #92	; 0x5c
 8005d94:	2100      	movs	r1, #0
 8005d96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e010      	b.n	8005dbe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d18e      	bne.n	8005cda <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b00a      	add	sp, #40	; 0x28
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	20000004 	.word	0x20000004
 8005dcc:	ffffdfff 	.word	0xffffdfff

08005dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	23c0      	movs	r3, #192	; 0xc0
 8005de0:	0159      	lsls	r1, r3, #5
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	0013      	movs	r3, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	f7ff ff4e 	bl	8005c8c <SPI_WaitFifoStateUntilTimeout>
 8005df0:	1e03      	subs	r3, r0, #0
 8005df2:	d007      	beq.n	8005e04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	2220      	movs	r2, #32
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e027      	b.n	8005e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	0013      	movs	r3, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	f7ff fead 	bl	8005b70 <SPI_WaitFlagStateUntilTimeout>
 8005e16:	1e03      	subs	r3, r0, #0
 8005e18:	d007      	beq.n	8005e2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	2220      	movs	r2, #32
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e014      	b.n	8005e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	23c0      	movs	r3, #192	; 0xc0
 8005e2e:	00d9      	lsls	r1, r3, #3
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	0013      	movs	r3, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f7ff ff27 	bl	8005c8c <SPI_WaitFifoStateUntilTimeout>
 8005e3e:	1e03      	subs	r3, r0, #0
 8005e40:	d007      	beq.n	8005e52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e46:	2220      	movs	r2, #32
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e000      	b.n	8005e54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e044      	b.n	8005ef8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2278      	movs	r2, #120	; 0x78
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7fc ff85 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2224      	movs	r2, #36	; 0x24
 8005e8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2101      	movs	r1, #1
 8005e98:	438a      	bics	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 fd6e 	bl	8006980 <UART_SetConfig>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e024      	b.n	8005ef8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 fee9 	bl	8006c90 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	490d      	ldr	r1, [pc, #52]	; (8005f00 <HAL_UART_Init+0xa4>)
 8005eca:	400a      	ands	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	212a      	movs	r1, #42	; 0x2a
 8005eda:	438a      	bics	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2101      	movs	r1, #1
 8005eea:	430a      	orrs	r2, r1
 8005eec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f000 ff81 	bl	8006df8 <UART_CheckIdleState>
 8005ef6:	0003      	movs	r3, r0
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b002      	add	sp, #8
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	ffffb7ff 	.word	0xffffb7ff

08005f04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	1dbb      	adds	r3, r7, #6
 8005f10:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d15b      	bne.n	8005fd2 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_UART_Transmit_IT+0x24>
 8005f20:	1dbb      	adds	r3, r7, #6
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e053      	b.n	8005fd4 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	015b      	lsls	r3, r3, #5
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d109      	bne.n	8005f4c <HAL_UART_Transmit_IT+0x48>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2201      	movs	r2, #1
 8005f44:	4013      	ands	r3, r2
 8005f46:	d001      	beq.n	8005f4c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e043      	b.n	8005fd4 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1dba      	adds	r2, r7, #6
 8005f56:	2150      	movs	r1, #80	; 0x50
 8005f58:	8812      	ldrh	r2, [r2, #0]
 8005f5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1dba      	adds	r2, r7, #6
 8005f60:	2152      	movs	r1, #82	; 0x52
 8005f62:	8812      	ldrh	r2, [r2, #0]
 8005f64:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2284      	movs	r2, #132	; 0x84
 8005f70:	2100      	movs	r1, #0
 8005f72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2221      	movs	r2, #33	; 0x21
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	2380      	movs	r3, #128	; 0x80
 8005f80:	015b      	lsls	r3, r3, #5
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d107      	bne.n	8005f96 <HAL_UART_Transmit_IT+0x92>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <HAL_UART_Transmit_IT+0xd8>)
 8005f92:	66da      	str	r2, [r3, #108]	; 0x6c
 8005f94:	e002      	b.n	8005f9c <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <HAL_UART_Transmit_IT+0xdc>)
 8005f9a:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa0:	613b      	str	r3, [r7, #16]
  return(result);
 8005fa2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f383 8810 	msr	PRIMASK, r3
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2180      	movs	r1, #128	; 0x80
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e000      	b.n	8005fd4 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
  }
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b008      	add	sp, #32
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	080073a7 	.word	0x080073a7
 8005fe0:	080072f3 	.word	0x080072f3

08005fe4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	1dbb      	adds	r3, r7, #6
 8005ff0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	589b      	ldr	r3, [r3, r2]
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d145      	bne.n	8006088 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_UART_Receive_IT+0x26>
 8006002:	1dbb      	adds	r3, r7, #6
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e03d      	b.n	800608a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	015b      	lsls	r3, r3, #5
 8006016:	429a      	cmp	r2, r3
 8006018:	d109      	bne.n	800602e <HAL_UART_Receive_IT+0x4a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2201      	movs	r2, #1
 8006026:	4013      	ands	r3, r2
 8006028:	d001      	beq.n	800602e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e02d      	b.n	800608a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	041b      	lsls	r3, r3, #16
 800603e:	4013      	ands	r3, r2
 8006040:	d019      	beq.n	8006076 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006042:	f3ef 8310 	mrs	r3, PRIMASK
 8006046:	613b      	str	r3, [r7, #16]
  return(result);
 8006048:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f383 8810 	msr	PRIMASK, r3
}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2180      	movs	r1, #128	; 0x80
 8006064:	04c9      	lsls	r1, r1, #19
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f383 8810 	msr	PRIMASK, r3
}
 8006074:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006076:	1dbb      	adds	r3, r7, #6
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	0018      	movs	r0, r3
 8006080:	f000 ffcc 	bl	800701c <UART_Start_Receive_IT>
 8006084:	0003      	movs	r3, r0
 8006086:	e000      	b.n	800608a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	0018      	movs	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	b008      	add	sp, #32
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b092      	sub	sp, #72	; 0x48
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609c:	f3ef 8310 	mrs	r3, PRIMASK
 80060a0:	623b      	str	r3, [r7, #32]
  return(result);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
 80060a6:	2301      	movs	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	f383 8810 	msr	PRIMASK, r3
}
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4957      	ldr	r1, [pc, #348]	; (800621c <HAL_UART_AbortReceive_IT+0x188>)
 80060be:	400a      	ands	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	f383 8810 	msr	PRIMASK, r3
}
 80060cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d6:	643b      	str	r3, [r7, #64]	; 0x40
 80060d8:	2301      	movs	r3, #1
 80060da:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	f383 8810 	msr	PRIMASK, r3
}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2101      	movs	r1, #1
 80060f0:	438a      	bics	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fa:	f383 8810 	msr	PRIMASK, r3
}
 80060fe:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006104:	2b01      	cmp	r3, #1
 8006106:	d118      	bne.n	800613a <HAL_UART_AbortReceive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006108:	f3ef 8310 	mrs	r3, PRIMASK
 800610c:	617b      	str	r3, [r7, #20]
  return(result);
 800610e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006112:	2301      	movs	r3, #1
 8006114:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f383 8810 	msr	PRIMASK, r3
}
 800611c:	46c0      	nop			; (mov r8, r8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2110      	movs	r1, #16
 800612a:	438a      	bics	r2, r1
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f383 8810 	msr	PRIMASK, r3
}
 8006138:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2240      	movs	r2, #64	; 0x40
 8006142:	4013      	ands	r3, r2
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d14e      	bne.n	80061e6 <HAL_UART_AbortReceive_IT+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006148:	f3ef 8310 	mrs	r3, PRIMASK
 800614c:	60bb      	str	r3, [r7, #8]
  return(result);
 800614e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006150:	63bb      	str	r3, [r7, #56]	; 0x38
 8006152:	2301      	movs	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f383 8810 	msr	PRIMASK, r3
}
 800615c:	46c0      	nop			; (mov r8, r8)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2140      	movs	r1, #64	; 0x40
 800616a:	438a      	bics	r2, r1
 800616c:	609a      	str	r2, [r3, #8]
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f383 8810 	msr	PRIMASK, r3
}
 8006178:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	2b00      	cmp	r3, #0
 8006180:	d012      	beq.n	80061a8 <HAL_UART_AbortReceive_IT+0x114>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	4a26      	ldr	r2, [pc, #152]	; (8006220 <HAL_UART_AbortReceive_IT+0x18c>)
 8006188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618e:	0018      	movs	r0, r3
 8006190:	f7fd fdaa 	bl	8003ce8 <HAL_DMA_Abort_IT>
 8006194:	1e03      	subs	r3, r0, #0
 8006196:	d03c      	beq.n	8006212 <HAL_UART_AbortReceive_IT+0x17e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a2:	0018      	movs	r0, r3
 80061a4:	4790      	blx	r2
 80061a6:	e034      	b.n	8006212 <HAL_UART_AbortReceive_IT+0x17e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	225a      	movs	r2, #90	; 0x5a
 80061ac:	2100      	movs	r1, #0
 80061ae:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	220f      	movs	r2, #15
 80061bc:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699a      	ldr	r2, [r3, #24]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2108      	movs	r1, #8
 80061ca:	430a      	orrs	r2, r1
 80061cc:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2280      	movs	r2, #128	; 0x80
 80061d2:	2120      	movs	r1, #32
 80061d4:	5099      	str	r1, [r3, r2]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	0018      	movs	r0, r3
 80061e0:	f000 fb08 	bl	80067f4 <HAL_UART_AbortReceiveCpltCallback>
 80061e4:	e015      	b.n	8006212 <HAL_UART_AbortReceive_IT+0x17e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	225a      	movs	r2, #90	; 0x5a
 80061ea:	2100      	movs	r1, #0
 80061ec:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	220f      	movs	r2, #15
 80061fa:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2280      	movs	r2, #128	; 0x80
 8006200:	2120      	movs	r1, #32
 8006202:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 faf1 	bl	80067f4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b012      	add	sp, #72	; 0x48
 800621a:	bd80      	pop	{r7, pc}
 800621c:	fffffedf 	.word	0xfffffedf
 8006220:	080072a7 	.word	0x080072a7

08006224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b0ab      	sub	sp, #172	; 0xac
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	22a4      	movs	r2, #164	; 0xa4
 8006234:	18b9      	adds	r1, r7, r2
 8006236:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	20a0      	movs	r0, #160	; 0xa0
 8006240:	1839      	adds	r1, r7, r0
 8006242:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	219c      	movs	r1, #156	; 0x9c
 800624c:	1879      	adds	r1, r7, r1
 800624e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006250:	0011      	movs	r1, r2
 8006252:	18bb      	adds	r3, r7, r2
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a99      	ldr	r2, [pc, #612]	; (80064bc <HAL_UART_IRQHandler+0x298>)
 8006258:	4013      	ands	r3, r2
 800625a:	2298      	movs	r2, #152	; 0x98
 800625c:	18bc      	adds	r4, r7, r2
 800625e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006260:	18bb      	adds	r3, r7, r2
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d114      	bne.n	8006292 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006268:	187b      	adds	r3, r7, r1
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2220      	movs	r2, #32
 800626e:	4013      	ands	r3, r2
 8006270:	d00f      	beq.n	8006292 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006272:	183b      	adds	r3, r7, r0
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2220      	movs	r2, #32
 8006278:	4013      	ands	r3, r2
 800627a:	d00a      	beq.n	8006292 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006280:	2b00      	cmp	r3, #0
 8006282:	d100      	bne.n	8006286 <HAL_UART_IRQHandler+0x62>
 8006284:	e29e      	b.n	80067c4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	0010      	movs	r0, r2
 800628e:	4798      	blx	r3
      }
      return;
 8006290:	e298      	b.n	80067c4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006292:	2398      	movs	r3, #152	; 0x98
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d100      	bne.n	800629e <HAL_UART_IRQHandler+0x7a>
 800629c:	e114      	b.n	80064c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800629e:	239c      	movs	r3, #156	; 0x9c
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2201      	movs	r2, #1
 80062a6:	4013      	ands	r3, r2
 80062a8:	d106      	bne.n	80062b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062aa:	23a0      	movs	r3, #160	; 0xa0
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a83      	ldr	r2, [pc, #524]	; (80064c0 <HAL_UART_IRQHandler+0x29c>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	d100      	bne.n	80062b8 <HAL_UART_IRQHandler+0x94>
 80062b6:	e107      	b.n	80064c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062b8:	23a4      	movs	r3, #164	; 0xa4
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	4013      	ands	r3, r2
 80062c2:	d012      	beq.n	80062ea <HAL_UART_IRQHandler+0xc6>
 80062c4:	23a0      	movs	r3, #160	; 0xa0
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	4013      	ands	r3, r2
 80062d0:	d00b      	beq.n	80062ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2201      	movs	r2, #1
 80062d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2284      	movs	r2, #132	; 0x84
 80062de:	589b      	ldr	r3, [r3, r2]
 80062e0:	2201      	movs	r2, #1
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2184      	movs	r1, #132	; 0x84
 80062e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062ea:	23a4      	movs	r3, #164	; 0xa4
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2202      	movs	r2, #2
 80062f2:	4013      	ands	r3, r2
 80062f4:	d011      	beq.n	800631a <HAL_UART_IRQHandler+0xf6>
 80062f6:	239c      	movs	r3, #156	; 0x9c
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2201      	movs	r2, #1
 80062fe:	4013      	ands	r3, r2
 8006300:	d00b      	beq.n	800631a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2202      	movs	r2, #2
 8006308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2284      	movs	r2, #132	; 0x84
 800630e:	589b      	ldr	r3, [r3, r2]
 8006310:	2204      	movs	r2, #4
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2184      	movs	r1, #132	; 0x84
 8006318:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800631a:	23a4      	movs	r3, #164	; 0xa4
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2204      	movs	r2, #4
 8006322:	4013      	ands	r3, r2
 8006324:	d011      	beq.n	800634a <HAL_UART_IRQHandler+0x126>
 8006326:	239c      	movs	r3, #156	; 0x9c
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	4013      	ands	r3, r2
 8006330:	d00b      	beq.n	800634a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2204      	movs	r2, #4
 8006338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2284      	movs	r2, #132	; 0x84
 800633e:	589b      	ldr	r3, [r3, r2]
 8006340:	2202      	movs	r2, #2
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2184      	movs	r1, #132	; 0x84
 8006348:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800634a:	23a4      	movs	r3, #164	; 0xa4
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2208      	movs	r2, #8
 8006352:	4013      	ands	r3, r2
 8006354:	d017      	beq.n	8006386 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006356:	23a0      	movs	r3, #160	; 0xa0
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2220      	movs	r2, #32
 800635e:	4013      	ands	r3, r2
 8006360:	d105      	bne.n	800636e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006362:	239c      	movs	r3, #156	; 0x9c
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800636c:	d00b      	beq.n	8006386 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2208      	movs	r2, #8
 8006374:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2284      	movs	r2, #132	; 0x84
 800637a:	589b      	ldr	r3, [r3, r2]
 800637c:	2208      	movs	r2, #8
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2184      	movs	r1, #132	; 0x84
 8006384:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006386:	23a4      	movs	r3, #164	; 0xa4
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	4013      	ands	r3, r2
 8006392:	d013      	beq.n	80063bc <HAL_UART_IRQHandler+0x198>
 8006394:	23a0      	movs	r3, #160	; 0xa0
 8006396:	18fb      	adds	r3, r7, r3
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	2380      	movs	r3, #128	; 0x80
 800639c:	04db      	lsls	r3, r3, #19
 800639e:	4013      	ands	r3, r2
 80063a0:	d00c      	beq.n	80063bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	0112      	lsls	r2, r2, #4
 80063aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2284      	movs	r2, #132	; 0x84
 80063b0:	589b      	ldr	r3, [r3, r2]
 80063b2:	2220      	movs	r2, #32
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2184      	movs	r1, #132	; 0x84
 80063ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2284      	movs	r2, #132	; 0x84
 80063c0:	589b      	ldr	r3, [r3, r2]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d100      	bne.n	80063c8 <HAL_UART_IRQHandler+0x1a4>
 80063c6:	e1ff      	b.n	80067c8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063c8:	23a4      	movs	r3, #164	; 0xa4
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2220      	movs	r2, #32
 80063d0:	4013      	ands	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063d4:	23a0      	movs	r3, #160	; 0xa0
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2220      	movs	r2, #32
 80063dc:	4013      	ands	r3, r2
 80063de:	d008      	beq.n	80063f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	0010      	movs	r0, r2
 80063f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2284      	movs	r2, #132	; 0x84
 80063f6:	589b      	ldr	r3, [r3, r2]
 80063f8:	2194      	movs	r1, #148	; 0x94
 80063fa:	187a      	adds	r2, r7, r1
 80063fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2240      	movs	r2, #64	; 0x40
 8006406:	4013      	ands	r3, r2
 8006408:	2b40      	cmp	r3, #64	; 0x40
 800640a:	d004      	beq.n	8006416 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800640c:	187b      	adds	r3, r7, r1
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2228      	movs	r2, #40	; 0x28
 8006412:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006414:	d047      	beq.n	80064a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	0018      	movs	r0, r3
 800641a:	f000 fec9 	bl	80071b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2240      	movs	r2, #64	; 0x40
 8006426:	4013      	ands	r3, r2
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d137      	bne.n	800649c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642c:	f3ef 8310 	mrs	r3, PRIMASK
 8006430:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006434:	2090      	movs	r0, #144	; 0x90
 8006436:	183a      	adds	r2, r7, r0
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	2301      	movs	r3, #1
 800643c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006440:	f383 8810 	msr	PRIMASK, r3
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2140      	movs	r1, #64	; 0x40
 8006452:	438a      	bics	r2, r1
 8006454:	609a      	str	r2, [r3, #8]
 8006456:	183b      	adds	r3, r7, r0
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800645e:	f383 8810 	msr	PRIMASK, r3
}
 8006462:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006468:	2b00      	cmp	r3, #0
 800646a:	d012      	beq.n	8006492 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <HAL_UART_IRQHandler+0x2a0>)
 8006472:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006478:	0018      	movs	r0, r3
 800647a:	f7fd fc35 	bl	8003ce8 <HAL_DMA_Abort_IT>
 800647e:	1e03      	subs	r3, r0, #0
 8006480:	d01a      	beq.n	80064b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648c:	0018      	movs	r0, r3
 800648e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	e012      	b.n	80064b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0018      	movs	r0, r3
 8006496:	f000 f9a5 	bl	80067e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649a:	e00d      	b.n	80064b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f9a0 	bl	80067e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	e008      	b.n	80064b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 f99b 	bl	80067e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2284      	movs	r2, #132	; 0x84
 80064b2:	2100      	movs	r1, #0
 80064b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80064b6:	e187      	b.n	80067c8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	46c0      	nop			; (mov r8, r8)
    return;
 80064ba:	e185      	b.n	80067c8 <HAL_UART_IRQHandler+0x5a4>
 80064bc:	0000080f 	.word	0x0000080f
 80064c0:	04000120 	.word	0x04000120
 80064c4:	08007279 	.word	0x08007279

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d000      	beq.n	80064d2 <HAL_UART_IRQHandler+0x2ae>
 80064d0:	e139      	b.n	8006746 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064d2:	23a4      	movs	r3, #164	; 0xa4
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2210      	movs	r2, #16
 80064da:	4013      	ands	r3, r2
 80064dc:	d100      	bne.n	80064e0 <HAL_UART_IRQHandler+0x2bc>
 80064de:	e132      	b.n	8006746 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064e0:	23a0      	movs	r3, #160	; 0xa0
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2210      	movs	r2, #16
 80064e8:	4013      	ands	r3, r2
 80064ea:	d100      	bne.n	80064ee <HAL_UART_IRQHandler+0x2ca>
 80064ec:	e12b      	b.n	8006746 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2210      	movs	r2, #16
 80064f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2240      	movs	r2, #64	; 0x40
 80064fe:	4013      	ands	r3, r2
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d000      	beq.n	8006506 <HAL_UART_IRQHandler+0x2e2>
 8006504:	e09f      	b.n	8006646 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	217e      	movs	r1, #126	; 0x7e
 8006510:	187b      	adds	r3, r7, r1
 8006512:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006514:	187b      	adds	r3, r7, r1
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d100      	bne.n	800651e <HAL_UART_IRQHandler+0x2fa>
 800651c:	e156      	b.n	80067cc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2258      	movs	r2, #88	; 0x58
 8006522:	5a9b      	ldrh	r3, [r3, r2]
 8006524:	187a      	adds	r2, r7, r1
 8006526:	8812      	ldrh	r2, [r2, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d300      	bcc.n	800652e <HAL_UART_IRQHandler+0x30a>
 800652c:	e14e      	b.n	80067cc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	187a      	adds	r2, r7, r1
 8006532:	215a      	movs	r1, #90	; 0x5a
 8006534:	8812      	ldrh	r2, [r2, #0]
 8006536:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	2b20      	cmp	r3, #32
 8006540:	d06f      	beq.n	8006622 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006542:	f3ef 8310 	mrs	r3, PRIMASK
 8006546:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800654a:	67bb      	str	r3, [r7, #120]	; 0x78
 800654c:	2301      	movs	r3, #1
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	f383 8810 	msr	PRIMASK, r3
}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	499e      	ldr	r1, [pc, #632]	; (80067dc <HAL_UART_IRQHandler+0x5b8>)
 8006564:	400a      	ands	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	f383 8810 	msr	PRIMASK, r3
}
 8006572:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006574:	f3ef 8310 	mrs	r3, PRIMASK
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800657a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657c:	677b      	str	r3, [r7, #116]	; 0x74
 800657e:	2301      	movs	r3, #1
 8006580:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006584:	f383 8810 	msr	PRIMASK, r3
}
 8006588:	46c0      	nop			; (mov r8, r8)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2101      	movs	r1, #1
 8006596:	438a      	bics	r2, r1
 8006598:	609a      	str	r2, [r3, #8]
 800659a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a0:	f383 8810 	msr	PRIMASK, r3
}
 80065a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a6:	f3ef 8310 	mrs	r3, PRIMASK
 80065aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80065ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ae:	673b      	str	r3, [r7, #112]	; 0x70
 80065b0:	2301      	movs	r3, #1
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b6:	f383 8810 	msr	PRIMASK, r3
}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2140      	movs	r1, #64	; 0x40
 80065c8:	438a      	bics	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]
 80065cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d2:	f383 8810 	msr	PRIMASK, r3
}
 80065d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2280      	movs	r2, #128	; 0x80
 80065dc:	2120      	movs	r1, #32
 80065de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ea:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80065ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065f0:	2301      	movs	r3, #1
 80065f2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065f6:	f383 8810 	msr	PRIMASK, r3
}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2110      	movs	r1, #16
 8006608:	438a      	bics	r2, r1
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006612:	f383 8810 	msr	PRIMASK, r3
}
 8006616:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661c:	0018      	movs	r0, r3
 800661e:	f7fd fb2b 	bl	8003c78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2258      	movs	r2, #88	; 0x58
 800662c:	5a9a      	ldrh	r2, [r3, r2]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	215a      	movs	r1, #90	; 0x5a
 8006632:	5a5b      	ldrh	r3, [r3, r1]
 8006634:	b29b      	uxth	r3, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	0011      	movs	r1, r2
 800663e:	0018      	movs	r0, r3
 8006640:	f000 f8e0 	bl	8006804 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006644:	e0c2      	b.n	80067cc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2258      	movs	r2, #88	; 0x58
 800664a:	5a99      	ldrh	r1, [r3, r2]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	225a      	movs	r2, #90	; 0x5a
 8006650:	5a9b      	ldrh	r3, [r3, r2]
 8006652:	b29a      	uxth	r2, r3
 8006654:	208e      	movs	r0, #142	; 0x8e
 8006656:	183b      	adds	r3, r7, r0
 8006658:	1a8a      	subs	r2, r1, r2
 800665a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	225a      	movs	r2, #90	; 0x5a
 8006660:	5a9b      	ldrh	r3, [r3, r2]
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d100      	bne.n	800666a <HAL_UART_IRQHandler+0x446>
 8006668:	e0b2      	b.n	80067d0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800666a:	183b      	adds	r3, r7, r0
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d100      	bne.n	8006674 <HAL_UART_IRQHandler+0x450>
 8006672:	e0ad      	b.n	80067d0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006674:	f3ef 8310 	mrs	r3, PRIMASK
 8006678:	60fb      	str	r3, [r7, #12]
  return(result);
 800667a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667c:	2488      	movs	r4, #136	; 0x88
 800667e:	193a      	adds	r2, r7, r4
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	2301      	movs	r3, #1
 8006684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f383 8810 	msr	PRIMASK, r3
}
 800668c:	46c0      	nop			; (mov r8, r8)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4951      	ldr	r1, [pc, #324]	; (80067e0 <HAL_UART_IRQHandler+0x5bc>)
 800669a:	400a      	ands	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	193b      	adds	r3, r7, r4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f383 8810 	msr	PRIMASK, r3
}
 80066aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ac:	f3ef 8310 	mrs	r3, PRIMASK
 80066b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80066b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b4:	2484      	movs	r4, #132	; 0x84
 80066b6:	193a      	adds	r2, r7, r4
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	2301      	movs	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f383 8810 	msr	PRIMASK, r3
}
 80066c4:	46c0      	nop			; (mov r8, r8)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2101      	movs	r1, #1
 80066d2:	438a      	bics	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]
 80066d6:	193b      	adds	r3, r7, r4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	f383 8810 	msr	PRIMASK, r3
}
 80066e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2280      	movs	r2, #128	; 0x80
 80066e8:	2120      	movs	r1, #32
 80066ea:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f8:	f3ef 8310 	mrs	r3, PRIMASK
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	2480      	movs	r4, #128	; 0x80
 8006702:	193a      	adds	r2, r7, r4
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	2301      	movs	r3, #1
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2110      	movs	r1, #16
 800671e:	438a      	bics	r2, r1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	193b      	adds	r3, r7, r4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	f383 8810 	msr	PRIMASK, r3
}
 800672e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006736:	183b      	adds	r3, r7, r0
 8006738:	881a      	ldrh	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	0011      	movs	r1, r2
 800673e:	0018      	movs	r0, r3
 8006740:	f000 f860 	bl	8006804 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006744:	e044      	b.n	80067d0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006746:	23a4      	movs	r3, #164	; 0xa4
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	2380      	movs	r3, #128	; 0x80
 800674e:	035b      	lsls	r3, r3, #13
 8006750:	4013      	ands	r3, r2
 8006752:	d010      	beq.n	8006776 <HAL_UART_IRQHandler+0x552>
 8006754:	239c      	movs	r3, #156	; 0x9c
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	03db      	lsls	r3, r3, #15
 800675e:	4013      	ands	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	0352      	lsls	r2, r2, #13
 800676a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	0018      	movs	r0, r3
 8006770:	f001 f85a 	bl	8007828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006774:	e02f      	b.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006776:	23a4      	movs	r3, #164	; 0xa4
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2280      	movs	r2, #128	; 0x80
 800677e:	4013      	ands	r3, r2
 8006780:	d00f      	beq.n	80067a2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006782:	23a0      	movs	r3, #160	; 0xa0
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2280      	movs	r2, #128	; 0x80
 800678a:	4013      	ands	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01e      	beq.n	80067d4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	0010      	movs	r0, r2
 800679e:	4798      	blx	r3
    }
    return;
 80067a0:	e018      	b.n	80067d4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067a2:	23a4      	movs	r3, #164	; 0xa4
 80067a4:	18fb      	adds	r3, r7, r3
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2240      	movs	r2, #64	; 0x40
 80067aa:	4013      	ands	r3, r2
 80067ac:	d013      	beq.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
 80067ae:	23a0      	movs	r3, #160	; 0xa0
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2240      	movs	r2, #64	; 0x40
 80067b6:	4013      	ands	r3, r2
 80067b8:	d00d      	beq.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	0018      	movs	r0, r3
 80067be:	f000 fe50 	bl	8007462 <UART_EndTransmit_IT>
    return;
 80067c2:	e008      	b.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	e006      	b.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80067c8:	46c0      	nop			; (mov r8, r8)
 80067ca:	e004      	b.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	e002      	b.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80067d0:	46c0      	nop			; (mov r8, r8)
 80067d2:	e000      	b.n	80067d6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80067d4:	46c0      	nop			; (mov r8, r8)
  }

}
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b02b      	add	sp, #172	; 0xac
 80067da:	bd90      	pop	{r4, r7, pc}
 80067dc:	fffffeff 	.word	0xfffffeff
 80067e0:	fffffedf 	.word	0xfffffedf

080067e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b002      	add	sp, #8
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80067fc:	46c0      	nop			; (mov r8, r8)
 80067fe:	46bd      	mov	sp, r7
 8006800:	b002      	add	sp, #8
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	000a      	movs	r2, r1
 800680e:	1cbb      	adds	r3, r7, #2
 8006810:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	46bd      	mov	sp, r7
 8006816:	b002      	add	sp, #8
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b08a      	sub	sp, #40	; 0x28
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2278      	movs	r2, #120	; 0x78
 8006826:	5c9b      	ldrb	r3, [r3, r2]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800682c:	2302      	movs	r3, #2
 800682e:	e040      	b.n	80068b2 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2278      	movs	r2, #120	; 0x78
 8006834:	2101      	movs	r1, #1
 8006836:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2224      	movs	r2, #36	; 0x24
 800683c:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800683e:	f3ef 8310 	mrs	r3, PRIMASK
 8006842:	60bb      	str	r3, [r7, #8]
  return(result);
 8006844:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
 8006848:	2301      	movs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f383 8810 	msr	PRIMASK, r3
}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	210c      	movs	r1, #12
 8006860:	438a      	bics	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f383 8810 	msr	PRIMASK, r3
}
 800686e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006870:	f3ef 8310 	mrs	r3, PRIMASK
 8006874:	617b      	str	r3, [r7, #20]
  return(result);
 8006876:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	2301      	movs	r3, #1
 800687c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	f383 8810 	msr	PRIMASK, r3
}
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2108      	movs	r1, #8
 8006892:	430a      	orrs	r2, r1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f383 8810 	msr	PRIMASK, r3
}
 80068a0:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UNLOCK(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2278      	movs	r2, #120	; 0x78
 80068ac:	2100      	movs	r1, #0
 80068ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b00a      	add	sp, #40	; 0x28
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b08a      	sub	sp, #40	; 0x28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2278      	movs	r2, #120	; 0x78
 80068c6:	5c9b      	ldrb	r3, [r3, r2]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_HalfDuplex_EnableReceiver+0x16>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e040      	b.n	8006952 <HAL_HalfDuplex_EnableReceiver+0x98>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2278      	movs	r2, #120	; 0x78
 80068d4:	2101      	movs	r1, #1
 80068d6:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2224      	movs	r2, #36	; 0x24
 80068dc:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068de:	f3ef 8310 	mrs	r3, PRIMASK
 80068e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e4:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
 80068e8:	2301      	movs	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f383 8810 	msr	PRIMASK, r3
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	210c      	movs	r1, #12
 8006900:	438a      	bics	r2, r1
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006910:	f3ef 8310 	mrs	r3, PRIMASK
 8006914:	617b      	str	r3, [r7, #20]
  return(result);
 8006916:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	2301      	movs	r3, #1
 800691c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f383 8810 	msr	PRIMASK, r3
}
 8006924:	46c0      	nop			; (mov r8, r8)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2104      	movs	r1, #4
 8006932:	430a      	orrs	r2, r1
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f383 8810 	msr	PRIMASK, r3
}
 8006940:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UNLOCK(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2278      	movs	r2, #120	; 0x78
 800694c:	2100      	movs	r1, #0
 800694e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	0018      	movs	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	b00a      	add	sp, #40	; 0x28
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006966:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2280      	movs	r2, #128	; 0x80
 800696c:	589b      	ldr	r3, [r3, r2]
 800696e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4313      	orrs	r3, r2
}
 8006976:	0018      	movs	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	b004      	add	sp, #16
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006988:	231e      	movs	r3, #30
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4aaf      	ldr	r2, [pc, #700]	; (8006c6c <UART_SetConfig+0x2ec>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	0019      	movs	r1, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4aaa      	ldr	r2, [pc, #680]	; (8006c70 <UART_SetConfig+0x2f0>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4aa1      	ldr	r2, [pc, #644]	; (8006c74 <UART_SetConfig+0x2f4>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	0019      	movs	r1, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a9d      	ldr	r2, [pc, #628]	; (8006c78 <UART_SetConfig+0x2f8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d127      	bne.n	8006a56 <UART_SetConfig+0xd6>
 8006a06:	4b9d      	ldr	r3, [pc, #628]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d00d      	beq.n	8006a2e <UART_SetConfig+0xae>
 8006a12:	d81b      	bhi.n	8006a4c <UART_SetConfig+0xcc>
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d014      	beq.n	8006a42 <UART_SetConfig+0xc2>
 8006a18:	d818      	bhi.n	8006a4c <UART_SetConfig+0xcc>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <UART_SetConfig+0xa4>
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d00a      	beq.n	8006a38 <UART_SetConfig+0xb8>
 8006a22:	e013      	b.n	8006a4c <UART_SetConfig+0xcc>
 8006a24:	231f      	movs	r3, #31
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	e065      	b.n	8006afa <UART_SetConfig+0x17a>
 8006a2e:	231f      	movs	r3, #31
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	2202      	movs	r2, #2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	e060      	b.n	8006afa <UART_SetConfig+0x17a>
 8006a38:	231f      	movs	r3, #31
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	e05b      	b.n	8006afa <UART_SetConfig+0x17a>
 8006a42:	231f      	movs	r3, #31
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	2208      	movs	r2, #8
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e056      	b.n	8006afa <UART_SetConfig+0x17a>
 8006a4c:	231f      	movs	r3, #31
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	2210      	movs	r2, #16
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	e051      	b.n	8006afa <UART_SetConfig+0x17a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a89      	ldr	r2, [pc, #548]	; (8006c80 <UART_SetConfig+0x300>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d134      	bne.n	8006aca <UART_SetConfig+0x14a>
 8006a60:	4b86      	ldr	r3, [pc, #536]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a64:	23c0      	movs	r3, #192	; 0xc0
 8006a66:	029b      	lsls	r3, r3, #10
 8006a68:	4013      	ands	r3, r2
 8006a6a:	22c0      	movs	r2, #192	; 0xc0
 8006a6c:	0292      	lsls	r2, r2, #10
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d017      	beq.n	8006aa2 <UART_SetConfig+0x122>
 8006a72:	22c0      	movs	r2, #192	; 0xc0
 8006a74:	0292      	lsls	r2, r2, #10
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d822      	bhi.n	8006ac0 <UART_SetConfig+0x140>
 8006a7a:	2280      	movs	r2, #128	; 0x80
 8006a7c:	0292      	lsls	r2, r2, #10
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d019      	beq.n	8006ab6 <UART_SetConfig+0x136>
 8006a82:	2280      	movs	r2, #128	; 0x80
 8006a84:	0292      	lsls	r2, r2, #10
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d81a      	bhi.n	8006ac0 <UART_SetConfig+0x140>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <UART_SetConfig+0x118>
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	0252      	lsls	r2, r2, #9
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00a      	beq.n	8006aac <UART_SetConfig+0x12c>
 8006a96:	e013      	b.n	8006ac0 <UART_SetConfig+0x140>
 8006a98:	231f      	movs	r3, #31
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	e02b      	b.n	8006afa <UART_SetConfig+0x17a>
 8006aa2:	231f      	movs	r3, #31
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e026      	b.n	8006afa <UART_SetConfig+0x17a>
 8006aac:	231f      	movs	r3, #31
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e021      	b.n	8006afa <UART_SetConfig+0x17a>
 8006ab6:	231f      	movs	r3, #31
 8006ab8:	18fb      	adds	r3, r7, r3
 8006aba:	2208      	movs	r2, #8
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e01c      	b.n	8006afa <UART_SetConfig+0x17a>
 8006ac0:	231f      	movs	r3, #31
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	e017      	b.n	8006afa <UART_SetConfig+0x17a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a6d      	ldr	r2, [pc, #436]	; (8006c84 <UART_SetConfig+0x304>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d104      	bne.n	8006ade <UART_SetConfig+0x15e>
 8006ad4:	231f      	movs	r3, #31
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	e00d      	b.n	8006afa <UART_SetConfig+0x17a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a69      	ldr	r2, [pc, #420]	; (8006c88 <UART_SetConfig+0x308>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d104      	bne.n	8006af2 <UART_SetConfig+0x172>
 8006ae8:	231f      	movs	r3, #31
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e003      	b.n	8006afa <UART_SetConfig+0x17a>
 8006af2:	231f      	movs	r3, #31
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	2210      	movs	r2, #16
 8006af8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d15c      	bne.n	8006bc0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8006b06:	231f      	movs	r3, #31
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d015      	beq.n	8006b3c <UART_SetConfig+0x1bc>
 8006b10:	dc18      	bgt.n	8006b44 <UART_SetConfig+0x1c4>
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d00d      	beq.n	8006b32 <UART_SetConfig+0x1b2>
 8006b16:	dc15      	bgt.n	8006b44 <UART_SetConfig+0x1c4>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <UART_SetConfig+0x1a2>
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d005      	beq.n	8006b2c <UART_SetConfig+0x1ac>
 8006b20:	e010      	b.n	8006b44 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b22:	f7fe fb17 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 8006b26:	0003      	movs	r3, r0
 8006b28:	61bb      	str	r3, [r7, #24]
        break;
 8006b2a:	e012      	b.n	8006b52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b2c:	4b57      	ldr	r3, [pc, #348]	; (8006c8c <UART_SetConfig+0x30c>)
 8006b2e:	61bb      	str	r3, [r7, #24]
        break;
 8006b30:	e00f      	b.n	8006b52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b32:	f7fe fa93 	bl	800505c <HAL_RCC_GetSysClockFreq>
 8006b36:	0003      	movs	r3, r0
 8006b38:	61bb      	str	r3, [r7, #24]
        break;
 8006b3a:	e00a      	b.n	8006b52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	61bb      	str	r3, [r7, #24]
        break;
 8006b42:	e006      	b.n	8006b52 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b48:	231e      	movs	r3, #30
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
        break;
 8006b50:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d100      	bne.n	8006b5a <UART_SetConfig+0x1da>
 8006b58:	e07a      	b.n	8006c50 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	005a      	lsls	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	18d2      	adds	r2, r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	0019      	movs	r1, r3
 8006b6c:	0010      	movs	r0, r2
 8006b6e:	f7f9 facb 	bl	8000108 <__udivsi3>
 8006b72:	0003      	movs	r3, r0
 8006b74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b0f      	cmp	r3, #15
 8006b7a:	d91c      	bls.n	8006bb6 <UART_SetConfig+0x236>
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	025b      	lsls	r3, r3, #9
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d217      	bcs.n	8006bb6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	200e      	movs	r0, #14
 8006b8c:	183b      	adds	r3, r7, r0
 8006b8e:	210f      	movs	r1, #15
 8006b90:	438a      	bics	r2, r1
 8006b92:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2207      	movs	r2, #7
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	b299      	uxth	r1, r3
 8006ba0:	183b      	adds	r3, r7, r0
 8006ba2:	183a      	adds	r2, r7, r0
 8006ba4:	8812      	ldrh	r2, [r2, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	183a      	adds	r2, r7, r0
 8006bb0:	8812      	ldrh	r2, [r2, #0]
 8006bb2:	60da      	str	r2, [r3, #12]
 8006bb4:	e04c      	b.n	8006c50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb6:	231e      	movs	r3, #30
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e047      	b.n	8006c50 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bc0:	231f      	movs	r3, #31
 8006bc2:	18fb      	adds	r3, r7, r3
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d015      	beq.n	8006bf6 <UART_SetConfig+0x276>
 8006bca:	dc18      	bgt.n	8006bfe <UART_SetConfig+0x27e>
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d00d      	beq.n	8006bec <UART_SetConfig+0x26c>
 8006bd0:	dc15      	bgt.n	8006bfe <UART_SetConfig+0x27e>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <UART_SetConfig+0x25c>
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d005      	beq.n	8006be6 <UART_SetConfig+0x266>
 8006bda:	e010      	b.n	8006bfe <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fe faba 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 8006be0:	0003      	movs	r3, r0
 8006be2:	61bb      	str	r3, [r7, #24]
        break;
 8006be4:	e012      	b.n	8006c0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <UART_SetConfig+0x30c>)
 8006be8:	61bb      	str	r3, [r7, #24]
        break;
 8006bea:	e00f      	b.n	8006c0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bec:	f7fe fa36 	bl	800505c <HAL_RCC_GetSysClockFreq>
 8006bf0:	0003      	movs	r3, r0
 8006bf2:	61bb      	str	r3, [r7, #24]
        break;
 8006bf4:	e00a      	b.n	8006c0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	61bb      	str	r3, [r7, #24]
        break;
 8006bfc:	e006      	b.n	8006c0c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c02:	231e      	movs	r3, #30
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	2201      	movs	r2, #1
 8006c08:	701a      	strb	r2, [r3, #0]
        break;
 8006c0a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01e      	beq.n	8006c50 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	085a      	lsrs	r2, r3, #1
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	18d2      	adds	r2, r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	0019      	movs	r1, r3
 8006c22:	0010      	movs	r0, r2
 8006c24:	f7f9 fa70 	bl	8000108 <__udivsi3>
 8006c28:	0003      	movs	r3, r0
 8006c2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b0f      	cmp	r3, #15
 8006c30:	d90a      	bls.n	8006c48 <UART_SetConfig+0x2c8>
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	025b      	lsls	r3, r3, #9
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d205      	bcs.n	8006c48 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	e003      	b.n	8006c50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c48:	231e      	movs	r3, #30
 8006c4a:	18fb      	adds	r3, r7, r3
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c5c:	231e      	movs	r3, #30
 8006c5e:	18fb      	adds	r3, r7, r3
 8006c60:	781b      	ldrb	r3, [r3, #0]
}
 8006c62:	0018      	movs	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b008      	add	sp, #32
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	efff69f3 	.word	0xefff69f3
 8006c70:	ffffcfff 	.word	0xffffcfff
 8006c74:	fffff4ff 	.word	0xfffff4ff
 8006c78:	40013800 	.word	0x40013800
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40004400 	.word	0x40004400
 8006c84:	40004800 	.word	0x40004800
 8006c88:	40004c00 	.word	0x40004c00
 8006c8c:	007a1200 	.word	0x007a1200

08006c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4a4a      	ldr	r2, [pc, #296]	; (8006dd4 <UART_AdvFeatureConfig+0x144>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	0019      	movs	r1, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	d00b      	beq.n	8006cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4a43      	ldr	r2, [pc, #268]	; (8006dd8 <UART_AdvFeatureConfig+0x148>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	0019      	movs	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4a3b      	ldr	r2, [pc, #236]	; (8006ddc <UART_AdvFeatureConfig+0x14c>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	0019      	movs	r1, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	2208      	movs	r2, #8
 8006d04:	4013      	ands	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4a34      	ldr	r2, [pc, #208]	; (8006de0 <UART_AdvFeatureConfig+0x150>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	0019      	movs	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2210      	movs	r2, #16
 8006d26:	4013      	ands	r3, r2
 8006d28:	d00b      	beq.n	8006d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	4a2c      	ldr	r2, [pc, #176]	; (8006de4 <UART_AdvFeatureConfig+0x154>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	0019      	movs	r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2220      	movs	r2, #32
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4a25      	ldr	r2, [pc, #148]	; (8006de8 <UART_AdvFeatureConfig+0x158>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	0019      	movs	r1, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	2240      	movs	r2, #64	; 0x40
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d01d      	beq.n	8006daa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <UART_AdvFeatureConfig+0x15c>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	0019      	movs	r1, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d8a:	2380      	movs	r3, #128	; 0x80
 8006d8c:	035b      	lsls	r3, r3, #13
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d10b      	bne.n	8006daa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a15      	ldr	r2, [pc, #84]	; (8006df0 <UART_AdvFeatureConfig+0x160>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	0019      	movs	r1, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2280      	movs	r2, #128	; 0x80
 8006db0:	4013      	ands	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4a0e      	ldr	r2, [pc, #56]	; (8006df4 <UART_AdvFeatureConfig+0x164>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	0019      	movs	r1, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }
}
 8006dcc:	46c0      	nop			; (mov r8, r8)
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	fffdffff 	.word	0xfffdffff
 8006dd8:	fffeffff 	.word	0xfffeffff
 8006ddc:	fffbffff 	.word	0xfffbffff
 8006de0:	ffff7fff 	.word	0xffff7fff
 8006de4:	ffffefff 	.word	0xffffefff
 8006de8:	ffffdfff 	.word	0xffffdfff
 8006dec:	ffefffff 	.word	0xffefffff
 8006df0:	ff9fffff 	.word	0xff9fffff
 8006df4:	fff7ffff 	.word	0xfff7ffff

08006df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b092      	sub	sp, #72	; 0x48
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2284      	movs	r2, #132	; 0x84
 8006e04:	2100      	movs	r1, #0
 8006e06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e08:	f7fc f8e2 	bl	8002fd0 <HAL_GetTick>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2208      	movs	r2, #8
 8006e18:	4013      	ands	r3, r2
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d12c      	bne.n	8006e78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e20:	2280      	movs	r2, #128	; 0x80
 8006e22:	0391      	lsls	r1, r2, #14
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4a46      	ldr	r2, [pc, #280]	; (8006f40 <UART_CheckIdleState+0x148>)
 8006e28:	9200      	str	r2, [sp, #0]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f000 f88c 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e30:	1e03      	subs	r3, r0, #0
 8006e32:	d021      	beq.n	8006e78 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e34:	f3ef 8310 	mrs	r3, PRIMASK
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e3e:	2301      	movs	r3, #1
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	f383 8810 	msr	PRIMASK, r3
}
 8006e48:	46c0      	nop			; (mov r8, r8)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2180      	movs	r1, #128	; 0x80
 8006e56:	438a      	bics	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	f383 8810 	msr	PRIMASK, r3
}
 8006e64:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2278      	movs	r2, #120	; 0x78
 8006e70:	2100      	movs	r1, #0
 8006e72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e05f      	b.n	8006f38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d146      	bne.n	8006f14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	2280      	movs	r2, #128	; 0x80
 8006e8a:	03d1      	lsls	r1, r2, #15
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4a2c      	ldr	r2, [pc, #176]	; (8006f40 <UART_CheckIdleState+0x148>)
 8006e90:	9200      	str	r2, [sp, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f000 f858 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e98:	1e03      	subs	r3, r0, #0
 8006e9a:	d03b      	beq.n	8006f14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f383 8810 	msr	PRIMASK, r3
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4921      	ldr	r1, [pc, #132]	; (8006f44 <UART_CheckIdleState+0x14c>)
 8006ebe:	400a      	ands	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ece:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed8:	2301      	movs	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f383 8810 	msr	PRIMASK, r3
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2101      	movs	r1, #1
 8006ef0:	438a      	bics	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	f383 8810 	msr	PRIMASK, r3
}
 8006efe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2280      	movs	r2, #128	; 0x80
 8006f04:	2120      	movs	r1, #32
 8006f06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2278      	movs	r2, #120	; 0x78
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e011      	b.n	8006f38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2280      	movs	r2, #128	; 0x80
 8006f1e:	2120      	movs	r1, #32
 8006f20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2278      	movs	r2, #120	; 0x78
 8006f32:	2100      	movs	r1, #0
 8006f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	0018      	movs	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b010      	add	sp, #64	; 0x40
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	01ffffff 	.word	0x01ffffff
 8006f44:	fffffedf 	.word	0xfffffedf

08006f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	1dfb      	adds	r3, r7, #7
 8006f56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f58:	e04b      	b.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	d048      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f60:	f7fc f836 	bl	8002fd0 <HAL_GetTick>
 8006f64:	0002      	movs	r2, r0
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e04b      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2204      	movs	r2, #4
 8006f82:	4013      	ands	r3, r2
 8006f84:	d035      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	4013      	ands	r3, r2
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d111      	bne.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2208      	movs	r2, #8
 8006f9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 f906 	bl	80071b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2284      	movs	r2, #132	; 0x84
 8006fa8:	2108      	movs	r1, #8
 8006faa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2278      	movs	r2, #120	; 0x78
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e02c      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69da      	ldr	r2, [r3, #28]
 8006fbe:	2380      	movs	r3, #128	; 0x80
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	401a      	ands	r2, r3
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d112      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2280      	movs	r2, #128	; 0x80
 8006fd2:	0112      	lsls	r2, r2, #4
 8006fd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 f8e9 	bl	80071b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2284      	movs	r2, #132	; 0x84
 8006fe2:	2120      	movs	r1, #32
 8006fe4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2278      	movs	r2, #120	; 0x78
 8006fea:	2100      	movs	r1, #0
 8006fec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	425a      	negs	r2, r3
 8007002:	4153      	adcs	r3, r2
 8007004:	b2db      	uxtb	r3, r3
 8007006:	001a      	movs	r2, r3
 8007008:	1dfb      	adds	r3, r7, #7
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d0a4      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b004      	add	sp, #16
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b090      	sub	sp, #64	; 0x40
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	1dbb      	adds	r3, r7, #6
 8007028:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	1dba      	adds	r2, r7, #6
 8007034:	2158      	movs	r1, #88	; 0x58
 8007036:	8812      	ldrh	r2, [r2, #0]
 8007038:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1dba      	adds	r2, r7, #6
 800703e:	215a      	movs	r1, #90	; 0x5a
 8007040:	8812      	ldrh	r2, [r2, #0]
 8007042:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	015b      	lsls	r3, r3, #5
 8007052:	429a      	cmp	r2, r3
 8007054:	d10d      	bne.n	8007072 <UART_Start_Receive_IT+0x56>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <UART_Start_Receive_IT+0x4c>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	225c      	movs	r2, #92	; 0x5c
 8007062:	4950      	ldr	r1, [pc, #320]	; (80071a4 <UART_Start_Receive_IT+0x188>)
 8007064:	5299      	strh	r1, [r3, r2]
 8007066:	e02e      	b.n	80070c6 <UART_Start_Receive_IT+0xaa>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	225c      	movs	r2, #92	; 0x5c
 800706c:	21ff      	movs	r1, #255	; 0xff
 800706e:	5299      	strh	r1, [r3, r2]
 8007070:	e029      	b.n	80070c6 <UART_Start_Receive_IT+0xaa>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10d      	bne.n	8007096 <UART_Start_Receive_IT+0x7a>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <UART_Start_Receive_IT+0x70>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	225c      	movs	r2, #92	; 0x5c
 8007086:	21ff      	movs	r1, #255	; 0xff
 8007088:	5299      	strh	r1, [r3, r2]
 800708a:	e01c      	b.n	80070c6 <UART_Start_Receive_IT+0xaa>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	225c      	movs	r2, #92	; 0x5c
 8007090:	217f      	movs	r1, #127	; 0x7f
 8007092:	5299      	strh	r1, [r3, r2]
 8007094:	e017      	b.n	80070c6 <UART_Start_Receive_IT+0xaa>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	055b      	lsls	r3, r3, #21
 800709e:	429a      	cmp	r2, r3
 80070a0:	d10d      	bne.n	80070be <UART_Start_Receive_IT+0xa2>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <UART_Start_Receive_IT+0x98>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	225c      	movs	r2, #92	; 0x5c
 80070ae:	217f      	movs	r1, #127	; 0x7f
 80070b0:	5299      	strh	r1, [r3, r2]
 80070b2:	e008      	b.n	80070c6 <UART_Start_Receive_IT+0xaa>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	225c      	movs	r2, #92	; 0x5c
 80070b8:	213f      	movs	r1, #63	; 0x3f
 80070ba:	5299      	strh	r1, [r3, r2]
 80070bc:	e003      	b.n	80070c6 <UART_Start_Receive_IT+0xaa>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	225c      	movs	r2, #92	; 0x5c
 80070c2:	2100      	movs	r1, #0
 80070c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2284      	movs	r2, #132	; 0x84
 80070ca:	2100      	movs	r1, #0
 80070cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2280      	movs	r2, #128	; 0x80
 80070d2:	2122      	movs	r1, #34	; 0x22
 80070d4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d6:	f3ef 8310 	mrs	r3, PRIMASK
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e0:	2301      	movs	r3, #1
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2101      	movs	r1, #1
 80070f8:	430a      	orrs	r2, r1
 80070fa:	609a      	str	r2, [r3, #8]
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	f383 8810 	msr	PRIMASK, r3
}
 8007106:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	015b      	lsls	r3, r3, #5
 8007110:	429a      	cmp	r2, r3
 8007112:	d107      	bne.n	8007124 <UART_Start_Receive_IT+0x108>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d103      	bne.n	8007124 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4a22      	ldr	r2, [pc, #136]	; (80071a8 <UART_Start_Receive_IT+0x18c>)
 8007120:	669a      	str	r2, [r3, #104]	; 0x68
 8007122:	e002      	b.n	800712a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4a21      	ldr	r2, [pc, #132]	; (80071ac <UART_Start_Receive_IT+0x190>)
 8007128:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d019      	beq.n	8007166 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007132:	f3ef 8310 	mrs	r3, PRIMASK
 8007136:	61fb      	str	r3, [r7, #28]
  return(result);
 8007138:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800713a:	637b      	str	r3, [r7, #52]	; 0x34
 800713c:	2301      	movs	r3, #1
 800713e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	f383 8810 	msr	PRIMASK, r3
}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2190      	movs	r1, #144	; 0x90
 8007154:	0049      	lsls	r1, r1, #1
 8007156:	430a      	orrs	r2, r1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	f383 8810 	msr	PRIMASK, r3
}
 8007164:	e018      	b.n	8007198 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007166:	f3ef 8310 	mrs	r3, PRIMASK
 800716a:	613b      	str	r3, [r7, #16]
  return(result);
 800716c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800716e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007170:	2301      	movs	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f383 8810 	msr	PRIMASK, r3
}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2120      	movs	r1, #32
 8007188:	430a      	orrs	r2, r1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f383 8810 	msr	PRIMASK, r3
}
 8007196:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	0018      	movs	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	b010      	add	sp, #64	; 0x40
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	000001ff 	.word	0x000001ff
 80071a8:	08007671 	.word	0x08007671
 80071ac:	080074b9 	.word	0x080074b9

080071b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	; 0x38
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b8:	f3ef 8310 	mrs	r3, PRIMASK
 80071bc:	617b      	str	r3, [r7, #20]
  return(result);
 80071be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	2301      	movs	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f383 8810 	msr	PRIMASK, r3
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4926      	ldr	r1, [pc, #152]	; (8007274 <UART_EndRxTransfer+0xc4>)
 80071da:	400a      	ands	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ea:	f3ef 8310 	mrs	r3, PRIMASK
 80071ee:	623b      	str	r3, [r7, #32]
  return(result);
 80071f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f2:	633b      	str	r3, [r7, #48]	; 0x30
 80071f4:	2301      	movs	r3, #1
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	f383 8810 	msr	PRIMASK, r3
}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2101      	movs	r1, #1
 800720c:	438a      	bics	r2, r1
 800720e:	609a      	str	r2, [r3, #8]
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	f383 8810 	msr	PRIMASK, r3
}
 800721a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007220:	2b01      	cmp	r3, #1
 8007222:	d118      	bne.n	8007256 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007224:	f3ef 8310 	mrs	r3, PRIMASK
 8007228:	60bb      	str	r3, [r7, #8]
  return(result);
 800722a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722e:	2301      	movs	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f383 8810 	msr	PRIMASK, r3
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2110      	movs	r1, #16
 8007246:	438a      	bics	r2, r1
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f383 8810 	msr	PRIMASK, r3
}
 8007254:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2280      	movs	r2, #128	; 0x80
 800725a:	2120      	movs	r1, #32
 800725c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	669a      	str	r2, [r3, #104]	; 0x68
}
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	46bd      	mov	sp, r7
 800726e:	b00e      	add	sp, #56	; 0x38
 8007270:	bd80      	pop	{r7, pc}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	fffffedf 	.word	0xfffffedf

08007278 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	225a      	movs	r2, #90	; 0x5a
 800728a:	2100      	movs	r1, #0
 800728c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2252      	movs	r2, #82	; 0x52
 8007292:	2100      	movs	r1, #0
 8007294:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	0018      	movs	r0, r3
 800729a:	f7ff faa3 	bl	80067e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	46bd      	mov	sp, r7
 80072a2:	b004      	add	sp, #16
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	225a      	movs	r2, #90	; 0x5a
 80072b8:	2100      	movs	r1, #0
 80072ba:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	220f      	movs	r2, #15
 80072c2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699a      	ldr	r2, [r3, #24]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2108      	movs	r1, #8
 80072d0:	430a      	orrs	r2, r1
 80072d2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2280      	movs	r2, #128	; 0x80
 80072d8:	2120      	movs	r1, #32
 80072da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7ff fa85 	bl	80067f4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b004      	add	sp, #16
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b08a      	sub	sp, #40	; 0x28
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072fe:	2b21      	cmp	r3, #33	; 0x21
 8007300:	d14d      	bne.n	800739e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2252      	movs	r2, #82	; 0x52
 8007306:	5a9b      	ldrh	r3, [r3, r2]
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d132      	bne.n	8007374 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730e:	f3ef 8310 	mrs	r3, PRIMASK
 8007312:	60bb      	str	r3, [r7, #8]
  return(result);
 8007314:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
 8007318:	2301      	movs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f383 8810 	msr	PRIMASK, r3
}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2180      	movs	r1, #128	; 0x80
 8007330:	438a      	bics	r2, r1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f383 8810 	msr	PRIMASK, r3
}
 800733e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007340:	f3ef 8310 	mrs	r3, PRIMASK
 8007344:	617b      	str	r3, [r7, #20]
  return(result);
 8007346:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	2301      	movs	r3, #1
 800734c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f383 8810 	msr	PRIMASK, r3
}
 8007354:	46c0      	nop			; (mov r8, r8)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2140      	movs	r1, #64	; 0x40
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	f383 8810 	msr	PRIMASK, r3
}
 8007370:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007372:	e014      	b.n	800739e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	b292      	uxth	r2, r2
 8007380:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2252      	movs	r2, #82	; 0x52
 8007390:	5a9b      	ldrh	r3, [r3, r2]
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b299      	uxth	r1, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2252      	movs	r2, #82	; 0x52
 800739c:	5299      	strh	r1, [r3, r2]
}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	46bd      	mov	sp, r7
 80073a2:	b00a      	add	sp, #40	; 0x28
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b08c      	sub	sp, #48	; 0x30
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b2:	2b21      	cmp	r3, #33	; 0x21
 80073b4:	d151      	bne.n	800745a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2252      	movs	r2, #82	; 0x52
 80073ba:	5a9b      	ldrh	r3, [r3, r2]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d132      	bne.n	8007428 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c2:	f3ef 8310 	mrs	r3, PRIMASK
 80073c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80073c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80073cc:	2301      	movs	r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f383 8810 	msr	PRIMASK, r3
}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	438a      	bics	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f383 8810 	msr	PRIMASK, r3
}
 80073f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f4:	f3ef 8310 	mrs	r3, PRIMASK
 80073f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80073fa:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
 80073fe:	2301      	movs	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f383 8810 	msr	PRIMASK, r3
}
 8007408:	46c0      	nop			; (mov r8, r8)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2140      	movs	r1, #64	; 0x40
 8007416:	430a      	orrs	r2, r1
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f383 8810 	msr	PRIMASK, r3
}
 8007424:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007426:	e018      	b.n	800745a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	05d2      	lsls	r2, r2, #23
 8007438:	0dd2      	lsrs	r2, r2, #23
 800743a:	b292      	uxth	r2, r2
 800743c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007442:	1c9a      	adds	r2, r3, #2
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2252      	movs	r2, #82	; 0x52
 800744c:	5a9b      	ldrh	r3, [r3, r2]
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b299      	uxth	r1, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2252      	movs	r2, #82	; 0x52
 8007458:	5299      	strh	r1, [r3, r2]
}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	46bd      	mov	sp, r7
 800745e:	b00c      	add	sp, #48	; 0x30
 8007460:	bd80      	pop	{r7, pc}

08007462 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b086      	sub	sp, #24
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746a:	f3ef 8310 	mrs	r3, PRIMASK
 800746e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007470:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	2301      	movs	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f383 8810 	msr	PRIMASK, r3
}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2140      	movs	r1, #64	; 0x40
 800748c:	438a      	bics	r2, r1
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f383 8810 	msr	PRIMASK, r3
}
 800749a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	0018      	movs	r0, r3
 80074ac:	f002 fc40 	bl	8009d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074b0:	46c0      	nop			; (mov r8, r8)
 80074b2:	46bd      	mov	sp, r7
 80074b4:	b006      	add	sp, #24
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b094      	sub	sp, #80	; 0x50
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074c0:	204e      	movs	r0, #78	; 0x4e
 80074c2:	183b      	adds	r3, r7, r0
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	215c      	movs	r1, #92	; 0x5c
 80074c8:	5a52      	ldrh	r2, [r2, r1]
 80074ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	589b      	ldr	r3, [r3, r2]
 80074d2:	2b22      	cmp	r3, #34	; 0x22
 80074d4:	d000      	beq.n	80074d8 <UART_RxISR_8BIT+0x20>
 80074d6:	e0ba      	b.n	800764e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	214c      	movs	r1, #76	; 0x4c
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80074e2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	183b      	adds	r3, r7, r0
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	b2d9      	uxtb	r1, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	400a      	ands	r2, r1
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	225a      	movs	r2, #90	; 0x5a
 8007508:	5a9b      	ldrh	r3, [r3, r2]
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b299      	uxth	r1, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	225a      	movs	r2, #90	; 0x5a
 8007514:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	225a      	movs	r2, #90	; 0x5a
 800751a:	5a9b      	ldrh	r3, [r3, r2]
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d000      	beq.n	8007524 <UART_RxISR_8BIT+0x6c>
 8007522:	e09c      	b.n	800765e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007524:	f3ef 8310 	mrs	r3, PRIMASK
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800752c:	64bb      	str	r3, [r7, #72]	; 0x48
 800752e:	2301      	movs	r3, #1
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	f383 8810 	msr	PRIMASK, r3
}
 8007538:	46c0      	nop			; (mov r8, r8)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4948      	ldr	r1, [pc, #288]	; (8007668 <UART_RxISR_8BIT+0x1b0>)
 8007546:	400a      	ands	r2, r1
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	f383 8810 	msr	PRIMASK, r3
}
 8007554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007556:	f3ef 8310 	mrs	r3, PRIMASK
 800755a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755e:	647b      	str	r3, [r7, #68]	; 0x44
 8007560:	2301      	movs	r3, #1
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	f383 8810 	msr	PRIMASK, r3
}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2101      	movs	r1, #1
 8007578:	438a      	bics	r2, r1
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800757e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	f383 8810 	msr	PRIMASK, r3
}
 8007586:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2280      	movs	r2, #128	; 0x80
 800758c:	2120      	movs	r1, #32
 800758e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	4013      	ands	r3, r2
 80075a8:	d018      	beq.n	80075dc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075aa:	f3ef 8310 	mrs	r3, PRIMASK
 80075ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80075b0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075b2:	643b      	str	r3, [r7, #64]	; 0x40
 80075b4:	2301      	movs	r3, #1
 80075b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f383 8810 	msr	PRIMASK, r3
}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4928      	ldr	r1, [pc, #160]	; (800766c <UART_RxISR_8BIT+0x1b4>)
 80075cc:	400a      	ands	r2, r1
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	f383 8810 	msr	PRIMASK, r3
}
 80075da:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d12f      	bne.n	8007644 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ea:	f3ef 8310 	mrs	r3, PRIMASK
 80075ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80075f0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075f4:	2301      	movs	r3, #1
 80075f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f383 8810 	msr	PRIMASK, r3
}
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2110      	movs	r1, #16
 800760c:	438a      	bics	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f383 8810 	msr	PRIMASK, r3
}
 800761a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	2210      	movs	r2, #16
 8007624:	4013      	ands	r3, r2
 8007626:	2b10      	cmp	r3, #16
 8007628:	d103      	bne.n	8007632 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2210      	movs	r2, #16
 8007630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2258      	movs	r2, #88	; 0x58
 8007636:	5a9a      	ldrh	r2, [r3, r2]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	0011      	movs	r1, r2
 800763c:	0018      	movs	r0, r3
 800763e:	f7ff f8e1 	bl	8006804 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007642:	e00c      	b.n	800765e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	0018      	movs	r0, r3
 8007648:	f002 fbac 	bl	8009da4 <HAL_UART_RxCpltCallback>
}
 800764c:	e007      	b.n	800765e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2108      	movs	r1, #8
 800765a:	430a      	orrs	r2, r1
 800765c:	619a      	str	r2, [r3, #24]
}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	46bd      	mov	sp, r7
 8007662:	b014      	add	sp, #80	; 0x50
 8007664:	bd80      	pop	{r7, pc}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	fffffedf 	.word	0xfffffedf
 800766c:	fbffffff 	.word	0xfbffffff

08007670 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b094      	sub	sp, #80	; 0x50
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007678:	204e      	movs	r0, #78	; 0x4e
 800767a:	183b      	adds	r3, r7, r0
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	215c      	movs	r1, #92	; 0x5c
 8007680:	5a52      	ldrh	r2, [r2, r1]
 8007682:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2280      	movs	r2, #128	; 0x80
 8007688:	589b      	ldr	r3, [r3, r2]
 800768a:	2b22      	cmp	r3, #34	; 0x22
 800768c:	d000      	beq.n	8007690 <UART_RxISR_16BIT+0x20>
 800768e:	e0ba      	b.n	8007806 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	214c      	movs	r1, #76	; 0x4c
 8007696:	187b      	adds	r3, r7, r1
 8007698:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800769a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80076a2:	187b      	adds	r3, r7, r1
 80076a4:	183a      	adds	r2, r7, r0
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	8812      	ldrh	r2, [r2, #0]
 80076aa:	4013      	ands	r3, r2
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	1c9a      	adds	r2, r3, #2
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	225a      	movs	r2, #90	; 0x5a
 80076c0:	5a9b      	ldrh	r3, [r3, r2]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b299      	uxth	r1, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	225a      	movs	r2, #90	; 0x5a
 80076cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	225a      	movs	r2, #90	; 0x5a
 80076d2:	5a9b      	ldrh	r3, [r3, r2]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d000      	beq.n	80076dc <UART_RxISR_16BIT+0x6c>
 80076da:	e09c      	b.n	8007816 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076dc:	f3ef 8310 	mrs	r3, PRIMASK
 80076e0:	623b      	str	r3, [r7, #32]
  return(result);
 80076e2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076e4:	647b      	str	r3, [r7, #68]	; 0x44
 80076e6:	2301      	movs	r3, #1
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	f383 8810 	msr	PRIMASK, r3
}
 80076f0:	46c0      	nop			; (mov r8, r8)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4948      	ldr	r1, [pc, #288]	; (8007820 <UART_RxISR_16BIT+0x1b0>)
 80076fe:	400a      	ands	r2, r1
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	f383 8810 	msr	PRIMASK, r3
}
 800770c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800770e:	f3ef 8310 	mrs	r3, PRIMASK
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007716:	643b      	str	r3, [r7, #64]	; 0x40
 8007718:	2301      	movs	r3, #1
 800771a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	f383 8810 	msr	PRIMASK, r3
}
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2101      	movs	r1, #1
 8007730:	438a      	bics	r2, r1
 8007732:	609a      	str	r2, [r3, #8]
 8007734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	f383 8810 	msr	PRIMASK, r3
}
 800773e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2280      	movs	r2, #128	; 0x80
 8007744:	2120      	movs	r1, #32
 8007746:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	2380      	movs	r3, #128	; 0x80
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	4013      	ands	r3, r2
 8007760:	d018      	beq.n	8007794 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007762:	f3ef 8310 	mrs	r3, PRIMASK
 8007766:	617b      	str	r3, [r7, #20]
  return(result);
 8007768:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800776c:	2301      	movs	r3, #1
 800776e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f383 8810 	msr	PRIMASK, r3
}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4928      	ldr	r1, [pc, #160]	; (8007824 <UART_RxISR_16BIT+0x1b4>)
 8007784:	400a      	ands	r2, r1
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f383 8810 	msr	PRIMASK, r3
}
 8007792:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007798:	2b01      	cmp	r3, #1
 800779a:	d12f      	bne.n	80077fc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a2:	f3ef 8310 	mrs	r3, PRIMASK
 80077a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80077a8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80077ac:	2301      	movs	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f383 8810 	msr	PRIMASK, r3
}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2110      	movs	r1, #16
 80077c4:	438a      	bics	r2, r1
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f383 8810 	msr	PRIMASK, r3
}
 80077d2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	2210      	movs	r2, #16
 80077dc:	4013      	ands	r3, r2
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d103      	bne.n	80077ea <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2210      	movs	r2, #16
 80077e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2258      	movs	r2, #88	; 0x58
 80077ee:	5a9a      	ldrh	r2, [r3, r2]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	0011      	movs	r1, r2
 80077f4:	0018      	movs	r0, r3
 80077f6:	f7ff f805 	bl	8006804 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077fa:	e00c      	b.n	8007816 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	0018      	movs	r0, r3
 8007800:	f002 fad0 	bl	8009da4 <HAL_UART_RxCpltCallback>
}
 8007804:	e007      	b.n	8007816 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2108      	movs	r1, #8
 8007812:	430a      	orrs	r2, r1
 8007814:	619a      	str	r2, [r3, #24]
}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b014      	add	sp, #80	; 0x50
 800781c:	bd80      	pop	{r7, pc}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	fffffedf 	.word	0xfffffedf
 8007824:	fbffffff 	.word	0xfbffffff

08007828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007830:	46c0      	nop			; (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	b002      	add	sp, #8
 8007836:	bd80      	pop	{r7, pc}

08007838 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007840:	4b09      	ldr	r3, [pc, #36]	; (8007868 <USB_DisableGlobalInt+0x30>)
 8007842:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2240      	movs	r2, #64	; 0x40
 8007848:	5a9b      	ldrh	r3, [r3, r2]
 800784a:	b29b      	uxth	r3, r3
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	b292      	uxth	r2, r2
 8007850:	43d2      	mvns	r2, r2
 8007852:	b292      	uxth	r2, r2
 8007854:	4013      	ands	r3, r2
 8007856:	b299      	uxth	r1, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2240      	movs	r2, #64	; 0x40
 800785c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	0018      	movs	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	b004      	add	sp, #16
 8007866:	bd80      	pop	{r7, pc}
 8007868:	0000bf80 	.word	0x0000bf80

0800786c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800786c:	b084      	sub	sp, #16
 800786e:	b590      	push	{r4, r7, lr}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	2004      	movs	r0, #4
 8007878:	2410      	movs	r4, #16
 800787a:	1900      	adds	r0, r0, r4
 800787c:	2408      	movs	r4, #8
 800787e:	46a4      	mov	ip, r4
 8007880:	44bc      	add	ip, r7
 8007882:	4460      	add	r0, ip
 8007884:	6001      	str	r1, [r0, #0]
 8007886:	6042      	str	r2, [r0, #4]
 8007888:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2240      	movs	r2, #64	; 0x40
 800788e:	2101      	movs	r1, #1
 8007890:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2240      	movs	r2, #64	; 0x40
 8007896:	2100      	movs	r1, #0
 8007898:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2244      	movs	r2, #68	; 0x44
 800789e:	2100      	movs	r1, #0
 80078a0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2250      	movs	r2, #80	; 0x50
 80078a6:	2100      	movs	r1, #0
 80078a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	0018      	movs	r0, r3
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b003      	add	sp, #12
 80078b2:	bc90      	pop	{r4, r7}
 80078b4:	bc08      	pop	{r3}
 80078b6:	b004      	add	sp, #16
 80078b8:	4718      	bx	r3
	...

080078bc <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	000a      	movs	r2, r1
 80078c6:	1cfb      	adds	r3, r7, #3
 80078c8:	701a      	strb	r2, [r3, #0]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2281      	movs	r2, #129	; 0x81
 80078ce:	5c9b      	ldrb	r3, [r3, r2]
 80078d0:	0019      	movs	r1, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	1cfa      	adds	r2, r7, #3
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2281      	movs	r2, #129	; 0x81
 80078de:	5c9b      	ldrb	r3, [r3, r2]
 80078e0:	3301      	adds	r3, #1
 80078e2:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <RingAdd+0x94>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	d504      	bpl.n	80078f2 <RingAdd+0x36>
 80078e8:	3b01      	subs	r3, #1
 80078ea:	2280      	movs	r2, #128	; 0x80
 80078ec:	4252      	negs	r2, r2
 80078ee:	4313      	orrs	r3, r2
 80078f0:	3301      	adds	r3, #1
 80078f2:	b2d9      	uxtb	r1, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2281      	movs	r2, #129	; 0x81
 80078f8:	5499      	strb	r1, [r3, r2]
	if (xRingBuffer->u8available == MAX_BUFFER)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2282      	movs	r2, #130	; 0x82
 80078fe:	5c9b      	ldrb	r3, [r3, r2]
 8007900:	2b80      	cmp	r3, #128	; 0x80
 8007902:	d114      	bne.n	800792e <RingAdd+0x72>
	{
		xRingBuffer->overflow = true;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2283      	movs	r2, #131	; 0x83
 8007908:	2101      	movs	r1, #1
 800790a:	5499      	strb	r1, [r3, r2]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2280      	movs	r2, #128	; 0x80
 8007910:	5c9b      	ldrb	r3, [r3, r2]
 8007912:	3301      	adds	r3, #1
 8007914:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <RingAdd+0x94>)
 8007916:	4013      	ands	r3, r2
 8007918:	d504      	bpl.n	8007924 <RingAdd+0x68>
 800791a:	3b01      	subs	r3, #1
 800791c:	2280      	movs	r2, #128	; 0x80
 800791e:	4252      	negs	r2, r2
 8007920:	4313      	orrs	r3, r2
 8007922:	3301      	adds	r3, #1
 8007924:	b2d9      	uxtb	r1, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2280      	movs	r2, #128	; 0x80
 800792a:	5499      	strb	r1, [r3, r2]
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800792c:	e00b      	b.n	8007946 <RingAdd+0x8a>
		xRingBuffer->overflow = false;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2283      	movs	r2, #131	; 0x83
 8007932:	2100      	movs	r1, #0
 8007934:	5499      	strb	r1, [r3, r2]
		xRingBuffer->u8available++;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2282      	movs	r2, #130	; 0x82
 800793a:	5c9b      	ldrb	r3, [r3, r2]
 800793c:	3301      	adds	r3, #1
 800793e:	b2d9      	uxtb	r1, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2282      	movs	r2, #130	; 0x82
 8007944:	5499      	strb	r1, [r3, r2]
}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	46bd      	mov	sp, r7
 800794a:	b002      	add	sp, #8
 800794c:	bd80      	pop	{r7, pc}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	8000007f 	.word	0x8000007f

08007954 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2282      	movs	r2, #130	; 0x82
 8007962:	5c9a      	ldrb	r2, [r3, r2]
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	0018      	movs	r0, r3
 800796a:	f000 f805 	bl	8007978 <RingGetNBytes>
 800796e:	0003      	movs	r3, r0
}
 8007970:	0018      	movs	r0, r3
 8007972:	46bd      	mov	sp, r7
 8007974:	b002      	add	sp, #8
 8007976:	bd80      	pop	{r7, pc}

08007978 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	1dfb      	adds	r3, r7, #7
 8007984:	701a      	strb	r2, [r3, #0]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2282      	movs	r2, #130	; 0x82
 800798a:	5c9b      	ldrb	r3, [r3, r2]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <RingGetNBytes+0x20>
 8007990:	1dfb      	adds	r3, r7, #7
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <RingGetNBytes+0x24>
 8007998:	2300      	movs	r3, #0
 800799a:	e04f      	b.n	8007a3c <RingGetNBytes+0xc4>
	if(uNumber > MAX_BUFFER) return 0;
 800799c:	1dfb      	adds	r3, r7, #7
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d901      	bls.n	80079a8 <RingGetNBytes+0x30>
 80079a4:	2300      	movs	r3, #0
 80079a6:	e049      	b.n	8007a3c <RingGetNBytes+0xc4>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80079a8:	2317      	movs	r3, #23
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e021      	b.n	80079f6 <RingGetNBytes+0x7e>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2280      	movs	r2, #128	; 0x80
 80079b6:	5c9b      	ldrb	r3, [r3, r2]
 80079b8:	0019      	movs	r1, r3
 80079ba:	2317      	movs	r3, #23
 80079bc:	18fb      	adds	r3, r7, r3
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	18d3      	adds	r3, r2, r3
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	5c52      	ldrb	r2, [r2, r1]
 80079c8:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2280      	movs	r2, #128	; 0x80
 80079ce:	5c9b      	ldrb	r3, [r3, r2]
 80079d0:	3301      	adds	r3, #1
 80079d2:	4a1c      	ldr	r2, [pc, #112]	; (8007a44 <RingGetNBytes+0xcc>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	d504      	bpl.n	80079e2 <RingGetNBytes+0x6a>
 80079d8:	3b01      	subs	r3, #1
 80079da:	2280      	movs	r2, #128	; 0x80
 80079dc:	4252      	negs	r2, r2
 80079de:	4313      	orrs	r3, r2
 80079e0:	3301      	adds	r3, #1
 80079e2:	b2d9      	uxtb	r1, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2280      	movs	r2, #128	; 0x80
 80079e8:	5499      	strb	r1, [r3, r2]
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80079ea:	2117      	movs	r1, #23
 80079ec:	187b      	adds	r3, r7, r1
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	187b      	adds	r3, r7, r1
 80079f2:	3201      	adds	r2, #1
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	2117      	movs	r1, #23
 80079f8:	187a      	adds	r2, r7, r1
 80079fa:	1dfb      	adds	r3, r7, #7
 80079fc:	7812      	ldrb	r2, [r2, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d206      	bcs.n	8007a12 <RingGetNBytes+0x9a>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2282      	movs	r2, #130	; 0x82
 8007a08:	5c9b      	ldrb	r3, [r3, r2]
 8007a0a:	187a      	adds	r2, r7, r1
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3cf      	bcc.n	80079b2 <RingGetNBytes+0x3a>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2282      	movs	r2, #130	; 0x82
 8007a16:	5c9a      	ldrb	r2, [r3, r2]
 8007a18:	2417      	movs	r4, #23
 8007a1a:	193b      	adds	r3, r7, r4
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	b2d9      	uxtb	r1, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2282      	movs	r2, #130	; 0x82
 8007a26:	5499      	strb	r1, [r3, r2]
	xRingBuffer->overflow = false;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2283      	movs	r2, #131	; 0x83
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	5499      	strb	r1, [r3, r2]
	RingClear(xRingBuffer);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	0018      	movs	r0, r3
 8007a34:	f000 f808 	bl	8007a48 <RingClear>

	return uCounter;
 8007a38:	193b      	adds	r3, r7, r4
 8007a3a:	781b      	ldrb	r3, [r3, #0]
}
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b007      	add	sp, #28
 8007a42:	bd90      	pop	{r4, r7, pc}
 8007a44:	8000007f 	.word	0x8000007f

08007a48 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	2100      	movs	r1, #0
 8007a56:	5499      	strb	r1, [r3, r2]
xRingBuffer->u8end = 0;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2281      	movs	r2, #129	; 0x81
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	5499      	strb	r1, [r3, r2]
xRingBuffer->u8available = 0;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2282      	movs	r2, #130	; 0x82
 8007a64:	2100      	movs	r1, #0
 8007a66:	5499      	strb	r1, [r3, r2]
xRingBuffer->overflow = false;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2283      	movs	r2, #131	; 0x83
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	5499      	strb	r1, [r3, r2]
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b002      	add	sp, #8
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8007a80:	4b46      	ldr	r3, [pc, #280]	; (8007b9c <ModbusInit+0x124>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d900      	bls.n	8007a8a <ModbusInit+0x12>
 8007a88:	e083      	b.n	8007b92 <ModbusInit+0x11a>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	33bc      	adds	r3, #188	; 0xbc
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f7ff ffda 	bl	8007a48 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d10a      	bne.n	8007ab2 <ModbusInit+0x3a>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8007a9c:	4a40      	ldr	r2, [pc, #256]	; (8007ba0 <ModbusInit+0x128>)
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4b40      	ldr	r3, [pc, #256]	; (8007ba4 <ModbusInit+0x12c>)
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f002 fa3e 	bl	8009f24 <osThreadNew>
 8007aa8:	0002      	movs	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	21ac      	movs	r1, #172	; 0xac
 8007aae:	505a      	str	r2, [r3, r1]
 8007ab0:	e036      	b.n	8007b20 <ModbusInit+0xa8>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d131      	bne.n	8007b1e <ModbusInit+0xa6>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8007aba:	4a3b      	ldr	r2, [pc, #236]	; (8007ba8 <ModbusInit+0x130>)
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	4b3b      	ldr	r3, [pc, #236]	; (8007bac <ModbusInit+0x134>)
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f002 fa2f 	bl	8009f24 <osThreadNew>
 8007ac6:	0002      	movs	r2, r0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	21ac      	movs	r1, #172	; 0xac
 8007acc:	505a      	str	r2, [r3, r1]
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	22a2      	movs	r2, #162	; 0xa2
 8007ad2:	5a9b      	ldrh	r3, [r3, r2]
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8007ad4:	0019      	movs	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	22b4      	movs	r2, #180	; 0xb4
 8007ada:	589a      	ldr	r2, [r3, r2]
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8007adc:	4834      	ldr	r0, [pc, #208]	; (8007bb0 <ModbusInit+0x138>)
 8007ade:	4b35      	ldr	r3, [pc, #212]	; (8007bb4 <ModbusInit+0x13c>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	0013      	movs	r3, r2
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f004 fcd9 	bl	800c49c <xTimerCreate>
 8007aea:	0002      	movs	r2, r0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	21b4      	movs	r1, #180	; 0xb4
 8007af0:	505a      	str	r2, [r3, r1]
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	22b4      	movs	r2, #180	; 0xb4
 8007af6:	589b      	ldr	r3, [r3, r2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d100      	bne.n	8007afe <ModbusInit+0x86>
		  {
			  while(1); //error creating timer, check heap and stack size
 8007afc:	e7fe      	b.n	8007afc <ModbusInit+0x84>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8007afe:	4b2e      	ldr	r3, [pc, #184]	; (8007bb8 <ModbusInit+0x140>)
 8007b00:	001a      	movs	r2, r3
 8007b02:	2110      	movs	r1, #16
 8007b04:	2002      	movs	r0, #2
 8007b06:	f002 fbf7 	bl	800a2f8 <osMessageQueueNew>
 8007b0a:	0002      	movs	r2, r0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	21a8      	movs	r1, #168	; 0xa8
 8007b10:	505a      	str	r2, [r3, r1]

		  if(modH->QueueTelegramHandle == NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	22a8      	movs	r2, #168	; 0xa8
 8007b16:	589b      	ldr	r3, [r3, r2]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <ModbusInit+0xa8>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8007b1c:	e7fe      	b.n	8007b1c <ModbusInit+0xa4>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8007b1e:	e7fe      	b.n	8007b1e <ModbusInit+0xa6>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	22ac      	movs	r2, #172	; 0xac
 8007b24:	589b      	ldr	r3, [r3, r2]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d100      	bne.n	8007b2c <ModbusInit+0xb4>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8007b2a:	e7fe      	b.n	8007b2a <ModbusInit+0xb2>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	22b0      	movs	r2, #176	; 0xb0
 8007b30:	589a      	ldr	r2, [r3, r2]
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8007b32:	4822      	ldr	r0, [pc, #136]	; (8007bbc <ModbusInit+0x144>)
 8007b34:	4b22      	ldr	r3, [pc, #136]	; (8007bc0 <ModbusInit+0x148>)
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	0013      	movs	r3, r2
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2105      	movs	r1, #5
 8007b3e:	f004 fcad 	bl	800c49c <xTimerCreate>
 8007b42:	0002      	movs	r2, r0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	21b0      	movs	r1, #176	; 0xb0
 8007b48:	505a      	str	r2, [r3, r1]
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	22b0      	movs	r2, #176	; 0xb0
 8007b4e:	589b      	ldr	r3, [r3, r2]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d100      	bne.n	8007b56 <ModbusInit+0xde>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8007b54:	e7fe      	b.n	8007b54 <ModbusInit+0xdc>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8007b56:	4b1b      	ldr	r3, [pc, #108]	; (8007bc4 <ModbusInit+0x14c>)
 8007b58:	001a      	movs	r2, r3
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	f002 fb29 	bl	800a1b4 <osSemaphoreNew>
 8007b62:	0002      	movs	r2, r0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	21b8      	movs	r1, #184	; 0xb8
 8007b68:	505a      	str	r2, [r3, r1]

	  if(modH->ModBusSphrHandle == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	22b8      	movs	r2, #184	; 0xb8
 8007b6e:	589b      	ldr	r3, [r3, r2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d100      	bne.n	8007b76 <ModbusInit+0xfe>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8007b74:	e7fe      	b.n	8007b74 <ModbusInit+0xfc>
	  }

	  mHandlers[numberHandlers] = modH;
 8007b76:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <ModbusInit+0x124>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	001a      	movs	r2, r3
 8007b7c:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <ModbusInit+0x150>)
 8007b7e:	0092      	lsls	r2, r2, #2
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	50d1      	str	r1, [r2, r3]
	  numberHandlers++;
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <ModbusInit+0x124>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <ModbusInit+0x124>)
 8007b8e:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8007b90:	e000      	b.n	8007b94 <ModbusInit+0x11c>
	  while(1); //error no more Modbus handlers supported
 8007b92:	e7fe      	b.n	8007b92 <ModbusInit+0x11a>
}
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b002      	add	sp, #8
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	200009f0 	.word	0x200009f0
 8007ba0:	0800d598 	.word	0x0800d598
 8007ba4:	08007dc1 	.word	0x08007dc1
 8007ba8:	0800d5bc 	.word	0x0800d5bc
 8007bac:	080083f5 	.word	0x080083f5
 8007bb0:	0800d480 	.word	0x0800d480
 8007bb4:	08007d65 	.word	0x08007d65
 8007bb8:	0800d580 	.word	0x0800d580
 8007bbc:	0800d490 	.word	0x0800d490
 8007bc0:	08007ce1 	.word	0x08007ce1
 8007bc4:	0800d5e0 	.word	0x0800d5e0
 8007bc8:	200009e8 	.word	0x200009e8

08007bcc <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	23a0      	movs	r3, #160	; 0xa0
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	5cd3      	ldrb	r3, [r2, r3]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d012      	beq.n	8007c06 <ModbusStart+0x3a>
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	23a0      	movs	r3, #160	; 0xa0
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	5cd3      	ldrb	r3, [r2, r3]
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d00c      	beq.n	8007c06 <ModbusStart+0x3a>
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	23a0      	movs	r3, #160	; 0xa0
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	5cd3      	ldrb	r3, [r2, r3]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d006      	beq.n	8007c06 <ModbusStart+0x3a>
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	23a0      	movs	r3, #160	; 0xa0
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	5cd3      	ldrb	r3, [r2, r3]
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d000      	beq.n	8007c06 <ModbusStart+0x3a>
	{

		while(1); //ERROR select the type of hardware
 8007c04:	e7fe      	b.n	8007c04 <ModbusStart+0x38>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	23a0      	movs	r3, #160	; 0xa0
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	5cd3      	ldrb	r3, [r2, r3]
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d100      	bne.n	8007c14 <ModbusStart+0x48>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8007c12:	e7fe      	b.n	8007c12 <ModbusStart+0x46>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	23a0      	movs	r3, #160	; 0xa0
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	5cd3      	ldrb	r3, [r2, r3]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d005      	beq.n	8007c2c <ModbusStart+0x60>
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	23a0      	movs	r3, #160	; 0xa0
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	5cd3      	ldrb	r3, [r2, r3]
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d13b      	bne.n	8007ca4 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <ModbusStart+0x78>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68d8      	ldr	r0, [r3, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8a1b      	ldrh	r3, [r3, #16]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	0019      	movs	r1, r3
 8007c40:	f7fc fc39 	bl	80044b6 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d105      	bne.n	8007c58 <ModbusStart+0x8c>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2298      	movs	r2, #152	; 0x98
 8007c50:	589b      	ldr	r3, [r3, r2]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d100      	bne.n	8007c58 <ModbusStart+0x8c>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8007c56:	e7fe      	b.n	8007c56 <ModbusStart+0x8a>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8007c58:	46c0      	nop			; (mov r8, r8)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f7fe fe7b 	bl	800695a <HAL_UART_GetState>
 8007c64:	0003      	movs	r3, r0
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d1f7      	bne.n	8007c5a <ModbusStart+0x8e>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6858      	ldr	r0, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	33a6      	adds	r3, #166	; 0xa6
 8007c72:	2201      	movs	r2, #1
 8007c74:	0019      	movs	r1, r3
 8007c76:	f7fe f9b5 	bl	8005fe4 <HAL_UART_Receive_IT>
 8007c7a:	1e03      	subs	r3, r0, #0
 8007c7c:	d000      	beq.n	8007c80 <ModbusStart+0xb4>
          {
                while(1)
 8007c7e:	e7fe      	b.n	8007c7e <ModbusStart+0xb2>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7a1b      	ldrb	r3, [r3, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <ModbusStart+0xc6>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d100      	bne.n	8007c92 <ModbusStart+0xc6>
          {
        	  while(1)
 8007c90:	e7fe      	b.n	8007c90 <ModbusStart+0xc4>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7a1b      	ldrb	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <ModbusStart+0xd8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d100      	bne.n	8007ca4 <ModbusStart+0xd8>
          {
             	  while(1)
 8007ca2:	e7fe      	b.n	8007ca2 <ModbusStart+0xd6>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2293      	movs	r2, #147	; 0x93
 8007ca8:	2100      	movs	r1, #0
 8007caa:	5499      	strb	r1, [r3, r2]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2293      	movs	r2, #147	; 0x93
 8007cb0:	5c99      	ldrb	r1, [r3, r2]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2294      	movs	r2, #148	; 0x94
 8007cb6:	5499      	strb	r1, [r3, r2]
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	22a0      	movs	r2, #160	; 0xa0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	5299      	strh	r1, [r3, r2]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	22a0      	movs	r2, #160	; 0xa0
 8007cc4:	5a99      	ldrh	r1, [r3, r2]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	229e      	movs	r2, #158	; 0x9e
 8007cca:	5299      	strh	r1, [r3, r2]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	229e      	movs	r2, #158	; 0x9e
 8007cd0:	5a99      	ldrh	r1, [r3, r2]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	229c      	movs	r2, #156	; 0x9c
 8007cd6:	5299      	strh	r1, [r3, r2]

}
 8007cd8:	46c0      	nop			; (mov r8, r8)
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b002      	add	sp, #8
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e02a      	b.n	8007d44 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8007cee:	4b1b      	ldr	r3, [pc, #108]	; (8007d5c <vTimerCallbackT35+0x7c>)
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	0092      	lsls	r2, r2, #2
 8007cf4:	58d3      	ldr	r3, [r2, r3]
 8007cf6:	22b0      	movs	r2, #176	; 0xb0
 8007cf8:	589b      	ldr	r3, [r3, r2]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d11e      	bne.n	8007d3e <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8007d00:	4b16      	ldr	r3, [pc, #88]	; (8007d5c <vTimerCallbackT35+0x7c>)
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	0092      	lsls	r2, r2, #2
 8007d06:	58d3      	ldr	r3, [r2, r3]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d10c      	bne.n	8007d28 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <vTimerCallbackT35+0x7c>)
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	0092      	lsls	r2, r2, #2
 8007d14:	58d3      	ldr	r3, [r2, r3]
 8007d16:	22b4      	movs	r2, #180	; 0xb4
 8007d18:	5898      	ldr	r0, [r3, r2]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2200      	movs	r2, #0
 8007d22:	2103      	movs	r1, #3
 8007d24:	f004 fc32 	bl	800c58c <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <vTimerCallbackT35+0x7c>)
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	0092      	lsls	r2, r2, #2
 8007d2e:	58d3      	ldr	r3, [r2, r3]
 8007d30:	22ac      	movs	r2, #172	; 0xac
 8007d32:	5898      	ldr	r0, [r3, r2]
 8007d34:	2300      	movs	r3, #0
 8007d36:	2203      	movs	r2, #3
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f004 f95f 	bl	800bffc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3301      	adds	r3, #1
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <vTimerCallbackT35+0x80>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	001a      	movs	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	dbce      	blt.n	8007cee <vTimerCallbackT35+0xe>
		}

	}
}
 8007d50:	46c0      	nop			; (mov r8, r8)
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b004      	add	sp, #16
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	200009e8 	.word	0x200009e8
 8007d60:	200009f0 	.word	0x200009f0

08007d64 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e017      	b.n	8007da2 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8007d72:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <vTimerCallbackTimeout+0x54>)
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	0092      	lsls	r2, r2, #2
 8007d78:	58d3      	ldr	r3, [r2, r3]
 8007d7a:	22b4      	movs	r2, #180	; 0xb4
 8007d7c:	589b      	ldr	r3, [r3, r2]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d10b      	bne.n	8007d9c <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8007d84:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <vTimerCallbackTimeout+0x54>)
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	58d3      	ldr	r3, [r2, r3]
 8007d8c:	22ac      	movs	r2, #172	; 0xac
 8007d8e:	5898      	ldr	r0, [r3, r2]
 8007d90:	2308      	movs	r3, #8
 8007d92:	4259      	negs	r1, r3
 8007d94:	2300      	movs	r3, #0
 8007d96:	2203      	movs	r2, #3
 8007d98:	f004 f930 	bl	800bffc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <vTimerCallbackTimeout+0x58>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	001a      	movs	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4293      	cmp	r3, r2
 8007dac:	dbe1      	blt.n	8007d72 <vTimerCallbackTimeout+0xe>
		}

	}

}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	46c0      	nop			; (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b004      	add	sp, #16
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	200009e8 	.word	0x200009e8
 8007dbc:	200009f0 	.word	0x200009f0

08007dc0 <StartTaskModbusSlave>:
}

#endif

void StartTaskModbusSlave(void *argument)
{
 8007dc0:	b5b0      	push	{r4, r5, r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	23a0      	movs	r3, #160	; 0xa0
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	5cd3      	ldrb	r3, [r2, r3]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d005      	beq.n	8007dea <StartTaskModbusSlave+0x2a>
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	23a0      	movs	r3, #160	; 0xa0
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	5cd3      	ldrb	r3, [r2, r3]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d118      	bne.n	8007e1c <StartTaskModbusSlave+0x5c>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8007dea:	2301      	movs	r3, #1
 8007dec:	425b      	negs	r3, r3
 8007dee:	0019      	movs	r1, r3
 8007df0:	2001      	movs	r0, #1
 8007df2:	f004 f8bd 	bl	800bf70 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	0018      	movs	r0, r3
 8007dfa:	f000 fd03 	bl	8008804 <getRxBuffer>
 8007dfe:	0003      	movs	r3, r0
 8007e00:	3303      	adds	r3, #3
 8007e02:	d10b      	bne.n	8007e1c <StartTaskModbusSlave+0x5c>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	22fd      	movs	r2, #253	; 0xfd
 8007e08:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	22a0      	movs	r2, #160	; 0xa0
 8007e0e:	5a9b      	ldrh	r3, [r3, r2]
 8007e10:	3301      	adds	r3, #1
 8007e12:	b299      	uxth	r1, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	22a0      	movs	r2, #160	; 0xa0
 8007e18:	5299      	strh	r1, [r3, r2]
		  continue;
 8007e1a:	e0bb      	b.n	8007f94 <StartTaskModbusSlave+0x1d4>
	  }

   }

   if (modH->u8BufferSize < 7)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2293      	movs	r2, #147	; 0x93
 8007e20:	5c9b      	ldrb	r3, [r3, r2]
 8007e22:	2b06      	cmp	r3, #6
 8007e24:	d80b      	bhi.n	8007e3e <StartTaskModbusSlave+0x7e>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	22fa      	movs	r2, #250	; 0xfa
 8007e2a:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	22a0      	movs	r2, #160	; 0xa0
 8007e30:	5a9b      	ldrh	r3, [r3, r2]
 8007e32:	3301      	adds	r3, #1
 8007e34:	b299      	uxth	r1, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	22a0      	movs	r2, #160	; 0xa0
 8007e3a:	5299      	strh	r1, [r3, r2]

	  continue;
 8007e3c:	e0aa      	b.n	8007f94 <StartTaskModbusSlave+0x1d4>
    }

   // check slave id or single slave configuration address
    if ((modH->u8Buffer[ID] !=  modH->u8id) && (modH->u8Buffer[ID] != 0xF8))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	7cda      	ldrb	r2, [r3, #19]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	7a1b      	ldrb	r3, [r3, #8]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d004      	beq.n	8007e54 <StartTaskModbusSlave+0x94>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	7cdb      	ldrb	r3, [r3, #19]
 8007e4e:	2bf8      	cmp	r3, #248	; 0xf8
 8007e50:	d000      	beq.n	8007e54 <StartTaskModbusSlave+0x94>
 8007e52:	e09e      	b.n	8007f92 <StartTaskModbusSlave+0x1d2>
	 } else {
//			xTaskNotifyGive(defaultTaskHandle);
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8007e54:	250b      	movs	r5, #11
 8007e56:	197c      	adds	r4, r7, r5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	f000 fd24 	bl	80088a8 <validateRequest>
 8007e60:	0003      	movs	r3, r0
 8007e62:	7023      	strb	r3, [r4, #0]
	if (u8exception > 0)
 8007e64:	197b      	adds	r3, r7, r5
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d023      	beq.n	8007eb4 <StartTaskModbusSlave+0xf4>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	197b      	adds	r3, r7, r5
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	0011      	movs	r1, r2
 8007e74:	0018      	movs	r0, r3
 8007e76:	f000 fef9 	bl	8008c6c <buildException>
			sendTxBuffer(modH);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 ff17 	bl	8008cb0 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8007e82:	197b      	adds	r3, r7, r5
 8007e84:	2200      	movs	r2, #0
 8007e86:	569a      	ldrsb	r2, [r3, r2]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	749a      	strb	r2, [r3, #18]
		  // Flash the red LED every time we get an error.
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8007e8c:	4b42      	ldr	r3, [pc, #264]	; (8007f98 <StartTaskModbusSlave+0x1d8>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	2101      	movs	r1, #1
 8007e92:	0018      	movs	r0, r3
 8007e94:	f7fc fb0f 	bl	80044b6 <HAL_GPIO_WritePin>
		  xTimerStart(RedLedOffTimerHandle, 500);
 8007e98:	4b40      	ldr	r3, [pc, #256]	; (8007f9c <StartTaskModbusSlave+0x1dc>)
 8007e9a:	681c      	ldr	r4, [r3, #0]
 8007e9c:	f003 fbee 	bl	800b67c <xTaskGetTickCount>
 8007ea0:	0002      	movs	r2, r0
 8007ea2:	23fa      	movs	r3, #250	; 0xfa
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2101      	movs	r1, #1
 8007eac:	0020      	movs	r0, r4
 8007eae:	f004 fb6d 	bl	800c58c <xTimerGenericCommand>

		//return u8exception

		continue;
 8007eb2:	e06f      	b.n	8007f94 <StartTaskModbusSlave+0x1d4>
	 }

	  // Flash the green LED every time we get a Modbus packet.
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, true);
 8007eb4:	4b38      	ldr	r3, [pc, #224]	; (8007f98 <StartTaskModbusSlave+0x1d8>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	2102      	movs	r1, #2
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f7fc fafb 	bl	80044b6 <HAL_GPIO_WritePin>
	  xTimerStart(GreenLedOffTimerHandle, 200);
 8007ec0:	4b37      	ldr	r3, [pc, #220]	; (8007fa0 <StartTaskModbusSlave+0x1e0>)
 8007ec2:	681c      	ldr	r4, [r3, #0]
 8007ec4:	f003 fbda 	bl	800b67c <xTaskGetTickCount>
 8007ec8:	0002      	movs	r2, r0
 8007eca:	23c8      	movs	r3, #200	; 0xc8
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	0020      	movs	r0, r4
 8007ed4:	f004 fb5a 	bl	800c58c <xTimerGenericCommand>
	 modH->i8lastError = 0;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	749a      	strb	r2, [r3, #18]

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	7d1b      	ldrb	r3, [r3, #20]
 8007ee2:	2b10      	cmp	r3, #16
 8007ee4:	d853      	bhi.n	8007f8e <StartTaskModbusSlave+0x1ce>
 8007ee6:	009a      	lsls	r2, r3, #2
 8007ee8:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <StartTaskModbusSlave+0x1e4>)
 8007eea:	18d3      	adds	r3, r2, r3
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	469f      	mov	pc, r3
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f000 ff70 	bl	8008dd8 <process_FC1>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	0019      	movs	r1, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	22a7      	movs	r2, #167	; 0xa7
 8007f00:	5499      	strb	r1, [r3, r2]
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC2(modH);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	0018      	movs	r0, r3
 8007f06:	f001 f862 	bl	8008fce <process_FC2>
 8007f0a:	0003      	movs	r3, r0
 8007f0c:	0019      	movs	r1, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	22a7      	movs	r2, #167	; 0xa7
 8007f12:	5499      	strb	r1, [r3, r2]
				break;
 8007f14:	e03c      	b.n	8007f90 <StartTaskModbusSlave+0x1d0>
			case MB_FC_READ_HOLDING_REGISTER :
				modH->i8state = process_FC3(modH);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f001 f954 	bl	80091c6 <process_FC3>
 8007f1e:	0003      	movs	r3, r0
 8007f20:	0019      	movs	r1, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	22a7      	movs	r2, #167	; 0xa7
 8007f26:	5499      	strb	r1, [r3, r2]
				break;
 8007f28:	e032      	b.n	8007f90 <StartTaskModbusSlave+0x1d0>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC4(modH);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f001 f9e0 	bl	80092f2 <process_FC4>
 8007f32:	0003      	movs	r3, r0
 8007f34:	0019      	movs	r1, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	22a7      	movs	r2, #167	; 0xa7
 8007f3a:	5499      	strb	r1, [r3, r2]
				break;
 8007f3c:	e028      	b.n	8007f90 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	0018      	movs	r0, r3
 8007f42:	f001 fa6c 	bl	800941e <process_FC5>
 8007f46:	0003      	movs	r3, r0
 8007f48:	0019      	movs	r1, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	22a7      	movs	r2, #167	; 0xa7
 8007f4e:	5499      	strb	r1, [r3, r2]
				break;
 8007f50:	e01e      	b.n	8007f90 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_HOLDING_REGISTER :
				modH->i8state = process_FC6(modH);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	0018      	movs	r0, r3
 8007f56:	f001 fae0 	bl	800951a <process_FC6>
 8007f5a:	0003      	movs	r3, r0
 8007f5c:	0019      	movs	r1, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	22a7      	movs	r2, #167	; 0xa7
 8007f62:	5499      	strb	r1, [r3, r2]
				break;
 8007f64:	e014      	b.n	8007f90 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f001 fb45 	bl	80095f8 <process_FC15>
 8007f6e:	0003      	movs	r3, r0
 8007f70:	0019      	movs	r1, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	22a7      	movs	r2, #167	; 0xa7
 8007f76:	5499      	strb	r1, [r3, r2]
				break;
 8007f78:	e00a      	b.n	8007f90 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f001 fc11 	bl	80097a4 <process_FC16>
 8007f82:	0003      	movs	r3, r0
 8007f84:	0019      	movs	r1, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	22a7      	movs	r2, #167	; 0xa7
 8007f8a:	5499      	strb	r1, [r3, r2]
				break;
 8007f8c:	e000      	b.n	8007f90 <StartTaskModbusSlave+0x1d0>
			default:
				break;
 8007f8e:	46c0      	nop			; (mov r8, r8)
	 }

	 continue;
 8007f90:	e000      	b.n	8007f94 <StartTaskModbusSlave+0x1d4>
    	continue; // continue this is not for us
 8007f92:	46c0      	nop			; (mov r8, r8)
  {
 8007f94:	e71a      	b.n	8007dcc <StartTaskModbusSlave+0xc>
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	48000400 	.word	0x48000400
 8007f9c:	200000f0 	.word	0x200000f0
 8007fa0:	200000ec 	.word	0x200000ec
 8007fa4:	0800d5f8 	.word	0x0800d5f8

08007fa8 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8007fa8:	b084      	sub	sp, #16
 8007faa:	b5b0      	push	{r4, r5, r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	2004      	movs	r0, #4
 8007fb4:	2418      	movs	r4, #24
 8007fb6:	1900      	adds	r0, r0, r4
 8007fb8:	2408      	movs	r4, #8
 8007fba:	46a4      	mov	ip, r4
 8007fbc:	44bc      	add	ip, r7
 8007fbe:	4460      	add	r0, ip
 8007fc0:	6001      	str	r1, [r0, #0]
 8007fc2:	6042      	str	r2, [r0, #4]
 8007fc4:	6083      	str	r3, [r0, #8]


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8007fc6:	240e      	movs	r4, #14
 8007fc8:	193b      	adds	r3, r7, r4
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	22b8      	movs	r2, #184	; 0xb8
 8007fd2:	589b      	ldr	r3, [r3, r2]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	4252      	negs	r2, r2
 8007fd8:	0011      	movs	r1, r2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f002 fe1a 	bl	800ac14 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7a1b      	ldrb	r3, [r3, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <SendQuery+0x46>
 8007fe8:	193b      	adds	r3, r7, r4
 8007fea:	22ff      	movs	r2, #255	; 0xff
 8007fec:	701a      	strb	r2, [r3, #0]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	22a7      	movs	r2, #167	; 0xa7
 8007ff2:	569b      	ldrsb	r3, [r3, r2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <SendQuery+0x58>
 8007ff8:	230e      	movs	r3, #14
 8007ffa:	18fb      	adds	r3, r7, r3
 8007ffc:	22fe      	movs	r2, #254	; 0xfe
 8007ffe:	701a      	strb	r2, [r3, #0]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8008000:	2304      	movs	r3, #4
 8008002:	2218      	movs	r2, #24
 8008004:	189b      	adds	r3, r3, r2
 8008006:	2108      	movs	r1, #8
 8008008:	468c      	mov	ip, r1
 800800a:	44bc      	add	ip, r7
 800800c:	4463      	add	r3, ip
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <SendQuery+0x7e>
 8008014:	2304      	movs	r3, #4
 8008016:	189b      	adds	r3, r3, r2
 8008018:	2208      	movs	r2, #8
 800801a:	4694      	mov	ip, r2
 800801c:	44bc      	add	ip, r7
 800801e:	4463      	add	r3, ip
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2bf7      	cmp	r3, #247	; 0xf7
 8008024:	d903      	bls.n	800802e <SendQuery+0x86>
 8008026:	230e      	movs	r3, #14
 8008028:	18fb      	adds	r3, r7, r3
 800802a:	22f7      	movs	r2, #247	; 0xf7
 800802c:	701a      	strb	r2, [r3, #0]


	if(error)
 800802e:	240e      	movs	r4, #14
 8008030:	193b      	adds	r3, r7, r4
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d010      	beq.n	800805a <SendQuery+0xb2>
	{
		 modH->i8lastError = error;
 8008038:	193b      	adds	r3, r7, r4
 800803a:	2200      	movs	r2, #0
 800803c:	569a      	ldrsb	r2, [r3, r2]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	22b8      	movs	r2, #184	; 0xb8
 8008046:	5898      	ldr	r0, [r3, r2]
 8008048:	2300      	movs	r3, #0
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	f002 fbf7 	bl	800a840 <xQueueGenericSend>
		 return error;
 8008052:	193b      	adds	r3, r7, r4
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	b25b      	sxtb	r3, r3
 8008058:	e1c3      	b.n	80083e2 <SendQuery+0x43a>
	}


	modH->u16regs = telegram.u16reg;
 800805a:	2304      	movs	r3, #4
 800805c:	2018      	movs	r0, #24
 800805e:	181b      	adds	r3, r3, r0
 8008060:	2208      	movs	r2, #8
 8008062:	4694      	mov	ip, r2
 8008064:	44bc      	add	ip, r7
 8008066:	4463      	add	r3, ip
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2198      	movs	r1, #152	; 0x98
 800806e:	505a      	str	r2, [r3, r1]

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8008070:	2304      	movs	r3, #4
 8008072:	0001      	movs	r1, r0
 8008074:	185b      	adds	r3, r3, r1
 8008076:	2208      	movs	r2, #8
 8008078:	4694      	mov	ip, r2
 800807a:	44bc      	add	ip, r7
 800807c:	4463      	add	r3, ip
 800807e:	781a      	ldrb	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8008084:	2304      	movs	r3, #4
 8008086:	185b      	adds	r3, r3, r1
 8008088:	2208      	movs	r2, #8
 800808a:	4694      	mov	ip, r2
 800808c:	44bc      	add	ip, r7
 800808e:	4463      	add	r3, ip
 8008090:	785a      	ldrb	r2, [r3, #1]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8008096:	2304      	movs	r3, #4
 8008098:	185b      	adds	r3, r3, r1
 800809a:	2208      	movs	r2, #8
 800809c:	4694      	mov	ip, r2
 800809e:	44bc      	add	ip, r7
 80080a0:	4463      	add	r3, ip
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	0a1b      	lsrs	r3, r3, #8
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80080ae:	2304      	movs	r3, #4
 80080b0:	185b      	adds	r3, r3, r1
 80080b2:	2208      	movs	r2, #8
 80080b4:	4694      	mov	ip, r2
 80080b6:	44bc      	add	ip, r7
 80080b8:	4463      	add	r3, ip
 80080ba:	885b      	ldrh	r3, [r3, #2]
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80080c2:	2304      	movs	r3, #4
 80080c4:	185b      	adds	r3, r3, r1
 80080c6:	2208      	movs	r2, #8
 80080c8:	4694      	mov	ip, r2
 80080ca:	44bc      	add	ip, r7
 80080cc:	4463      	add	r3, ip
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	2b10      	cmp	r3, #16
 80080d2:	d900      	bls.n	80080d6 <SendQuery+0x12e>
 80080d4:	e171      	b.n	80083ba <SendQuery+0x412>
 80080d6:	009a      	lsls	r2, r3, #2
 80080d8:	4bc5      	ldr	r3, [pc, #788]	; (80083f0 <SendQuery+0x448>)
 80080da:	18d3      	adds	r3, r2, r3
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	469f      	mov	pc, r3
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_HOLDING_REGISTER:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80080e0:	2304      	movs	r3, #4
 80080e2:	2118      	movs	r1, #24
 80080e4:	185b      	adds	r3, r3, r1
 80080e6:	2208      	movs	r2, #8
 80080e8:	4694      	mov	ip, r2
 80080ea:	44bc      	add	ip, r7
 80080ec:	4463      	add	r3, ip
 80080ee:	889b      	ldrh	r3, [r3, #4]
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80080fa:	2304      	movs	r3, #4
 80080fc:	185b      	adds	r3, r3, r1
 80080fe:	2208      	movs	r2, #8
 8008100:	4694      	mov	ip, r2
 8008102:	44bc      	add	ip, r7
 8008104:	4463      	add	r3, ip
 8008106:	889b      	ldrh	r3, [r3, #4]
 8008108:	b2da      	uxtb	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2293      	movs	r2, #147	; 0x93
 8008112:	2106      	movs	r1, #6
 8008114:	5499      	strb	r1, [r3, r2]
	    break;
 8008116:	e150      	b.n	80083ba <SendQuery+0x412>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8008118:	2304      	movs	r3, #4
 800811a:	2218      	movs	r2, #24
 800811c:	189b      	adds	r3, r3, r2
 800811e:	2208      	movs	r2, #8
 8008120:	4694      	mov	ip, r2
 8008122:	44bc      	add	ip, r7
 8008124:	4463      	add	r3, ip
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <SendQuery+0x18a>
 800812e:	22ff      	movs	r2, #255	; 0xff
 8008130:	e000      	b.n	8008134 <SendQuery+0x18c>
 8008132:	2200      	movs	r2, #0
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2293      	movs	r2, #147	; 0x93
 8008142:	2106      	movs	r1, #6
 8008144:	5499      	strb	r1, [r3, r2]
	    break;
 8008146:	e138      	b.n	80083ba <SendQuery+0x412>
	case MB_FC_WRITE_HOLDING_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8008148:	2304      	movs	r3, #4
 800814a:	2118      	movs	r1, #24
 800814c:	185b      	adds	r3, r3, r1
 800814e:	2208      	movs	r2, #8
 8008150:	4694      	mov	ip, r2
 8008152:	44bc      	add	ip, r7
 8008154:	4463      	add	r3, ip
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	b29b      	uxth	r3, r3
 800815e:	b2da      	uxtb	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8008164:	2304      	movs	r3, #4
 8008166:	185b      	adds	r3, r3, r1
 8008168:	2208      	movs	r2, #8
 800816a:	4694      	mov	ip, r2
 800816c:	44bc      	add	ip, r7
 800816e:	4463      	add	r3, ip
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b2da      	uxtb	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2293      	movs	r2, #147	; 0x93
 800817e:	2106      	movs	r1, #6
 8008180:	5499      	strb	r1, [r3, r2]
	    break;
 8008182:	e11a      	b.n	80083ba <SendQuery+0x412>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8008184:	2304      	movs	r3, #4
 8008186:	2418      	movs	r4, #24
 8008188:	191b      	adds	r3, r3, r4
 800818a:	2208      	movs	r2, #8
 800818c:	4694      	mov	ip, r2
 800818e:	44bc      	add	ip, r7
 8008190:	4463      	add	r3, ip
 8008192:	889b      	ldrh	r3, [r3, #4]
 8008194:	091b      	lsrs	r3, r3, #4
 8008196:	b29a      	uxth	r2, r3
 8008198:	2109      	movs	r1, #9
 800819a:	187b      	adds	r3, r7, r1
 800819c:	701a      	strb	r2, [r3, #0]
	    u8bytesno = u8regsno * 2;
 800819e:	200f      	movs	r0, #15
 80081a0:	183a      	adds	r2, r7, r0
 80081a2:	187b      	adds	r3, r7, r1
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	18db      	adds	r3, r3, r3
 80081a8:	7013      	strb	r3, [r2, #0]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80081aa:	2304      	movs	r3, #4
 80081ac:	191b      	adds	r3, r3, r4
 80081ae:	2208      	movs	r2, #8
 80081b0:	4694      	mov	ip, r2
 80081b2:	44bc      	add	ip, r7
 80081b4:	4463      	add	r3, ip
 80081b6:	889b      	ldrh	r3, [r3, #4]
 80081b8:	220f      	movs	r2, #15
 80081ba:	4013      	ands	r3, r2
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <SendQuery+0x22e>
	    {
	        u8bytesno++;
 80081c2:	183b      	adds	r3, r7, r0
 80081c4:	781a      	ldrb	r2, [r3, #0]
 80081c6:	183b      	adds	r3, r7, r0
 80081c8:	3201      	adds	r2, #1
 80081ca:	701a      	strb	r2, [r3, #0]
	        u8regsno++;
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	187b      	adds	r3, r7, r1
 80081d2:	3201      	adds	r2, #1
 80081d4:	701a      	strb	r2, [r3, #0]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80081d6:	2304      	movs	r3, #4
 80081d8:	2118      	movs	r1, #24
 80081da:	185b      	adds	r3, r3, r1
 80081dc:	2208      	movs	r2, #8
 80081de:	4694      	mov	ip, r2
 80081e0:	44bc      	add	ip, r7
 80081e2:	4463      	add	r3, ip
 80081e4:	889b      	ldrh	r3, [r3, #4]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80081f0:	2304      	movs	r3, #4
 80081f2:	185b      	adds	r3, r3, r1
 80081f4:	2208      	movs	r2, #8
 80081f6:	4694      	mov	ip, r2
 80081f8:	44bc      	add	ip, r7
 80081fa:	4463      	add	r3, ip
 80081fc:	889b      	ldrh	r3, [r3, #4]
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	220f      	movs	r2, #15
 8008208:	18ba      	adds	r2, r7, r2
 800820a:	7812      	ldrb	r2, [r2, #0]
 800820c:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2293      	movs	r2, #147	; 0x93
 8008212:	2107      	movs	r1, #7
 8008214:	5499      	strb	r1, [r3, r2]

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8008216:	230c      	movs	r3, #12
 8008218:	18fb      	adds	r3, r7, r3
 800821a:	2200      	movs	r2, #0
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	e047      	b.n	80082b0 <SendQuery+0x308>
	    {
	        if(i%2)
 8008220:	210c      	movs	r1, #12
 8008222:	187b      	adds	r3, r7, r1
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	2201      	movs	r2, #1
 8008228:	4013      	ands	r3, r2
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d017      	beq.n	8008260 <SendQuery+0x2b8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8008230:	2304      	movs	r3, #4
 8008232:	2218      	movs	r2, #24
 8008234:	189b      	adds	r3, r3, r2
 8008236:	2208      	movs	r2, #8
 8008238:	4694      	mov	ip, r2
 800823a:	44bc      	add	ip, r7
 800823c:	4463      	add	r3, ip
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	187b      	adds	r3, r7, r1
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	b29b      	uxth	r3, r3
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	18d3      	adds	r3, r2, r3
 800824c:	8818      	ldrh	r0, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2293      	movs	r2, #147	; 0x93
 8008252:	5c9b      	ldrb	r3, [r3, r2]
 8008254:	0019      	movs	r1, r3
 8008256:	b2c2      	uxtb	r2, r0
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	185b      	adds	r3, r3, r1
 800825c:	74da      	strb	r2, [r3, #19]
 800825e:	e019      	b.n	8008294 <SendQuery+0x2ec>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8008260:	2304      	movs	r3, #4
 8008262:	2218      	movs	r2, #24
 8008264:	189b      	adds	r3, r3, r2
 8008266:	2208      	movs	r2, #8
 8008268:	4694      	mov	ip, r2
 800826a:	44bc      	add	ip, r7
 800826c:	4463      	add	r3, ip
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	230c      	movs	r3, #12
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	b29b      	uxth	r3, r3
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	18d3      	adds	r3, r2, r3
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	0a1b      	lsrs	r3, r3, #8
 8008282:	b298      	uxth	r0, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2293      	movs	r2, #147	; 0x93
 8008288:	5c9b      	ldrb	r3, [r3, r2]
 800828a:	0019      	movs	r1, r3
 800828c:	b2c2      	uxtb	r2, r0
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	185b      	adds	r3, r3, r1
 8008292:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2293      	movs	r2, #147	; 0x93
 8008298:	5c9b      	ldrb	r3, [r3, r2]
 800829a:	3301      	adds	r3, #1
 800829c:	b2d9      	uxtb	r1, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2293      	movs	r2, #147	; 0x93
 80082a2:	5499      	strb	r1, [r3, r2]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80082a4:	210c      	movs	r1, #12
 80082a6:	187b      	adds	r3, r7, r1
 80082a8:	881a      	ldrh	r2, [r3, #0]
 80082aa:	187b      	adds	r3, r7, r1
 80082ac:	3201      	adds	r2, #1
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	230f      	movs	r3, #15
 80082b2:	18fb      	adds	r3, r7, r3
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	220c      	movs	r2, #12
 80082ba:	18ba      	adds	r2, r7, r2
 80082bc:	8812      	ldrh	r2, [r2, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d3ae      	bcc.n	8008220 <SendQuery+0x278>
	    }
	    break;
 80082c2:	e07a      	b.n	80083ba <SendQuery+0x412>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80082c4:	2304      	movs	r3, #4
 80082c6:	2118      	movs	r1, #24
 80082c8:	185b      	adds	r3, r3, r1
 80082ca:	2208      	movs	r2, #8
 80082cc:	4694      	mov	ip, r2
 80082ce:	44bc      	add	ip, r7
 80082d0:	4463      	add	r3, ip
 80082d2:	889b      	ldrh	r3, [r3, #4]
 80082d4:	0a1b      	lsrs	r3, r3, #8
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80082de:	2304      	movs	r3, #4
 80082e0:	185b      	adds	r3, r3, r1
 80082e2:	2208      	movs	r2, #8
 80082e4:	4694      	mov	ip, r2
 80082e6:	44bc      	add	ip, r7
 80082e8:	4463      	add	r3, ip
 80082ea:	889b      	ldrh	r3, [r3, #4]
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80082f2:	2304      	movs	r3, #4
 80082f4:	185b      	adds	r3, r3, r1
 80082f6:	2208      	movs	r2, #8
 80082f8:	4694      	mov	ip, r2
 80082fa:	44bc      	add	ip, r7
 80082fc:	4463      	add	r3, ip
 80082fe:	889b      	ldrh	r3, [r3, #4]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	18db      	adds	r3, r3, r3
 8008304:	b2da      	uxtb	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2293      	movs	r2, #147	; 0x93
 800830e:	2107      	movs	r1, #7
 8008310:	5499      	strb	r1, [r3, r2]

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8008312:	230a      	movs	r3, #10
 8008314:	18fb      	adds	r3, r7, r3
 8008316:	2200      	movs	r2, #0
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	e040      	b.n	800839e <SendQuery+0x3f6>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800831c:	2304      	movs	r3, #4
 800831e:	2518      	movs	r5, #24
 8008320:	195b      	adds	r3, r3, r5
 8008322:	2208      	movs	r2, #8
 8008324:	4694      	mov	ip, r2
 8008326:	44bc      	add	ip, r7
 8008328:	4463      	add	r3, ip
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	240a      	movs	r4, #10
 800832e:	193b      	adds	r3, r7, r4
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	18d3      	adds	r3, r2, r3
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	0a1b      	lsrs	r3, r3, #8
 800833a:	b298      	uxth	r0, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2293      	movs	r2, #147	; 0x93
 8008340:	5c9b      	ldrb	r3, [r3, r2]
 8008342:	0019      	movs	r1, r3
 8008344:	b2c2      	uxtb	r2, r0
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	185b      	adds	r3, r3, r1
 800834a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2293      	movs	r2, #147	; 0x93
 8008350:	5c9b      	ldrb	r3, [r3, r2]
 8008352:	3301      	adds	r3, #1
 8008354:	b2d9      	uxtb	r1, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2293      	movs	r2, #147	; 0x93
 800835a:	5499      	strb	r1, [r3, r2]
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800835c:	2304      	movs	r3, #4
 800835e:	195b      	adds	r3, r3, r5
 8008360:	2208      	movs	r2, #8
 8008362:	4694      	mov	ip, r2
 8008364:	44bc      	add	ip, r7
 8008366:	4463      	add	r3, ip
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	193b      	adds	r3, r7, r4
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	18d3      	adds	r3, r2, r3
 8008372:	8818      	ldrh	r0, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2293      	movs	r2, #147	; 0x93
 8008378:	5c9b      	ldrb	r3, [r3, r2]
 800837a:	0019      	movs	r1, r3
 800837c:	b2c2      	uxtb	r2, r0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	185b      	adds	r3, r3, r1
 8008382:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2293      	movs	r2, #147	; 0x93
 8008388:	5c9b      	ldrb	r3, [r3, r2]
 800838a:	3301      	adds	r3, #1
 800838c:	b2d9      	uxtb	r1, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2293      	movs	r2, #147	; 0x93
 8008392:	5499      	strb	r1, [r3, r2]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8008394:	193b      	adds	r3, r7, r4
 8008396:	881a      	ldrh	r2, [r3, #0]
 8008398:	193b      	adds	r3, r7, r4
 800839a:	3201      	adds	r2, #1
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	2304      	movs	r3, #4
 80083a0:	2218      	movs	r2, #24
 80083a2:	189b      	adds	r3, r3, r2
 80083a4:	2208      	movs	r2, #8
 80083a6:	4694      	mov	ip, r2
 80083a8:	44bc      	add	ip, r7
 80083aa:	4463      	add	r3, ip
 80083ac:	889b      	ldrh	r3, [r3, #4]
 80083ae:	220a      	movs	r2, #10
 80083b0:	18ba      	adds	r2, r7, r2
 80083b2:	8812      	ldrh	r2, [r2, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d3b1      	bcc.n	800831c <SendQuery+0x374>
	    }
	    break;
 80083b8:	46c0      	nop			; (mov r8, r8)
	}


	sendTxBuffer(modH);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	0018      	movs	r0, r3
 80083be:	f000 fc77 	bl	8008cb0 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	22b8      	movs	r2, #184	; 0xb8
 80083c6:	5898      	ldr	r0, [r3, r2]
 80083c8:	2300      	movs	r3, #0
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	f002 fa37 	bl	800a840 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	22a7      	movs	r2, #167	; 0xa7
 80083d6:	2101      	movs	r1, #1
 80083d8:	5499      	strb	r1, [r3, r2]
	modH->i8lastError = 0;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	749a      	strb	r2, [r3, #18]
	return 0;
 80083e0:	2300      	movs	r3, #0


}
 80083e2:	0018      	movs	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	b004      	add	sp, #16
 80083e8:	bcb0      	pop	{r4, r5, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	b004      	add	sp, #16
 80083ee:	4718      	bx	r3
 80083f0:	0800d63c 	.word	0x0800d63c

080083f4 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b08d      	sub	sp, #52	; 0x34
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	22a8      	movs	r2, #168	; 0xa8
 8008404:	589b      	ldr	r3, [r3, r2]
 8008406:	2201      	movs	r2, #1
 8008408:	4252      	negs	r2, r2
 800840a:	240c      	movs	r4, #12
 800840c:	1939      	adds	r1, r7, r4
 800840e:	0018      	movs	r0, r3
 8008410:	f002 fb4b 	bl	800aaaa <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8008414:	193b      	adds	r3, r7, r4
 8008416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008418:	466a      	mov	r2, sp
 800841a:	68d9      	ldr	r1, [r3, #12]
 800841c:	6011      	str	r1, [r2, #0]
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f7ff fdc0 	bl	8007fa8 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008428:	2301      	movs	r3, #1
 800842a:	425b      	negs	r3, r3
 800842c:	0019      	movs	r1, r3
 800842e:	2001      	movs	r0, #1
 8008430:	f003 fd9e 	bl	800bf70 <ulTaskNotifyTake>
 8008434:	0003      	movs	r3, r0
 8008436:	623b      	str	r3, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	2200      	movs	r2, #0
 800843c:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d019      	beq.n	8008478 <StartTaskModbusMaster+0x84>
      {
    	  modH->i8state = COM_IDLE;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	22a7      	movs	r2, #167	; 0xa7
 8008448:	2100      	movs	r1, #0
 800844a:	5499      	strb	r1, [r3, r2]
    	  modH->i8lastError = ERR_TIME_OUT;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	22f8      	movs	r2, #248	; 0xf8
 8008450:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	22a0      	movs	r2, #160	; 0xa0
 8008456:	5a9b      	ldrh	r3, [r3, r2]
 8008458:	3301      	adds	r3, #1
 800845a:	b299      	uxth	r1, r3
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	22a0      	movs	r2, #160	; 0xa0
 8008460:	5299      	strh	r1, [r3, r2]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8008462:	193b      	adds	r3, r7, r4
 8008464:	68d8      	ldr	r0, [r3, #12]
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	7c9b      	ldrb	r3, [r3, #18]
 800846a:	b25b      	sxtb	r3, r3
 800846c:	0019      	movs	r1, r3
 800846e:	2300      	movs	r3, #0
 8008470:	2203      	movs	r2, #3
 8008472:	f003 fdc3 	bl	800bffc <xTaskGenericNotify>
    	  continue;
 8008476:	e098      	b.n	80085aa <StartTaskModbusMaster+0x1b6>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	0018      	movs	r0, r3
 800847c:	f000 f9c2 	bl	8008804 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	2293      	movs	r2, #147	; 0x93
 8008484:	5c9b      	ldrb	r3, [r3, r2]
 8008486:	2b05      	cmp	r3, #5
 8008488:	d81a      	bhi.n	80084c0 <StartTaskModbusMaster+0xcc>

		  modH->i8state = COM_IDLE;
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	22a7      	movs	r2, #167	; 0xa7
 800848e:	2100      	movs	r1, #0
 8008490:	5499      	strb	r1, [r3, r2]
		  modH->i8lastError = ERR_BAD_SIZE;
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	22fa      	movs	r2, #250	; 0xfa
 8008496:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	22a0      	movs	r2, #160	; 0xa0
 800849c:	5a9b      	ldrh	r3, [r3, r2]
 800849e:	3301      	adds	r3, #1
 80084a0:	b299      	uxth	r1, r3
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	22a0      	movs	r2, #160	; 0xa0
 80084a6:	5299      	strh	r1, [r3, r2]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80084a8:	230c      	movs	r3, #12
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	68d8      	ldr	r0, [r3, #12]
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	7c9b      	ldrb	r3, [r3, #18]
 80084b2:	b25b      	sxtb	r3, r3
 80084b4:	0019      	movs	r1, r3
 80084b6:	2300      	movs	r3, #0
 80084b8:	2203      	movs	r2, #3
 80084ba:	f003 fd9f 	bl	800bffc <xTaskGenericNotify>
		  continue;
 80084be:	e074      	b.n	80085aa <StartTaskModbusMaster+0x1b6>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	22b4      	movs	r2, #180	; 0xb4
 80084c4:	5898      	ldr	r0, [r3, r2]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2103      	movs	r1, #3
 80084d0:	f004 f85c 	bl	800c58c <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	0018      	movs	r0, r3
 80084d8:	f000 f914 	bl	8008704 <validateAnswer>
 80084dc:	0003      	movs	r3, r0
 80084de:	001a      	movs	r2, r3
 80084e0:	201f      	movs	r0, #31
 80084e2:	183b      	adds	r3, r7, r0
 80084e4:	701a      	strb	r2, [r3, #0]
	  if (u8exception != 0)
 80084e6:	183b      	adds	r3, r7, r0
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	b25b      	sxtb	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d013      	beq.n	8008518 <StartTaskModbusMaster+0x124>
	  {
		 modH->i8state = COM_IDLE;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	22a7      	movs	r2, #167	; 0xa7
 80084f4:	2100      	movs	r1, #0
 80084f6:	5499      	strb	r1, [r3, r2]
         modH->i8lastError = u8exception;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	183a      	adds	r2, r7, r0
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8008500:	230c      	movs	r3, #12
 8008502:	18fb      	adds	r3, r7, r3
 8008504:	68d8      	ldr	r0, [r3, #12]
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	7c9b      	ldrb	r3, [r3, #18]
 800850a:	b25b      	sxtb	r3, r3
 800850c:	0019      	movs	r1, r3
 800850e:	2300      	movs	r3, #0
 8008510:	2203      	movs	r2, #3
 8008512:	f003 fd73 	bl	800bffc <xTaskGenericNotify>
	     continue;
 8008516:	e048      	b.n	80085aa <StartTaskModbusMaster+0x1b6>
	  }

	  modH->i8lastError = u8exception;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	221f      	movs	r2, #31
 800851c:	18ba      	adds	r2, r7, r2
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	22b8      	movs	r2, #184	; 0xb8
 8008526:	589b      	ldr	r3, [r3, r2]
 8008528:	2201      	movs	r2, #1
 800852a:	4252      	negs	r2, r2
 800852c:	0011      	movs	r1, r2
 800852e:	0018      	movs	r0, r3
 8008530:	f002 fb70 	bl	800ac14 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	7d1b      	ldrb	r3, [r3, #20]
 8008538:	2b10      	cmp	r3, #16
 800853a:	dc18      	bgt.n	800856e <StartTaskModbusMaster+0x17a>
 800853c:	2b0f      	cmp	r3, #15
 800853e:	da18      	bge.n	8008572 <StartTaskModbusMaster+0x17e>
 8008540:	2b06      	cmp	r3, #6
 8008542:	dc14      	bgt.n	800856e <StartTaskModbusMaster+0x17a>
 8008544:	2b05      	cmp	r3, #5
 8008546:	da14      	bge.n	8008572 <StartTaskModbusMaster+0x17e>
 8008548:	2b02      	cmp	r3, #2
 800854a:	dc02      	bgt.n	8008552 <StartTaskModbusMaster+0x15e>
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc04      	bgt.n	800855a <StartTaskModbusMaster+0x166>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8008550:	e00d      	b.n	800856e <StartTaskModbusMaster+0x17a>
 8008552:	3b03      	subs	r3, #3
	  switch( modH->u8Buffer[ FUNC ] )
 8008554:	2b01      	cmp	r3, #1
 8008556:	d80a      	bhi.n	800856e <StartTaskModbusMaster+0x17a>
 8008558:	e004      	b.n	8008564 <StartTaskModbusMaster+0x170>
	      get_FC1(modH);
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	0018      	movs	r0, r3
 800855e:	f000 f825 	bl	80085ac <get_FC1>
	      break;
 8008562:	e007      	b.n	8008574 <StartTaskModbusMaster+0x180>
	      get_FC3(modH);
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	0018      	movs	r0, r3
 8008568:	f000 f88e 	bl	8008688 <get_FC3>
	      break;
 800856c:	e002      	b.n	8008574 <StartTaskModbusMaster+0x180>
	      break;
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	e000      	b.n	8008574 <StartTaskModbusMaster+0x180>
	      break;
 8008572:	46c0      	nop			; (mov r8, r8)
	  }
	  modH->i8state = COM_IDLE;
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	22a7      	movs	r2, #167	; 0xa7
 8008578:	2100      	movs	r1, #0
 800857a:	5499      	strb	r1, [r3, r2]

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	7c9b      	ldrb	r3, [r3, #18]
 8008580:	b25b      	sxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d110      	bne.n	80085a8 <StartTaskModbusMaster+0x1b4>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	22b8      	movs	r2, #184	; 0xb8
 800858a:	5898      	ldr	r0, [r3, r2]
 800858c:	2300      	movs	r3, #0
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	f002 f955 	bl	800a840 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8008596:	230c      	movs	r3, #12
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	68d8      	ldr	r0, [r3, #12]
 800859c:	230b      	movs	r3, #11
 800859e:	4259      	negs	r1, r3
 80085a0:	2300      	movs	r3, #0
 80085a2:	2203      	movs	r2, #3
 80085a4:	f003 fd2a 	bl	800bffc <xTaskGenericNotify>
	  }


	  continue;
 80085a8:	46c0      	nop			; (mov r8, r8)
  {
 80085aa:	e729      	b.n	8008400 <StartTaskModbusMaster+0xc>

080085ac <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80085b4:	230e      	movs	r3, #14
 80085b6:	18fb      	adds	r3, r7, r3
 80085b8:	2203      	movs	r2, #3
 80085ba:	701a      	strb	r2, [r3, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80085bc:	230f      	movs	r3, #15
 80085be:	18fb      	adds	r3, r7, r3
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e054      	b.n	8008670 <get_FC1+0xc4>

        if(i%2)
 80085c6:	240f      	movs	r4, #15
 80085c8:	193b      	adds	r3, r7, r4
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	4013      	ands	r3, r2
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d021      	beq.n	800861a <get_FC1+0x6e>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 80085d6:	193b      	adds	r3, r7, r4
 80085d8:	781a      	ldrb	r2, [r3, #0]
 80085da:	230e      	movs	r3, #14
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	18d3      	adds	r3, r2, r3
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	18d3      	adds	r3, r2, r3
 80085e6:	7cd8      	ldrb	r0, [r3, #19]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2298      	movs	r2, #152	; 0x98
 80085ec:	589a      	ldr	r2, [r3, r2]
 80085ee:	193b      	adds	r3, r7, r4
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	085b      	lsrs	r3, r3, #1
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	18d3      	adds	r3, r2, r3
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	b2d9      	uxtb	r1, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2298      	movs	r2, #152	; 0x98
 8008602:	589a      	ldr	r2, [r3, r2]
 8008604:	193b      	adds	r3, r7, r4
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	18d4      	adds	r4, r2, r3
 8008610:	f000 faba 	bl	8008b88 <word>
 8008614:	0003      	movs	r3, r0
 8008616:	8023      	strh	r3, [r4, #0]
 8008618:	e024      	b.n	8008664 <get_FC1+0xb8>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2298      	movs	r2, #152	; 0x98
 800861e:	589a      	ldr	r2, [r3, r2]
 8008620:	210f      	movs	r1, #15
 8008622:	187b      	adds	r3, r7, r1
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	b2db      	uxtb	r3, r3
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	18d3      	adds	r3, r2, r3
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	0a1b      	lsrs	r3, r3, #8
 8008632:	b29b      	uxth	r3, r3
 8008634:	b2d8      	uxtb	r0, r3
 8008636:	000c      	movs	r4, r1
 8008638:	187b      	adds	r3, r7, r1
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	230e      	movs	r3, #14
 800863e:	18fb      	adds	r3, r7, r3
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	18d3      	adds	r3, r2, r3
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	18d3      	adds	r3, r2, r3
 8008648:	7cd9      	ldrb	r1, [r3, #19]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2298      	movs	r2, #152	; 0x98
 800864e:	589a      	ldr	r2, [r3, r2]
 8008650:	193b      	adds	r3, r7, r4
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	b2db      	uxtb	r3, r3
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	18d4      	adds	r4, r2, r3
 800865c:	f000 fa94 	bl	8008b88 <word>
 8008660:	0003      	movs	r3, r0
 8008662:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8008664:	210f      	movs	r1, #15
 8008666:	187b      	adds	r3, r7, r1
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	187b      	adds	r3, r7, r1
 800866c:	3201      	adds	r2, #1
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7d5b      	ldrb	r3, [r3, #21]
 8008674:	220f      	movs	r2, #15
 8008676:	18ba      	adds	r2, r7, r2
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d3a3      	bcc.n	80085c6 <get_FC1+0x1a>
        }

     }
}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	46c0      	nop			; (mov r8, r8)
 8008682:	46bd      	mov	sp, r7
 8008684:	b005      	add	sp, #20
 8008686:	bd90      	pop	{r4, r7, pc}

08008688 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8008688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8008690:	230f      	movs	r3, #15
 8008692:	18fb      	adds	r3, r7, r3
 8008694:	2203      	movs	r2, #3
 8008696:	701a      	strb	r2, [r3, #0]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8008698:	230e      	movs	r3, #14
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e021      	b.n	80086e6 <get_FC3+0x5e>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80086a2:	250f      	movs	r5, #15
 80086a4:	197b      	adds	r3, r7, r5
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	18d3      	adds	r3, r2, r3
 80086ac:	7cd8      	ldrb	r0, [r3, #19]
 80086ae:	197b      	adds	r3, r7, r5
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	18d3      	adds	r3, r2, r3
 80086b8:	7cd9      	ldrb	r1, [r3, #19]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2298      	movs	r2, #152	; 0x98
 80086be:	589a      	ldr	r2, [r3, r2]
 80086c0:	260e      	movs	r6, #14
 80086c2:	19bb      	adds	r3, r7, r6
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	18d4      	adds	r4, r2, r3
 80086ca:	f000 fa5d 	bl	8008b88 <word>
 80086ce:	0003      	movs	r3, r0
 80086d0:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80086d2:	197b      	adds	r3, r7, r5
 80086d4:	197a      	adds	r2, r7, r5
 80086d6:	7812      	ldrb	r2, [r2, #0]
 80086d8:	3202      	adds	r2, #2
 80086da:	701a      	strb	r2, [r3, #0]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80086dc:	19bb      	adds	r3, r7, r6
 80086de:	781a      	ldrb	r2, [r3, #0]
 80086e0:	19bb      	adds	r3, r7, r6
 80086e2:	3201      	adds	r2, #1
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7d5b      	ldrb	r3, [r3, #21]
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	220e      	movs	r2, #14
 80086f0:	18ba      	adds	r2, r7, r2
 80086f2:	7812      	ldrb	r2, [r2, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d3d4      	bcc.n	80086a2 <get_FC3+0x1a>
    }
}
 80086f8:	46c0      	nop			; (mov r8, r8)
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b005      	add	sp, #20
 8008700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008704 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8008704:	b590      	push	{r4, r7, lr}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2293      	movs	r2, #147	; 0x93
 8008710:	5c9b      	ldrb	r3, [r3, r2]
 8008712:	3b02      	subs	r3, #2
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	18d3      	adds	r3, r2, r3
 8008718:	7cdb      	ldrb	r3, [r3, #19]
 800871a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800871c:	b21a      	sxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2193      	movs	r1, #147	; 0x93
 8008722:	5c5b      	ldrb	r3, [r3, r1]
 8008724:	3b01      	subs	r3, #1
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	18cb      	adds	r3, r1, r3
 800872a:	7cdb      	ldrb	r3, [r3, #19]
 800872c:	b21b      	sxth	r3, r3
 800872e:	4313      	orrs	r3, r2
 8008730:	b21a      	sxth	r2, r3
	uint16_t u16MsgCRC =
 8008732:	240c      	movs	r4, #12
 8008734:	193b      	adds	r3, r7, r4
 8008736:	801a      	strh	r2, [r3, #0]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3313      	adds	r3, #19
 800873c:	001a      	movs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2193      	movs	r1, #147	; 0x93
 8008742:	5c5b      	ldrb	r3, [r3, r1]
 8008744:	3b02      	subs	r3, #2
 8008746:	b2db      	uxtb	r3, r3
 8008748:	0019      	movs	r1, r3
 800874a:	0010      	movs	r0, r2
 800874c:	f000 fa34 	bl	8008bb8 <calcCRC>
 8008750:	0003      	movs	r3, r0
 8008752:	001a      	movs	r2, r3
 8008754:	193b      	adds	r3, r7, r4
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	4293      	cmp	r3, r2
 800875a:	d009      	beq.n	8008770 <validateAnswer+0x6c>
    {
    	modH->u16errCnt ++;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	22a0      	movs	r2, #160	; 0xa0
 8008760:	5a9b      	ldrh	r3, [r3, r2]
 8008762:	3301      	adds	r3, #1
 8008764:	b299      	uxth	r1, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	22a0      	movs	r2, #160	; 0xa0
 800876a:	5299      	strh	r1, [r3, r2]
        return ERR_BAD_CRC;
 800876c:	23fc      	movs	r3, #252	; 0xfc
 800876e:	e043      	b.n	80087f8 <validateAnswer+0xf4>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7d1b      	ldrb	r3, [r3, #20]
 8008774:	b25b      	sxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	da09      	bge.n	800878e <validateAnswer+0x8a>
    {
    	modH->u16errCnt ++;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	22a0      	movs	r2, #160	; 0xa0
 800877e:	5a9b      	ldrh	r3, [r3, r2]
 8008780:	3301      	adds	r3, #1
 8008782:	b299      	uxth	r1, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	22a0      	movs	r2, #160	; 0xa0
 8008788:	5299      	strh	r1, [r3, r2]
        return ERR_EXCEPTION;
 800878a:	23fb      	movs	r3, #251	; 0xfb
 800878c:	e034      	b.n	80087f8 <validateAnswer+0xf4>
    }

    // check fct code
    bool isSupported = false;
 800878e:	230f      	movs	r3, #15
 8008790:	18fb      	adds	r3, r7, r3
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8008796:	230e      	movs	r3, #14
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	e013      	b.n	80087c8 <validateAnswer+0xc4>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80087a0:	230e      	movs	r3, #14
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	4a16      	ldr	r2, [pc, #88]	; (8008800 <validateAnswer+0xfc>)
 80087a8:	5cd2      	ldrb	r2, [r2, r3]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7d1b      	ldrb	r3, [r3, #20]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d104      	bne.n	80087bc <validateAnswer+0xb8>
        {
            isSupported = 1;
 80087b2:	230f      	movs	r3, #15
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	2201      	movs	r2, #1
 80087b8:	701a      	strb	r2, [r3, #0]
            break;
 80087ba:	e00a      	b.n	80087d2 <validateAnswer+0xce>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80087bc:	210e      	movs	r1, #14
 80087be:	187b      	adds	r3, r7, r1
 80087c0:	781a      	ldrb	r2, [r3, #0]
 80087c2:	187b      	adds	r3, r7, r1
 80087c4:	3201      	adds	r2, #1
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	230e      	movs	r3, #14
 80087ca:	18fb      	adds	r3, r7, r3
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b07      	cmp	r3, #7
 80087d0:	d9e6      	bls.n	80087a0 <validateAnswer+0x9c>
        }
    }
    if (!isSupported)
 80087d2:	230f      	movs	r3, #15
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2201      	movs	r2, #1
 80087da:	4053      	eors	r3, r2
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <validateAnswer+0xf2>
    {
    	modH->u16errCnt ++;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	22a0      	movs	r2, #160	; 0xa0
 80087e6:	5a9b      	ldrh	r3, [r3, r2]
 80087e8:	3301      	adds	r3, #1
 80087ea:	b299      	uxth	r1, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	22a0      	movs	r2, #160	; 0xa0
 80087f0:	5299      	strh	r1, [r3, r2]
        return EXC_FUNC_CODE;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <validateAnswer+0xf4>
    }

    return 0; // OK, no exception code thrown
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	0018      	movs	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b005      	add	sp, #20
 80087fe:	bd90      	pop	{r4, r7, pc}
 8008800:	0800d5f0 	.word	0x0800d5f0

08008804 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	23a0      	movs	r3, #160	; 0xa0
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	5cd3      	ldrb	r3, [r2, r3]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d104      	bne.n	8008822 <getRxBuffer+0x1e>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	0018      	movs	r0, r3
 800881e:	f7fd fc39 	bl	8006094 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	33ff      	adds	r3, #255	; 0xff
 8008828:	5cd3      	ldrb	r3, [r2, r3]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <getRxBuffer+0x40>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	33bc      	adds	r3, #188	; 0xbc
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff f908 	bl	8007a48 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8008838:	230e      	movs	r3, #14
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	2203      	movs	r2, #3
 800883e:	4252      	negs	r2, r2
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e01b      	b.n	800887c <getRxBuffer+0x78>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	33bc      	adds	r3, #188	; 0xbc
 8008848:	001a      	movs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3313      	adds	r3, #19
 800884e:	0019      	movs	r1, r3
 8008850:	0010      	movs	r0, r2
 8008852:	f7ff f87f 	bl	8007954 <RingGetAllBytes>
 8008856:	0003      	movs	r3, r0
 8008858:	0019      	movs	r1, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2293      	movs	r2, #147	; 0x93
 800885e:	5499      	strb	r1, [r3, r2]
		modH->u16InCnt++;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	229c      	movs	r2, #156	; 0x9c
 8008864:	5a9b      	ldrh	r3, [r3, r2]
 8008866:	3301      	adds	r3, #1
 8008868:	b299      	uxth	r1, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	229c      	movs	r2, #156	; 0x9c
 800886e:	5299      	strh	r1, [r3, r2]
		i16result = modH->u8BufferSize;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2293      	movs	r2, #147	; 0x93
 8008874:	5c9a      	ldrb	r2, [r3, r2]
 8008876:	230e      	movs	r3, #14
 8008878:	18fb      	adds	r3, r7, r3
 800887a:	801a      	strh	r2, [r3, #0]
	}

	if(modH->xTypeHW == USART_HW)
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	23a0      	movs	r3, #160	; 0xa0
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	5cd3      	ldrb	r3, [r2, r3]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d107      	bne.n	8008898 <getRxBuffer+0x94>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6858      	ldr	r0, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	33a6      	adds	r3, #166	; 0xa6
 8008890:	2201      	movs	r2, #1
 8008892:	0019      	movs	r1, r3
 8008894:	f7fd fba6 	bl	8005fe4 <HAL_UART_Receive_IT>
	}

    return i16result;
 8008898:	230e      	movs	r3, #14
 800889a:	18fb      	adds	r3, r7, r3
 800889c:	2200      	movs	r2, #0
 800889e:	5e9b      	ldrsh	r3, [r3, r2]
}
 80088a0:	0018      	movs	r0, r3
 80088a2:	46bd      	mov	sp, r7
 80088a4:	b004      	add	sp, #16
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 80088a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2293      	movs	r2, #147	; 0x93
 80088b4:	5c9b      	ldrb	r3, [r3, r2]
 80088b6:	3b02      	subs	r3, #2
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	18d3      	adds	r3, r2, r3
 80088bc:	7cdb      	ldrb	r3, [r3, #19]
 80088be:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80088c0:	b21a      	sxth	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2193      	movs	r1, #147	; 0x93
 80088c6:	5c5b      	ldrb	r3, [r3, r1]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	18cb      	adds	r3, r1, r3
 80088ce:	7cdb      	ldrb	r3, [r3, #19]
 80088d0:	b21b      	sxth	r3, r3
 80088d2:	4313      	orrs	r3, r2
 80088d4:	b21a      	sxth	r2, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80088d6:	2408      	movs	r4, #8
 80088d8:	193b      	adds	r3, r7, r4
 80088da:	801a      	strh	r2, [r3, #0]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3313      	adds	r3, #19
 80088e0:	001a      	movs	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2193      	movs	r1, #147	; 0x93
 80088e6:	5c5b      	ldrb	r3, [r3, r1]
 80088e8:	3b02      	subs	r3, #2
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	0019      	movs	r1, r3
 80088ee:	0010      	movs	r0, r2
 80088f0:	f000 f962 	bl	8008bb8 <calcCRC>
 80088f4:	0003      	movs	r3, r0
 80088f6:	001a      	movs	r2, r3
 80088f8:	193b      	adds	r3, r7, r4
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d009      	beq.n	8008914 <validateRequest+0x6c>
	    {
	       		modH->u16errCnt ++;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	22a0      	movs	r2, #160	; 0xa0
 8008904:	5a9b      	ldrh	r3, [r3, r2]
 8008906:	3301      	adds	r3, #1
 8008908:	b299      	uxth	r1, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	22a0      	movs	r2, #160	; 0xa0
 800890e:	5299      	strh	r1, [r3, r2]
	       		return ERR_BAD_CRC;
 8008910:	23fc      	movs	r3, #252	; 0xfc
 8008912:	e131      	b.n	8008b78 <validateRequest+0x2d0>


#endif

	    // check fct code
	    bool isSupported = false;
 8008914:	230f      	movs	r3, #15
 8008916:	18fb      	adds	r3, r7, r3
 8008918:	2200      	movs	r2, #0
 800891a:	701a      	strb	r2, [r3, #0]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800891c:	230e      	movs	r3, #14
 800891e:	18fb      	adds	r3, r7, r3
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	e013      	b.n	800894e <validateRequest+0xa6>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8008926:	230e      	movs	r3, #14
 8008928:	18fb      	adds	r3, r7, r3
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	4a94      	ldr	r2, [pc, #592]	; (8008b80 <validateRequest+0x2d8>)
 800892e:	5cd2      	ldrb	r2, [r2, r3]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7d1b      	ldrb	r3, [r3, #20]
 8008934:	429a      	cmp	r2, r3
 8008936:	d104      	bne.n	8008942 <validateRequest+0x9a>
	        {
	            isSupported = 1;
 8008938:	230f      	movs	r3, #15
 800893a:	18fb      	adds	r3, r7, r3
 800893c:	2201      	movs	r2, #1
 800893e:	701a      	strb	r2, [r3, #0]
	            break;
 8008940:	e00a      	b.n	8008958 <validateRequest+0xb0>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8008942:	210e      	movs	r1, #14
 8008944:	187b      	adds	r3, r7, r1
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	187b      	adds	r3, r7, r1
 800894a:	3201      	adds	r2, #1
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	230e      	movs	r3, #14
 8008950:	18fb      	adds	r3, r7, r3
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b07      	cmp	r3, #7
 8008956:	d9e6      	bls.n	8008926 <validateRequest+0x7e>
	        }
	    }
	    if (!isSupported)
 8008958:	230f      	movs	r3, #15
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2201      	movs	r2, #1
 8008960:	4053      	eors	r3, r2
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d009      	beq.n	800897c <validateRequest+0xd4>
	    {
	    	modH->u16errCnt ++;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	22a0      	movs	r2, #160	; 0xa0
 800896c:	5a9b      	ldrh	r3, [r3, r2]
 800896e:	3301      	adds	r3, #1
 8008970:	b299      	uxth	r1, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	22a0      	movs	r2, #160	; 0xa0
 8008976:	5299      	strh	r1, [r3, r2]
	        return EXC_FUNC_CODE;
 8008978:	2301      	movs	r3, #1
 800897a:	e0fd      	b.n	8008b78 <validateRequest+0x2d0>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800897c:	230c      	movs	r3, #12
 800897e:	18fb      	adds	r3, r7, r3
 8008980:	2200      	movs	r2, #0
 8008982:	801a      	strh	r2, [r3, #0]
	    uint16_t u16NRegs = 0;
 8008984:	230a      	movs	r3, #10
 8008986:	18fb      	adds	r3, r7, r3
 8008988:	2200      	movs	r2, #0
 800898a:	801a      	strh	r2, [r3, #0]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7d1b      	ldrb	r3, [r3, #20]
 8008990:	2b10      	cmp	r3, #16
 8008992:	d900      	bls.n	8008996 <validateRequest+0xee>
 8008994:	e0ef      	b.n	8008b76 <validateRequest+0x2ce>
 8008996:	009a      	lsls	r2, r3, #2
 8008998:	4b7a      	ldr	r3, [pc, #488]	; (8008b84 <validateRequest+0x2dc>)
 800899a:	18d3      	adds	r3, r2, r3
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	469f      	mov	pc, r3
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7d5a      	ldrb	r2, [r3, #21]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	7d9b      	ldrb	r3, [r3, #22]
 80089a8:	0019      	movs	r1, r3
 80089aa:	0010      	movs	r0, r2
 80089ac:	f000 f8ec 	bl	8008b88 <word>
 80089b0:	0003      	movs	r3, r0
 80089b2:	001a      	movs	r2, r3
 80089b4:	230c      	movs	r3, #12
 80089b6:	18fb      	adds	r3, r7, r3
 80089b8:	0912      	lsrs	r2, r2, #4
 80089ba:	801a      	strh	r2, [r3, #0]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7dda      	ldrb	r2, [r3, #23]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7e1b      	ldrb	r3, [r3, #24]
 80089c4:	0019      	movs	r1, r3
 80089c6:	0010      	movs	r0, r2
 80089c8:	f000 f8de 	bl	8008b88 <word>
 80089cc:	0003      	movs	r3, r0
 80089ce:	001a      	movs	r2, r3
 80089d0:	240a      	movs	r4, #10
 80089d2:	193b      	adds	r3, r7, r4
 80089d4:	0912      	lsrs	r2, r2, #4
 80089d6:	801a      	strh	r2, [r3, #0]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	7dda      	ldrb	r2, [r3, #23]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	7e1b      	ldrb	r3, [r3, #24]
 80089e0:	0019      	movs	r1, r3
 80089e2:	0010      	movs	r0, r2
 80089e4:	f000 f8d0 	bl	8008b88 <word>
 80089e8:	0003      	movs	r3, r0
 80089ea:	001a      	movs	r2, r3
 80089ec:	230f      	movs	r3, #15
 80089ee:	4013      	ands	r3, r2
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <validateRequest+0x158>
 80089f6:	193b      	adds	r3, r7, r4
 80089f8:	881a      	ldrh	r2, [r3, #0]
 80089fa:	193b      	adds	r3, r7, r4
 80089fc:	3201      	adds	r2, #1
 80089fe:	801a      	strh	r2, [r3, #0]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8008a00:	230c      	movs	r3, #12
 8008a02:	18fb      	adds	r3, r7, r3
 8008a04:	881a      	ldrh	r2, [r3, #0]
 8008a06:	230a      	movs	r3, #10
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	18d3      	adds	r3, r2, r3
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	21a4      	movs	r1, #164	; 0xa4
 8008a12:	5a52      	ldrh	r2, [r2, r1]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	dd01      	ble.n	8008a1c <validateRequest+0x174>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e0ad      	b.n	8008b78 <validateRequest+0x2d0>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7dda      	ldrb	r2, [r3, #23]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7e1b      	ldrb	r3, [r3, #24]
 8008a24:	0019      	movs	r1, r3
 8008a26:	0010      	movs	r0, r2
 8008a28:	f000 f8ae 	bl	8008b88 <word>
 8008a2c:	0003      	movs	r3, r0
 8008a2e:	001a      	movs	r2, r3
 8008a30:	240a      	movs	r4, #10
 8008a32:	193b      	adds	r3, r7, r4
 8008a34:	08d2      	lsrs	r2, r2, #3
 8008a36:	801a      	strh	r2, [r3, #0]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7dda      	ldrb	r2, [r3, #23]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	7e1b      	ldrb	r3, [r3, #24]
 8008a40:	0019      	movs	r1, r3
 8008a42:	0010      	movs	r0, r2
 8008a44:	f000 f8a0 	bl	8008b88 <word>
 8008a48:	0003      	movs	r3, r0
 8008a4a:	001a      	movs	r2, r3
 8008a4c:	2307      	movs	r3, #7
 8008a4e:	4013      	ands	r3, r2
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <validateRequest+0x1b8>
 8008a56:	193b      	adds	r3, r7, r4
 8008a58:	881a      	ldrh	r2, [r3, #0]
 8008a5a:	193b      	adds	r3, r7, r4
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	801a      	strh	r2, [r3, #0]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8008a60:	210a      	movs	r1, #10
 8008a62:	187b      	adds	r3, r7, r1
 8008a64:	187a      	adds	r2, r7, r1
 8008a66:	8812      	ldrh	r2, [r2, #0]
 8008a68:	3205      	adds	r2, #5
 8008a6a:	801a      	strh	r2, [r3, #0]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8008a6c:	187b      	adds	r3, r7, r1
 8008a6e:	881a      	ldrh	r2, [r3, #0]
 8008a70:	2380      	movs	r3, #128	; 0x80
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d800      	bhi.n	8008a7a <validateRequest+0x1d2>
 8008a78:	e076      	b.n	8008b68 <validateRequest+0x2c0>
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e07c      	b.n	8008b78 <validateRequest+0x2d0>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7d5a      	ldrb	r2, [r3, #21]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7d9b      	ldrb	r3, [r3, #22]
 8008a86:	0019      	movs	r1, r3
 8008a88:	0010      	movs	r0, r2
 8008a8a:	f000 f87d 	bl	8008b88 <word>
 8008a8e:	0003      	movs	r3, r0
 8008a90:	001a      	movs	r2, r3
 8008a92:	240c      	movs	r4, #12
 8008a94:	193b      	adds	r3, r7, r4
 8008a96:	0912      	lsrs	r2, r2, #4
 8008a98:	801a      	strh	r2, [r3, #0]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7d5a      	ldrb	r2, [r3, #21]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7d9b      	ldrb	r3, [r3, #22]
 8008aa2:	0019      	movs	r1, r3
 8008aa4:	0010      	movs	r0, r2
 8008aa6:	f000 f86f 	bl	8008b88 <word>
 8008aaa:	0003      	movs	r3, r0
 8008aac:	001a      	movs	r2, r3
 8008aae:	230f      	movs	r3, #15
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <validateRequest+0x21a>
 8008ab8:	193b      	adds	r3, r7, r4
 8008aba:	881a      	ldrh	r2, [r3, #0]
 8008abc:	193b      	adds	r3, r7, r4
 8008abe:	3201      	adds	r2, #1
 8008ac0:	801a      	strh	r2, [r3, #0]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	22a4      	movs	r2, #164	; 0xa4
 8008ac6:	5a9b      	ldrh	r3, [r3, r2]
 8008ac8:	220c      	movs	r2, #12
 8008aca:	18ba      	adds	r2, r7, r2
 8008acc:	8812      	ldrh	r2, [r2, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d94c      	bls.n	8008b6c <validateRequest+0x2c4>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e050      	b.n	8008b78 <validateRequest+0x2d0>
	        break;
	    case MB_FC_WRITE_HOLDING_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7d5a      	ldrb	r2, [r3, #21]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	7d9b      	ldrb	r3, [r3, #22]
 8008ade:	250c      	movs	r5, #12
 8008ae0:	197c      	adds	r4, r7, r5
 8008ae2:	0019      	movs	r1, r3
 8008ae4:	0010      	movs	r0, r2
 8008ae6:	f000 f84f 	bl	8008b88 <word>
 8008aea:	0003      	movs	r3, r0
 8008aec:	8023      	strh	r3, [r4, #0]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	22a4      	movs	r2, #164	; 0xa4
 8008af2:	5a9b      	ldrh	r3, [r3, r2]
 8008af4:	197a      	adds	r2, r7, r5
 8008af6:	8812      	ldrh	r2, [r2, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d939      	bls.n	8008b70 <validateRequest+0x2c8>
 8008afc:	2302      	movs	r3, #2
 8008afe:	e03b      	b.n	8008b78 <validateRequest+0x2d0>
	        break;
	    case MB_FC_READ_HOLDING_REGISTER :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7d5a      	ldrb	r2, [r3, #21]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	7d9b      	ldrb	r3, [r3, #22]
 8008b08:	250c      	movs	r5, #12
 8008b0a:	197c      	adds	r4, r7, r5
 8008b0c:	0019      	movs	r1, r3
 8008b0e:	0010      	movs	r0, r2
 8008b10:	f000 f83a 	bl	8008b88 <word>
 8008b14:	0003      	movs	r3, r0
 8008b16:	8023      	strh	r3, [r4, #0]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	7dda      	ldrb	r2, [r3, #23]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7e1b      	ldrb	r3, [r3, #24]
 8008b20:	260a      	movs	r6, #10
 8008b22:	19bc      	adds	r4, r7, r6
 8008b24:	0019      	movs	r1, r3
 8008b26:	0010      	movs	r0, r2
 8008b28:	f000 f82e 	bl	8008b88 <word>
 8008b2c:	0003      	movs	r3, r0
 8008b2e:	8023      	strh	r3, [r4, #0]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8008b30:	197b      	adds	r3, r7, r5
 8008b32:	881a      	ldrh	r2, [r3, #0]
 8008b34:	19bb      	adds	r3, r7, r6
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	18d3      	adds	r3, r2, r3
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	21a4      	movs	r1, #164	; 0xa4
 8008b3e:	5a52      	ldrh	r2, [r2, r1]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	dd01      	ble.n	8008b48 <validateRequest+0x2a0>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e017      	b.n	8008b78 <validateRequest+0x2d0>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8008b48:	210a      	movs	r1, #10
 8008b4a:	187b      	adds	r3, r7, r1
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	18db      	adds	r3, r3, r3
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	187b      	adds	r3, r7, r1
 8008b54:	3205      	adds	r2, #5
 8008b56:	801a      	strh	r2, [r3, #0]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8008b58:	187b      	adds	r3, r7, r1
 8008b5a:	881a      	ldrh	r2, [r3, #0]
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d907      	bls.n	8008b74 <validateRequest+0x2cc>
 8008b64:	2303      	movs	r3, #3
 8008b66:	e007      	b.n	8008b78 <validateRequest+0x2d0>
	        break;
 8008b68:	46c0      	nop			; (mov r8, r8)
 8008b6a:	e004      	b.n	8008b76 <validateRequest+0x2ce>
	        break;
 8008b6c:	46c0      	nop			; (mov r8, r8)
 8008b6e:	e002      	b.n	8008b76 <validateRequest+0x2ce>
	        break;
 8008b70:	46c0      	nop			; (mov r8, r8)
 8008b72:	e000      	b.n	8008b76 <validateRequest+0x2ce>
	        break;
 8008b74:	46c0      	nop			; (mov r8, r8)
	    }
	    return 0; // OK, no exception code thrown
 8008b76:	2300      	movs	r3, #0

}
 8008b78:	0018      	movs	r0, r3
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	b005      	add	sp, #20
 8008b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b80:	0800d5f0 	.word	0x0800d5f0
 8008b84:	0800d680 	.word	0x0800d680

08008b88 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	0002      	movs	r2, r0
 8008b90:	1dfb      	adds	r3, r7, #7
 8008b92:	701a      	strb	r2, [r3, #0]
 8008b94:	1dbb      	adds	r3, r7, #6
 8008b96:	1c0a      	adds	r2, r1, #0
 8008b98:	701a      	strb	r2, [r3, #0]
	bytesFields W;
	W.u8[0] = L;
 8008b9a:	210c      	movs	r1, #12
 8008b9c:	187b      	adds	r3, r7, r1
 8008b9e:	1dba      	adds	r2, r7, #6
 8008ba0:	7812      	ldrb	r2, [r2, #0]
 8008ba2:	701a      	strb	r2, [r3, #0]
	W.u8[1] = H;
 8008ba4:	187b      	adds	r3, r7, r1
 8008ba6:	1dfa      	adds	r2, r7, #7
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	705a      	strb	r2, [r3, #1]

	return W.u16[0];
 8008bac:	187b      	adds	r3, r7, r1
 8008bae:	881b      	ldrh	r3, [r3, #0]
}
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	b004      	add	sp, #16
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	000a      	movs	r2, r1
 8008bc2:	1cfb      	adds	r3, r7, #3
 8008bc4:	701a      	strb	r2, [r3, #0]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <calcCRC+0xac>)
 8008bc8:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8008bca:	2313      	movs	r3, #19
 8008bcc:	18fb      	adds	r3, r7, r3
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	e02d      	b.n	8008c30 <calcCRC+0x78>
    {
        temp = temp ^ Buffer[i];
 8008bd4:	2313      	movs	r3, #19
 8008bd6:	18fb      	adds	r3, r7, r3
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	18d3      	adds	r3, r2, r3
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	001a      	movs	r2, r3
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4053      	eors	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8008be8:	2312      	movs	r3, #18
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	2201      	movs	r2, #1
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e013      	b.n	8008c1a <calcCRC+0x62>
        {
            flag = temp & 0x0001;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	085b      	lsrs	r3, r3, #1
 8008bfe:	617b      	str	r3, [r7, #20]
            if (flag)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <calcCRC+0x56>
                temp ^= 0xA001;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <calcCRC+0xb0>)
 8008c0a:	4053      	eors	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8008c0e:	2112      	movs	r1, #18
 8008c10:	187b      	adds	r3, r7, r1
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	187b      	adds	r3, r7, r1
 8008c16:	3201      	adds	r2, #1
 8008c18:	701a      	strb	r2, [r3, #0]
 8008c1a:	2312      	movs	r3, #18
 8008c1c:	18fb      	adds	r3, r7, r3
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d9e6      	bls.n	8008bf2 <calcCRC+0x3a>
    for (unsigned char i = 0; i < u8length; i++)
 8008c24:	2113      	movs	r1, #19
 8008c26:	187b      	adds	r3, r7, r1
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	187b      	adds	r3, r7, r1
 8008c2c:	3201      	adds	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	2313      	movs	r3, #19
 8008c32:	18fa      	adds	r2, r7, r3
 8008c34:	1cfb      	adds	r3, r7, #3
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d3ca      	bcc.n	8008bd4 <calcCRC+0x1c>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	0a1b      	lsrs	r3, r3, #8
 8008c42:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	041b      	lsls	r3, r3, #16
 8008c52:	0c1b      	lsrs	r3, r3, #16
 8008c54:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	b29b      	uxth	r3, r3

}
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b006      	add	sp, #24
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	0000ffff 	.word	0x0000ffff
 8008c68:	0000a001 	.word	0x0000a001

08008c6c <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	0002      	movs	r2, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	1dfb      	adds	r3, r7, #7
 8008c78:	701a      	strb	r2, [r3, #0]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8008c7a:	210f      	movs	r1, #15
 8008c7c:	187b      	adds	r3, r7, r1
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	7d12      	ldrb	r2, [r2, #20]
 8008c82:	701a      	strb	r2, [r3, #0]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	7a1a      	ldrb	r2, [r3, #8]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8008c8c:	187b      	adds	r3, r7, r1
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	3b80      	subs	r3, #128	; 0x80
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	1dfa      	adds	r2, r7, #7
 8008c9c:	7812      	ldrb	r2, [r2, #0]
 8008c9e:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2293      	movs	r2, #147	; 0x93
 8008ca4:	2103      	movs	r1, #3
 8008ca6:	5499      	strb	r1, [r3, r2]
}
 8008ca8:	46c0      	nop			; (mov r8, r8)
 8008caa:	46bd      	mov	sp, r7
 8008cac:	b004      	add	sp, #16
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8008cb0:	b5b0      	push	{r4, r5, r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3313      	adds	r3, #19
 8008cbc:	001a      	movs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2193      	movs	r1, #147	; 0x93
 8008cc2:	5c5b      	ldrb	r3, [r3, r1]
 8008cc4:	250e      	movs	r5, #14
 8008cc6:	197c      	adds	r4, r7, r5
 8008cc8:	0019      	movs	r1, r3
 8008cca:	0010      	movs	r0, r2
 8008ccc:	f7ff ff74 	bl	8008bb8 <calcCRC>
 8008cd0:	0003      	movs	r3, r0
 8008cd2:	8023      	strh	r3, [r4, #0]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8008cd4:	002c      	movs	r4, r5
 8008cd6:	193b      	adds	r3, r7, r4
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	0a1b      	lsrs	r3, r3, #8
 8008cdc:	b298      	uxth	r0, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2293      	movs	r2, #147	; 0x93
 8008ce2:	5c9b      	ldrb	r3, [r3, r2]
 8008ce4:	0019      	movs	r1, r3
 8008ce6:	b2c2      	uxtb	r2, r0
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	185b      	adds	r3, r3, r1
 8008cec:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2293      	movs	r2, #147	; 0x93
 8008cf2:	5c9b      	ldrb	r3, [r3, r2]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	b2d9      	uxtb	r1, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2293      	movs	r2, #147	; 0x93
 8008cfc:	5499      	strb	r1, [r3, r2]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2293      	movs	r2, #147	; 0x93
 8008d02:	5c9b      	ldrb	r3, [r3, r2]
 8008d04:	0019      	movs	r1, r3
 8008d06:	193b      	adds	r3, r7, r4
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	185b      	adds	r3, r3, r1
 8008d10:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2293      	movs	r2, #147	; 0x93
 8008d16:	5c9b      	ldrb	r3, [r3, r2]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	b2d9      	uxtb	r1, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2293      	movs	r2, #147	; 0x93
 8008d20:	5499      	strb	r1, [r3, r2]
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00c      	beq.n	8008d44 <sendTxBuffer+0x94>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f7fd fd73 	bl	800681a <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68d8      	ldr	r0, [r3, #12]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	8a1b      	ldrh	r3, [r3, #16]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	0019      	movs	r1, r3
 8008d40:	f7fb fbb9 	bl	80044b6 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6858      	ldr	r0, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3313      	adds	r3, #19
 8008d4c:	0019      	movs	r1, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2293      	movs	r2, #147	; 0x93
 8008d52:	5c9b      	ldrb	r3, [r3, r2]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	001a      	movs	r2, r3
 8008d58:	f7fd f8d4 	bl	8005f04 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8008d5c:	21fa      	movs	r1, #250	; 0xfa
 8008d5e:	2001      	movs	r0, #1
 8008d60:	f003 f906 	bl	800bf70 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  || defined(STM32F0)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8008d64:	46c0      	nop			; (mov r8, r8)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	2240      	movs	r2, #64	; 0x40
 8008d70:	4013      	ands	r3, r2
 8008d72:	d0f8      	beq.n	8008d66 <sendTxBuffer+0xb6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00c      	beq.n	8008d96 <sendTxBuffer+0xe6>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68d8      	ldr	r0, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8a1b      	ldrh	r3, [r3, #16]
 8008d84:	2200      	movs	r2, #0
 8008d86:	0019      	movs	r1, r3
 8008d88:	f7fb fb95 	bl	80044b6 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7fd fd92 	bl	80068ba <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d10c      	bne.n	8008db8 <sendTxBuffer+0x108>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	22b4      	movs	r2, #180	; 0xb4
 8008da2:	589c      	ldr	r4, [r3, r2]
 8008da4:	f002 fc6a 	bl	800b67c <xTaskGetTickCount>
 8008da8:	0002      	movs	r2, r0
 8008daa:	2300      	movs	r3, #0
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	2300      	movs	r3, #0
 8008db0:	2102      	movs	r1, #2
 8008db2:	0020      	movs	r0, r4
 8008db4:	f003 fbea 	bl	800c58c <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2293      	movs	r2, #147	; 0x93
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	5499      	strb	r1, [r3, r2]
     // increase message counter
     modH->u16OutCnt++;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	229e      	movs	r2, #158	; 0x9e
 8008dc4:	5a9b      	ldrh	r3, [r3, r2]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	b299      	uxth	r1, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	229e      	movs	r2, #158	; 0x9e
 8008dce:	5299      	strh	r1, [r3, r2]


}
 8008dd0:	46c0      	nop			; (mov r8, r8)
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	b004      	add	sp, #16
 8008dd6:	bdb0      	pop	{r4, r5, r7, pc}

08008dd8 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8008dd8:	b5b0      	push	{r4, r5, r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7d5a      	ldrb	r2, [r3, #21]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7d9b      	ldrb	r3, [r3, #22]
 8008de8:	2112      	movs	r1, #18
 8008dea:	187c      	adds	r4, r7, r1
 8008dec:	0019      	movs	r1, r3
 8008dee:	0010      	movs	r0, r2
 8008df0:	f7ff feca 	bl	8008b88 <word>
 8008df4:	0003      	movs	r3, r0
 8008df6:	8023      	strh	r3, [r4, #0]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7dda      	ldrb	r2, [r3, #23]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	7e1b      	ldrb	r3, [r3, #24]
 8008e00:	2510      	movs	r5, #16
 8008e02:	197c      	adds	r4, r7, r5
 8008e04:	0019      	movs	r1, r3
 8008e06:	0010      	movs	r0, r2
 8008e08:	f7ff febe 	bl	8008b88 <word>
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	8023      	strh	r3, [r4, #0]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8008e10:	0029      	movs	r1, r5
 8008e12:	187b      	adds	r3, r7, r1
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	08db      	lsrs	r3, r3, #3
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	2017      	movs	r0, #23
 8008e1c:	183b      	adds	r3, r7, r0
 8008e1e:	701a      	strb	r2, [r3, #0]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8008e20:	187b      	adds	r3, r7, r1
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	2207      	movs	r2, #7
 8008e26:	4013      	ands	r3, r2
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <process_FC1+0x60>
 8008e2e:	183b      	adds	r3, r7, r0
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	183b      	adds	r3, r7, r0
 8008e34:	3201      	adds	r2, #1
 8008e36:	701a      	strb	r2, [r3, #0]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2017      	movs	r0, #23
 8008e3c:	183a      	adds	r2, r7, r0
 8008e3e:	7812      	ldrb	r2, [r2, #0]
 8008e40:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2293      	movs	r2, #147	; 0x93
 8008e46:	2103      	movs	r1, #3
 8008e48:	5499      	strb	r1, [r3, r2]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2293      	movs	r2, #147	; 0x93
 8008e4e:	5c9b      	ldrb	r3, [r3, r2]
 8008e50:	001a      	movs	r2, r3
 8008e52:	183b      	adds	r3, r7, r0
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	18d3      	adds	r3, r2, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	18d3      	adds	r3, r2, r3
 8008e5e:	2200      	movs	r2, #0
 8008e60:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8008e62:	2316      	movs	r3, #22
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	22b8      	movs	r2, #184	; 0xb8
 8008e6e:	589b      	ldr	r3, [r3, r2]
 8008e70:	2201      	movs	r2, #1
 8008e72:	4252      	negs	r2, r2
 8008e74:	0011      	movs	r1, r2
 8008e76:	0018      	movs	r0, r3
 8008e78:	f001 fecc 	bl	800ac14 <xQueueSemaphoreTake>
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8008e7c:	2314      	movs	r3, #20
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	2200      	movs	r2, #0
 8008e82:	801a      	strh	r2, [r3, #0]
 8008e84:	e071      	b.n	8008f6a <process_FC1+0x192>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8008e86:	200c      	movs	r0, #12
 8008e88:	183b      	adds	r3, r7, r0
 8008e8a:	2212      	movs	r2, #18
 8008e8c:	18b9      	adds	r1, r7, r2
 8008e8e:	2214      	movs	r2, #20
 8008e90:	18ba      	adds	r2, r7, r2
 8008e92:	8809      	ldrh	r1, [r1, #0]
 8008e94:	8812      	ldrh	r2, [r2, #0]
 8008e96:	188a      	adds	r2, r1, r2
 8008e98:	801a      	strh	r2, [r3, #0]
        u16currentRegister =  (u16coil / 16);
 8008e9a:	240a      	movs	r4, #10
 8008e9c:	193b      	adds	r3, r7, r4
 8008e9e:	183a      	adds	r2, r7, r0
 8008ea0:	8812      	ldrh	r2, [r2, #0]
 8008ea2:	0912      	lsrs	r2, r2, #4
 8008ea4:	801a      	strh	r2, [r3, #0]
        u8currentBit = (uint8_t) (u16coil % 16);
 8008ea6:	183b      	adds	r3, r7, r0
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	2009      	movs	r0, #9
 8008eae:	183b      	adds	r3, r7, r0
 8008eb0:	210f      	movs	r1, #15
 8008eb2:	400a      	ands	r2, r1
 8008eb4:	701a      	strb	r2, [r3, #0]

        bitWrite(
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2298      	movs	r2, #152	; 0x98
 8008eba:	589a      	ldr	r2, [r3, r2]
 8008ebc:	193b      	adds	r3, r7, r4
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	18d3      	adds	r3, r2, r3
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	001a      	movs	r2, r3
 8008ec8:	183b      	adds	r3, r7, r0
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	411a      	asrs	r2, r3
 8008ece:	0013      	movs	r3, r2
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	d016      	beq.n	8008f04 <process_FC1+0x12c>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2293      	movs	r2, #147	; 0x93
 8008eda:	5c9b      	ldrb	r3, [r3, r2]
 8008edc:	001a      	movs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	189b      	adds	r3, r3, r2
 8008ee2:	7cda      	ldrb	r2, [r3, #19]
 8008ee4:	2316      	movs	r3, #22
 8008ee6:	18fb      	adds	r3, r7, r3
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2101      	movs	r1, #1
 8008eec:	4099      	lsls	r1, r3
 8008eee:	000b      	movs	r3, r1
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	2093      	movs	r0, #147	; 0x93
 8008ef6:	5c09      	ldrb	r1, [r1, r0]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	185b      	adds	r3, r3, r1
 8008f00:	74da      	strb	r2, [r3, #19]
 8008f02:	e017      	b.n	8008f34 <process_FC1+0x15c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2293      	movs	r2, #147	; 0x93
 8008f08:	5c9b      	ldrb	r3, [r3, r2]
 8008f0a:	001a      	movs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	7cdb      	ldrb	r3, [r3, #19]
 8008f12:	2216      	movs	r2, #22
 8008f14:	18ba      	adds	r2, r7, r2
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	2101      	movs	r1, #1
 8008f1a:	4091      	lsls	r1, r2
 8008f1c:	000a      	movs	r2, r1
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	43d2      	mvns	r2, r2
 8008f22:	b2d2      	uxtb	r2, r2
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	2093      	movs	r0, #147	; 0x93
 8008f28:	5c09      	ldrb	r1, [r1, r0]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	185b      	adds	r3, r3, r1
 8008f32:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister], u8currentBit ) );
        u8bitsno ++;
 8008f34:	2116      	movs	r1, #22
 8008f36:	187b      	adds	r3, r7, r1
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	187b      	adds	r3, r7, r1
 8008f3c:	3201      	adds	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]

        if (u8bitsno > 7)
 8008f40:	187b      	adds	r3, r7, r1
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b07      	cmp	r3, #7
 8008f46:	d90a      	bls.n	8008f5e <process_FC1+0x186>
        {
            u8bitsno = 0;
 8008f48:	187b      	adds	r3, r7, r1
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
            modH->u8BufferSize++;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2293      	movs	r2, #147	; 0x93
 8008f52:	5c9b      	ldrb	r3, [r3, r2]
 8008f54:	3301      	adds	r3, #1
 8008f56:	b2d9      	uxtb	r1, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2293      	movs	r2, #147	; 0x93
 8008f5c:	5499      	strb	r1, [r3, r2]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8008f5e:	2114      	movs	r1, #20
 8008f60:	187b      	adds	r3, r7, r1
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	187b      	adds	r3, r7, r1
 8008f66:	3201      	adds	r2, #1
 8008f68:	801a      	strh	r2, [r3, #0]
 8008f6a:	2314      	movs	r3, #20
 8008f6c:	18fa      	adds	r2, r7, r3
 8008f6e:	2410      	movs	r4, #16
 8008f70:	193b      	adds	r3, r7, r4
 8008f72:	8812      	ldrh	r2, [r2, #0]
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d200      	bcs.n	8008f7c <process_FC1+0x1a4>
 8008f7a:	e784      	b.n	8008e86 <process_FC1+0xae>
        }
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	22b8      	movs	r2, #184	; 0xb8
 8008f80:	5898      	ldr	r0, [r3, r2]
 8008f82:	2300      	movs	r3, #0
 8008f84:	2200      	movs	r2, #0
 8008f86:	2100      	movs	r1, #0
 8008f88:	f001 fc5a 	bl	800a840 <xQueueGenericSend>

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8008f8c:	193b      	adds	r3, r7, r4
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	2207      	movs	r2, #7
 8008f92:	4013      	ands	r3, r2
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <process_FC1+0x1d2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2293      	movs	r2, #147	; 0x93
 8008f9e:	5c9b      	ldrb	r3, [r3, r2]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	b2d9      	uxtb	r1, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2293      	movs	r2, #147	; 0x93
 8008fa8:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize = modH->u8BufferSize +2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2293      	movs	r2, #147	; 0x93
 8008fae:	5c9a      	ldrb	r2, [r3, r2]
 8008fb0:	240f      	movs	r4, #15
 8008fb2:	193b      	adds	r3, r7, r4
 8008fb4:	3202      	adds	r2, #2
 8008fb6:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7ff fe78 	bl	8008cb0 <sendTxBuffer>
    return u8CopyBufferSize;
 8008fc0:	193b      	adds	r3, r7, r4
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	b25b      	sxtb	r3, r3
}
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	b006      	add	sp, #24
 8008fcc:	bdb0      	pop	{r4, r5, r7, pc}

08008fce <process_FC2>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC2(modbusHandler_t *modH )
{
 8008fce:	b5b0      	push	{r4, r5, r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	7d5a      	ldrb	r2, [r3, #21]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7d9b      	ldrb	r3, [r3, #22]
 8008fde:	2112      	movs	r1, #18
 8008fe0:	187c      	adds	r4, r7, r1
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	0010      	movs	r0, r2
 8008fe6:	f7ff fdcf 	bl	8008b88 <word>
 8008fea:	0003      	movs	r3, r0
 8008fec:	8023      	strh	r3, [r4, #0]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	7dda      	ldrb	r2, [r3, #23]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7e1b      	ldrb	r3, [r3, #24]
 8008ff6:	2510      	movs	r5, #16
 8008ff8:	197c      	adds	r4, r7, r5
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	0010      	movs	r0, r2
 8008ffe:	f7ff fdc3 	bl	8008b88 <word>
 8009002:	0003      	movs	r3, r0
 8009004:	8023      	strh	r3, [r4, #0]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8009006:	0029      	movs	r1, r5
 8009008:	187b      	adds	r3, r7, r1
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	08db      	lsrs	r3, r3, #3
 800900e:	b29a      	uxth	r2, r3
 8009010:	2017      	movs	r0, #23
 8009012:	183b      	adds	r3, r7, r0
 8009014:	701a      	strb	r2, [r3, #0]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8009016:	187b      	adds	r3, r7, r1
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	2207      	movs	r2, #7
 800901c:	4013      	ands	r3, r2
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <process_FC2+0x60>
 8009024:	183b      	adds	r3, r7, r0
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	183b      	adds	r3, r7, r0
 800902a:	3201      	adds	r2, #1
 800902c:	701a      	strb	r2, [r3, #0]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2017      	movs	r0, #23
 8009032:	183a      	adds	r2, r7, r0
 8009034:	7812      	ldrb	r2, [r2, #0]
 8009036:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2293      	movs	r2, #147	; 0x93
 800903c:	2103      	movs	r1, #3
 800903e:	5499      	strb	r1, [r3, r2]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2293      	movs	r2, #147	; 0x93
 8009044:	5c9b      	ldrb	r3, [r3, r2]
 8009046:	001a      	movs	r2, r3
 8009048:	183b      	adds	r3, r7, r0
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	18d3      	adds	r3, r2, r3
 800904e:	3b01      	subs	r3, #1
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	18d3      	adds	r3, r2, r3
 8009054:	2200      	movs	r2, #0
 8009056:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8009058:	2316      	movs	r3, #22
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	2200      	movs	r2, #0
 800905e:	701a      	strb	r2, [r3, #0]


	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	22b8      	movs	r2, #184	; 0xb8
 8009064:	589b      	ldr	r3, [r3, r2]
 8009066:	2201      	movs	r2, #1
 8009068:	4252      	negs	r2, r2
 800906a:	0011      	movs	r1, r2
 800906c:	0018      	movs	r0, r3
 800906e:	f001 fdd1 	bl	800ac14 <xQueueSemaphoreTake>
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8009072:	2314      	movs	r3, #20
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	2200      	movs	r2, #0
 8009078:	801a      	strh	r2, [r3, #0]
 800907a:	e072      	b.n	8009162 <process_FC2+0x194>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800907c:	200c      	movs	r0, #12
 800907e:	183b      	adds	r3, r7, r0
 8009080:	2212      	movs	r2, #18
 8009082:	18b9      	adds	r1, r7, r2
 8009084:	2214      	movs	r2, #20
 8009086:	18ba      	adds	r2, r7, r2
 8009088:	8809      	ldrh	r1, [r1, #0]
 800908a:	8812      	ldrh	r2, [r2, #0]
 800908c:	188a      	adds	r2, r1, r2
 800908e:	801a      	strh	r2, [r3, #0]
        u16currentRegister =  (u16coil / 16);
 8009090:	240a      	movs	r4, #10
 8009092:	193b      	adds	r3, r7, r4
 8009094:	183a      	adds	r2, r7, r0
 8009096:	8812      	ldrh	r2, [r2, #0]
 8009098:	0912      	lsrs	r2, r2, #4
 800909a:	801a      	strh	r2, [r3, #0]
        u8currentBit = (uint8_t) (u16coil % 16);
 800909c:	183b      	adds	r3, r7, r0
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	2009      	movs	r0, #9
 80090a4:	183b      	adds	r3, r7, r0
 80090a6:	210f      	movs	r1, #15
 80090a8:	400a      	ands	r2, r1
 80090aa:	701a      	strb	r2, [r3, #0]

        bitWrite(
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2298      	movs	r2, #152	; 0x98
 80090b0:	589a      	ldr	r2, [r3, r2]
 80090b2:	193b      	adds	r3, r7, r4
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	3301      	adds	r3, #1
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	18d3      	adds	r3, r2, r3
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	001a      	movs	r2, r3
 80090c0:	183b      	adds	r3, r7, r0
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	411a      	asrs	r2, r3
 80090c6:	0013      	movs	r3, r2
 80090c8:	2201      	movs	r2, #1
 80090ca:	4013      	ands	r3, r2
 80090cc:	d016      	beq.n	80090fc <process_FC2+0x12e>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2293      	movs	r2, #147	; 0x93
 80090d2:	5c9b      	ldrb	r3, [r3, r2]
 80090d4:	001a      	movs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	189b      	adds	r3, r3, r2
 80090da:	7cda      	ldrb	r2, [r3, #19]
 80090dc:	2316      	movs	r3, #22
 80090de:	18fb      	adds	r3, r7, r3
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2101      	movs	r1, #1
 80090e4:	4099      	lsls	r1, r3
 80090e6:	000b      	movs	r3, r1
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	2093      	movs	r0, #147	; 0x93
 80090ee:	5c09      	ldrb	r1, [r1, r0]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	185b      	adds	r3, r3, r1
 80090f8:	74da      	strb	r2, [r3, #19]
 80090fa:	e017      	b.n	800912c <process_FC2+0x15e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2293      	movs	r2, #147	; 0x93
 8009100:	5c9b      	ldrb	r3, [r3, r2]
 8009102:	001a      	movs	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	189b      	adds	r3, r3, r2
 8009108:	7cdb      	ldrb	r3, [r3, #19]
 800910a:	2216      	movs	r2, #22
 800910c:	18ba      	adds	r2, r7, r2
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	2101      	movs	r1, #1
 8009112:	4091      	lsls	r1, r2
 8009114:	000a      	movs	r2, r1
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	43d2      	mvns	r2, r2
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	2093      	movs	r0, #147	; 0x93
 8009120:	5c09      	ldrb	r1, [r1, r0]
 8009122:	4013      	ands	r3, r2
 8009124:	b2da      	uxtb	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	185b      	adds	r3, r3, r1
 800912a:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister + DiscreteStart], u8currentBit ) );
        u8bitsno ++;
 800912c:	2116      	movs	r1, #22
 800912e:	187b      	adds	r3, r7, r1
 8009130:	781a      	ldrb	r2, [r3, #0]
 8009132:	187b      	adds	r3, r7, r1
 8009134:	3201      	adds	r2, #1
 8009136:	701a      	strb	r2, [r3, #0]

        if (u8bitsno > 7)
 8009138:	187b      	adds	r3, r7, r1
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b07      	cmp	r3, #7
 800913e:	d90a      	bls.n	8009156 <process_FC2+0x188>
        {
            u8bitsno = 0;
 8009140:	187b      	adds	r3, r7, r1
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
            modH->u8BufferSize++;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2293      	movs	r2, #147	; 0x93
 800914a:	5c9b      	ldrb	r3, [r3, r2]
 800914c:	3301      	adds	r3, #1
 800914e:	b2d9      	uxtb	r1, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2293      	movs	r2, #147	; 0x93
 8009154:	5499      	strb	r1, [r3, r2]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8009156:	2114      	movs	r1, #20
 8009158:	187b      	adds	r3, r7, r1
 800915a:	881a      	ldrh	r2, [r3, #0]
 800915c:	187b      	adds	r3, r7, r1
 800915e:	3201      	adds	r2, #1
 8009160:	801a      	strh	r2, [r3, #0]
 8009162:	2314      	movs	r3, #20
 8009164:	18fa      	adds	r2, r7, r3
 8009166:	2410      	movs	r4, #16
 8009168:	193b      	adds	r3, r7, r4
 800916a:	8812      	ldrh	r2, [r2, #0]
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d200      	bcs.n	8009174 <process_FC2+0x1a6>
 8009172:	e783      	b.n	800907c <process_FC2+0xae>
        }
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	22b8      	movs	r2, #184	; 0xb8
 8009178:	5898      	ldr	r0, [r3, r2]
 800917a:	2300      	movs	r3, #0
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	f001 fb5e 	bl	800a840 <xQueueGenericSend>

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8009184:	193b      	adds	r3, r7, r4
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	2207      	movs	r2, #7
 800918a:	4013      	ands	r3, r2
 800918c:	b29b      	uxth	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <process_FC2+0x1d4>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2293      	movs	r2, #147	; 0x93
 8009196:	5c9b      	ldrb	r3, [r3, r2]
 8009198:	3301      	adds	r3, #1
 800919a:	b2d9      	uxtb	r1, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2293      	movs	r2, #147	; 0x93
 80091a0:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize = modH->u8BufferSize +2;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2293      	movs	r2, #147	; 0x93
 80091a6:	5c9a      	ldrb	r2, [r3, r2]
 80091a8:	240f      	movs	r4, #15
 80091aa:	193b      	adds	r3, r7, r4
 80091ac:	3202      	adds	r2, #2
 80091ae:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	0018      	movs	r0, r3
 80091b4:	f7ff fd7c 	bl	8008cb0 <sendTxBuffer>
    return u8CopyBufferSize;
 80091b8:	193b      	adds	r3, r7, r4
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	b25b      	sxtb	r3, r3
}
 80091be:	0018      	movs	r0, r3
 80091c0:	46bd      	mov	sp, r7
 80091c2:	b006      	add	sp, #24
 80091c4:	bdb0      	pop	{r4, r5, r7, pc}

080091c6 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80091c6:	b5b0      	push	{r4, r5, r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7d5a      	ldrb	r2, [r3, #21]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	7d9b      	ldrb	r3, [r3, #22]
 80091d6:	250c      	movs	r5, #12
 80091d8:	197c      	adds	r4, r7, r5
 80091da:	0019      	movs	r1, r3
 80091dc:	0010      	movs	r0, r2
 80091de:	f7ff fcd3 	bl	8008b88 <word>
 80091e2:	0003      	movs	r3, r0
 80091e4:	8023      	strh	r3, [r4, #0]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7dda      	ldrb	r2, [r3, #23]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	7e1b      	ldrb	r3, [r3, #24]
 80091ee:	0019      	movs	r1, r3
 80091f0:	0010      	movs	r0, r2
 80091f2:	f7ff fcc9 	bl	8008b88 <word>
 80091f6:	0003      	movs	r3, r0
 80091f8:	001a      	movs	r2, r3
 80091fa:	210b      	movs	r1, #11
 80091fc:	187b      	adds	r3, r7, r1
 80091fe:	701a      	strb	r2, [r3, #0]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8009200:	187b      	adds	r3, r7, r1
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	18db      	adds	r3, r3, r3
 8009206:	b2da      	uxtb	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2293      	movs	r2, #147	; 0x93
 8009210:	2103      	movs	r1, #3
 8009212:	5499      	strb	r1, [r3, r2]


	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	22b8      	movs	r2, #184	; 0xb8
 8009218:	589b      	ldr	r3, [r3, r2]
 800921a:	2201      	movs	r2, #1
 800921c:	4252      	negs	r2, r2
 800921e:	0011      	movs	r1, r2
 8009220:	0018      	movs	r0, r3
 8009222:	f001 fcf7 	bl	800ac14 <xQueueSemaphoreTake>
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8009226:	230e      	movs	r3, #14
 8009228:	18fb      	adds	r3, r7, r3
 800922a:	197a      	adds	r2, r7, r5
 800922c:	8812      	ldrh	r2, [r2, #0]
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	e039      	b.n	80092a6 <process_FC3+0xe0>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i + HoldingRegistersStart]);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2298      	movs	r2, #152	; 0x98
 8009236:	589a      	ldr	r2, [r3, r2]
 8009238:	240e      	movs	r4, #14
 800923a:	193b      	adds	r3, r7, r4
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	3316      	adds	r3, #22
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	18d3      	adds	r3, r2, r3
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	b298      	uxth	r0, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2293      	movs	r2, #147	; 0x93
 800924e:	5c9b      	ldrb	r3, [r3, r2]
 8009250:	0019      	movs	r1, r3
 8009252:	b2c2      	uxtb	r2, r0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	185b      	adds	r3, r3, r1
 8009258:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2293      	movs	r2, #147	; 0x93
 800925e:	5c9b      	ldrb	r3, [r3, r2]
 8009260:	3301      	adds	r3, #1
 8009262:	b2d9      	uxtb	r1, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2293      	movs	r2, #147	; 0x93
 8009268:	5499      	strb	r1, [r3, r2]
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i + HoldingRegistersStart]);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2298      	movs	r2, #152	; 0x98
 800926e:	589a      	ldr	r2, [r3, r2]
 8009270:	193b      	adds	r3, r7, r4
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	3316      	adds	r3, #22
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	18d3      	adds	r3, r2, r3
 800927a:	8818      	ldrh	r0, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2293      	movs	r2, #147	; 0x93
 8009280:	5c9b      	ldrb	r3, [r3, r2]
 8009282:	0019      	movs	r1, r3
 8009284:	b2c2      	uxtb	r2, r0
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	185b      	adds	r3, r3, r1
 800928a:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2293      	movs	r2, #147	; 0x93
 8009290:	5c9b      	ldrb	r3, [r3, r2]
 8009292:	3301      	adds	r3, #1
 8009294:	b2d9      	uxtb	r1, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2293      	movs	r2, #147	; 0x93
 800929a:	5499      	strb	r1, [r3, r2]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800929c:	193b      	adds	r3, r7, r4
 800929e:	881a      	ldrh	r2, [r3, #0]
 80092a0:	193b      	adds	r3, r7, r4
 80092a2:	3201      	adds	r2, #1
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	230e      	movs	r3, #14
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	881a      	ldrh	r2, [r3, #0]
 80092ac:	230c      	movs	r3, #12
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	8819      	ldrh	r1, [r3, #0]
 80092b2:	230b      	movs	r3, #11
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	18cb      	adds	r3, r1, r3
 80092ba:	429a      	cmp	r2, r3
 80092bc:	dbb9      	blt.n	8009232 <process_FC3+0x6c>
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	22b8      	movs	r2, #184	; 0xb8
 80092c2:	5898      	ldr	r0, [r3, r2]
 80092c4:	2300      	movs	r3, #0
 80092c6:	2200      	movs	r2, #0
 80092c8:	2100      	movs	r1, #0
 80092ca:	f001 fab9 	bl	800a840 <xQueueGenericSend>

    u8CopyBufferSize = modH->u8BufferSize +2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2293      	movs	r2, #147	; 0x93
 80092d2:	5c9a      	ldrb	r2, [r3, r2]
 80092d4:	240a      	movs	r4, #10
 80092d6:	193b      	adds	r3, r7, r4
 80092d8:	3202      	adds	r2, #2
 80092da:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	0018      	movs	r0, r3
 80092e0:	f7ff fce6 	bl	8008cb0 <sendTxBuffer>

    return u8CopyBufferSize;
 80092e4:	193b      	adds	r3, r7, r4
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	b25b      	sxtb	r3, r3
}
 80092ea:	0018      	movs	r0, r3
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b004      	add	sp, #16
 80092f0:	bdb0      	pop	{r4, r5, r7, pc}

080092f2 <process_FC4>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC4(modbusHandler_t *modH)
{
 80092f2:	b5b0      	push	{r4, r5, r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	7d5a      	ldrb	r2, [r3, #21]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	7d9b      	ldrb	r3, [r3, #22]
 8009302:	250c      	movs	r5, #12
 8009304:	197c      	adds	r4, r7, r5
 8009306:	0019      	movs	r1, r3
 8009308:	0010      	movs	r0, r2
 800930a:	f7ff fc3d 	bl	8008b88 <word>
 800930e:	0003      	movs	r3, r0
 8009310:	8023      	strh	r3, [r4, #0]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7dda      	ldrb	r2, [r3, #23]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	7e1b      	ldrb	r3, [r3, #24]
 800931a:	0019      	movs	r1, r3
 800931c:	0010      	movs	r0, r2
 800931e:	f7ff fc33 	bl	8008b88 <word>
 8009322:	0003      	movs	r3, r0
 8009324:	001a      	movs	r2, r3
 8009326:	210b      	movs	r1, #11
 8009328:	187b      	adds	r3, r7, r1
 800932a:	701a      	strb	r2, [r3, #0]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800932c:	187b      	adds	r3, r7, r1
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	18db      	adds	r3, r3, r3
 8009332:	b2da      	uxtb	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2293      	movs	r2, #147	; 0x93
 800933c:	2103      	movs	r1, #3
 800933e:	5499      	strb	r1, [r3, r2]

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	22b8      	movs	r2, #184	; 0xb8
 8009344:	589b      	ldr	r3, [r3, r2]
 8009346:	2201      	movs	r2, #1
 8009348:	4252      	negs	r2, r2
 800934a:	0011      	movs	r1, r2
 800934c:	0018      	movs	r0, r3
 800934e:	f001 fc61 	bl	800ac14 <xQueueSemaphoreTake>
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8009352:	230e      	movs	r3, #14
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	197a      	adds	r2, r7, r5
 8009358:	8812      	ldrh	r2, [r2, #0]
 800935a:	801a      	strh	r2, [r3, #0]
 800935c:	e039      	b.n	80093d2 <process_FC4+0xe0>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i + InputRegistersStart]);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2298      	movs	r2, #152	; 0x98
 8009362:	589a      	ldr	r2, [r3, r2]
 8009364:	240e      	movs	r4, #14
 8009366:	193b      	adds	r3, r7, r4
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	3302      	adds	r3, #2
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	18d3      	adds	r3, r2, r3
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	0a1b      	lsrs	r3, r3, #8
 8009374:	b298      	uxth	r0, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2293      	movs	r2, #147	; 0x93
 800937a:	5c9b      	ldrb	r3, [r3, r2]
 800937c:	0019      	movs	r1, r3
 800937e:	b2c2      	uxtb	r2, r0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	185b      	adds	r3, r3, r1
 8009384:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2293      	movs	r2, #147	; 0x93
 800938a:	5c9b      	ldrb	r3, [r3, r2]
 800938c:	3301      	adds	r3, #1
 800938e:	b2d9      	uxtb	r1, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2293      	movs	r2, #147	; 0x93
 8009394:	5499      	strb	r1, [r3, r2]
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i + InputRegistersStart]);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2298      	movs	r2, #152	; 0x98
 800939a:	589a      	ldr	r2, [r3, r2]
 800939c:	193b      	adds	r3, r7, r4
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	3302      	adds	r3, #2
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	18d3      	adds	r3, r2, r3
 80093a6:	8818      	ldrh	r0, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2293      	movs	r2, #147	; 0x93
 80093ac:	5c9b      	ldrb	r3, [r3, r2]
 80093ae:	0019      	movs	r1, r3
 80093b0:	b2c2      	uxtb	r2, r0
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	185b      	adds	r3, r3, r1
 80093b6:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2293      	movs	r2, #147	; 0x93
 80093bc:	5c9b      	ldrb	r3, [r3, r2]
 80093be:	3301      	adds	r3, #1
 80093c0:	b2d9      	uxtb	r1, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2293      	movs	r2, #147	; 0x93
 80093c6:	5499      	strb	r1, [r3, r2]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80093c8:	193b      	adds	r3, r7, r4
 80093ca:	881a      	ldrh	r2, [r3, #0]
 80093cc:	193b      	adds	r3, r7, r4
 80093ce:	3201      	adds	r2, #1
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	230e      	movs	r3, #14
 80093d4:	18fb      	adds	r3, r7, r3
 80093d6:	881a      	ldrh	r2, [r3, #0]
 80093d8:	230c      	movs	r3, #12
 80093da:	18fb      	adds	r3, r7, r3
 80093dc:	8819      	ldrh	r1, [r3, #0]
 80093de:	230b      	movs	r3, #11
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	18cb      	adds	r3, r1, r3
 80093e6:	429a      	cmp	r2, r3
 80093e8:	dbb9      	blt.n	800935e <process_FC4+0x6c>
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	22b8      	movs	r2, #184	; 0xb8
 80093ee:	5898      	ldr	r0, [r3, r2]
 80093f0:	2300      	movs	r3, #0
 80093f2:	2200      	movs	r2, #0
 80093f4:	2100      	movs	r1, #0
 80093f6:	f001 fa23 	bl	800a840 <xQueueGenericSend>

    u8CopyBufferSize = modH->u8BufferSize +2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2293      	movs	r2, #147	; 0x93
 80093fe:	5c9a      	ldrb	r2, [r3, r2]
 8009400:	240a      	movs	r4, #10
 8009402:	193b      	adds	r3, r7, r4
 8009404:	3202      	adds	r2, #2
 8009406:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	0018      	movs	r0, r3
 800940c:	f7ff fc50 	bl	8008cb0 <sendTxBuffer>

    return u8CopyBufferSize;
 8009410:	193b      	adds	r3, r7, r4
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	b25b      	sxtb	r3, r3
}
 8009416:	0018      	movs	r0, r3
 8009418:	46bd      	mov	sp, r7
 800941a:	b004      	add	sp, #16
 800941c:	bdb0      	pop	{r4, r5, r7, pc}

0800941e <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800941e:	b5b0      	push	{r4, r5, r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	7d5a      	ldrb	r2, [r3, #21]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	7d9b      	ldrb	r3, [r3, #22]
 800942e:	250e      	movs	r5, #14
 8009430:	197c      	adds	r4, r7, r5
 8009432:	0019      	movs	r1, r3
 8009434:	0010      	movs	r0, r2
 8009436:	f7ff fba7 	bl	8008b88 <word>
 800943a:	0003      	movs	r3, r0
 800943c:	8023      	strh	r3, [r4, #0]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800943e:	240c      	movs	r4, #12
 8009440:	193b      	adds	r3, r7, r4
 8009442:	197a      	adds	r2, r7, r5
 8009444:	8812      	ldrh	r2, [r2, #0]
 8009446:	0912      	lsrs	r2, r2, #4
 8009448:	801a      	strh	r2, [r3, #0]
    u8currentBit = (uint8_t) (u16coil % 16);
 800944a:	197b      	adds	r3, r7, r5
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	b2da      	uxtb	r2, r3
 8009450:	250b      	movs	r5, #11
 8009452:	197b      	adds	r3, r7, r5
 8009454:	210f      	movs	r1, #15
 8009456:	400a      	ands	r2, r1
 8009458:	701a      	strb	r2, [r3, #0]

    // write to coil

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	22b8      	movs	r2, #184	; 0xb8
 800945e:	589b      	ldr	r3, [r3, r2]
 8009460:	2201      	movs	r2, #1
 8009462:	4252      	negs	r2, r2
 8009464:	0011      	movs	r1, r2
 8009466:	0018      	movs	r0, r3
 8009468:	f001 fbd4 	bl	800ac14 <xQueueSemaphoreTake>
    bitWrite(
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	7ddb      	ldrb	r3, [r3, #23]
 8009470:	2bff      	cmp	r3, #255	; 0xff
 8009472:	d118      	bne.n	80094a6 <process_FC5+0x88>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2298      	movs	r2, #152	; 0x98
 8009478:	589a      	ldr	r2, [r3, r2]
 800947a:	193b      	adds	r3, r7, r4
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	18d3      	adds	r3, r2, r3
 8009482:	8819      	ldrh	r1, [r3, #0]
 8009484:	197b      	adds	r3, r7, r5
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2201      	movs	r2, #1
 800948a:	409a      	lsls	r2, r3
 800948c:	0013      	movs	r3, r2
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2098      	movs	r0, #152	; 0x98
 8009494:	5818      	ldr	r0, [r3, r0]
 8009496:	193b      	adds	r3, r7, r4
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	18c3      	adds	r3, r0, r3
 800949e:	430a      	orrs	r2, r1
 80094a0:	b292      	uxth	r2, r2
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	e01b      	b.n	80094de <process_FC5+0xc0>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2298      	movs	r2, #152	; 0x98
 80094aa:	589a      	ldr	r2, [r3, r2]
 80094ac:	240c      	movs	r4, #12
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	18d3      	adds	r3, r2, r3
 80094b6:	881a      	ldrh	r2, [r3, #0]
 80094b8:	230b      	movs	r3, #11
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2101      	movs	r1, #1
 80094c0:	4099      	lsls	r1, r3
 80094c2:	000b      	movs	r3, r1
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	43db      	mvns	r3, r3
 80094c8:	b299      	uxth	r1, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2098      	movs	r0, #152	; 0x98
 80094ce:	5818      	ldr	r0, [r3, r0]
 80094d0:	193b      	adds	r3, r7, r4
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	18c3      	adds	r3, r0, r3
 80094d8:	400a      	ands	r2, r1
 80094da:	b292      	uxth	r2, r2
 80094dc:	801a      	strh	r2, [r3, #0]
    	modH->u16regs[ u16currentRegister ],
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	22b8      	movs	r2, #184	; 0xb8
 80094e2:	5898      	ldr	r0, [r3, r2]
 80094e4:	2300      	movs	r3, #0
 80094e6:	2200      	movs	r2, #0
 80094e8:	2100      	movs	r1, #0
 80094ea:	f001 f9a9 	bl	800a840 <xQueueGenericSend>

    // send answer to master
    modH->u8BufferSize = 6;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2293      	movs	r2, #147	; 0x93
 80094f2:	2106      	movs	r1, #6
 80094f4:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2293      	movs	r2, #147	; 0x93
 80094fa:	5c9a      	ldrb	r2, [r3, r2]
 80094fc:	240a      	movs	r4, #10
 80094fe:	193b      	adds	r3, r7, r4
 8009500:	3202      	adds	r2, #2
 8009502:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	0018      	movs	r0, r3
 8009508:	f7ff fbd2 	bl	8008cb0 <sendTxBuffer>

    return u8CopyBufferSize;
 800950c:	193b      	adds	r3, r7, r4
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	b25b      	sxtb	r3, r3
}
 8009512:	0018      	movs	r0, r3
 8009514:	46bd      	mov	sp, r7
 8009516:	b004      	add	sp, #16
 8009518:	bdb0      	pop	{r4, r5, r7, pc}

0800951a <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800951a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7d5a      	ldrb	r2, [r3, #21]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	7d9b      	ldrb	r3, [r3, #22]
 800952a:	250e      	movs	r5, #14
 800952c:	197c      	adds	r4, r7, r5
 800952e:	0019      	movs	r1, r3
 8009530:	0010      	movs	r0, r2
 8009532:	f7ff fb29 	bl	8008b88 <word>
 8009536:	0003      	movs	r3, r0
 8009538:	8023      	strh	r3, [r4, #0]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	7dda      	ldrb	r2, [r3, #23]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7e1b      	ldrb	r3, [r3, #24]
 8009542:	260c      	movs	r6, #12
 8009544:	19bc      	adds	r4, r7, r6
 8009546:	0019      	movs	r1, r3
 8009548:	0010      	movs	r0, r2
 800954a:	f7ff fb1d 	bl	8008b88 <word>
 800954e:	0003      	movs	r3, r0
 8009550:	8023      	strh	r3, [r4, #0]

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	22b8      	movs	r2, #184	; 0xb8
 8009556:	589b      	ldr	r3, [r3, r2]
 8009558:	2201      	movs	r2, #1
 800955a:	4252      	negs	r2, r2
 800955c:	0011      	movs	r1, r2
 800955e:	0018      	movs	r0, r3
 8009560:	f001 fb58 	bl	800ac14 <xQueueSemaphoreTake>
    modH->u16regs[ u16add  + HoldingRegistersStart] = u16val;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2298      	movs	r2, #152	; 0x98
 8009568:	589a      	ldr	r2, [r3, r2]
 800956a:	002c      	movs	r4, r5
 800956c:	193b      	adds	r3, r7, r4
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	3316      	adds	r3, #22
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	18d3      	adds	r3, r2, r3
 8009576:	19ba      	adds	r2, r7, r6
 8009578:	8812      	ldrh	r2, [r2, #0]
 800957a:	801a      	strh	r2, [r3, #0]
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	22b8      	movs	r2, #184	; 0xb8
 8009580:	5898      	ldr	r0, [r3, r2]
 8009582:	2300      	movs	r3, #0
 8009584:	2200      	movs	r2, #0
 8009586:	2100      	movs	r1, #0
 8009588:	f001 f95a 	bl	800a840 <xQueueGenericSend>

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2293      	movs	r2, #147	; 0x93
 8009590:	2106      	movs	r1, #6
 8009592:	5499      	strb	r1, [r3, r2]

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2293      	movs	r2, #147	; 0x93
 8009598:	5c9a      	ldrb	r2, [r3, r2]
 800959a:	230b      	movs	r3, #11
 800959c:	18fb      	adds	r3, r7, r3
 800959e:	3202      	adds	r2, #2
 80095a0:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0018      	movs	r0, r3
 80095a6:	f7ff fb83 	bl	8008cb0 <sendTxBuffer>

    switch (u16add) {
 80095aa:	193b      	adds	r3, r7, r4
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d002      	beq.n	80095b8 <process_FC6+0x9e>
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d00c      	beq.n	80095d0 <process_FC6+0xb6>
 80095b6:	e017      	b.n	80095e8 <process_FC6+0xce>
    case 3 : // Write the Low Voltage value to the calibration data
    	SetLowVoltageCalibration((uint16_t)CalculateAverageVoltage(), u16val);
 80095b8:	f7f8 fe74 	bl	80022a4 <CalculateAverageVoltage>
 80095bc:	0003      	movs	r3, r0
 80095be:	b29a      	uxth	r2, r3
 80095c0:	230c      	movs	r3, #12
 80095c2:	18fb      	adds	r3, r7, r3
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	0019      	movs	r1, r3
 80095c8:	0010      	movs	r0, r2
 80095ca:	f000 f997 	bl	80098fc <SetLowVoltageCalibration>
    	break;
 80095ce:	e00b      	b.n	80095e8 <process_FC6+0xce>
    case 4: // Write the High Voltage value to the calibration data
    	SetHighVoltageCalibration((uint16_t)CalculateAverageVoltage(), u16val);
 80095d0:	f7f8 fe68 	bl	80022a4 <CalculateAverageVoltage>
 80095d4:	0003      	movs	r3, r0
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	230c      	movs	r3, #12
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	0019      	movs	r1, r3
 80095e0:	0010      	movs	r0, r2
 80095e2:	f000 f9a7 	bl	8009934 <SetHighVoltageCalibration>
    	break;
 80095e6:	46c0      	nop			; (mov r8, r8)
    }

    return u8CopyBufferSize;
 80095e8:	230b      	movs	r3, #11
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b25b      	sxtb	r3, r3
}
 80095f0:	0018      	movs	r0, r3
 80095f2:	46bd      	mov	sp, r7
 80095f4:	b005      	add	sp, #20
 80095f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095f8 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80095f8:	b5b0      	push	{r4, r5, r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	7d5a      	ldrb	r2, [r3, #21]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7d9b      	ldrb	r3, [r3, #22]
 8009608:	2112      	movs	r1, #18
 800960a:	187c      	adds	r4, r7, r1
 800960c:	0019      	movs	r1, r3
 800960e:	0010      	movs	r0, r2
 8009610:	f7ff faba 	bl	8008b88 <word>
 8009614:	0003      	movs	r3, r0
 8009616:	8023      	strh	r3, [r4, #0]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	7dda      	ldrb	r2, [r3, #23]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7e1b      	ldrb	r3, [r3, #24]
 8009620:	2110      	movs	r1, #16
 8009622:	187c      	adds	r4, r7, r1
 8009624:	0019      	movs	r1, r3
 8009626:	0010      	movs	r0, r2
 8009628:	f7ff faae 	bl	8008b88 <word>
 800962c:	0003      	movs	r3, r0
 800962e:	8023      	strh	r3, [r4, #0]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8009630:	2316      	movs	r3, #22
 8009632:	18fb      	adds	r3, r7, r3
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]
    u8frameByte = 7;
 8009638:	2317      	movs	r3, #23
 800963a:	18fb      	adds	r3, r7, r3
 800963c:	2207      	movs	r2, #7
 800963e:	701a      	strb	r2, [r3, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	22b8      	movs	r2, #184	; 0xb8
 8009644:	589b      	ldr	r3, [r3, r2]
 8009646:	2201      	movs	r2, #1
 8009648:	4252      	negs	r2, r2
 800964a:	0011      	movs	r1, r2
 800964c:	0018      	movs	r0, r3
 800964e:	f001 fae1 	bl	800ac14 <xQueueSemaphoreTake>
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8009652:	2314      	movs	r3, #20
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	2200      	movs	r2, #0
 8009658:	801a      	strh	r2, [r3, #0]
 800965a:	e07c      	b.n	8009756 <process_FC15+0x15e>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800965c:	200c      	movs	r0, #12
 800965e:	183b      	adds	r3, r7, r0
 8009660:	2212      	movs	r2, #18
 8009662:	18b9      	adds	r1, r7, r2
 8009664:	2214      	movs	r2, #20
 8009666:	18ba      	adds	r2, r7, r2
 8009668:	8809      	ldrh	r1, [r1, #0]
 800966a:	8812      	ldrh	r2, [r2, #0]
 800966c:	188a      	adds	r2, r1, r2
 800966e:	801a      	strh	r2, [r3, #0]
        u16currentRegister = (u16coil / 16);
 8009670:	240a      	movs	r4, #10
 8009672:	193b      	adds	r3, r7, r4
 8009674:	183a      	adds	r2, r7, r0
 8009676:	8812      	ldrh	r2, [r2, #0]
 8009678:	0912      	lsrs	r2, r2, #4
 800967a:	801a      	strh	r2, [r3, #0]
        u8currentBit = (uint8_t) (u16coil % 16);
 800967c:	183b      	adds	r3, r7, r0
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b2da      	uxtb	r2, r3
 8009682:	2009      	movs	r0, #9
 8009684:	183b      	adds	r3, r7, r0
 8009686:	210f      	movs	r1, #15
 8009688:	400a      	ands	r2, r1
 800968a:	701a      	strb	r2, [r3, #0]

        bTemp = bitRead(
 800968c:	2317      	movs	r3, #23
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	18d3      	adds	r3, r2, r3
 8009696:	7cdb      	ldrb	r3, [r3, #19]
 8009698:	001a      	movs	r2, r3
 800969a:	2316      	movs	r3, #22
 800969c:	18fb      	adds	r3, r7, r3
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	411a      	asrs	r2, r3
 80096a2:	0013      	movs	r3, r2
 80096a4:	2201      	movs	r2, #1
 80096a6:	401a      	ands	r2, r3
 80096a8:	2508      	movs	r5, #8
 80096aa:	197b      	adds	r3, r7, r5
 80096ac:	1e51      	subs	r1, r2, #1
 80096ae:	418a      	sbcs	r2, r1
 80096b0:	701a      	strb	r2, [r3, #0]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80096b2:	197b      	adds	r3, r7, r5
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d018      	beq.n	80096ec <process_FC15+0xf4>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2298      	movs	r2, #152	; 0x98
 80096be:	589a      	ldr	r2, [r3, r2]
 80096c0:	193b      	adds	r3, r7, r4
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	18d3      	adds	r3, r2, r3
 80096c8:	8819      	ldrh	r1, [r3, #0]
 80096ca:	183b      	adds	r3, r7, r0
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2201      	movs	r2, #1
 80096d0:	409a      	lsls	r2, r3
 80096d2:	0013      	movs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2098      	movs	r0, #152	; 0x98
 80096da:	5818      	ldr	r0, [r3, r0]
 80096dc:	193b      	adds	r3, r7, r4
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	18c3      	adds	r3, r0, r3
 80096e4:	430a      	orrs	r2, r1
 80096e6:	b292      	uxth	r2, r2
 80096e8:	801a      	strh	r2, [r3, #0]
 80096ea:	e01b      	b.n	8009724 <process_FC15+0x12c>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2298      	movs	r2, #152	; 0x98
 80096f0:	589a      	ldr	r2, [r3, r2]
 80096f2:	240a      	movs	r4, #10
 80096f4:	193b      	adds	r3, r7, r4
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	18d3      	adds	r3, r2, r3
 80096fc:	881a      	ldrh	r2, [r3, #0]
 80096fe:	2309      	movs	r3, #9
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2101      	movs	r1, #1
 8009706:	4099      	lsls	r1, r3
 8009708:	000b      	movs	r3, r1
 800970a:	b29b      	uxth	r3, r3
 800970c:	43db      	mvns	r3, r3
 800970e:	b299      	uxth	r1, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2098      	movs	r0, #152	; 0x98
 8009714:	5818      	ldr	r0, [r3, r0]
 8009716:	193b      	adds	r3, r7, r4
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	18c3      	adds	r3, r0, r3
 800971e:	400a      	ands	r2, r1
 8009720:	b292      	uxth	r2, r2
 8009722:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8009724:	2116      	movs	r1, #22
 8009726:	187b      	adds	r3, r7, r1
 8009728:	781a      	ldrb	r2, [r3, #0]
 800972a:	187b      	adds	r3, r7, r1
 800972c:	3201      	adds	r2, #1
 800972e:	701a      	strb	r2, [r3, #0]

        if (u8bitsno > 7)
 8009730:	187b      	adds	r3, r7, r1
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b07      	cmp	r3, #7
 8009736:	d908      	bls.n	800974a <process_FC15+0x152>
        {
            u8bitsno = 0;
 8009738:	187b      	adds	r3, r7, r1
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]
            u8frameByte++;
 800973e:	2117      	movs	r1, #23
 8009740:	187b      	adds	r3, r7, r1
 8009742:	781a      	ldrb	r2, [r3, #0]
 8009744:	187b      	adds	r3, r7, r1
 8009746:	3201      	adds	r2, #1
 8009748:	701a      	strb	r2, [r3, #0]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800974a:	2114      	movs	r1, #20
 800974c:	187b      	adds	r3, r7, r1
 800974e:	881a      	ldrh	r2, [r3, #0]
 8009750:	187b      	adds	r3, r7, r1
 8009752:	3201      	adds	r2, #1
 8009754:	801a      	strh	r2, [r3, #0]
 8009756:	2314      	movs	r3, #20
 8009758:	18fa      	adds	r2, r7, r3
 800975a:	2310      	movs	r3, #16
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	8812      	ldrh	r2, [r2, #0]
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d200      	bcs.n	8009768 <process_FC15+0x170>
 8009766:	e779      	b.n	800965c <process_FC15+0x64>
        }
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	22b8      	movs	r2, #184	; 0xb8
 800976c:	5898      	ldr	r0, [r3, r2]
 800976e:	2300      	movs	r3, #0
 8009770:	2200      	movs	r2, #0
 8009772:	2100      	movs	r1, #0
 8009774:	f001 f864 	bl	800a840 <xQueueGenericSend>

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2293      	movs	r2, #147	; 0x93
 800977c:	2106      	movs	r1, #6
 800977e:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize = modH->u8BufferSize +2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2293      	movs	r2, #147	; 0x93
 8009784:	5c9a      	ldrb	r2, [r3, r2]
 8009786:	240f      	movs	r4, #15
 8009788:	193b      	adds	r3, r7, r4
 800978a:	3202      	adds	r2, #2
 800978c:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	0018      	movs	r0, r3
 8009792:	f7ff fa8d 	bl	8008cb0 <sendTxBuffer>
    return u8CopyBufferSize;
 8009796:	193b      	adds	r3, r7, r4
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b25b      	sxtb	r3, r3
}
 800979c:	0018      	movs	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	b006      	add	sp, #24
 80097a2:	bdb0      	pop	{r4, r5, r7, pc}

080097a4 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80097a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	7d5b      	ldrb	r3, [r3, #21]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	b21a      	sxth	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7d9b      	ldrb	r3, [r3, #22]
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b21a      	sxth	r2, r3
 80097be:	2314      	movs	r3, #20
 80097c0:	18fb      	adds	r3, r7, r3
 80097c2:	801a      	strh	r2, [r3, #0]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7ddb      	ldrb	r3, [r3, #23]
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	b21a      	sxth	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7e1b      	ldrb	r3, [r3, #24]
 80097d0:	b21b      	sxth	r3, r3
 80097d2:	4313      	orrs	r3, r2
 80097d4:	b21a      	sxth	r2, r3
 80097d6:	2112      	movs	r1, #18
 80097d8:	187b      	adds	r3, r7, r1
 80097da:	801a      	strh	r2, [r3, #0]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80097e2:	187b      	adds	r3, r7, r1
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2293      	movs	r2, #147	; 0x93
 80097f0:	2106      	movs	r1, #6
 80097f2:	5499      	strb	r1, [r3, r2]

    // write registers
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	22b8      	movs	r2, #184	; 0xb8
 80097f8:	589b      	ldr	r3, [r3, r2]
 80097fa:	2201      	movs	r2, #1
 80097fc:	4252      	negs	r2, r2
 80097fe:	0011      	movs	r1, r2
 8009800:	0018      	movs	r0, r3
 8009802:	f001 fa07 	bl	800ac14 <xQueueSemaphoreTake>
    for (i = 0; i < u16regsno; i++)
 8009806:	2316      	movs	r3, #22
 8009808:	18fb      	adds	r3, r7, r3
 800980a:	2200      	movs	r2, #0
 800980c:	801a      	strh	r2, [r3, #0]
 800980e:	e029      	b.n	8009864 <process_FC16+0xc0>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8009810:	2516      	movs	r5, #22
 8009812:	197b      	adds	r3, r7, r5
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	3307      	adds	r3, #7
        temp = word(
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	18d3      	adds	r3, r2, r3
 800981e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8009820:	197b      	adds	r3, r7, r5
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	3304      	adds	r3, #4
 8009826:	005b      	lsls	r3, r3, #1
        temp = word(
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	18d3      	adds	r3, r2, r3
 800982c:	7cdb      	ldrb	r3, [r3, #19]
 800982e:	260e      	movs	r6, #14
 8009830:	19bc      	adds	r4, r7, r6
 8009832:	0019      	movs	r1, r3
 8009834:	f7ff f9a8 	bl	8008b88 <word>
 8009838:	0003      	movs	r3, r0
 800983a:	8023      	strh	r3, [r4, #0]

        modH->u16regs[ u16StartAdd + i  + HoldingRegistersStart] = temp;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2298      	movs	r2, #152	; 0x98
 8009840:	589a      	ldr	r2, [r3, r2]
 8009842:	2314      	movs	r3, #20
 8009844:	18fb      	adds	r3, r7, r3
 8009846:	8819      	ldrh	r1, [r3, #0]
 8009848:	197b      	adds	r3, r7, r5
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	18cb      	adds	r3, r1, r3
 800984e:	3316      	adds	r3, #22
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	18d3      	adds	r3, r2, r3
 8009854:	19ba      	adds	r2, r7, r6
 8009856:	8812      	ldrh	r2, [r2, #0]
 8009858:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800985a:	197b      	adds	r3, r7, r5
 800985c:	881a      	ldrh	r2, [r3, #0]
 800985e:	197b      	adds	r3, r7, r5
 8009860:	3201      	adds	r2, #1
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	2316      	movs	r3, #22
 8009866:	18fa      	adds	r2, r7, r3
 8009868:	2312      	movs	r3, #18
 800986a:	18fb      	adds	r3, r7, r3
 800986c:	8812      	ldrh	r2, [r2, #0]
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d3cd      	bcc.n	8009810 <process_FC16+0x6c>
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	22b8      	movs	r2, #184	; 0xb8
 8009878:	5898      	ldr	r0, [r3, r2]
 800987a:	2300      	movs	r3, #0
 800987c:	2200      	movs	r2, #0
 800987e:	2100      	movs	r1, #0
 8009880:	f000 ffde 	bl	800a840 <xQueueGenericSend>
    u8CopyBufferSize = modH->u8BufferSize +2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2293      	movs	r2, #147	; 0x93
 8009888:	5c9a      	ldrb	r2, [r3, r2]
 800988a:	2311      	movs	r3, #17
 800988c:	18fb      	adds	r3, r7, r3
 800988e:	3202      	adds	r2, #2
 8009890:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	0018      	movs	r0, r3
 8009896:	f7ff fa0b 	bl	8008cb0 <sendTxBuffer>

	switch (u16StartAdd) {
 800989a:	2314      	movs	r3, #20
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	2b05      	cmp	r3, #5
 80098a2:	d002      	beq.n	80098aa <process_FC16+0x106>
 80098a4:	2b07      	cmp	r3, #7
 80098a6:	d010      	beq.n	80098ca <process_FC16+0x126>
 80098a8:	e01f      	b.n	80098ea <process_FC16+0x146>
		case 5: // Write the Low Current value to the calibration data
			SetLowCurrentCalibration(CalculateAverageCurrent(), modH->u16regs[HoldingRegistersStart + 5], modH->u16regs[HoldingRegistersStart + 6] );
 80098aa:	f7f8 fd47 	bl	800233c <CalculateAverageCurrent>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2298      	movs	r2, #152	; 0x98
 80098b2:	589b      	ldr	r3, [r3, r2]
 80098b4:	3336      	adds	r3, #54	; 0x36
 80098b6:	8819      	ldrh	r1, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2298      	movs	r2, #152	; 0x98
 80098bc:	589b      	ldr	r3, [r3, r2]
 80098be:	3338      	adds	r3, #56	; 0x38
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	001a      	movs	r2, r3
 80098c4:	f000 f852 	bl	800996c <SetLowCurrentCalibration>
		break;
 80098c8:	e00f      	b.n	80098ea <process_FC16+0x146>
		case 7: // Write the High Current value to the calibration data
			SetHighCurrentCalibration(CalculateAverageCurrent(), modH->u16regs[HoldingRegistersStart + 7], modH->u16regs[HoldingRegistersStart + 8]  );
 80098ca:	f7f8 fd37 	bl	800233c <CalculateAverageCurrent>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2298      	movs	r2, #152	; 0x98
 80098d2:	589b      	ldr	r3, [r3, r2]
 80098d4:	333a      	adds	r3, #58	; 0x3a
 80098d6:	8819      	ldrh	r1, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2298      	movs	r2, #152	; 0x98
 80098dc:	589b      	ldr	r3, [r3, r2]
 80098de:	333c      	adds	r3, #60	; 0x3c
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	001a      	movs	r2, r3
 80098e4:	f000 f864 	bl	80099b0 <SetHighCurrentCalibration>
		break;
 80098e8:	46c0      	nop			; (mov r8, r8)
	}



    return u8CopyBufferSize;
 80098ea:	2311      	movs	r3, #17
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	b25b      	sxtb	r3, r3
}
 80098f2:	0018      	movs	r0, r3
 80098f4:	46bd      	mov	sp, r7
 80098f6:	b007      	add	sp, #28
 80098f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080098fc <SetLowVoltageCalibration>:
CalibrationData calibrationData;

/**
 * SetLowVoltageCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetLowVoltageCalibration(uint16_t VoltageReading, uint16_t VoltageActual){
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	0002      	movs	r2, r0
 8009904:	1dbb      	adds	r3, r7, #6
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	1d3b      	adds	r3, r7, #4
 800990a:	1c0a      	adds	r2, r1, #0
 800990c:	801a      	strh	r2, [r3, #0]
	calibrationData.values.LowVoltage.Actual = VoltageActual;
 800990e:	1d3b      	adds	r3, r7, #4
 8009910:	2200      	movs	r2, #0
 8009912:	5e9a      	ldrsh	r2, [r3, r2]
 8009914:	4b06      	ldr	r3, [pc, #24]	; (8009930 <SetLowVoltageCalibration+0x34>)
 8009916:	805a      	strh	r2, [r3, #2]
	calibrationData.values.LowVoltage.Reading = VoltageReading;
 8009918:	1dbb      	adds	r3, r7, #6
 800991a:	2200      	movs	r2, #0
 800991c:	5e9a      	ldrsh	r2, [r3, r2]
 800991e:	4b04      	ldr	r3, [pc, #16]	; (8009930 <SetLowVoltageCalibration+0x34>)
 8009920:	801a      	strh	r2, [r3, #0]
	StoreCalibrationData();
 8009922:	f000 f865 	bl	80099f0 <StoreCalibrationData>
}
 8009926:	46c0      	nop			; (mov r8, r8)
 8009928:	46bd      	mov	sp, r7
 800992a:	b002      	add	sp, #8
 800992c:	bd80      	pop	{r7, pc}
 800992e:	46c0      	nop			; (mov r8, r8)
 8009930:	200009f4 	.word	0x200009f4

08009934 <SetHighVoltageCalibration>:
/**
 * SetHighVoltageCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetHighVoltageCalibration(uint16_t VoltageReading, uint16_t VoltageActual){
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	0002      	movs	r2, r0
 800993c:	1dbb      	adds	r3, r7, #6
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	1d3b      	adds	r3, r7, #4
 8009942:	1c0a      	adds	r2, r1, #0
 8009944:	801a      	strh	r2, [r3, #0]
	calibrationData.values.HighVoltage.Actual = VoltageActual;
 8009946:	1d3b      	adds	r3, r7, #4
 8009948:	2200      	movs	r2, #0
 800994a:	5e9a      	ldrsh	r2, [r3, r2]
 800994c:	4b06      	ldr	r3, [pc, #24]	; (8009968 <SetHighVoltageCalibration+0x34>)
 800994e:	80da      	strh	r2, [r3, #6]
	calibrationData.values.HighVoltage.Reading = VoltageReading;
 8009950:	1dbb      	adds	r3, r7, #6
 8009952:	2200      	movs	r2, #0
 8009954:	5e9a      	ldrsh	r2, [r3, r2]
 8009956:	4b04      	ldr	r3, [pc, #16]	; (8009968 <SetHighVoltageCalibration+0x34>)
 8009958:	809a      	strh	r2, [r3, #4]
	StoreCalibrationData();
 800995a:	f000 f849 	bl	80099f0 <StoreCalibrationData>
}
 800995e:	46c0      	nop			; (mov r8, r8)
 8009960:	46bd      	mov	sp, r7
 8009962:	b002      	add	sp, #8
 8009964:	bd80      	pop	{r7, pc}
 8009966:	46c0      	nop			; (mov r8, r8)
 8009968:	200009f4 	.word	0x200009f4

0800996c <SetLowCurrentCalibration>:
/**
 * SetLowCurrentCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetLowCurrentCalibration(int32_t CurrentReading, uint16_t CurrentActualLowWord, uint16_t CurrentActualHighWord) {
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	0008      	movs	r0, r1
 8009976:	0011      	movs	r1, r2
 8009978:	1cbb      	adds	r3, r7, #2
 800997a:	1c02      	adds	r2, r0, #0
 800997c:	801a      	strh	r2, [r3, #0]
 800997e:	003b      	movs	r3, r7
 8009980:	1c0a      	adds	r2, r1, #0
 8009982:	801a      	strh	r2, [r3, #0]
	calibrationData.values.LowCurrent.Reading = CurrentReading;
 8009984:	4b09      	ldr	r3, [pc, #36]	; (80099ac <SetLowCurrentCalibration+0x40>)
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	609a      	str	r2, [r3, #8]
	uint32_t actual = CurrentActualLowWord + (CurrentActualHighWord << 16);
 800998a:	1cbb      	adds	r3, r7, #2
 800998c:	881a      	ldrh	r2, [r3, #0]
 800998e:	003b      	movs	r3, r7
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	041b      	lsls	r3, r3, #16
 8009994:	18d3      	adds	r3, r2, r3
 8009996:	60fb      	str	r3, [r7, #12]
	calibrationData.values.LowCurrent.Actual = (int32_t)(actual);
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <SetLowCurrentCalibration+0x40>)
 800999c:	60da      	str	r2, [r3, #12]
	StoreCalibrationData();
 800999e:	f000 f827 	bl	80099f0 <StoreCalibrationData>
}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	46bd      	mov	sp, r7
 80099a6:	b004      	add	sp, #16
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	200009f4 	.word	0x200009f4

080099b0 <SetHighCurrentCalibration>:
/**
 * SetHighCurrentCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetHighCurrentCalibration(int32_t CurrentReading, uint16_t CurrentActualLowWord, uint16_t CurrentActualHighWord) {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	0008      	movs	r0, r1
 80099ba:	0011      	movs	r1, r2
 80099bc:	1cbb      	adds	r3, r7, #2
 80099be:	1c02      	adds	r2, r0, #0
 80099c0:	801a      	strh	r2, [r3, #0]
 80099c2:	003b      	movs	r3, r7
 80099c4:	1c0a      	adds	r2, r1, #0
 80099c6:	801a      	strh	r2, [r3, #0]
	calibrationData.values.HighCurrent.Reading = CurrentReading;
 80099c8:	4b08      	ldr	r3, [pc, #32]	; (80099ec <SetHighCurrentCalibration+0x3c>)
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	611a      	str	r2, [r3, #16]
	calibrationData.values.HighCurrent.Actual = (int32_t)(CurrentActualLowWord + (CurrentActualHighWord << 16));
 80099ce:	1cbb      	adds	r3, r7, #2
 80099d0:	881a      	ldrh	r2, [r3, #0]
 80099d2:	003b      	movs	r3, r7
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	041b      	lsls	r3, r3, #16
 80099d8:	18d2      	adds	r2, r2, r3
 80099da:	4b04      	ldr	r3, [pc, #16]	; (80099ec <SetHighCurrentCalibration+0x3c>)
 80099dc:	615a      	str	r2, [r3, #20]
	StoreCalibrationData();
 80099de:	f000 f807 	bl	80099f0 <StoreCalibrationData>
}
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b002      	add	sp, #8
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	46c0      	nop			; (mov r8, r8)
 80099ec:	200009f4 	.word	0x200009f4

080099f0 <StoreCalibrationData>:
/**
 *  StoreCalibrationData writes the calibration data to flash memory.
 */
void StoreCalibrationData() {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
	calibrationData.Checksum = CalculateChecksum();
 80099f4:	f000 f900 	bl	8009bf8 <CalculateChecksum>
 80099f8:	0003      	movs	r3, r0
 80099fa:	001a      	movs	r2, r3
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <StoreCalibrationData+0x24>)
 80099fe:	831a      	strh	r2, [r3, #24]
	Flash_Write_Data( FLASH_STORAGE_PAGE, (void *)&calibrationData, (sizeof(CalibrationData) + 3) / 4);
 8009a00:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <StoreCalibrationData+0x24>)
 8009a02:	4805      	ldr	r0, [pc, #20]	; (8009a18 <StoreCalibrationData+0x28>)
 8009a04:	2207      	movs	r2, #7
 8009a06:	0019      	movs	r1, r3
 8009a08:	f7f8 fa36 	bl	8001e78 <Flash_Write_Data>
}
 8009a0c:	46c0      	nop			; (mov r8, r8)
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	46c0      	nop			; (mov r8, r8)
 8009a14:	200009f4 	.word	0x200009f4
 8009a18:	0800f800 	.word	0x0800f800

08009a1c <LoadCalibrationData>:
/**
 * LoadCalibrationData reads the data from flash memory into the structure provided
 */
void LoadCalibrationData() {
 8009a1c:	b5b0      	push	{r4, r5, r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
	memcpy(&calibrationData, (void *)FLASH_STORAGE_PAGE, sizeof(CalibrationData));
 8009a20:	4b16      	ldr	r3, [pc, #88]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a22:	4a17      	ldr	r2, [pc, #92]	; (8009a80 <LoadCalibrationData+0x64>)
 8009a24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009a26:	c313      	stmia	r3!, {r0, r1, r4}
 8009a28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009a2a:	c313      	stmia	r3!, {r0, r1, r4}
 8009a2c:	6812      	ldr	r2, [r2, #0]
 8009a2e:	601a      	str	r2, [r3, #0]
	if (calibrationData.Checksum != CalculateChecksum()) {
 8009a30:	4b12      	ldr	r3, [pc, #72]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a32:	8b1c      	ldrh	r4, [r3, #24]
 8009a34:	f000 f8e0 	bl	8009bf8 <CalculateChecksum>
 8009a38:	0003      	movs	r3, r0
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d01b      	beq.n	8009a76 <LoadCalibrationData+0x5a>
		calibrationData.values.LowVoltage.Reading = 0;
 8009a3e:	4b0f      	ldr	r3, [pc, #60]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	801a      	strh	r2, [r3, #0]
		calibrationData.values.LowVoltage.Actual = 0;
 8009a44:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	805a      	strh	r2, [r3, #2]
		calibrationData.values.HighVoltage.Reading = 1000;
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a4c:	22fa      	movs	r2, #250	; 0xfa
 8009a4e:	0092      	lsls	r2, r2, #2
 8009a50:	809a      	strh	r2, [r3, #4]
		calibrationData.values.HighVoltage.Actual = 1000;
 8009a52:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a54:	22fa      	movs	r2, #250	; 0xfa
 8009a56:	0092      	lsls	r2, r2, #2
 8009a58:	80da      	strh	r2, [r3, #6]
		calibrationData.values.LowCurrent.Reading = 0;
 8009a5a:	4b08      	ldr	r3, [pc, #32]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	609a      	str	r2, [r3, #8]
		calibrationData.values.LowCurrent.Actual = 0;
 8009a60:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	60da      	str	r2, [r3, #12]
		calibrationData.values.HighCurrent.Reading = 1000;
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a68:	22fa      	movs	r2, #250	; 0xfa
 8009a6a:	0092      	lsls	r2, r2, #2
 8009a6c:	611a      	str	r2, [r3, #16]
		calibrationData.values.HighCurrent.Actual = 1000;
 8009a6e:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <LoadCalibrationData+0x60>)
 8009a70:	22fa      	movs	r2, #250	; 0xfa
 8009a72:	0092      	lsls	r2, r2, #2
 8009a74:	615a      	str	r2, [r3, #20]
	}
}
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a7c:	200009f4 	.word	0x200009f4
 8009a80:	0800f800 	.word	0x0800f800

08009a84 <GetVoltageCalibration>:

/**
 * GetVoltageCalibration calculates the slope and offset for the voltage measurements based on the calibration data from the flash memory
 */
void GetVoltageCalibration(double *m, double *c) {
 8009a84:	b5b0      	push	{r4, r5, r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]

	*m = (((double)calibrationData.values.HighVoltage.Actual) - ((double)calibrationData.values.LowVoltage.Actual))
 8009a8e:	4b2c      	ldr	r3, [pc, #176]	; (8009b40 <GetVoltageCalibration+0xbc>)
 8009a90:	2206      	movs	r2, #6
 8009a92:	5e9b      	ldrsh	r3, [r3, r2]
 8009a94:	0018      	movs	r0, r3
 8009a96:	f7f8 f975 	bl	8001d84 <__aeabi_i2d>
 8009a9a:	0004      	movs	r4, r0
 8009a9c:	000d      	movs	r5, r1
 8009a9e:	4b28      	ldr	r3, [pc, #160]	; (8009b40 <GetVoltageCalibration+0xbc>)
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	5e9b      	ldrsh	r3, [r3, r2]
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	f7f8 f96d 	bl	8001d84 <__aeabi_i2d>
 8009aaa:	0002      	movs	r2, r0
 8009aac:	000b      	movs	r3, r1
 8009aae:	0020      	movs	r0, r4
 8009ab0:	0029      	movs	r1, r5
 8009ab2:	f7f7 fdaf 	bl	8001614 <__aeabi_dsub>
 8009ab6:	0002      	movs	r2, r0
 8009ab8:	000b      	movs	r3, r1
 8009aba:	603a      	str	r2, [r7, #0]
 8009abc:	607b      	str	r3, [r7, #4]
			/ (((double)calibrationData.values.HighVoltage.Reading) - ((double)calibrationData.values.LowVoltage.Reading));
 8009abe:	4b20      	ldr	r3, [pc, #128]	; (8009b40 <GetVoltageCalibration+0xbc>)
 8009ac0:	2104      	movs	r1, #4
 8009ac2:	5e5b      	ldrsh	r3, [r3, r1]
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7f8 f95d 	bl	8001d84 <__aeabi_i2d>
 8009aca:	0004      	movs	r4, r0
 8009acc:	000d      	movs	r5, r1
 8009ace:	4b1c      	ldr	r3, [pc, #112]	; (8009b40 <GetVoltageCalibration+0xbc>)
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	5e5b      	ldrsh	r3, [r3, r1]
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f7f8 f955 	bl	8001d84 <__aeabi_i2d>
 8009ada:	0002      	movs	r2, r0
 8009adc:	000b      	movs	r3, r1
 8009ade:	0020      	movs	r0, r4
 8009ae0:	0029      	movs	r1, r5
 8009ae2:	f7f7 fd97 	bl	8001614 <__aeabi_dsub>
 8009ae6:	0002      	movs	r2, r0
 8009ae8:	000b      	movs	r3, r1
 8009aea:	6838      	ldr	r0, [r7, #0]
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	f7f6 ffe1 	bl	8000ab4 <__aeabi_ddiv>
 8009af2:	0002      	movs	r2, r0
 8009af4:	000b      	movs	r3, r1
	*m = (((double)calibrationData.values.HighVoltage.Actual) - ((double)calibrationData.values.LowVoltage.Actual))
 8009af6:	68f9      	ldr	r1, [r7, #12]
 8009af8:	600a      	str	r2, [r1, #0]
 8009afa:	604b      	str	r3, [r1, #4]
	*c = ((double)calibrationData.values.LowVoltage.Actual) - (((double)calibrationData.values.LowVoltage.Reading) * *m);
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <GetVoltageCalibration+0xbc>)
 8009afe:	2202      	movs	r2, #2
 8009b00:	5e9b      	ldrsh	r3, [r3, r2]
 8009b02:	0018      	movs	r0, r3
 8009b04:	f7f8 f93e 	bl	8001d84 <__aeabi_i2d>
 8009b08:	0004      	movs	r4, r0
 8009b0a:	000d      	movs	r5, r1
 8009b0c:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <GetVoltageCalibration+0xbc>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	5e9b      	ldrsh	r3, [r3, r2]
 8009b12:	0018      	movs	r0, r3
 8009b14:	f7f8 f936 	bl	8001d84 <__aeabi_i2d>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f7f7 fab7 	bl	8001090 <__aeabi_dmul>
 8009b22:	0002      	movs	r2, r0
 8009b24:	000b      	movs	r3, r1
 8009b26:	0020      	movs	r0, r4
 8009b28:	0029      	movs	r1, r5
 8009b2a:	f7f7 fd73 	bl	8001614 <__aeabi_dsub>
 8009b2e:	0002      	movs	r2, r0
 8009b30:	000b      	movs	r3, r1
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	600a      	str	r2, [r1, #0]
 8009b36:	604b      	str	r3, [r1, #4]
}
 8009b38:	46c0      	nop			; (mov r8, r8)
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	b004      	add	sp, #16
 8009b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b40:	200009f4 	.word	0x200009f4

08009b44 <GetCurrentCalibration>:

/**
 * GetCurrentCalibration calculates the slope and offset for the current measurements based on the calibration data from the flash memory
 */
void GetCurrentCalibration(double *m, double *c) {
 8009b44:	b5b0      	push	{r4, r5, r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]

	*m = (((double)calibrationData.values.HighCurrent.Actual) - ((double)calibrationData.values.LowCurrent.Actual))
 8009b4e:	4b29      	ldr	r3, [pc, #164]	; (8009bf4 <GetCurrentCalibration+0xb0>)
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	0018      	movs	r0, r3
 8009b54:	f7f8 f916 	bl	8001d84 <__aeabi_i2d>
 8009b58:	0004      	movs	r4, r0
 8009b5a:	000d      	movs	r5, r1
 8009b5c:	4b25      	ldr	r3, [pc, #148]	; (8009bf4 <GetCurrentCalibration+0xb0>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	0018      	movs	r0, r3
 8009b62:	f7f8 f90f 	bl	8001d84 <__aeabi_i2d>
 8009b66:	0002      	movs	r2, r0
 8009b68:	000b      	movs	r3, r1
 8009b6a:	0020      	movs	r0, r4
 8009b6c:	0029      	movs	r1, r5
 8009b6e:	f7f7 fd51 	bl	8001614 <__aeabi_dsub>
 8009b72:	0002      	movs	r2, r0
 8009b74:	000b      	movs	r3, r1
 8009b76:	603a      	str	r2, [r7, #0]
 8009b78:	607b      	str	r3, [r7, #4]
			/ (((double)calibrationData.values.HighCurrent.Reading) - ((double)calibrationData.values.LowCurrent.Reading));
 8009b7a:	4b1e      	ldr	r3, [pc, #120]	; (8009bf4 <GetCurrentCalibration+0xb0>)
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f7f8 f900 	bl	8001d84 <__aeabi_i2d>
 8009b84:	0004      	movs	r4, r0
 8009b86:	000d      	movs	r5, r1
 8009b88:	4b1a      	ldr	r3, [pc, #104]	; (8009bf4 <GetCurrentCalibration+0xb0>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f7f8 f8f9 	bl	8001d84 <__aeabi_i2d>
 8009b92:	0002      	movs	r2, r0
 8009b94:	000b      	movs	r3, r1
 8009b96:	0020      	movs	r0, r4
 8009b98:	0029      	movs	r1, r5
 8009b9a:	f7f7 fd3b 	bl	8001614 <__aeabi_dsub>
 8009b9e:	0002      	movs	r2, r0
 8009ba0:	000b      	movs	r3, r1
 8009ba2:	6838      	ldr	r0, [r7, #0]
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	f7f6 ff85 	bl	8000ab4 <__aeabi_ddiv>
 8009baa:	0002      	movs	r2, r0
 8009bac:	000b      	movs	r3, r1
	*m = (((double)calibrationData.values.HighCurrent.Actual) - ((double)calibrationData.values.LowCurrent.Actual))
 8009bae:	68f9      	ldr	r1, [r7, #12]
 8009bb0:	600a      	str	r2, [r1, #0]
 8009bb2:	604b      	str	r3, [r1, #4]
	*c = ((double)calibrationData.values.LowCurrent.Actual) - (((double)calibrationData.values.LowCurrent.Reading) * *m);
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <GetCurrentCalibration+0xb0>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f7f8 f8e3 	bl	8001d84 <__aeabi_i2d>
 8009bbe:	0004      	movs	r4, r0
 8009bc0:	000d      	movs	r5, r1
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <GetCurrentCalibration+0xb0>)
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	f7f8 f8dc 	bl	8001d84 <__aeabi_i2d>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f7f7 fa5d 	bl	8001090 <__aeabi_dmul>
 8009bd6:	0002      	movs	r2, r0
 8009bd8:	000b      	movs	r3, r1
 8009bda:	0020      	movs	r0, r4
 8009bdc:	0029      	movs	r1, r5
 8009bde:	f7f7 fd19 	bl	8001614 <__aeabi_dsub>
 8009be2:	0002      	movs	r2, r0
 8009be4:	000b      	movs	r3, r1
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	600a      	str	r2, [r1, #0]
 8009bea:	604b      	str	r3, [r1, #4]
}
 8009bec:	46c0      	nop			; (mov r8, r8)
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	b004      	add	sp, #16
 8009bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8009bf4:	200009f4 	.word	0x200009f4

08009bf8 <CalculateChecksum>:

#define CRC16 0x8005

uint16_t CalculateChecksum()
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af00      	add	r7, sp, #0
	const uint8_t *data = (uint8_t *)&calibrationData;
 8009bfe:	4b4a      	ldr	r3, [pc, #296]	; (8009d28 <CalculateChecksum+0x130>)
 8009c00:	61fb      	str	r3, [r7, #28]
	uint16_t size = sizeof(calibrationData.values); // Exclude the 16 bit Checksum in the data structure
 8009c02:	231a      	movs	r3, #26
 8009c04:	18fb      	adds	r3, r7, r3
 8009c06:	2218      	movs	r2, #24
 8009c08:	801a      	strh	r2, [r3, #0]
    uint16_t out = 0;
 8009c0a:	2318      	movs	r3, #24
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	2200      	movs	r2, #0
 8009c10:	801a      	strh	r2, [r3, #0]
    int bits_read = 0, bit_flag;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]

    /* Sanity check: */
    if(data == NULL)
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d138      	bne.n	8009c8e <CalculateChecksum+0x96>
        return 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e07e      	b.n	8009d1e <CalculateChecksum+0x126>

    while(size > 0)
    {
        bit_flag = out >> 15;
 8009c20:	2118      	movs	r1, #24
 8009c22:	187b      	adds	r3, r7, r1
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	0bdb      	lsrs	r3, r3, #15
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	607b      	str	r3, [r7, #4]

        /* Get next bit: */
        out <<= 1;
 8009c2c:	187a      	adds	r2, r7, r1
 8009c2e:	187b      	adds	r3, r7, r1
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	18db      	adds	r3, r3, r3
 8009c34:	8013      	strh	r3, [r2, #0]
        out |= (*data >> bits_read) & 1; // item a) work from the least significant bits
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	001a      	movs	r2, r3
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	411a      	asrs	r2, r3
 8009c40:	0013      	movs	r3, r2
 8009c42:	b21b      	sxth	r3, r3
 8009c44:	2201      	movs	r2, #1
 8009c46:	4013      	ands	r3, r2
 8009c48:	b21a      	sxth	r2, r3
 8009c4a:	187b      	adds	r3, r7, r1
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	5e1b      	ldrsh	r3, [r3, r0]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	b21a      	sxth	r2, r3
 8009c54:	187b      	adds	r3, r7, r1
 8009c56:	801a      	strh	r2, [r3, #0]

        /* Increment bit counter: */
        bits_read++;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	617b      	str	r3, [r7, #20]
        if(bits_read > 7)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b07      	cmp	r3, #7
 8009c62:	dd0a      	ble.n	8009c7a <CalculateChecksum+0x82>
        {
            bits_read = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
            data++;
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	61fb      	str	r3, [r7, #28]
            size--;
 8009c6e:	211a      	movs	r1, #26
 8009c70:	187b      	adds	r3, r7, r1
 8009c72:	881a      	ldrh	r2, [r3, #0]
 8009c74:	187b      	adds	r3, r7, r1
 8009c76:	3a01      	subs	r2, #1
 8009c78:	801a      	strh	r2, [r3, #0]
        }

        /* Cycle check: */
        if(bit_flag)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d006      	beq.n	8009c8e <CalculateChecksum+0x96>
            out ^= CRC16;
 8009c80:	2218      	movs	r2, #24
 8009c82:	18bb      	adds	r3, r7, r2
 8009c84:	18ba      	adds	r2, r7, r2
 8009c86:	8812      	ldrh	r2, [r2, #0]
 8009c88:	4928      	ldr	r1, [pc, #160]	; (8009d2c <CalculateChecksum+0x134>)
 8009c8a:	404a      	eors	r2, r1
 8009c8c:	801a      	strh	r2, [r3, #0]
    while(size > 0)
 8009c8e:	231a      	movs	r3, #26
 8009c90:	18fb      	adds	r3, r7, r3
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1c3      	bne.n	8009c20 <CalculateChecksum+0x28>

    }

    // item b) "push out" the last 16 bits
    int i;
    for (i = 0; i < 16; ++i) {
 8009c98:	2300      	movs	r3, #0
 8009c9a:	613b      	str	r3, [r7, #16]
 8009c9c:	e016      	b.n	8009ccc <CalculateChecksum+0xd4>
        bit_flag = out >> 15;
 8009c9e:	2118      	movs	r1, #24
 8009ca0:	187b      	adds	r3, r7, r1
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	0bdb      	lsrs	r3, r3, #15
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	607b      	str	r3, [r7, #4]
        out <<= 1;
 8009caa:	187a      	adds	r2, r7, r1
 8009cac:	187b      	adds	r3, r7, r1
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	18db      	adds	r3, r3, r3
 8009cb2:	8013      	strh	r3, [r2, #0]
        if(bit_flag)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <CalculateChecksum+0xce>
            out ^= CRC16;
 8009cba:	187b      	adds	r3, r7, r1
 8009cbc:	187a      	adds	r2, r7, r1
 8009cbe:	8812      	ldrh	r2, [r2, #0]
 8009cc0:	491a      	ldr	r1, [pc, #104]	; (8009d2c <CalculateChecksum+0x134>)
 8009cc2:	404a      	eors	r2, r1
 8009cc4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < 16; ++i) {
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b0f      	cmp	r3, #15
 8009cd0:	dde5      	ble.n	8009c9e <CalculateChecksum+0xa6>
    }

    // item c) reverse the bits
    uint16_t crc = 0;
 8009cd2:	230e      	movs	r3, #14
 8009cd4:	18fb      	adds	r3, r7, r3
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	801a      	strh	r2, [r3, #0]
    i = 0x8000;
 8009cda:	2380      	movs	r3, #128	; 0x80
 8009cdc:	021b      	lsls	r3, r3, #8
 8009cde:	613b      	str	r3, [r7, #16]
    int j = 0x0001;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	60bb      	str	r3, [r7, #8]
    for (; i != 0; i >>=1, j <<= 1) {
 8009ce4:	e015      	b.n	8009d12 <CalculateChecksum+0x11a>
        if (i & out) crc |= j;
 8009ce6:	2318      	movs	r3, #24
 8009ce8:	18fb      	adds	r3, r7, r3
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4013      	ands	r3, r2
 8009cf0:	d009      	beq.n	8009d06 <CalculateChecksum+0x10e>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	b21a      	sxth	r2, r3
 8009cf6:	210e      	movs	r1, #14
 8009cf8:	187b      	adds	r3, r7, r1
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	5e1b      	ldrsh	r3, [r3, r0]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	b21a      	sxth	r2, r3
 8009d02:	187b      	adds	r3, r7, r1
 8009d04:	801a      	strh	r2, [r3, #0]
    for (; i != 0; i >>=1, j <<= 1) {
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	105b      	asrs	r3, r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	60bb      	str	r3, [r7, #8]
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <CalculateChecksum+0xee>
    }

    return crc;
 8009d18:	230e      	movs	r3, #14
 8009d1a:	18fb      	adds	r3, r7, r3
 8009d1c:	881b      	ldrh	r3, [r3, #0]
}
 8009d1e:	0018      	movs	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	b008      	add	sp, #32
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	46c0      	nop			; (mov r8, r8)
 8009d28:	200009f4 	.word	0x200009f4
 8009d2c:	ffff8005 	.word	0xffff8005

08009d30 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	e019      	b.n	8009d76 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8009d42:	4b15      	ldr	r3, [pc, #84]	; (8009d98 <HAL_UART_TxCpltCallback+0x68>)
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	0092      	lsls	r2, r2, #2
 8009d48:	58d3      	ldr	r3, [r2, r3]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d10e      	bne.n	8009d70 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8009d52:	4b11      	ldr	r3, [pc, #68]	; (8009d98 <HAL_UART_TxCpltCallback+0x68>)
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	0092      	lsls	r2, r2, #2
 8009d58:	58d3      	ldr	r3, [r2, r3]
 8009d5a:	22ac      	movs	r2, #172	; 0xac
 8009d5c:	5898      	ldr	r0, [r3, r2]
 8009d5e:	2308      	movs	r3, #8
 8009d60:	18fb      	adds	r3, r7, r3
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	2300      	movs	r3, #0
 8009d66:	2200      	movs	r2, #0
 8009d68:	2100      	movs	r1, #0
 8009d6a:	f002 f9d9 	bl	800c120 <xTaskGenericNotifyFromISR>
	   		break;
 8009d6e:	e008      	b.n	8009d82 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	3301      	adds	r3, #1
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <HAL_UART_TxCpltCallback+0x6c>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	001a      	movs	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	dbdf      	blt.n	8009d42 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <HAL_UART_TxCpltCallback+0x60>
 8009d88:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <HAL_UART_TxCpltCallback+0x70>)
 8009d8a:	2280      	movs	r2, #128	; 0x80
 8009d8c:	0552      	lsls	r2, r2, #21
 8009d8e:	601a      	str	r2, [r3, #0]
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8009d90:	46c0      	nop			; (mov r8, r8)
 8009d92:	46bd      	mov	sp, r7
 8009d94:	b004      	add	sp, #16
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	200009e8 	.word	0x200009e8
 8009d9c:	200009f0 	.word	0x200009f0
 8009da0:	e000ed04 	.word	0xe000ed04

08009da4 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8009da4:	b590      	push	{r4, r7, lr}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af02      	add	r7, sp, #8
 8009daa:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8009db0:	2300      	movs	r3, #0
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e043      	b.n	8009e3e <HAL_UART_RxCpltCallback+0x9a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8009db6:	4b2b      	ldr	r3, [pc, #172]	; (8009e64 <HAL_UART_RxCpltCallback+0xc0>)
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	0092      	lsls	r2, r2, #2
 8009dbc:	58d3      	ldr	r3, [r2, r3]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d138      	bne.n	8009e38 <HAL_UART_RxCpltCallback+0x94>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8009dc6:	4b27      	ldr	r3, [pc, #156]	; (8009e64 <HAL_UART_RxCpltCallback+0xc0>)
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	0092      	lsls	r2, r2, #2
 8009dcc:	58d2      	ldr	r2, [r2, r3]
 8009dce:	23a0      	movs	r3, #160	; 0xa0
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	5cd3      	ldrb	r3, [r2, r3]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d139      	bne.n	8009e4c <HAL_UART_RxCpltCallback+0xa8>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8009dd8:	4b22      	ldr	r3, [pc, #136]	; (8009e64 <HAL_UART_RxCpltCallback+0xc0>)
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	0092      	lsls	r2, r2, #2
 8009dde:	58d3      	ldr	r3, [r2, r3]
 8009de0:	33bc      	adds	r3, #188	; 0xbc
 8009de2:	0018      	movs	r0, r3
 8009de4:	4b1f      	ldr	r3, [pc, #124]	; (8009e64 <HAL_UART_RxCpltCallback+0xc0>)
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	0092      	lsls	r2, r2, #2
 8009dea:	58d3      	ldr	r3, [r2, r3]
 8009dec:	22a6      	movs	r2, #166	; 0xa6
 8009dee:	5c9b      	ldrb	r3, [r3, r2]
 8009df0:	0019      	movs	r1, r3
 8009df2:	f7fd fd63 	bl	80078bc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8009df6:	4b1b      	ldr	r3, [pc, #108]	; (8009e64 <HAL_UART_RxCpltCallback+0xc0>)
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	0092      	lsls	r2, r2, #2
 8009dfc:	58d3      	ldr	r3, [r2, r3]
 8009dfe:	6858      	ldr	r0, [r3, #4]
 8009e00:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <HAL_UART_RxCpltCallback+0xc0>)
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	0092      	lsls	r2, r2, #2
 8009e06:	58d3      	ldr	r3, [r2, r3]
 8009e08:	33a6      	adds	r3, #166	; 0xa6
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	0019      	movs	r1, r3
 8009e0e:	f7fc f8e9 	bl	8005fe4 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8009e12:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <HAL_UART_RxCpltCallback+0xc0>)
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	0092      	lsls	r2, r2, #2
 8009e18:	58d3      	ldr	r3, [r2, r3]
 8009e1a:	22b0      	movs	r2, #176	; 0xb0
 8009e1c:	589c      	ldr	r4, [r3, r2]
 8009e1e:	f001 fc3b 	bl	800b698 <xTaskGetTickCountFromISR>
 8009e22:	0001      	movs	r1, r0
 8009e24:	2308      	movs	r3, #8
 8009e26:	18fb      	adds	r3, r7, r3
 8009e28:	2200      	movs	r2, #0
 8009e2a:	9200      	str	r2, [sp, #0]
 8009e2c:	000a      	movs	r2, r1
 8009e2e:	2107      	movs	r1, #7
 8009e30:	0020      	movs	r0, r4
 8009e32:	f002 fbab 	bl	800c58c <xTimerGenericCommand>
    		}
    		break;
 8009e36:	e009      	b.n	8009e4c <HAL_UART_RxCpltCallback+0xa8>
    for (i = 0; i < numberHandlers; i++ )
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <HAL_UART_RxCpltCallback+0xc4>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	001a      	movs	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4293      	cmp	r3, r2
 8009e48:	dbb5      	blt.n	8009db6 <HAL_UART_RxCpltCallback+0x12>
 8009e4a:	e000      	b.n	8009e4e <HAL_UART_RxCpltCallback+0xaa>
    		break;
 8009e4c:	46c0      	nop			; (mov r8, r8)
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <HAL_UART_RxCpltCallback+0xb8>
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <HAL_UART_RxCpltCallback+0xc8>)
 8009e56:	2280      	movs	r2, #128	; 0x80
 8009e58:	0552      	lsls	r2, r2, #21
 8009e5a:	601a      	str	r2, [r3, #0]
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8009e5c:	46c0      	nop			; (mov r8, r8)
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b005      	add	sp, #20
 8009e62:	bd90      	pop	{r4, r7, pc}
 8009e64:	200009e8 	.word	0x200009e8
 8009e68:	200009f0 	.word	0x200009f0
 8009e6c:	e000ed04 	.word	0xe000ed04

08009e70 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e76:	f3ef 8305 	mrs	r3, IPSR
 8009e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d109      	bne.n	8009e96 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e82:	f3ef 8310 	mrs	r3, PRIMASK
 8009e86:	607b      	str	r3, [r7, #4]
  return(result);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <osKernelInitialize+0x2e>
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <osKernelInitialize+0x54>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d103      	bne.n	8009e9e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8009e96:	2306      	movs	r3, #6
 8009e98:	425b      	negs	r3, r3
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	e00c      	b.n	8009eb8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e9e:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <osKernelInitialize+0x54>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d105      	bne.n	8009eb2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009ea6:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <osKernelInitialize+0x54>)
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e002      	b.n	8009eb8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	425b      	negs	r3, r3
 8009eb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
}
 8009eba:	0018      	movs	r0, r3
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	b004      	add	sp, #16
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	20000a10 	.word	0x20000a10

08009ec8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ece:	f3ef 8305 	mrs	r3, IPSR
 8009ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d109      	bne.n	8009eee <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eda:	f3ef 8310 	mrs	r3, PRIMASK
 8009ede:	607b      	str	r3, [r7, #4]
  return(result);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d007      	beq.n	8009ef6 <osKernelStart+0x2e>
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <osKernelStart+0x58>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d103      	bne.n	8009ef6 <osKernelStart+0x2e>
    stat = osErrorISR;
 8009eee:	2306      	movs	r3, #6
 8009ef0:	425b      	negs	r3, r3
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	e00e      	b.n	8009f14 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <osKernelStart+0x58>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d107      	bne.n	8009f0e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8009efe:	4b08      	ldr	r3, [pc, #32]	; (8009f20 <osKernelStart+0x58>)
 8009f00:	2202      	movs	r2, #2
 8009f02:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009f04:	f001 fac4 	bl	800b490 <vTaskStartScheduler>
      stat = osOK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e002      	b.n	8009f14 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	425b      	negs	r3, r3
 8009f12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009f14:	68fb      	ldr	r3, [r7, #12]
}
 8009f16:	0018      	movs	r0, r3
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	b004      	add	sp, #16
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	20000a10 	.word	0x20000a10

08009f24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f24:	b5b0      	push	{r4, r5, r7, lr}
 8009f26:	b090      	sub	sp, #64	; 0x40
 8009f28:	af04      	add	r7, sp, #16
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f30:	2300      	movs	r3, #0
 8009f32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f34:	f3ef 8305 	mrs	r3, IPSR
 8009f38:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f3a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d000      	beq.n	8009f42 <osThreadNew+0x1e>
 8009f40:	e090      	b.n	800a064 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f42:	f3ef 8310 	mrs	r3, PRIMASK
 8009f46:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <osThreadNew+0x34>
 8009f4e:	4b48      	ldr	r3, [pc, #288]	; (800a070 <osThreadNew+0x14c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d100      	bne.n	8009f58 <osThreadNew+0x34>
 8009f56:	e085      	b.n	800a064 <osThreadNew+0x140>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d100      	bne.n	8009f60 <osThreadNew+0x3c>
 8009f5e:	e081      	b.n	800a064 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8009f60:	2380      	movs	r3, #128	; 0x80
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009f64:	2318      	movs	r3, #24
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8009f68:	2117      	movs	r1, #23
 8009f6a:	187b      	adds	r3, r7, r1
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8009f70:	187b      	adds	r3, r7, r1
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8009f74:	2301      	movs	r3, #1
 8009f76:	425b      	negs	r3, r3
 8009f78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d044      	beq.n	800a00a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <osThreadNew+0x6a>
        name = attr->name;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d007      	beq.n	8009fb2 <osThreadNew+0x8e>
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	2b38      	cmp	r3, #56	; 0x38
 8009fa6:	d804      	bhi.n	8009fb2 <osThreadNew+0x8e>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	4013      	ands	r3, r2
 8009fb0:	d001      	beq.n	8009fb6 <osThreadNew+0x92>
        return (NULL);
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e057      	b.n	800a066 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	089b      	lsrs	r3, r3, #2
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00e      	beq.n	8009fec <osThreadNew+0xc8>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2ba7      	cmp	r3, #167	; 0xa7
 8009fd4:	d90a      	bls.n	8009fec <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d006      	beq.n	8009fec <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <osThreadNew+0xc8>
        mem = 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	623b      	str	r3, [r7, #32]
 8009fea:	e010      	b.n	800a00e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10c      	bne.n	800a00e <osThreadNew+0xea>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d108      	bne.n	800a00e <osThreadNew+0xea>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d104      	bne.n	800a00e <osThreadNew+0xea>
          mem = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	623b      	str	r3, [r7, #32]
 800a008:	e001      	b.n	800a00e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d112      	bne.n	800a03a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a01c:	68bd      	ldr	r5, [r7, #8]
 800a01e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800a020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	9302      	str	r3, [sp, #8]
 800a026:	9201      	str	r2, [sp, #4]
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	002b      	movs	r3, r5
 800a02e:	0022      	movs	r2, r4
 800a030:	f001 f89f 	bl	800b172 <xTaskCreateStatic>
 800a034:	0003      	movs	r3, r0
 800a036:	613b      	str	r3, [r7, #16]
 800a038:	e014      	b.n	800a064 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d111      	bne.n	800a064 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	b29a      	uxth	r2, r3
 800a044:	68bc      	ldr	r4, [r7, #8]
 800a046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	2310      	movs	r3, #16
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	0023      	movs	r3, r4
 800a056:	f001 f8cf 	bl	800b1f8 <xTaskCreate>
 800a05a:	0003      	movs	r3, r0
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d001      	beq.n	800a064 <osThreadNew+0x140>
          hTask = NULL;
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a064:	693b      	ldr	r3, [r7, #16]
}
 800a066:	0018      	movs	r0, r3
 800a068:	46bd      	mov	sp, r7
 800a06a:	b00c      	add	sp, #48	; 0x30
 800a06c:	bdb0      	pop	{r4, r5, r7, pc}
 800a06e:	46c0      	nop			; (mov r8, r8)
 800a070:	20000a10 	.word	0x20000a10

0800a074 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	0018      	movs	r0, r3
 800a080:	f002 fd16 	bl	800cab0 <pvTimerGetTimerID>
 800a084:	0003      	movs	r3, r0
 800a086:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <TimerCallback+0x26>
    callb->func (callb->arg);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	0018      	movs	r0, r3
 800a098:	4790      	blx	r2
  }
}
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	46bd      	mov	sp, r7
 800a09e:	b004      	add	sp, #16
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08e      	sub	sp, #56	; 0x38
 800a0a8:	af02      	add	r7, sp, #8
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	603b      	str	r3, [r7, #0]
 800a0b0:	230b      	movs	r3, #11
 800a0b2:	18fb      	adds	r3, r7, r3
 800a0b4:	1c0a      	adds	r2, r1, #0
 800a0b6:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0bc:	f3ef 8305 	mrs	r3, IPSR
 800a0c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a0c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d000      	beq.n	800a0ca <osTimerNew+0x26>
 800a0c8:	e06b      	b.n	800a1a2 <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ce:	617b      	str	r3, [r7, #20]
  return(result);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <osTimerNew+0x3a>
 800a0d6:	4b35      	ldr	r3, [pc, #212]	; (800a1ac <osTimerNew+0x108>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d061      	beq.n	800a1a2 <osTimerNew+0xfe>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d05e      	beq.n	800a1a2 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a0e4:	2008      	movs	r0, #8
 800a0e6:	f002 fe2b 	bl	800cd40 <pvPortMalloc>
 800a0ea:	0003      	movs	r3, r0
 800a0ec:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d056      	beq.n	800a1a2 <osTimerNew+0xfe>
      callb->func = func;
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a100:	230b      	movs	r3, #11
 800a102:	18fb      	adds	r3, r7, r3
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
 800a10e:	e001      	b.n	800a114 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a114:	2301      	movs	r3, #1
 800a116:	425b      	negs	r3, r3
 800a118:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d01c      	beq.n	800a15e <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <osTimerNew+0x8e>
          name = attr->name;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d006      	beq.n	800a148 <osTimerNew+0xa4>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	2b2f      	cmp	r3, #47	; 0x2f
 800a140:	d902      	bls.n	800a148 <osTimerNew+0xa4>
          mem = 1;
 800a142:	2301      	movs	r3, #1
 800a144:	623b      	str	r3, [r7, #32]
 800a146:	e00c      	b.n	800a162 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d108      	bne.n	800a162 <osTimerNew+0xbe>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <osTimerNew+0xbe>
            mem = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	623b      	str	r3, [r7, #32]
 800a15c:	e001      	b.n	800a162 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d10e      	bne.n	800a186 <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	69f9      	ldr	r1, [r7, #28]
 800a16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <osTimerNew+0x10c>)
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	000b      	movs	r3, r1
 800a17a:	2101      	movs	r1, #1
 800a17c:	f002 f9b1 	bl	800c4e2 <xTimerCreateStatic>
 800a180:	0003      	movs	r3, r0
 800a182:	62bb      	str	r3, [r7, #40]	; 0x28
 800a184:	e00d      	b.n	800a1a2 <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a18c:	69f9      	ldr	r1, [r7, #28]
 800a18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a192:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <osTimerNew+0x10c>)
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	000b      	movs	r3, r1
 800a198:	2101      	movs	r1, #1
 800a19a:	f002 f97f 	bl	800c49c <xTimerCreate>
 800a19e:	0003      	movs	r3, r0
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	b00c      	add	sp, #48	; 0x30
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000a10 	.word	0x20000a10
 800a1b0:	0800a075 	.word	0x0800a075

0800a1b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08c      	sub	sp, #48	; 0x30
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c4:	f3ef 8305 	mrs	r3, IPSR
 800a1c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a1ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d000      	beq.n	800a1d2 <osSemaphoreNew+0x1e>
 800a1d0:	e08a      	b.n	800a2e8 <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d6:	617b      	str	r3, [r7, #20]
  return(result);
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d004      	beq.n	800a1e8 <osSemaphoreNew+0x34>
 800a1de:	4b45      	ldr	r3, [pc, #276]	; (800a2f4 <osSemaphoreNew+0x140>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d100      	bne.n	800a1e8 <osSemaphoreNew+0x34>
 800a1e6:	e07f      	b.n	800a2e8 <osSemaphoreNew+0x134>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d100      	bne.n	800a1f0 <osSemaphoreNew+0x3c>
 800a1ee:	e07b      	b.n	800a2e8 <osSemaphoreNew+0x134>
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d900      	bls.n	800a1fa <osSemaphoreNew+0x46>
 800a1f8:	e076      	b.n	800a2e8 <osSemaphoreNew+0x134>
    mem = -1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	425b      	negs	r3, r3
 800a1fe:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d015      	beq.n	800a232 <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d006      	beq.n	800a21c <osSemaphoreNew+0x68>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b4f      	cmp	r3, #79	; 0x4f
 800a214:	d902      	bls.n	800a21c <osSemaphoreNew+0x68>
        mem = 1;
 800a216:	2301      	movs	r3, #1
 800a218:	623b      	str	r3, [r7, #32]
 800a21a:	e00c      	b.n	800a236 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d108      	bne.n	800a236 <osSemaphoreNew+0x82>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <osSemaphoreNew+0x82>
          mem = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	623b      	str	r3, [r7, #32]
 800a230:	e001      	b.n	800a236 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	3301      	adds	r3, #1
 800a23a:	d055      	beq.n	800a2e8 <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d12b      	bne.n	800a29a <osSemaphoreNew+0xe6>
        if (mem == 1) {
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d10b      	bne.n	800a260 <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	2203      	movs	r2, #3
 800a24e:	9200      	str	r2, [sp, #0]
 800a250:	2200      	movs	r2, #0
 800a252:	2100      	movs	r1, #0
 800a254:	2001      	movs	r0, #1
 800a256:	f000 fa02 	bl	800a65e <xQueueGenericCreateStatic>
 800a25a:	0003      	movs	r3, r0
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
 800a25e:	e006      	b.n	800a26e <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a260:	2203      	movs	r2, #3
 800a262:	2100      	movs	r1, #0
 800a264:	2001      	movs	r0, #1
 800a266:	f000 fa45 	bl	800a6f4 <xQueueGenericCreate>
 800a26a:	0003      	movs	r3, r0
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	d027      	beq.n	800a2c4 <osSemaphoreNew+0x110>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d024      	beq.n	800a2c4 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a27a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a27c:	2300      	movs	r3, #0
 800a27e:	2200      	movs	r2, #0
 800a280:	2100      	movs	r1, #0
 800a282:	f000 fadd 	bl	800a840 <xQueueGenericSend>
 800a286:	0003      	movs	r3, r0
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d01b      	beq.n	800a2c4 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	0018      	movs	r0, r3
 800a290:	f000 fd9a 	bl	800adc8 <vQueueDelete>
            hSemaphore = NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	627b      	str	r3, [r7, #36]	; 0x24
 800a298:	e014      	b.n	800a2c4 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d109      	bne.n	800a2b4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f000 fa80 	bl	800a7ae <xQueueCreateCountingSemaphoreStatic>
 800a2ae:	0003      	movs	r3, r0
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b2:	e007      	b.n	800a2c4 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	0011      	movs	r1, r2
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f000 fa9d 	bl	800a7fa <xQueueCreateCountingSemaphore>
 800a2c0:	0003      	movs	r3, r0
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00e      	beq.n	800a2e8 <osSemaphoreNew+0x134>
        if (attr != NULL) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <osSemaphoreNew+0x124>
          name = attr->name;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	61fb      	str	r3, [r7, #28]
 800a2d6:	e001      	b.n	800a2dc <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	0011      	movs	r1, r2
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f000 fec0 	bl	800b068 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	b00a      	add	sp, #40	; 0x28
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	46c0      	nop			; (mov r8, r8)
 800a2f4:	20000a10 	.word	0x20000a10

0800a2f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a2f8:	b590      	push	{r4, r7, lr}
 800a2fa:	b08d      	sub	sp, #52	; 0x34
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a304:	2300      	movs	r3, #0
 800a306:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a308:	f3ef 8305 	mrs	r3, IPSR
 800a30c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a30e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a310:	2b00      	cmp	r3, #0
 800a312:	d000      	beq.n	800a316 <osMessageQueueNew+0x1e>
 800a314:	e06f      	b.n	800a3f6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a316:	f3ef 8310 	mrs	r3, PRIMASK
 800a31a:	617b      	str	r3, [r7, #20]
  return(result);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d004      	beq.n	800a32c <osMessageQueueNew+0x34>
 800a322:	4b37      	ldr	r3, [pc, #220]	; (800a400 <osMessageQueueNew+0x108>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b02      	cmp	r3, #2
 800a328:	d100      	bne.n	800a32c <osMessageQueueNew+0x34>
 800a32a:	e064      	b.n	800a3f6 <osMessageQueueNew+0xfe>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d100      	bne.n	800a334 <osMessageQueueNew+0x3c>
 800a332:	e060      	b.n	800a3f6 <osMessageQueueNew+0xfe>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d05d      	beq.n	800a3f6 <osMessageQueueNew+0xfe>
    mem = -1;
 800a33a:	2301      	movs	r3, #1
 800a33c:	425b      	negs	r3, r3
 800a33e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d028      	beq.n	800a398 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d011      	beq.n	800a372 <osMessageQueueNew+0x7a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	2b4f      	cmp	r3, #79	; 0x4f
 800a354:	d90d      	bls.n	800a372 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d009      	beq.n	800a372 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	695a      	ldr	r2, [r3, #20]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	68b9      	ldr	r1, [r7, #8]
 800a366:	434b      	muls	r3, r1
 800a368:	429a      	cmp	r2, r3
 800a36a:	d302      	bcc.n	800a372 <osMessageQueueNew+0x7a>
        mem = 1;
 800a36c:	2301      	movs	r3, #1
 800a36e:	623b      	str	r3, [r7, #32]
 800a370:	e014      	b.n	800a39c <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d110      	bne.n	800a39c <osMessageQueueNew+0xa4>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10c      	bne.n	800a39c <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a386:	2b00      	cmp	r3, #0
 800a388:	d108      	bne.n	800a39c <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d104      	bne.n	800a39c <osMessageQueueNew+0xa4>
          mem = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	623b      	str	r3, [r7, #32]
 800a396:	e001      	b.n	800a39c <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d10c      	bne.n	800a3bc <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	68b9      	ldr	r1, [r7, #8]
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	2400      	movs	r4, #0
 800a3b0:	9400      	str	r4, [sp, #0]
 800a3b2:	f000 f954 	bl	800a65e <xQueueGenericCreateStatic>
 800a3b6:	0003      	movs	r3, r0
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ba:	e00a      	b.n	800a3d2 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d107      	bne.n	800a3d2 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f000 f993 	bl	800a6f4 <xQueueGenericCreate>
 800a3ce:	0003      	movs	r3, r0
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00e      	beq.n	800a3f6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <osMessageQueueNew+0xee>
        name = attr->name;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	e001      	b.n	800a3ea <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	0011      	movs	r1, r2
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f000 fe39 	bl	800b068 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b00b      	add	sp, #44	; 0x2c
 800a3fe:	bd90      	pop	{r4, r7, pc}
 800a400:	20000a10 	.word	0x20000a10

0800a404 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4a06      	ldr	r2, [pc, #24]	; (800a42c <vApplicationGetIdleTaskMemory+0x28>)
 800a414:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4a05      	ldr	r2, [pc, #20]	; (800a430 <vApplicationGetIdleTaskMemory+0x2c>)
 800a41a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2280      	movs	r2, #128	; 0x80
 800a420:	601a      	str	r2, [r3, #0]
}
 800a422:	46c0      	nop			; (mov r8, r8)
 800a424:	46bd      	mov	sp, r7
 800a426:	b004      	add	sp, #16
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	20000a14 	.word	0x20000a14
 800a430:	20000abc 	.word	0x20000abc

0800a434 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4a06      	ldr	r2, [pc, #24]	; (800a45c <vApplicationGetTimerTaskMemory+0x28>)
 800a444:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4a05      	ldr	r2, [pc, #20]	; (800a460 <vApplicationGetTimerTaskMemory+0x2c>)
 800a44a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2280      	movs	r2, #128	; 0x80
 800a450:	0052      	lsls	r2, r2, #1
 800a452:	601a      	str	r2, [r3, #0]
}
 800a454:	46c0      	nop			; (mov r8, r8)
 800a456:	46bd      	mov	sp, r7
 800a458:	b004      	add	sp, #16
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20000cbc 	.word	0x20000cbc
 800a460:	20000d64 	.word	0x20000d64

0800a464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3308      	adds	r3, #8
 800a470:	001a      	movs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	4252      	negs	r2, r2
 800a47c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3308      	adds	r3, #8
 800a482:	001a      	movs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3308      	adds	r3, #8
 800a48c:	001a      	movs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a498:	46c0      	nop			; (mov r8, r8)
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b002      	add	sp, #8
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ae:	46c0      	nop			; (mov r8, r8)
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	b002      	add	sp, #8
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
}
 800a4f2:	46c0      	nop			; (mov r8, r8)
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	b004      	add	sp, #16
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	3301      	adds	r3, #1
 800a50e:	d103      	bne.n	800a518 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	e00c      	b.n	800a532 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3308      	adds	r3, #8
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	e002      	b.n	800a526 <vListInsert+0x2c>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d2f6      	bcs.n	800a520 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	601a      	str	r2, [r3, #0]
}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	46bd      	mov	sp, r7
 800a562:	b004      	add	sp, #16
 800a564:	bd80      	pop	{r7, pc}

0800a566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	6892      	ldr	r2, [r2, #8]
 800a57c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6852      	ldr	r2, [r2, #4]
 800a586:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d103      	bne.n	800a59a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689a      	ldr	r2, [r3, #8]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	1e5a      	subs	r2, r3, #1
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
}
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	b004      	add	sp, #16
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <xQueueGenericReset+0x18>
 800a5ca:	b672      	cpsid	i
 800a5cc:	e7fe      	b.n	800a5cc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800a5ce:	f002 fb1f 	bl	800cc10 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5de:	434b      	muls	r3, r1
 800a5e0:	18d2      	adds	r2, r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fc:	1e59      	subs	r1, r3, #1
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a602:	434b      	muls	r3, r1
 800a604:	18d2      	adds	r2, r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2244      	movs	r2, #68	; 0x44
 800a60e:	21ff      	movs	r1, #255	; 0xff
 800a610:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2245      	movs	r2, #69	; 0x45
 800a616:	21ff      	movs	r1, #255	; 0xff
 800a618:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10d      	bne.n	800a63c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d013      	beq.n	800a650 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3310      	adds	r3, #16
 800a62c:	0018      	movs	r0, r3
 800a62e:	f001 f995 	bl	800b95c <xTaskRemoveFromEventList>
 800a632:	1e03      	subs	r3, r0, #0
 800a634:	d00c      	beq.n	800a650 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a636:	f002 fadb 	bl	800cbf0 <vPortYield>
 800a63a:	e009      	b.n	800a650 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3310      	adds	r3, #16
 800a640:	0018      	movs	r0, r3
 800a642:	f7ff ff0f 	bl	800a464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3324      	adds	r3, #36	; 0x24
 800a64a:	0018      	movs	r0, r3
 800a64c:	f7ff ff0a 	bl	800a464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a650:	f002 faf0 	bl	800cc34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a654:	2301      	movs	r3, #1
}
 800a656:	0018      	movs	r0, r3
 800a658:	46bd      	mov	sp, r7
 800a65a:	b004      	add	sp, #16
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a65e:	b590      	push	{r4, r7, lr}
 800a660:	b089      	sub	sp, #36	; 0x24
 800a662:	af02      	add	r7, sp, #8
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
 800a66a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <xQueueGenericCreateStatic+0x18>
 800a672:	b672      	cpsid	i
 800a674:	e7fe      	b.n	800a674 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <xQueueGenericCreateStatic+0x22>
 800a67c:	b672      	cpsid	i
 800a67e:	e7fe      	b.n	800a67e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <xQueueGenericCreateStatic+0x2e>
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <xQueueGenericCreateStatic+0x32>
 800a68c:	2301      	movs	r3, #1
 800a68e:	e000      	b.n	800a692 <xQueueGenericCreateStatic+0x34>
 800a690:	2300      	movs	r3, #0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <xQueueGenericCreateStatic+0x3c>
 800a696:	b672      	cpsid	i
 800a698:	e7fe      	b.n	800a698 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d102      	bne.n	800a6a6 <xQueueGenericCreateStatic+0x48>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <xQueueGenericCreateStatic+0x4c>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e000      	b.n	800a6ac <xQueueGenericCreateStatic+0x4e>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <xQueueGenericCreateStatic+0x56>
 800a6b0:	b672      	cpsid	i
 800a6b2:	e7fe      	b.n	800a6b2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6b4:	2350      	movs	r3, #80	; 0x50
 800a6b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	2b50      	cmp	r3, #80	; 0x50
 800a6bc:	d001      	beq.n	800a6c2 <xQueueGenericCreateStatic+0x64>
 800a6be:	b672      	cpsid	i
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00e      	beq.n	800a6ea <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2246      	movs	r2, #70	; 0x46
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6d4:	2328      	movs	r3, #40	; 0x28
 800a6d6:	18fb      	adds	r3, r7, r3
 800a6d8:	781c      	ldrb	r4, [r3, #0]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	0023      	movs	r3, r4
 800a6e6:	f000 f83b 	bl	800a760 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a6ea:	697b      	ldr	r3, [r7, #20]
	}
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	b007      	add	sp, #28
 800a6f2:	bd90      	pop	{r4, r7, pc}

0800a6f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a6f4:	b590      	push	{r4, r7, lr}
 800a6f6:	b08b      	sub	sp, #44	; 0x2c
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	1dfb      	adds	r3, r7, #7
 800a700:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <xQueueGenericCreate+0x18>
 800a708:	b672      	cpsid	i
 800a70a:	e7fe      	b.n	800a70a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d102      	bne.n	800a718 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a712:	2300      	movs	r3, #0
 800a714:	61fb      	str	r3, [r7, #28]
 800a716:	e003      	b.n	800a720 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	4353      	muls	r3, r2
 800a71e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	3350      	adds	r3, #80	; 0x50
 800a724:	0018      	movs	r0, r3
 800a726:	f002 fb0b 	bl	800cd40 <pvPortMalloc>
 800a72a:	0003      	movs	r3, r0
 800a72c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d010      	beq.n	800a756 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	3350      	adds	r3, #80	; 0x50
 800a738:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	2246      	movs	r2, #70	; 0x46
 800a73e:	2100      	movs	r1, #0
 800a740:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a742:	1dfb      	adds	r3, r7, #7
 800a744:	781c      	ldrb	r4, [r3, #0]
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	68b9      	ldr	r1, [r7, #8]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	0023      	movs	r3, r4
 800a752:	f000 f805 	bl	800a760 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a756:	69bb      	ldr	r3, [r7, #24]
	}
 800a758:	0018      	movs	r0, r3
 800a75a:	46bd      	mov	sp, r7
 800a75c:	b009      	add	sp, #36	; 0x24
 800a75e:	bd90      	pop	{r4, r7, pc}

0800a760 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	001a      	movs	r2, r3
 800a76e:	1cfb      	adds	r3, r7, #3
 800a770:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	69ba      	ldr	r2, [r7, #24]
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	e002      	b.n	800a786 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2101      	movs	r1, #1
 800a796:	0018      	movs	r0, r3
 800a798:	f7ff ff0d 	bl	800a5b6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	1cfa      	adds	r2, r7, #3
 800a7a0:	214c      	movs	r1, #76	; 0x4c
 800a7a2:	7812      	ldrb	r2, [r2, #0]
 800a7a4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7a6:	46c0      	nop			; (mov r8, r8)
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	b004      	add	sp, #16
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b088      	sub	sp, #32
 800a7b2:	af02      	add	r7, sp, #8
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <xQueueCreateCountingSemaphoreStatic+0x16>
 800a7c0:	b672      	cpsid	i
 800a7c2:	e7fe      	b.n	800a7c2 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d901      	bls.n	800a7d0 <xQueueCreateCountingSemaphoreStatic+0x22>
 800a7cc:	b672      	cpsid	i
 800a7ce:	e7fe      	b.n	800a7ce <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	9200      	str	r2, [sp, #0]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2100      	movs	r1, #0
 800a7dc:	f7ff ff3f 	bl	800a65e <xQueueGenericCreateStatic>
 800a7e0:	0003      	movs	r3, r0
 800a7e2:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7f0:	697b      	ldr	r3, [r7, #20]
	}
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	b006      	add	sp, #24
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <xQueueCreateCountingSemaphore+0x14>
 800a80a:	b672      	cpsid	i
 800a80c:	e7fe      	b.n	800a80c <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d901      	bls.n	800a81a <xQueueCreateCountingSemaphore+0x20>
 800a816:	b672      	cpsid	i
 800a818:	e7fe      	b.n	800a818 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2202      	movs	r2, #2
 800a81e:	2100      	movs	r1, #0
 800a820:	0018      	movs	r0, r3
 800a822:	f7ff ff67 	bl	800a6f4 <xQueueGenericCreate>
 800a826:	0003      	movs	r3, r0
 800a828:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a836:	68fb      	ldr	r3, [r7, #12]
	}
 800a838:	0018      	movs	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b004      	add	sp, #16
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	; 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a84e:	2300      	movs	r3, #0
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <xQueueGenericSend+0x20>
 800a85c:	b672      	cpsid	i
 800a85e:	e7fe      	b.n	800a85e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d103      	bne.n	800a86e <xQueueGenericSend+0x2e>
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <xQueueGenericSend+0x32>
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <xQueueGenericSend+0x34>
 800a872:	2300      	movs	r3, #0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <xQueueGenericSend+0x3c>
 800a878:	b672      	cpsid	i
 800a87a:	e7fe      	b.n	800a87a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d103      	bne.n	800a88a <xQueueGenericSend+0x4a>
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <xQueueGenericSend+0x4e>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e000      	b.n	800a890 <xQueueGenericSend+0x50>
 800a88e:	2300      	movs	r3, #0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <xQueueGenericSend+0x58>
 800a894:	b672      	cpsid	i
 800a896:	e7fe      	b.n	800a896 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a898:	f001 f9fe 	bl	800bc98 <xTaskGetSchedulerState>
 800a89c:	1e03      	subs	r3, r0, #0
 800a89e:	d102      	bne.n	800a8a6 <xQueueGenericSend+0x66>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <xQueueGenericSend+0x6a>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e000      	b.n	800a8ac <xQueueGenericSend+0x6c>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <xQueueGenericSend+0x74>
 800a8b0:	b672      	cpsid	i
 800a8b2:	e7fe      	b.n	800a8b2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8b4:	f002 f9ac 	bl	800cc10 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d302      	bcc.n	800a8ca <xQueueGenericSend+0x8a>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d11e      	bne.n	800a908 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f000 faab 	bl	800ae2c <prvCopyDataToQueue>
 800a8d6:	0003      	movs	r3, r0
 800a8d8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d009      	beq.n	800a8f6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	3324      	adds	r3, #36	; 0x24
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f001 f838 	bl	800b95c <xTaskRemoveFromEventList>
 800a8ec:	1e03      	subs	r3, r0, #0
 800a8ee:	d007      	beq.n	800a900 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8f0:	f002 f97e 	bl	800cbf0 <vPortYield>
 800a8f4:	e004      	b.n	800a900 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8fc:	f002 f978 	bl	800cbf0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a900:	f002 f998 	bl	800cc34 <vPortExitCritical>
				return pdPASS;
 800a904:	2301      	movs	r3, #1
 800a906:	e05b      	b.n	800a9c0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d103      	bne.n	800a916 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a90e:	f002 f991 	bl	800cc34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a912:	2300      	movs	r3, #0
 800a914:	e054      	b.n	800a9c0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a91c:	2314      	movs	r3, #20
 800a91e:	18fb      	adds	r3, r7, r3
 800a920:	0018      	movs	r0, r3
 800a922:	f001 f877 	bl	800ba14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a926:	2301      	movs	r3, #1
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a92a:	f002 f983 	bl	800cc34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a92e:	f000 fe0d 	bl	800b54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a932:	f002 f96d 	bl	800cc10 <vPortEnterCritical>
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	2244      	movs	r2, #68	; 0x44
 800a93a:	5c9b      	ldrb	r3, [r3, r2]
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	3301      	adds	r3, #1
 800a940:	d103      	bne.n	800a94a <xQueueGenericSend+0x10a>
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	2244      	movs	r2, #68	; 0x44
 800a946:	2100      	movs	r1, #0
 800a948:	5499      	strb	r1, [r3, r2]
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	2245      	movs	r2, #69	; 0x45
 800a94e:	5c9b      	ldrb	r3, [r3, r2]
 800a950:	b25b      	sxtb	r3, r3
 800a952:	3301      	adds	r3, #1
 800a954:	d103      	bne.n	800a95e <xQueueGenericSend+0x11e>
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	2245      	movs	r2, #69	; 0x45
 800a95a:	2100      	movs	r1, #0
 800a95c:	5499      	strb	r1, [r3, r2]
 800a95e:	f002 f969 	bl	800cc34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a962:	1d3a      	adds	r2, r7, #4
 800a964:	2314      	movs	r3, #20
 800a966:	18fb      	adds	r3, r7, r3
 800a968:	0011      	movs	r1, r2
 800a96a:	0018      	movs	r0, r3
 800a96c:	f001 f866 	bl	800ba3c <xTaskCheckForTimeOut>
 800a970:	1e03      	subs	r3, r0, #0
 800a972:	d11e      	bne.n	800a9b2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	0018      	movs	r0, r3
 800a978:	f000 fb5d 	bl	800b036 <prvIsQueueFull>
 800a97c:	1e03      	subs	r3, r0, #0
 800a97e:	d011      	beq.n	800a9a4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	3310      	adds	r3, #16
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	0011      	movs	r1, r2
 800a988:	0018      	movs	r0, r3
 800a98a:	f000 ffa3 	bl	800b8d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	0018      	movs	r0, r3
 800a992:	f000 fadc 	bl	800af4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a996:	f000 fde5 	bl	800b564 <xTaskResumeAll>
 800a99a:	1e03      	subs	r3, r0, #0
 800a99c:	d18a      	bne.n	800a8b4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800a99e:	f002 f927 	bl	800cbf0 <vPortYield>
 800a9a2:	e787      	b.n	800a8b4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	f000 fad1 	bl	800af4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ac:	f000 fdda 	bl	800b564 <xTaskResumeAll>
 800a9b0:	e780      	b.n	800a8b4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	0018      	movs	r0, r3
 800a9b6:	f000 faca 	bl	800af4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9ba:	f000 fdd3 	bl	800b564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9be:	2300      	movs	r3, #0
		}
	}
}
 800a9c0:	0018      	movs	r0, r3
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	b00a      	add	sp, #40	; 0x28
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9c8:	b590      	push	{r4, r7, lr}
 800a9ca:	b089      	sub	sp, #36	; 0x24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <xQueueGenericSendFromISR+0x1c>
 800a9e0:	b672      	cpsid	i
 800a9e2:	e7fe      	b.n	800a9e2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <xQueueGenericSendFromISR+0x2a>
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <xQueueGenericSendFromISR+0x2e>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <xQueueGenericSendFromISR+0x30>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d101      	bne.n	800aa00 <xQueueGenericSendFromISR+0x38>
 800a9fc:	b672      	cpsid	i
 800a9fe:	e7fe      	b.n	800a9fe <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d103      	bne.n	800aa0e <xQueueGenericSendFromISR+0x46>
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d101      	bne.n	800aa12 <xQueueGenericSendFromISR+0x4a>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <xQueueGenericSendFromISR+0x4c>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <xQueueGenericSendFromISR+0x54>
 800aa18:	b672      	cpsid	i
 800aa1a:	e7fe      	b.n	800aa1a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa1c:	f002 f922 	bl	800cc64 <ulSetInterruptMaskFromISR>
 800aa20:	0003      	movs	r3, r0
 800aa22:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d302      	bcc.n	800aa36 <xQueueGenericSendFromISR+0x6e>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d12e      	bne.n	800aa94 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa36:	2413      	movs	r4, #19
 800aa38:	193b      	adds	r3, r7, r4
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	2145      	movs	r1, #69	; 0x45
 800aa3e:	5c52      	ldrb	r2, [r2, r1]
 800aa40:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	68b9      	ldr	r1, [r7, #8]
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f000 f9ef 	bl	800ae2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa4e:	193b      	adds	r3, r7, r4
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	b25b      	sxtb	r3, r3
 800aa54:	3301      	adds	r3, #1
 800aa56:	d111      	bne.n	800aa7c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d016      	beq.n	800aa8e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	3324      	adds	r3, #36	; 0x24
 800aa64:	0018      	movs	r0, r3
 800aa66:	f000 ff79 	bl	800b95c <xTaskRemoveFromEventList>
 800aa6a:	1e03      	subs	r3, r0, #0
 800aa6c:	d00f      	beq.n	800aa8e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00c      	beq.n	800aa8e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	e008      	b.n	800aa8e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa7c:	2313      	movs	r3, #19
 800aa7e:	18fb      	adds	r3, r7, r3
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	b259      	sxtb	r1, r3
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	2245      	movs	r2, #69	; 0x45
 800aa8c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	61fb      	str	r3, [r7, #28]
		{
 800aa92:	e001      	b.n	800aa98 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	f002 f8e8 	bl	800cc70 <vClearInterruptMaskFromISR>

	return xReturn;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
}
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	b009      	add	sp, #36	; 0x24
 800aaa8:	bd90      	pop	{r4, r7, pc}

0800aaaa <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b08a      	sub	sp, #40	; 0x28
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <xQueueReceive+0x1e>
 800aac4:	b672      	cpsid	i
 800aac6:	e7fe      	b.n	800aac6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d103      	bne.n	800aad6 <xQueueReceive+0x2c>
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <xQueueReceive+0x30>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <xQueueReceive+0x32>
 800aada:	2300      	movs	r3, #0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <xQueueReceive+0x3a>
 800aae0:	b672      	cpsid	i
 800aae2:	e7fe      	b.n	800aae2 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aae4:	f001 f8d8 	bl	800bc98 <xTaskGetSchedulerState>
 800aae8:	1e03      	subs	r3, r0, #0
 800aaea:	d102      	bne.n	800aaf2 <xQueueReceive+0x48>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <xQueueReceive+0x4c>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <xQueueReceive+0x4e>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <xQueueReceive+0x56>
 800aafc:	b672      	cpsid	i
 800aafe:	e7fe      	b.n	800aafe <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab00:	f002 f886 	bl	800cc10 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d01a      	beq.n	800ab46 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	0011      	movs	r1, r2
 800ab16:	0018      	movs	r0, r3
 800ab18:	f000 f9f3 	bl	800af02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d008      	beq.n	800ab3e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	3310      	adds	r3, #16
 800ab30:	0018      	movs	r0, r3
 800ab32:	f000 ff13 	bl	800b95c <xTaskRemoveFromEventList>
 800ab36:	1e03      	subs	r3, r0, #0
 800ab38:	d001      	beq.n	800ab3e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab3a:	f002 f859 	bl	800cbf0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab3e:	f002 f879 	bl	800cc34 <vPortExitCritical>
				return pdPASS;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e062      	b.n	800ac0c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d103      	bne.n	800ab54 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab4c:	f002 f872 	bl	800cc34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e05b      	b.n	800ac0c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab5a:	2314      	movs	r3, #20
 800ab5c:	18fb      	adds	r3, r7, r3
 800ab5e:	0018      	movs	r0, r3
 800ab60:	f000 ff58 	bl	800ba14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab64:	2301      	movs	r3, #1
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab68:	f002 f864 	bl	800cc34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab6c:	f000 fcee 	bl	800b54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab70:	f002 f84e 	bl	800cc10 <vPortEnterCritical>
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	2244      	movs	r2, #68	; 0x44
 800ab78:	5c9b      	ldrb	r3, [r3, r2]
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	d103      	bne.n	800ab88 <xQueueReceive+0xde>
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	2244      	movs	r2, #68	; 0x44
 800ab84:	2100      	movs	r1, #0
 800ab86:	5499      	strb	r1, [r3, r2]
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	2245      	movs	r2, #69	; 0x45
 800ab8c:	5c9b      	ldrb	r3, [r3, r2]
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	3301      	adds	r3, #1
 800ab92:	d103      	bne.n	800ab9c <xQueueReceive+0xf2>
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	2245      	movs	r2, #69	; 0x45
 800ab98:	2100      	movs	r1, #0
 800ab9a:	5499      	strb	r1, [r3, r2]
 800ab9c:	f002 f84a 	bl	800cc34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba0:	1d3a      	adds	r2, r7, #4
 800aba2:	2314      	movs	r3, #20
 800aba4:	18fb      	adds	r3, r7, r3
 800aba6:	0011      	movs	r1, r2
 800aba8:	0018      	movs	r0, r3
 800abaa:	f000 ff47 	bl	800ba3c <xTaskCheckForTimeOut>
 800abae:	1e03      	subs	r3, r0, #0
 800abb0:	d11e      	bne.n	800abf0 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	0018      	movs	r0, r3
 800abb6:	f000 fa28 	bl	800b00a <prvIsQueueEmpty>
 800abba:	1e03      	subs	r3, r0, #0
 800abbc:	d011      	beq.n	800abe2 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	3324      	adds	r3, #36	; 0x24
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	0011      	movs	r1, r2
 800abc6:	0018      	movs	r0, r3
 800abc8:	f000 fe84 	bl	800b8d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	0018      	movs	r0, r3
 800abd0:	f000 f9bd 	bl	800af4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abd4:	f000 fcc6 	bl	800b564 <xTaskResumeAll>
 800abd8:	1e03      	subs	r3, r0, #0
 800abda:	d191      	bne.n	800ab00 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800abdc:	f002 f808 	bl	800cbf0 <vPortYield>
 800abe0:	e78e      	b.n	800ab00 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	0018      	movs	r0, r3
 800abe6:	f000 f9b2 	bl	800af4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abea:	f000 fcbb 	bl	800b564 <xTaskResumeAll>
 800abee:	e787      	b.n	800ab00 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	0018      	movs	r0, r3
 800abf4:	f000 f9ab 	bl	800af4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abf8:	f000 fcb4 	bl	800b564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	0018      	movs	r0, r3
 800ac00:	f000 fa03 	bl	800b00a <prvIsQueueEmpty>
 800ac04:	1e03      	subs	r3, r0, #0
 800ac06:	d100      	bne.n	800ac0a <xQueueReceive+0x160>
 800ac08:	e77a      	b.n	800ab00 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	b00a      	add	sp, #40	; 0x28
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <xQueueSemaphoreTake+0x20>
 800ac30:	b672      	cpsid	i
 800ac32:	e7fe      	b.n	800ac32 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <xQueueSemaphoreTake+0x2c>
 800ac3c:	b672      	cpsid	i
 800ac3e:	e7fe      	b.n	800ac3e <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac40:	f001 f82a 	bl	800bc98 <xTaskGetSchedulerState>
 800ac44:	1e03      	subs	r3, r0, #0
 800ac46:	d102      	bne.n	800ac4e <xQueueSemaphoreTake+0x3a>
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <xQueueSemaphoreTake+0x3e>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e000      	b.n	800ac54 <xQueueSemaphoreTake+0x40>
 800ac52:	2300      	movs	r3, #0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <xQueueSemaphoreTake+0x48>
 800ac58:	b672      	cpsid	i
 800ac5a:	e7fe      	b.n	800ac5a <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac5c:	f001 ffd8 	bl	800cc10 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01d      	beq.n	800aca8 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	1e5a      	subs	r2, r3, #1
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ac7c:	f001 f966 	bl	800bf4c <pvTaskIncrementMutexHeldCount>
 800ac80:	0002      	movs	r2, r0
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d008      	beq.n	800aca0 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	3310      	adds	r3, #16
 800ac92:	0018      	movs	r0, r3
 800ac94:	f000 fe62 	bl	800b95c <xTaskRemoveFromEventList>
 800ac98:	1e03      	subs	r3, r0, #0
 800ac9a:	d001      	beq.n	800aca0 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac9c:	f001 ffa8 	bl	800cbf0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aca0:	f001 ffc8 	bl	800cc34 <vPortExitCritical>
				return pdPASS;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e08b      	b.n	800adc0 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d108      	bne.n	800acc0 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <xQueueSemaphoreTake+0xa4>
 800acb4:	b672      	cpsid	i
 800acb6:	e7fe      	b.n	800acb6 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800acb8:	f001 ffbc 	bl	800cc34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acbc:	2300      	movs	r3, #0
 800acbe:	e07f      	b.n	800adc0 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acc6:	230c      	movs	r3, #12
 800acc8:	18fb      	adds	r3, r7, r3
 800acca:	0018      	movs	r0, r3
 800accc:	f000 fea2 	bl	800ba14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acd0:	2301      	movs	r3, #1
 800acd2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acd4:	f001 ffae 	bl	800cc34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acd8:	f000 fc38 	bl	800b54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acdc:	f001 ff98 	bl	800cc10 <vPortEnterCritical>
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	2244      	movs	r2, #68	; 0x44
 800ace4:	5c9b      	ldrb	r3, [r3, r2]
 800ace6:	b25b      	sxtb	r3, r3
 800ace8:	3301      	adds	r3, #1
 800acea:	d103      	bne.n	800acf4 <xQueueSemaphoreTake+0xe0>
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2244      	movs	r2, #68	; 0x44
 800acf0:	2100      	movs	r1, #0
 800acf2:	5499      	strb	r1, [r3, r2]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	2245      	movs	r2, #69	; 0x45
 800acf8:	5c9b      	ldrb	r3, [r3, r2]
 800acfa:	b25b      	sxtb	r3, r3
 800acfc:	3301      	adds	r3, #1
 800acfe:	d103      	bne.n	800ad08 <xQueueSemaphoreTake+0xf4>
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	2245      	movs	r2, #69	; 0x45
 800ad04:	2100      	movs	r1, #0
 800ad06:	5499      	strb	r1, [r3, r2]
 800ad08:	f001 ff94 	bl	800cc34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad0c:	003a      	movs	r2, r7
 800ad0e:	230c      	movs	r3, #12
 800ad10:	18fb      	adds	r3, r7, r3
 800ad12:	0011      	movs	r1, r2
 800ad14:	0018      	movs	r0, r3
 800ad16:	f000 fe91 	bl	800ba3c <xTaskCheckForTimeOut>
 800ad1a:	1e03      	subs	r3, r0, #0
 800ad1c:	d12e      	bne.n	800ad7c <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	0018      	movs	r0, r3
 800ad22:	f000 f972 	bl	800b00a <prvIsQueueEmpty>
 800ad26:	1e03      	subs	r3, r0, #0
 800ad28:	d021      	beq.n	800ad6e <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10a      	bne.n	800ad48 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800ad32:	f001 ff6d 	bl	800cc10 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	f000 ffc8 	bl	800bcd0 <xTaskPriorityInherit>
 800ad40:	0003      	movs	r3, r0
 800ad42:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800ad44:	f001 ff76 	bl	800cc34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	3324      	adds	r3, #36	; 0x24
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	0011      	movs	r1, r2
 800ad50:	0018      	movs	r0, r3
 800ad52:	f000 fdbf 	bl	800b8d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	0018      	movs	r0, r3
 800ad5a:	f000 f8f8 	bl	800af4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad5e:	f000 fc01 	bl	800b564 <xTaskResumeAll>
 800ad62:	1e03      	subs	r3, r0, #0
 800ad64:	d000      	beq.n	800ad68 <xQueueSemaphoreTake+0x154>
 800ad66:	e779      	b.n	800ac5c <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800ad68:	f001 ff42 	bl	800cbf0 <vPortYield>
 800ad6c:	e776      	b.n	800ac5c <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	0018      	movs	r0, r3
 800ad72:	f000 f8ec 	bl	800af4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad76:	f000 fbf5 	bl	800b564 <xTaskResumeAll>
 800ad7a:	e76f      	b.n	800ac5c <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f000 f8e5 	bl	800af4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad84:	f000 fbee 	bl	800b564 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	0018      	movs	r0, r3
 800ad8c:	f000 f93d 	bl	800b00a <prvIsQueueEmpty>
 800ad90:	1e03      	subs	r3, r0, #0
 800ad92:	d100      	bne.n	800ad96 <xQueueSemaphoreTake+0x182>
 800ad94:	e762      	b.n	800ac5c <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d010      	beq.n	800adbe <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800ad9c:	f001 ff38 	bl	800cc10 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	0018      	movs	r0, r3
 800ada4:	f000 f82c 	bl	800ae00 <prvGetDisinheritPriorityAfterTimeout>
 800ada8:	0003      	movs	r3, r0
 800adaa:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	0011      	movs	r1, r2
 800adb4:	0018      	movs	r0, r3
 800adb6:	f001 f855 	bl	800be64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800adba:	f001 ff3b 	bl	800cc34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800adc0:	0018      	movs	r0, r3
 800adc2:	46bd      	mov	sp, r7
 800adc4:	b00a      	add	sp, #40	; 0x28
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <vQueueDelete+0x16>
 800adda:	b672      	cpsid	i
 800addc:	e7fe      	b.n	800addc <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	0018      	movs	r0, r3
 800ade2:	f000 f969 	bl	800b0b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2246      	movs	r2, #70	; 0x46
 800adea:	5c9b      	ldrb	r3, [r3, r2]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d103      	bne.n	800adf8 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	0018      	movs	r0, r3
 800adf4:	f002 f84a 	bl	800ce8c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800adf8:	46c0      	nop			; (mov r8, r8)
 800adfa:	46bd      	mov	sp, r7
 800adfc:	b004      	add	sp, #16
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d006      	beq.n	800ae1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2238      	movs	r2, #56	; 0x38
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e001      	b.n	800ae22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae22:	68fb      	ldr	r3, [r7, #12]
	}
 800ae24:	0018      	movs	r0, r3
 800ae26:	46bd      	mov	sp, r7
 800ae28:	b004      	add	sp, #16
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10e      	bne.n	800ae68 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d14e      	bne.n	800aef0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	0018      	movs	r0, r3
 800ae58:	f000 ffa8 	bl	800bdac <xTaskPriorityDisinherit>
 800ae5c:	0003      	movs	r3, r0
 800ae5e:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	605a      	str	r2, [r3, #4]
 800ae66:	e043      	b.n	800aef0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d119      	bne.n	800aea2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6898      	ldr	r0, [r3, #8]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	0019      	movs	r1, r3
 800ae7a:	f002 fa4f 	bl	800d31c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689a      	ldr	r2, [r3, #8]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	18d2      	adds	r2, r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d32b      	bcc.n	800aef0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	609a      	str	r2, [r3, #8]
 800aea0:	e026      	b.n	800aef0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	68d8      	ldr	r0, [r3, #12]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	0019      	movs	r1, r3
 800aeae:	f002 fa35 	bl	800d31c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	425b      	negs	r3, r3
 800aebc:	18d2      	adds	r2, r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d207      	bcs.n	800aede <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	425b      	negs	r3, r3
 800aed8:	18d2      	adds	r2, r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d105      	bne.n	800aef0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	1c5a      	adds	r2, r3, #1
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aef8:	697b      	ldr	r3, [r7, #20]
}
 800aefa:	0018      	movs	r0, r3
 800aefc:	46bd      	mov	sp, r7
 800aefe:	b006      	add	sp, #24
 800af00:	bd80      	pop	{r7, pc}

0800af02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b082      	sub	sp, #8
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af10:	2b00      	cmp	r3, #0
 800af12:	d018      	beq.n	800af46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68da      	ldr	r2, [r3, #12]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1c:	18d2      	adds	r2, r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d303      	bcc.n	800af36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68d9      	ldr	r1, [r3, #12]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	0018      	movs	r0, r3
 800af42:	f002 f9eb 	bl	800d31c <memcpy>
	}
}
 800af46:	46c0      	nop			; (mov r8, r8)
 800af48:	46bd      	mov	sp, r7
 800af4a:	b002      	add	sp, #8
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af56:	f001 fe5b 	bl	800cc10 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af5a:	230f      	movs	r3, #15
 800af5c:	18fb      	adds	r3, r7, r3
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	2145      	movs	r1, #69	; 0x45
 800af62:	5c52      	ldrb	r2, [r2, r1]
 800af64:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af66:	e013      	b.n	800af90 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d016      	beq.n	800af9e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3324      	adds	r3, #36	; 0x24
 800af74:	0018      	movs	r0, r3
 800af76:	f000 fcf1 	bl	800b95c <xTaskRemoveFromEventList>
 800af7a:	1e03      	subs	r3, r0, #0
 800af7c:	d001      	beq.n	800af82 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af7e:	f000 fdad 	bl	800badc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af82:	210f      	movs	r1, #15
 800af84:	187b      	adds	r3, r7, r1
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	3b01      	subs	r3, #1
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	187b      	adds	r3, r7, r1
 800af8e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af90:	230f      	movs	r3, #15
 800af92:	18fb      	adds	r3, r7, r3
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	b25b      	sxtb	r3, r3
 800af98:	2b00      	cmp	r3, #0
 800af9a:	dce5      	bgt.n	800af68 <prvUnlockQueue+0x1a>
 800af9c:	e000      	b.n	800afa0 <prvUnlockQueue+0x52>
					break;
 800af9e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2245      	movs	r2, #69	; 0x45
 800afa4:	21ff      	movs	r1, #255	; 0xff
 800afa6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800afa8:	f001 fe44 	bl	800cc34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afac:	f001 fe30 	bl	800cc10 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afb0:	230e      	movs	r3, #14
 800afb2:	18fb      	adds	r3, r7, r3
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	2144      	movs	r1, #68	; 0x44
 800afb8:	5c52      	ldrb	r2, [r2, r1]
 800afba:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afbc:	e013      	b.n	800afe6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d016      	beq.n	800aff4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3310      	adds	r3, #16
 800afca:	0018      	movs	r0, r3
 800afcc:	f000 fcc6 	bl	800b95c <xTaskRemoveFromEventList>
 800afd0:	1e03      	subs	r3, r0, #0
 800afd2:	d001      	beq.n	800afd8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800afd4:	f000 fd82 	bl	800badc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afd8:	210e      	movs	r1, #14
 800afda:	187b      	adds	r3, r7, r1
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	3b01      	subs	r3, #1
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	187b      	adds	r3, r7, r1
 800afe4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afe6:	230e      	movs	r3, #14
 800afe8:	18fb      	adds	r3, r7, r3
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	b25b      	sxtb	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dce5      	bgt.n	800afbe <prvUnlockQueue+0x70>
 800aff2:	e000      	b.n	800aff6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800aff4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2244      	movs	r2, #68	; 0x44
 800affa:	21ff      	movs	r1, #255	; 0xff
 800affc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800affe:	f001 fe19 	bl	800cc34 <vPortExitCritical>
}
 800b002:	46c0      	nop			; (mov r8, r8)
 800b004:	46bd      	mov	sp, r7
 800b006:	b004      	add	sp, #16
 800b008:	bd80      	pop	{r7, pc}

0800b00a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b012:	f001 fdfd 	bl	800cc10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b01e:	2301      	movs	r3, #1
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	e001      	b.n	800b028 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b024:	2300      	movs	r3, #0
 800b026:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b028:	f001 fe04 	bl	800cc34 <vPortExitCritical>

	return xReturn;
 800b02c:	68fb      	ldr	r3, [r7, #12]
}
 800b02e:	0018      	movs	r0, r3
 800b030:	46bd      	mov	sp, r7
 800b032:	b004      	add	sp, #16
 800b034:	bd80      	pop	{r7, pc}

0800b036 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b084      	sub	sp, #16
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b03e:	f001 fde7 	bl	800cc10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d102      	bne.n	800b054 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b04e:	2301      	movs	r3, #1
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e001      	b.n	800b058 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b058:	f001 fdec 	bl	800cc34 <vPortExitCritical>

	return xReturn;
 800b05c:	68fb      	ldr	r3, [r7, #12]
}
 800b05e:	0018      	movs	r0, r3
 800b060:	46bd      	mov	sp, r7
 800b062:	b004      	add	sp, #16
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	e015      	b.n	800b0a4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b078:	4b0e      	ldr	r3, [pc, #56]	; (800b0b4 <vQueueAddToRegistry+0x4c>)
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	00d2      	lsls	r2, r2, #3
 800b07e:	58d3      	ldr	r3, [r2, r3]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10c      	bne.n	800b09e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b084:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <vQueueAddToRegistry+0x4c>)
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	00d2      	lsls	r2, r2, #3
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b08e:	4a09      	ldr	r2, [pc, #36]	; (800b0b4 <vQueueAddToRegistry+0x4c>)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	18d3      	adds	r3, r2, r3
 800b096:	3304      	adds	r3, #4
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b09c:	e006      	b.n	800b0ac <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	60fb      	str	r3, [r7, #12]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b07      	cmp	r3, #7
 800b0a8:	d9e6      	bls.n	800b078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0aa:	46c0      	nop			; (mov r8, r8)
 800b0ac:	46c0      	nop			; (mov r8, r8)
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	b004      	add	sp, #16
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20001164 	.word	0x20001164

0800b0b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	e018      	b.n	800b0f8 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b0c6:	4a10      	ldr	r2, [pc, #64]	; (800b108 <vQueueUnregisterQueue+0x50>)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	00db      	lsls	r3, r3, #3
 800b0cc:	18d3      	adds	r3, r2, r3
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d10c      	bne.n	800b0f2 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b0d8:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <vQueueUnregisterQueue+0x50>)
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	00d2      	lsls	r2, r2, #3
 800b0de:	2100      	movs	r1, #0
 800b0e0:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b0e2:	4a09      	ldr	r2, [pc, #36]	; (800b108 <vQueueUnregisterQueue+0x50>)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	18d3      	adds	r3, r2, r3
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
				break;
 800b0f0:	e006      	b.n	800b100 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b07      	cmp	r3, #7
 800b0fc:	d9e3      	bls.n	800b0c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b0fe:	46c0      	nop			; (mov r8, r8)
 800b100:	46c0      	nop			; (mov r8, r8)
 800b102:	46bd      	mov	sp, r7
 800b104:	b004      	add	sp, #16
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20001164 	.word	0x20001164

0800b10c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b11c:	f001 fd78 	bl	800cc10 <vPortEnterCritical>
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2244      	movs	r2, #68	; 0x44
 800b124:	5c9b      	ldrb	r3, [r3, r2]
 800b126:	b25b      	sxtb	r3, r3
 800b128:	3301      	adds	r3, #1
 800b12a:	d103      	bne.n	800b134 <vQueueWaitForMessageRestricted+0x28>
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2244      	movs	r2, #68	; 0x44
 800b130:	2100      	movs	r1, #0
 800b132:	5499      	strb	r1, [r3, r2]
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2245      	movs	r2, #69	; 0x45
 800b138:	5c9b      	ldrb	r3, [r3, r2]
 800b13a:	b25b      	sxtb	r3, r3
 800b13c:	3301      	adds	r3, #1
 800b13e:	d103      	bne.n	800b148 <vQueueWaitForMessageRestricted+0x3c>
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2245      	movs	r2, #69	; 0x45
 800b144:	2100      	movs	r1, #0
 800b146:	5499      	strb	r1, [r3, r2]
 800b148:	f001 fd74 	bl	800cc34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	3324      	adds	r3, #36	; 0x24
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	0018      	movs	r0, r3
 800b15e:	f000 fbd7 	bl	800b910 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	0018      	movs	r0, r3
 800b166:	f7ff fef2 	bl	800af4e <prvUnlockQueue>
	}
 800b16a:	46c0      	nop			; (mov r8, r8)
 800b16c:	46bd      	mov	sp, r7
 800b16e:	b006      	add	sp, #24
 800b170:	bd80      	pop	{r7, pc}

0800b172 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b172:	b590      	push	{r4, r7, lr}
 800b174:	b08d      	sub	sp, #52	; 0x34
 800b176:	af04      	add	r7, sp, #16
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	607a      	str	r2, [r7, #4]
 800b17e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <xTaskCreateStatic+0x18>
 800b186:	b672      	cpsid	i
 800b188:	e7fe      	b.n	800b188 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <xTaskCreateStatic+0x22>
 800b190:	b672      	cpsid	i
 800b192:	e7fe      	b.n	800b192 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b194:	23a8      	movs	r3, #168	; 0xa8
 800b196:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	2ba8      	cmp	r3, #168	; 0xa8
 800b19c:	d001      	beq.n	800b1a2 <xTaskCreateStatic+0x30>
 800b19e:	b672      	cpsid	i
 800b1a0:	e7fe      	b.n	800b1a0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d020      	beq.n	800b1ea <xTaskCreateStatic+0x78>
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01d      	beq.n	800b1ea <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	22a5      	movs	r2, #165	; 0xa5
 800b1bc:	2102      	movs	r1, #2
 800b1be:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1c0:	683c      	ldr	r4, [r7, #0]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	68b9      	ldr	r1, [r7, #8]
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9303      	str	r3, [sp, #12]
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	9302      	str	r3, [sp, #8]
 800b1d0:	2318      	movs	r3, #24
 800b1d2:	18fb      	adds	r3, r7, r3
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	0023      	movs	r3, r4
 800b1dc:	f000 f858 	bl	800b290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	f000 f8ec 	bl	800b3c0 <prvAddNewTaskToReadyList>
 800b1e8:	e001      	b.n	800b1ee <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b1f0:	0018      	movs	r0, r3
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	b009      	add	sp, #36	; 0x24
 800b1f6:	bd90      	pop	{r4, r7, pc}

0800b1f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1f8:	b590      	push	{r4, r7, lr}
 800b1fa:	b08d      	sub	sp, #52	; 0x34
 800b1fc:	af04      	add	r7, sp, #16
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	1dbb      	adds	r3, r7, #6
 800b206:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b208:	1dbb      	adds	r3, r7, #6
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	0018      	movs	r0, r3
 800b210:	f001 fd96 	bl	800cd40 <pvPortMalloc>
 800b214:	0003      	movs	r3, r0
 800b216:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d010      	beq.n	800b240 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b21e:	20a8      	movs	r0, #168	; 0xa8
 800b220:	f001 fd8e 	bl	800cd40 <pvPortMalloc>
 800b224:	0003      	movs	r3, r0
 800b226:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
 800b234:	e006      	b.n	800b244 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	0018      	movs	r0, r3
 800b23a:	f001 fe27 	bl	800ce8c <vPortFree>
 800b23e:	e001      	b.n	800b244 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d01a      	beq.n	800b280 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	22a5      	movs	r2, #165	; 0xa5
 800b24e:	2100      	movs	r1, #0
 800b250:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b252:	1dbb      	adds	r3, r7, #6
 800b254:	881a      	ldrh	r2, [r3, #0]
 800b256:	683c      	ldr	r4, [r7, #0]
 800b258:	68b9      	ldr	r1, [r7, #8]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	2300      	movs	r3, #0
 800b25e:	9303      	str	r3, [sp, #12]
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	9302      	str	r3, [sp, #8]
 800b264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	0023      	movs	r3, r4
 800b26e:	f000 f80f 	bl	800b290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	0018      	movs	r0, r3
 800b276:	f000 f8a3 	bl	800b3c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b27a:	2301      	movs	r3, #1
 800b27c:	61bb      	str	r3, [r7, #24]
 800b27e:	e002      	b.n	800b286 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b280:	2301      	movs	r3, #1
 800b282:	425b      	negs	r3, r3
 800b284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b286:	69bb      	ldr	r3, [r7, #24]
	}
 800b288:	0018      	movs	r0, r3
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b009      	add	sp, #36	; 0x24
 800b28e:	bd90      	pop	{r4, r7, pc}

0800b290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
 800b29c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	001a      	movs	r2, r3
 800b2a8:	21a5      	movs	r1, #165	; 0xa5
 800b2aa:	f001 ffab 	bl	800d204 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	493e      	ldr	r1, [pc, #248]	; (800b3b0 <prvInitialiseNewTask+0x120>)
 800b2b6:	468c      	mov	ip, r1
 800b2b8:	4463      	add	r3, ip
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	18d3      	adds	r3, r2, r3
 800b2be:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	2207      	movs	r2, #7
 800b2c4:	4393      	bics	r3, r2
 800b2c6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2207      	movs	r2, #7
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	d001      	beq.n	800b2d4 <prvInitialiseNewTask+0x44>
 800b2d0:	b672      	cpsid	i
 800b2d2:	e7fe      	b.n	800b2d2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e013      	b.n	800b302 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	18d3      	adds	r3, r2, r3
 800b2e0:	7818      	ldrb	r0, [r3, #0]
 800b2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2e4:	2134      	movs	r1, #52	; 0x34
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	18d3      	adds	r3, r2, r3
 800b2ea:	185b      	adds	r3, r3, r1
 800b2ec:	1c02      	adds	r2, r0, #0
 800b2ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	18d3      	adds	r3, r2, r3
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	3301      	adds	r3, #1
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2b0f      	cmp	r3, #15
 800b306:	d9e8      	bls.n	800b2da <prvInitialiseNewTask+0x4a>
 800b308:	e000      	b.n	800b30c <prvInitialiseNewTask+0x7c>
		{
			break;
 800b30a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	2243      	movs	r2, #67	; 0x43
 800b310:	2100      	movs	r1, #0
 800b312:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	2b37      	cmp	r3, #55	; 0x37
 800b318:	d901      	bls.n	800b31e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b31a:	2337      	movs	r3, #55	; 0x37
 800b31c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	6a3a      	ldr	r2, [r7, #32]
 800b322:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	6a3a      	ldr	r2, [r7, #32]
 800b328:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	2200      	movs	r2, #0
 800b32e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	3304      	adds	r3, #4
 800b334:	0018      	movs	r0, r3
 800b336:	f7ff f8b3 	bl	800a4a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	3318      	adds	r3, #24
 800b33e:	0018      	movs	r0, r3
 800b340:	f7ff f8ae 	bl	800a4a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b348:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b34a:	6a3b      	ldr	r3, [r7, #32]
 800b34c:	2238      	movs	r2, #56	; 0x38
 800b34e:	1ad2      	subs	r2, r2, r3
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b358:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	22a0      	movs	r2, #160	; 0xa0
 800b35e:	2100      	movs	r1, #0
 800b360:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	22a4      	movs	r2, #164	; 0xa4
 800b366:	2100      	movs	r1, #0
 800b368:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	3354      	adds	r3, #84	; 0x54
 800b36e:	224c      	movs	r2, #76	; 0x4c
 800b370:	2100      	movs	r1, #0
 800b372:	0018      	movs	r0, r3
 800b374:	f001 ff46 	bl	800d204 <memset>
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	4a0e      	ldr	r2, [pc, #56]	; (800b3b4 <prvInitialiseNewTask+0x124>)
 800b37c:	659a      	str	r2, [r3, #88]	; 0x58
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	4a0d      	ldr	r2, [pc, #52]	; (800b3b8 <prvInitialiseNewTask+0x128>)
 800b382:	65da      	str	r2, [r3, #92]	; 0x5c
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	4a0d      	ldr	r2, [pc, #52]	; (800b3bc <prvInitialiseNewTask+0x12c>)
 800b388:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	0018      	movs	r0, r3
 800b392:	f001 fba5 	bl	800cae0 <pxPortInitialiseStack>
 800b396:	0002      	movs	r2, r0
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3a8:	46c0      	nop			; (mov r8, r8)
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	b006      	add	sp, #24
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	3fffffff 	.word	0x3fffffff
 800b3b4:	200023e8 	.word	0x200023e8
 800b3b8:	20002450 	.word	0x20002450
 800b3bc:	200024b8 	.word	0x200024b8

0800b3c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3c8:	f001 fc22 	bl	800cc10 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3cc:	4b2a      	ldr	r3, [pc, #168]	; (800b478 <prvAddNewTaskToReadyList+0xb8>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	4b29      	ldr	r3, [pc, #164]	; (800b478 <prvAddNewTaskToReadyList+0xb8>)
 800b3d4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b3d6:	4b29      	ldr	r3, [pc, #164]	; (800b47c <prvAddNewTaskToReadyList+0xbc>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3de:	4b27      	ldr	r3, [pc, #156]	; (800b47c <prvAddNewTaskToReadyList+0xbc>)
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3e4:	4b24      	ldr	r3, [pc, #144]	; (800b478 <prvAddNewTaskToReadyList+0xb8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d110      	bne.n	800b40e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3ec:	f000 fb90 	bl	800bb10 <prvInitialiseTaskLists>
 800b3f0:	e00d      	b.n	800b40e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3f2:	4b23      	ldr	r3, [pc, #140]	; (800b480 <prvAddNewTaskToReadyList+0xc0>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d109      	bne.n	800b40e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3fa:	4b20      	ldr	r3, [pc, #128]	; (800b47c <prvAddNewTaskToReadyList+0xbc>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	429a      	cmp	r2, r3
 800b406:	d802      	bhi.n	800b40e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b408:	4b1c      	ldr	r3, [pc, #112]	; (800b47c <prvAddNewTaskToReadyList+0xbc>)
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b40e:	4b1d      	ldr	r3, [pc, #116]	; (800b484 <prvAddNewTaskToReadyList+0xc4>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	4b1b      	ldr	r3, [pc, #108]	; (800b484 <prvAddNewTaskToReadyList+0xc4>)
 800b416:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b418:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <prvAddNewTaskToReadyList+0xc4>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b424:	4b18      	ldr	r3, [pc, #96]	; (800b488 <prvAddNewTaskToReadyList+0xc8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d903      	bls.n	800b434 <prvAddNewTaskToReadyList+0x74>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b430:	4b15      	ldr	r3, [pc, #84]	; (800b488 <prvAddNewTaskToReadyList+0xc8>)
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b438:	0013      	movs	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	189b      	adds	r3, r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4a12      	ldr	r2, [pc, #72]	; (800b48c <prvAddNewTaskToReadyList+0xcc>)
 800b442:	189a      	adds	r2, r3, r2
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3304      	adds	r3, #4
 800b448:	0019      	movs	r1, r3
 800b44a:	0010      	movs	r0, r2
 800b44c:	f7ff f833 	bl	800a4b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b450:	f001 fbf0 	bl	800cc34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <prvAddNewTaskToReadyList+0xc0>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d008      	beq.n	800b46e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b45c:	4b07      	ldr	r3, [pc, #28]	; (800b47c <prvAddNewTaskToReadyList+0xbc>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b466:	429a      	cmp	r2, r3
 800b468:	d201      	bcs.n	800b46e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b46a:	f001 fbc1 	bl	800cbf0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b46e:	46c0      	nop			; (mov r8, r8)
 800b470:	46bd      	mov	sp, r7
 800b472:	b002      	add	sp, #8
 800b474:	bd80      	pop	{r7, pc}
 800b476:	46c0      	nop			; (mov r8, r8)
 800b478:	20001678 	.word	0x20001678
 800b47c:	200011a4 	.word	0x200011a4
 800b480:	20001684 	.word	0x20001684
 800b484:	20001694 	.word	0x20001694
 800b488:	20001680 	.word	0x20001680
 800b48c:	200011a8 	.word	0x200011a8

0800b490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b490:	b590      	push	{r4, r7, lr}
 800b492:	b089      	sub	sp, #36	; 0x24
 800b494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b49e:	003a      	movs	r2, r7
 800b4a0:	1d39      	adds	r1, r7, #4
 800b4a2:	2308      	movs	r3, #8
 800b4a4:	18fb      	adds	r3, r7, r3
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	f7fe ffac 	bl	800a404 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4ac:	683c      	ldr	r4, [r7, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	491e      	ldr	r1, [pc, #120]	; (800b52c <vTaskStartScheduler+0x9c>)
 800b4b4:	481e      	ldr	r0, [pc, #120]	; (800b530 <vTaskStartScheduler+0xa0>)
 800b4b6:	9202      	str	r2, [sp, #8]
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	0022      	movs	r2, r4
 800b4c2:	f7ff fe56 	bl	800b172 <xTaskCreateStatic>
 800b4c6:	0002      	movs	r2, r0
 800b4c8:	4b1a      	ldr	r3, [pc, #104]	; (800b534 <vTaskStartScheduler+0xa4>)
 800b4ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4cc:	4b19      	ldr	r3, [pc, #100]	; (800b534 <vTaskStartScheduler+0xa4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	60fb      	str	r3, [r7, #12]
 800b4d8:	e001      	b.n	800b4de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d103      	bne.n	800b4ec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800b4e4:	f000 ff9c 	bl	800c420 <xTimerCreateTimerTask>
 800b4e8:	0003      	movs	r3, r0
 800b4ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d113      	bne.n	800b51a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b4f2:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4f4:	4b10      	ldr	r3, [pc, #64]	; (800b538 <vTaskStartScheduler+0xa8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3354      	adds	r3, #84	; 0x54
 800b4fa:	001a      	movs	r2, r3
 800b4fc:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <vTaskStartScheduler+0xac>)
 800b4fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b500:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <vTaskStartScheduler+0xb0>)
 800b502:	2201      	movs	r2, #1
 800b504:	4252      	negs	r2, r2
 800b506:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b508:	4b0e      	ldr	r3, [pc, #56]	; (800b544 <vTaskStartScheduler+0xb4>)
 800b50a:	2201      	movs	r2, #1
 800b50c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <vTaskStartScheduler+0xb8>)
 800b510:	2200      	movs	r2, #0
 800b512:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b514:	f001 fb48 	bl	800cba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b518:	e004      	b.n	800b524 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3301      	adds	r3, #1
 800b51e:	d101      	bne.n	800b524 <vTaskStartScheduler+0x94>
 800b520:	b672      	cpsid	i
 800b522:	e7fe      	b.n	800b522 <vTaskStartScheduler+0x92>
}
 800b524:	46c0      	nop			; (mov r8, r8)
 800b526:	46bd      	mov	sp, r7
 800b528:	b005      	add	sp, #20
 800b52a:	bd90      	pop	{r4, r7, pc}
 800b52c:	0800d49c 	.word	0x0800d49c
 800b530:	0800baf1 	.word	0x0800baf1
 800b534:	2000169c 	.word	0x2000169c
 800b538:	200011a4 	.word	0x200011a4
 800b53c:	20000060 	.word	0x20000060
 800b540:	20001698 	.word	0x20001698
 800b544:	20001684 	.word	0x20001684
 800b548:	2000167c 	.word	0x2000167c

0800b54c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b550:	4b03      	ldr	r3, [pc, #12]	; (800b560 <vTaskSuspendAll+0x14>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	1c5a      	adds	r2, r3, #1
 800b556:	4b02      	ldr	r3, [pc, #8]	; (800b560 <vTaskSuspendAll+0x14>)
 800b558:	601a      	str	r2, [r3, #0]
}
 800b55a:	46c0      	nop			; (mov r8, r8)
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	200016a0 	.word	0x200016a0

0800b564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b56e:	2300      	movs	r3, #0
 800b570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b572:	4b3a      	ldr	r3, [pc, #232]	; (800b65c <xTaskResumeAll+0xf8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d101      	bne.n	800b57e <xTaskResumeAll+0x1a>
 800b57a:	b672      	cpsid	i
 800b57c:	e7fe      	b.n	800b57c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b57e:	f001 fb47 	bl	800cc10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b582:	4b36      	ldr	r3, [pc, #216]	; (800b65c <xTaskResumeAll+0xf8>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	1e5a      	subs	r2, r3, #1
 800b588:	4b34      	ldr	r3, [pc, #208]	; (800b65c <xTaskResumeAll+0xf8>)
 800b58a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b58c:	4b33      	ldr	r3, [pc, #204]	; (800b65c <xTaskResumeAll+0xf8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d15b      	bne.n	800b64c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b594:	4b32      	ldr	r3, [pc, #200]	; (800b660 <xTaskResumeAll+0xfc>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d057      	beq.n	800b64c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b59c:	e02f      	b.n	800b5fe <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b59e:	4b31      	ldr	r3, [pc, #196]	; (800b664 <xTaskResumeAll+0x100>)
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3318      	adds	r3, #24
 800b5aa:	0018      	movs	r0, r3
 800b5ac:	f7fe ffdb 	bl	800a566 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f7fe ffd6 	bl	800a566 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5be:	4b2a      	ldr	r3, [pc, #168]	; (800b668 <xTaskResumeAll+0x104>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d903      	bls.n	800b5ce <xTaskResumeAll+0x6a>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ca:	4b27      	ldr	r3, [pc, #156]	; (800b668 <xTaskResumeAll+0x104>)
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d2:	0013      	movs	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	189b      	adds	r3, r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4a24      	ldr	r2, [pc, #144]	; (800b66c <xTaskResumeAll+0x108>)
 800b5dc:	189a      	adds	r2, r3, r2
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	0019      	movs	r1, r3
 800b5e4:	0010      	movs	r0, r2
 800b5e6:	f7fe ff66 	bl	800a4b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ee:	4b20      	ldr	r3, [pc, #128]	; (800b670 <xTaskResumeAll+0x10c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d302      	bcc.n	800b5fe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800b5f8:	4b1e      	ldr	r3, [pc, #120]	; (800b674 <xTaskResumeAll+0x110>)
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5fe:	4b19      	ldr	r3, [pc, #100]	; (800b664 <xTaskResumeAll+0x100>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1cb      	bne.n	800b59e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b60c:	f000 fb20 	bl	800bc50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b610:	4b19      	ldr	r3, [pc, #100]	; (800b678 <xTaskResumeAll+0x114>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00f      	beq.n	800b63c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b61c:	f000 f84c 	bl	800b6b8 <xTaskIncrementTick>
 800b620:	1e03      	subs	r3, r0, #0
 800b622:	d002      	beq.n	800b62a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800b624:	4b13      	ldr	r3, [pc, #76]	; (800b674 <xTaskResumeAll+0x110>)
 800b626:	2201      	movs	r2, #1
 800b628:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3b01      	subs	r3, #1
 800b62e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1f2      	bne.n	800b61c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800b636:	4b10      	ldr	r3, [pc, #64]	; (800b678 <xTaskResumeAll+0x114>)
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <xTaskResumeAll+0x110>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d003      	beq.n	800b64c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b648:	f001 fad2 	bl	800cbf0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b64c:	f001 faf2 	bl	800cc34 <vPortExitCritical>

	return xAlreadyYielded;
 800b650:	68bb      	ldr	r3, [r7, #8]
}
 800b652:	0018      	movs	r0, r3
 800b654:	46bd      	mov	sp, r7
 800b656:	b004      	add	sp, #16
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	46c0      	nop			; (mov r8, r8)
 800b65c:	200016a0 	.word	0x200016a0
 800b660:	20001678 	.word	0x20001678
 800b664:	20001638 	.word	0x20001638
 800b668:	20001680 	.word	0x20001680
 800b66c:	200011a8 	.word	0x200011a8
 800b670:	200011a4 	.word	0x200011a4
 800b674:	2000168c 	.word	0x2000168c
 800b678:	20001688 	.word	0x20001688

0800b67c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b682:	4b04      	ldr	r3, [pc, #16]	; (800b694 <xTaskGetTickCount+0x18>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b688:	687b      	ldr	r3, [r7, #4]
}
 800b68a:	0018      	movs	r0, r3
 800b68c:	46bd      	mov	sp, r7
 800b68e:	b002      	add	sp, #8
 800b690:	bd80      	pop	{r7, pc}
 800b692:	46c0      	nop			; (mov r8, r8)
 800b694:	2000167c 	.word	0x2000167c

0800b698 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b69e:	2300      	movs	r3, #0
 800b6a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b6a2:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <xTaskGetTickCountFromISR+0x1c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6a8:	683b      	ldr	r3, [r7, #0]
}
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	b002      	add	sp, #8
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	46c0      	nop			; (mov r8, r8)
 800b6b4:	2000167c 	.word	0x2000167c

0800b6b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c2:	4b4c      	ldr	r3, [pc, #304]	; (800b7f4 <xTaskIncrementTick+0x13c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d000      	beq.n	800b6cc <xTaskIncrementTick+0x14>
 800b6ca:	e083      	b.n	800b7d4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6cc:	4b4a      	ldr	r3, [pc, #296]	; (800b7f8 <xTaskIncrementTick+0x140>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6d4:	4b48      	ldr	r3, [pc, #288]	; (800b7f8 <xTaskIncrementTick+0x140>)
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d117      	bne.n	800b710 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6e0:	4b46      	ldr	r3, [pc, #280]	; (800b7fc <xTaskIncrementTick+0x144>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <xTaskIncrementTick+0x36>
 800b6ea:	b672      	cpsid	i
 800b6ec:	e7fe      	b.n	800b6ec <xTaskIncrementTick+0x34>
 800b6ee:	4b43      	ldr	r3, [pc, #268]	; (800b7fc <xTaskIncrementTick+0x144>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	4b42      	ldr	r3, [pc, #264]	; (800b800 <xTaskIncrementTick+0x148>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	4b40      	ldr	r3, [pc, #256]	; (800b7fc <xTaskIncrementTick+0x144>)
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	4b40      	ldr	r3, [pc, #256]	; (800b800 <xTaskIncrementTick+0x148>)
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	4b40      	ldr	r3, [pc, #256]	; (800b804 <xTaskIncrementTick+0x14c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	4b3e      	ldr	r3, [pc, #248]	; (800b804 <xTaskIncrementTick+0x14c>)
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	f000 faa0 	bl	800bc50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b710:	4b3d      	ldr	r3, [pc, #244]	; (800b808 <xTaskIncrementTick+0x150>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	429a      	cmp	r2, r3
 800b718:	d34e      	bcc.n	800b7b8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b71a:	4b38      	ldr	r3, [pc, #224]	; (800b7fc <xTaskIncrementTick+0x144>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <xTaskIncrementTick+0x70>
 800b724:	2301      	movs	r3, #1
 800b726:	e000      	b.n	800b72a <xTaskIncrementTick+0x72>
 800b728:	2300      	movs	r3, #0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b72e:	4b36      	ldr	r3, [pc, #216]	; (800b808 <xTaskIncrementTick+0x150>)
 800b730:	2201      	movs	r2, #1
 800b732:	4252      	negs	r2, r2
 800b734:	601a      	str	r2, [r3, #0]
					break;
 800b736:	e03f      	b.n	800b7b8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b738:	4b30      	ldr	r3, [pc, #192]	; (800b7fc <xTaskIncrementTick+0x144>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d203      	bcs.n	800b758 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b750:	4b2d      	ldr	r3, [pc, #180]	; (800b808 <xTaskIncrementTick+0x150>)
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	601a      	str	r2, [r3, #0]
						break;
 800b756:	e02f      	b.n	800b7b8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	3304      	adds	r3, #4
 800b75c:	0018      	movs	r0, r3
 800b75e:	f7fe ff02 	bl	800a566 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b766:	2b00      	cmp	r3, #0
 800b768:	d004      	beq.n	800b774 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	3318      	adds	r3, #24
 800b76e:	0018      	movs	r0, r3
 800b770:	f7fe fef9 	bl	800a566 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b778:	4b24      	ldr	r3, [pc, #144]	; (800b80c <xTaskIncrementTick+0x154>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d903      	bls.n	800b788 <xTaskIncrementTick+0xd0>
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b784:	4b21      	ldr	r3, [pc, #132]	; (800b80c <xTaskIncrementTick+0x154>)
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78c:	0013      	movs	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	189b      	adds	r3, r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4a1e      	ldr	r2, [pc, #120]	; (800b810 <xTaskIncrementTick+0x158>)
 800b796:	189a      	adds	r2, r3, r2
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	3304      	adds	r3, #4
 800b79c:	0019      	movs	r1, r3
 800b79e:	0010      	movs	r0, r2
 800b7a0:	f7fe fe89 	bl	800a4b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a8:	4b1a      	ldr	r3, [pc, #104]	; (800b814 <xTaskIncrementTick+0x15c>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d3b3      	bcc.n	800b71a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7b6:	e7b0      	b.n	800b71a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7b8:	4b16      	ldr	r3, [pc, #88]	; (800b814 <xTaskIncrementTick+0x15c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7be:	4914      	ldr	r1, [pc, #80]	; (800b810 <xTaskIncrementTick+0x158>)
 800b7c0:	0013      	movs	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	189b      	adds	r3, r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	585b      	ldr	r3, [r3, r1]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d907      	bls.n	800b7de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e004      	b.n	800b7de <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b7d4:	4b10      	ldr	r3, [pc, #64]	; (800b818 <xTaskIncrementTick+0x160>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <xTaskIncrementTick+0x160>)
 800b7dc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b7de:	4b0f      	ldr	r3, [pc, #60]	; (800b81c <xTaskIncrementTick+0x164>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b7ea:	697b      	ldr	r3, [r7, #20]
}
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	b006      	add	sp, #24
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	200016a0 	.word	0x200016a0
 800b7f8:	2000167c 	.word	0x2000167c
 800b7fc:	20001630 	.word	0x20001630
 800b800:	20001634 	.word	0x20001634
 800b804:	20001690 	.word	0x20001690
 800b808:	20001698 	.word	0x20001698
 800b80c:	20001680 	.word	0x20001680
 800b810:	200011a8 	.word	0x200011a8
 800b814:	200011a4 	.word	0x200011a4
 800b818:	20001688 	.word	0x20001688
 800b81c:	2000168c 	.word	0x2000168c

0800b820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b826:	4b25      	ldr	r3, [pc, #148]	; (800b8bc <vTaskSwitchContext+0x9c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <vTaskSwitchContext+0xa0>)
 800b830:	2201      	movs	r2, #1
 800b832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b834:	e03d      	b.n	800b8b2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800b836:	4b22      	ldr	r3, [pc, #136]	; (800b8c0 <vTaskSwitchContext+0xa0>)
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b83c:	4b21      	ldr	r3, [pc, #132]	; (800b8c4 <vTaskSwitchContext+0xa4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	607b      	str	r3, [r7, #4]
 800b842:	e007      	b.n	800b854 <vTaskSwitchContext+0x34>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <vTaskSwitchContext+0x2e>
 800b84a:	b672      	cpsid	i
 800b84c:	e7fe      	b.n	800b84c <vTaskSwitchContext+0x2c>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	3b01      	subs	r3, #1
 800b852:	607b      	str	r3, [r7, #4]
 800b854:	491c      	ldr	r1, [pc, #112]	; (800b8c8 <vTaskSwitchContext+0xa8>)
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	0013      	movs	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	189b      	adds	r3, r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	585b      	ldr	r3, [r3, r1]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0ee      	beq.n	800b844 <vTaskSwitchContext+0x24>
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	0013      	movs	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	189b      	adds	r3, r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4a15      	ldr	r2, [pc, #84]	; (800b8c8 <vTaskSwitchContext+0xa8>)
 800b872:	189b      	adds	r3, r3, r2
 800b874:	603b      	str	r3, [r7, #0]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	605a      	str	r2, [r3, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	685a      	ldr	r2, [r3, #4]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	3308      	adds	r3, #8
 800b888:	429a      	cmp	r2, r3
 800b88a:	d104      	bne.n	800b896 <vTaskSwitchContext+0x76>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	605a      	str	r2, [r3, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	4b0b      	ldr	r3, [pc, #44]	; (800b8cc <vTaskSwitchContext+0xac>)
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <vTaskSwitchContext+0xa4>)
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8a6:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <vTaskSwitchContext+0xac>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3354      	adds	r3, #84	; 0x54
 800b8ac:	001a      	movs	r2, r3
 800b8ae:	4b08      	ldr	r3, [pc, #32]	; (800b8d0 <vTaskSwitchContext+0xb0>)
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	46c0      	nop			; (mov r8, r8)
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	b002      	add	sp, #8
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	200016a0 	.word	0x200016a0
 800b8c0:	2000168c 	.word	0x2000168c
 800b8c4:	20001680 	.word	0x20001680
 800b8c8:	200011a8 	.word	0x200011a8
 800b8cc:	200011a4 	.word	0x200011a4
 800b8d0:	20000060 	.word	0x20000060

0800b8d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d101      	bne.n	800b8e8 <vTaskPlaceOnEventList+0x14>
 800b8e4:	b672      	cpsid	i
 800b8e6:	e7fe      	b.n	800b8e6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8e8:	4b08      	ldr	r3, [pc, #32]	; (800b90c <vTaskPlaceOnEventList+0x38>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3318      	adds	r3, #24
 800b8ee:	001a      	movs	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	0011      	movs	r1, r2
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	f7fe fe00 	bl	800a4fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	0018      	movs	r0, r3
 800b900:	f000 fd3a 	bl	800c378 <prvAddCurrentTaskToDelayedList>
}
 800b904:	46c0      	nop			; (mov r8, r8)
 800b906:	46bd      	mov	sp, r7
 800b908:	b002      	add	sp, #8
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	200011a4 	.word	0x200011a4

0800b910 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <vTaskPlaceOnEventListRestricted+0x16>
 800b922:	b672      	cpsid	i
 800b924:	e7fe      	b.n	800b924 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b926:	4b0c      	ldr	r3, [pc, #48]	; (800b958 <vTaskPlaceOnEventListRestricted+0x48>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	3318      	adds	r3, #24
 800b92c:	001a      	movs	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	0011      	movs	r1, r2
 800b932:	0018      	movs	r0, r3
 800b934:	f7fe fdbf 	bl	800a4b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800b93e:	2301      	movs	r3, #1
 800b940:	425b      	negs	r3, r3
 800b942:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	0011      	movs	r1, r2
 800b94a:	0018      	movs	r0, r3
 800b94c:	f000 fd14 	bl	800c378 <prvAddCurrentTaskToDelayedList>
	}
 800b950:	46c0      	nop			; (mov r8, r8)
 800b952:	46bd      	mov	sp, r7
 800b954:	b004      	add	sp, #16
 800b956:	bd80      	pop	{r7, pc}
 800b958:	200011a4 	.word	0x200011a4

0800b95c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <xTaskRemoveFromEventList+0x1a>
 800b972:	b672      	cpsid	i
 800b974:	e7fe      	b.n	800b974 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	3318      	adds	r3, #24
 800b97a:	0018      	movs	r0, r3
 800b97c:	f7fe fdf3 	bl	800a566 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b980:	4b1e      	ldr	r3, [pc, #120]	; (800b9fc <xTaskRemoveFromEventList+0xa0>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11d      	bne.n	800b9c4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	3304      	adds	r3, #4
 800b98c:	0018      	movs	r0, r3
 800b98e:	f7fe fdea 	bl	800a566 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b996:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <xTaskRemoveFromEventList+0xa4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d903      	bls.n	800b9a6 <xTaskRemoveFromEventList+0x4a>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a2:	4b17      	ldr	r3, [pc, #92]	; (800ba00 <xTaskRemoveFromEventList+0xa4>)
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9aa:	0013      	movs	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	189b      	adds	r3, r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4a14      	ldr	r2, [pc, #80]	; (800ba04 <xTaskRemoveFromEventList+0xa8>)
 800b9b4:	189a      	adds	r2, r3, r2
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	0019      	movs	r1, r3
 800b9bc:	0010      	movs	r0, r2
 800b9be:	f7fe fd7a 	bl	800a4b6 <vListInsertEnd>
 800b9c2:	e007      	b.n	800b9d4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3318      	adds	r3, #24
 800b9c8:	001a      	movs	r2, r3
 800b9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ba08 <xTaskRemoveFromEventList+0xac>)
 800b9cc:	0011      	movs	r1, r2
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	f7fe fd71 	bl	800a4b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <xTaskRemoveFromEventList+0xb0>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d905      	bls.n	800b9ee <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <xTaskRemoveFromEventList+0xb4>)
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	e001      	b.n	800b9f2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
}
 800b9f4:	0018      	movs	r0, r3
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	b004      	add	sp, #16
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200016a0 	.word	0x200016a0
 800ba00:	20001680 	.word	0x20001680
 800ba04:	200011a8 	.word	0x200011a8
 800ba08:	20001638 	.word	0x20001638
 800ba0c:	200011a4 	.word	0x200011a4
 800ba10:	2000168c 	.word	0x2000168c

0800ba14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <vTaskInternalSetTimeOutState+0x20>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba24:	4b04      	ldr	r3, [pc, #16]	; (800ba38 <vTaskInternalSetTimeOutState+0x24>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	605a      	str	r2, [r3, #4]
}
 800ba2c:	46c0      	nop			; (mov r8, r8)
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	b002      	add	sp, #8
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20001690 	.word	0x20001690
 800ba38:	2000167c 	.word	0x2000167c

0800ba3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <xTaskCheckForTimeOut+0x14>
 800ba4c:	b672      	cpsid	i
 800ba4e:	e7fe      	b.n	800ba4e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <xTaskCheckForTimeOut+0x1e>
 800ba56:	b672      	cpsid	i
 800ba58:	e7fe      	b.n	800ba58 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800ba5a:	f001 f8d9 	bl	800cc10 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba5e:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <xTaskCheckForTimeOut+0x98>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	d102      	bne.n	800ba7c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba76:	2300      	movs	r3, #0
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	e024      	b.n	800bac6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	4b15      	ldr	r3, [pc, #84]	; (800bad8 <xTaskCheckForTimeOut+0x9c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d007      	beq.n	800ba98 <xTaskCheckForTimeOut+0x5c>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d302      	bcc.n	800ba98 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba92:	2301      	movs	r3, #1
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	e016      	b.n	800bac6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d20c      	bcs.n	800babc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	1ad2      	subs	r2, r2, r3
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	0018      	movs	r0, r3
 800bab2:	f7ff ffaf 	bl	800ba14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bab6:	2300      	movs	r3, #0
 800bab8:	617b      	str	r3, [r7, #20]
 800baba:	e004      	b.n	800bac6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bac2:	2301      	movs	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800bac6:	f001 f8b5 	bl	800cc34 <vPortExitCritical>

	return xReturn;
 800baca:	697b      	ldr	r3, [r7, #20]
}
 800bacc:	0018      	movs	r0, r3
 800bace:	46bd      	mov	sp, r7
 800bad0:	b006      	add	sp, #24
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	2000167c 	.word	0x2000167c
 800bad8:	20001690 	.word	0x20001690

0800badc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <vTaskMissedYield+0x10>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	601a      	str	r2, [r3, #0]
}
 800bae6:	46c0      	nop			; (mov r8, r8)
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	2000168c 	.word	0x2000168c

0800baf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800baf8:	f000 f84e 	bl	800bb98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bafc:	4b03      	ldr	r3, [pc, #12]	; (800bb0c <prvIdleTask+0x1c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d9f9      	bls.n	800baf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb04:	f001 f874 	bl	800cbf0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800bb08:	e7f6      	b.n	800baf8 <prvIdleTask+0x8>
 800bb0a:	46c0      	nop			; (mov r8, r8)
 800bb0c:	200011a8 	.word	0x200011a8

0800bb10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	e00c      	b.n	800bb36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	0013      	movs	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	189b      	adds	r3, r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4a14      	ldr	r2, [pc, #80]	; (800bb78 <prvInitialiseTaskLists+0x68>)
 800bb28:	189b      	adds	r3, r3, r2
 800bb2a:	0018      	movs	r0, r3
 800bb2c:	f7fe fc9a 	bl	800a464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3301      	adds	r3, #1
 800bb34:	607b      	str	r3, [r7, #4]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b37      	cmp	r3, #55	; 0x37
 800bb3a:	d9ef      	bls.n	800bb1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb3c:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <prvInitialiseTaskLists+0x6c>)
 800bb3e:	0018      	movs	r0, r3
 800bb40:	f7fe fc90 	bl	800a464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb44:	4b0e      	ldr	r3, [pc, #56]	; (800bb80 <prvInitialiseTaskLists+0x70>)
 800bb46:	0018      	movs	r0, r3
 800bb48:	f7fe fc8c 	bl	800a464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb4c:	4b0d      	ldr	r3, [pc, #52]	; (800bb84 <prvInitialiseTaskLists+0x74>)
 800bb4e:	0018      	movs	r0, r3
 800bb50:	f7fe fc88 	bl	800a464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb54:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <prvInitialiseTaskLists+0x78>)
 800bb56:	0018      	movs	r0, r3
 800bb58:	f7fe fc84 	bl	800a464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb5c:	4b0b      	ldr	r3, [pc, #44]	; (800bb8c <prvInitialiseTaskLists+0x7c>)
 800bb5e:	0018      	movs	r0, r3
 800bb60:	f7fe fc80 	bl	800a464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb64:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <prvInitialiseTaskLists+0x80>)
 800bb66:	4a05      	ldr	r2, [pc, #20]	; (800bb7c <prvInitialiseTaskLists+0x6c>)
 800bb68:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb6a:	4b0a      	ldr	r3, [pc, #40]	; (800bb94 <prvInitialiseTaskLists+0x84>)
 800bb6c:	4a04      	ldr	r2, [pc, #16]	; (800bb80 <prvInitialiseTaskLists+0x70>)
 800bb6e:	601a      	str	r2, [r3, #0]
}
 800bb70:	46c0      	nop			; (mov r8, r8)
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b002      	add	sp, #8
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	200011a8 	.word	0x200011a8
 800bb7c:	20001608 	.word	0x20001608
 800bb80:	2000161c 	.word	0x2000161c
 800bb84:	20001638 	.word	0x20001638
 800bb88:	2000164c 	.word	0x2000164c
 800bb8c:	20001664 	.word	0x20001664
 800bb90:	20001630 	.word	0x20001630
 800bb94:	20001634 	.word	0x20001634

0800bb98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb9e:	e01a      	b.n	800bbd6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800bba0:	f001 f836 	bl	800cc10 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bba4:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <prvCheckTasksWaitingTermination+0x50>)
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f7fe fcd8 	bl	800a566 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <prvCheckTasksWaitingTermination+0x54>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	1e5a      	subs	r2, r3, #1
 800bbbc:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <prvCheckTasksWaitingTermination+0x54>)
 800bbbe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbc0:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <prvCheckTasksWaitingTermination+0x58>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	1e5a      	subs	r2, r3, #1
 800bbc6:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <prvCheckTasksWaitingTermination+0x58>)
 800bbc8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800bbca:	f001 f833 	bl	800cc34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f000 f80f 	bl	800bbf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbd6:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <prvCheckTasksWaitingTermination+0x58>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e0      	bne.n	800bba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbde:	46c0      	nop			; (mov r8, r8)
 800bbe0:	46c0      	nop			; (mov r8, r8)
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	b002      	add	sp, #8
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	2000164c 	.word	0x2000164c
 800bbec:	20001678 	.word	0x20001678
 800bbf0:	20001660 	.word	0x20001660

0800bbf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3354      	adds	r3, #84	; 0x54
 800bc00:	0018      	movs	r0, r3
 800bc02:	f001 fb07 	bl	800d214 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	22a5      	movs	r2, #165	; 0xa5
 800bc0a:	5c9b      	ldrb	r3, [r3, r2]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d109      	bne.n	800bc24 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc14:	0018      	movs	r0, r3
 800bc16:	f001 f939 	bl	800ce8c <vPortFree>
				vPortFree( pxTCB );
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	f001 f935 	bl	800ce8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc22:	e010      	b.n	800bc46 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	22a5      	movs	r2, #165	; 0xa5
 800bc28:	5c9b      	ldrb	r3, [r3, r2]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d104      	bne.n	800bc38 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	0018      	movs	r0, r3
 800bc32:	f001 f92b 	bl	800ce8c <vPortFree>
	}
 800bc36:	e006      	b.n	800bc46 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	22a5      	movs	r2, #165	; 0xa5
 800bc3c:	5c9b      	ldrb	r3, [r3, r2]
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d001      	beq.n	800bc46 <prvDeleteTCB+0x52>
 800bc42:	b672      	cpsid	i
 800bc44:	e7fe      	b.n	800bc44 <prvDeleteTCB+0x50>
	}
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	b002      	add	sp, #8
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc56:	4b0e      	ldr	r3, [pc, #56]	; (800bc90 <prvResetNextTaskUnblockTime+0x40>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <prvResetNextTaskUnblockTime+0x14>
 800bc60:	2301      	movs	r3, #1
 800bc62:	e000      	b.n	800bc66 <prvResetNextTaskUnblockTime+0x16>
 800bc64:	2300      	movs	r3, #0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc6a:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <prvResetNextTaskUnblockTime+0x44>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4252      	negs	r2, r2
 800bc70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc72:	e008      	b.n	800bc86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bc74:	4b06      	ldr	r3, [pc, #24]	; (800bc90 <prvResetNextTaskUnblockTime+0x40>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <prvResetNextTaskUnblockTime+0x44>)
 800bc84:	601a      	str	r2, [r3, #0]
}
 800bc86:	46c0      	nop			; (mov r8, r8)
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	b002      	add	sp, #8
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	46c0      	nop			; (mov r8, r8)
 800bc90:	20001630 	.word	0x20001630
 800bc94:	20001698 	.word	0x20001698

0800bc98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc9e:	4b0a      	ldr	r3, [pc, #40]	; (800bcc8 <xTaskGetSchedulerState+0x30>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bca6:	2301      	movs	r3, #1
 800bca8:	607b      	str	r3, [r7, #4]
 800bcaa:	e008      	b.n	800bcbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcac:	4b07      	ldr	r3, [pc, #28]	; (800bccc <xTaskGetSchedulerState+0x34>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	607b      	str	r3, [r7, #4]
 800bcb8:	e001      	b.n	800bcbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcbe:	687b      	ldr	r3, [r7, #4]
	}
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	b002      	add	sp, #8
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	20001684 	.word	0x20001684
 800bccc:	200016a0 	.word	0x200016a0

0800bcd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d056      	beq.n	800bd94 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcea:	4b2d      	ldr	r3, [pc, #180]	; (800bda0 <xTaskPriorityInherit+0xd0>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d246      	bcs.n	800bd82 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	db06      	blt.n	800bd0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcfc:	4b28      	ldr	r3, [pc, #160]	; (800bda0 <xTaskPriorityInherit+0xd0>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	2238      	movs	r2, #56	; 0x38
 800bd04:	1ad2      	subs	r2, r2, r3
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	6959      	ldr	r1, [r3, #20]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd12:	0013      	movs	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	189b      	adds	r3, r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4a22      	ldr	r2, [pc, #136]	; (800bda4 <xTaskPriorityInherit+0xd4>)
 800bd1c:	189b      	adds	r3, r3, r2
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	d101      	bne.n	800bd26 <xTaskPriorityInherit+0x56>
 800bd22:	2301      	movs	r3, #1
 800bd24:	e000      	b.n	800bd28 <xTaskPriorityInherit+0x58>
 800bd26:	2300      	movs	r3, #0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d022      	beq.n	800bd72 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	0018      	movs	r0, r3
 800bd32:	f7fe fc18 	bl	800a566 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd36:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <xTaskPriorityInherit+0xd0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd44:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <xTaskPriorityInherit+0xd8>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d903      	bls.n	800bd54 <xTaskPriorityInherit+0x84>
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd50:	4b15      	ldr	r3, [pc, #84]	; (800bda8 <xTaskPriorityInherit+0xd8>)
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	0013      	movs	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	189b      	adds	r3, r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4a10      	ldr	r2, [pc, #64]	; (800bda4 <xTaskPriorityInherit+0xd4>)
 800bd62:	189a      	adds	r2, r3, r2
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	3304      	adds	r3, #4
 800bd68:	0019      	movs	r1, r3
 800bd6a:	0010      	movs	r0, r2
 800bd6c:	f7fe fba3 	bl	800a4b6 <vListInsertEnd>
 800bd70:	e004      	b.n	800bd7c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <xTaskPriorityInherit+0xd0>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	e008      	b.n	800bd94 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd86:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <xTaskPriorityInherit+0xd0>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d201      	bcs.n	800bd94 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd90:	2301      	movs	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd94:	68fb      	ldr	r3, [r7, #12]
	}
 800bd96:	0018      	movs	r0, r3
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	b004      	add	sp, #16
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	200011a4 	.word	0x200011a4
 800bda4:	200011a8 	.word	0x200011a8
 800bda8:	20001680 	.word	0x20001680

0800bdac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d044      	beq.n	800be4c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdc2:	4b25      	ldr	r3, [pc, #148]	; (800be58 <xTaskPriorityDisinherit+0xac>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d001      	beq.n	800bdd0 <xTaskPriorityDisinherit+0x24>
 800bdcc:	b672      	cpsid	i
 800bdce:	e7fe      	b.n	800bdce <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <xTaskPriorityDisinherit+0x30>
 800bdd8:	b672      	cpsid	i
 800bdda:	e7fe      	b.n	800bdda <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde0:	1e5a      	subs	r2, r3, #1
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d02c      	beq.n	800be4c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d128      	bne.n	800be4c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	0018      	movs	r0, r3
 800be00:	f7fe fbb1 	bl	800a566 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	2238      	movs	r2, #56	; 0x38
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1c:	4b0f      	ldr	r3, [pc, #60]	; (800be5c <xTaskPriorityDisinherit+0xb0>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	429a      	cmp	r2, r3
 800be22:	d903      	bls.n	800be2c <xTaskPriorityDisinherit+0x80>
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be28:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <xTaskPriorityDisinherit+0xb0>)
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	0013      	movs	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	189b      	adds	r3, r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4a09      	ldr	r2, [pc, #36]	; (800be60 <xTaskPriorityDisinherit+0xb4>)
 800be3a:	189a      	adds	r2, r3, r2
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	3304      	adds	r3, #4
 800be40:	0019      	movs	r1, r3
 800be42:	0010      	movs	r0, r2
 800be44:	f7fe fb37 	bl	800a4b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be4c:	68fb      	ldr	r3, [r7, #12]
	}
 800be4e:	0018      	movs	r0, r3
 800be50:	46bd      	mov	sp, r7
 800be52:	b004      	add	sp, #16
 800be54:	bd80      	pop	{r7, pc}
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	200011a4 	.word	0x200011a4
 800be5c:	20001680 	.word	0x20001680
 800be60:	200011a8 	.word	0x200011a8

0800be64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be72:	2301      	movs	r3, #1
 800be74:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d05d      	beq.n	800bf38 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800be84:	b672      	cpsid	i
 800be86:	e7fe      	b.n	800be86 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d902      	bls.n	800be98 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	617b      	str	r3, [r7, #20]
 800be96:	e002      	b.n	800be9e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be9c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d047      	beq.n	800bf38 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d142      	bne.n	800bf38 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800beb2:	4b23      	ldr	r3, [pc, #140]	; (800bf40 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d101      	bne.n	800bec0 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800bebc:	b672      	cpsid	i
 800bebe:	e7fe      	b.n	800bebe <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	db04      	blt.n	800bede <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2238      	movs	r2, #56	; 0x38
 800bed8:	1ad2      	subs	r2, r2, r3
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6959      	ldr	r1, [r3, #20]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	0013      	movs	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	189b      	adds	r3, r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4a15      	ldr	r2, [pc, #84]	; (800bf44 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800beee:	189b      	adds	r3, r3, r2
 800bef0:	4299      	cmp	r1, r3
 800bef2:	d101      	bne.n	800bef8 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800bef4:	2301      	movs	r3, #1
 800bef6:	e000      	b.n	800befa <vTaskPriorityDisinheritAfterTimeout+0x96>
 800bef8:	2300      	movs	r3, #0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d01c      	beq.n	800bf38 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	3304      	adds	r3, #4
 800bf02:	0018      	movs	r0, r3
 800bf04:	f7fe fb2f 	bl	800a566 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0c:	4b0e      	ldr	r3, [pc, #56]	; (800bf48 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d903      	bls.n	800bf1c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf18:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800bf1a:	601a      	str	r2, [r3, #0]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf20:	0013      	movs	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	189b      	adds	r3, r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4a06      	ldr	r2, [pc, #24]	; (800bf44 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bf2a:	189a      	adds	r2, r3, r2
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	0019      	movs	r1, r3
 800bf32:	0010      	movs	r0, r2
 800bf34:	f7fe fabf 	bl	800a4b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf38:	46c0      	nop			; (mov r8, r8)
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	b006      	add	sp, #24
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	200011a4 	.word	0x200011a4
 800bf44:	200011a8 	.word	0x200011a8
 800bf48:	20001680 	.word	0x20001680

0800bf4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf50:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <pvTaskIncrementMutexHeldCount+0x20>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf58:	4b04      	ldr	r3, [pc, #16]	; (800bf6c <pvTaskIncrementMutexHeldCount+0x20>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf5e:	3201      	adds	r2, #1
 800bf60:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bf62:	4b02      	ldr	r3, [pc, #8]	; (800bf6c <pvTaskIncrementMutexHeldCount+0x20>)
 800bf64:	681b      	ldr	r3, [r3, #0]
	}
 800bf66:	0018      	movs	r0, r3
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	200011a4 	.word	0x200011a4

0800bf70 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bf7a:	f000 fe49 	bl	800cc10 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bf7e:	4b1e      	ldr	r3, [pc, #120]	; (800bff8 <ulTaskNotifyTake+0x88>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	22a0      	movs	r2, #160	; 0xa0
 800bf84:	589b      	ldr	r3, [r3, r2]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10e      	bne.n	800bfa8 <ulTaskNotifyTake+0x38>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bf8a:	4b1b      	ldr	r3, [pc, #108]	; (800bff8 <ulTaskNotifyTake+0x88>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	22a4      	movs	r2, #164	; 0xa4
 800bf90:	2101      	movs	r1, #1
 800bf92:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d006      	beq.n	800bfa8 <ulTaskNotifyTake+0x38>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	0018      	movs	r0, r3
 800bfa0:	f000 f9ea 	bl	800c378 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bfa4:	f000 fe24 	bl	800cbf0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bfa8:	f000 fe44 	bl	800cc34 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bfac:	f000 fe30 	bl	800cc10 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bfb0:	4b11      	ldr	r3, [pc, #68]	; (800bff8 <ulTaskNotifyTake+0x88>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	22a0      	movs	r2, #160	; 0xa0
 800bfb6:	589b      	ldr	r3, [r3, r2]
 800bfb8:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00e      	beq.n	800bfde <ulTaskNotifyTake+0x6e>
			{
				if( xClearCountOnExit != pdFALSE )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d005      	beq.n	800bfd2 <ulTaskNotifyTake+0x62>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bfc6:	4b0c      	ldr	r3, [pc, #48]	; (800bff8 <ulTaskNotifyTake+0x88>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	22a0      	movs	r2, #160	; 0xa0
 800bfcc:	2100      	movs	r1, #0
 800bfce:	5099      	str	r1, [r3, r2]
 800bfd0:	e005      	b.n	800bfde <ulTaskNotifyTake+0x6e>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bfd2:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <ulTaskNotifyTake+0x88>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	3a01      	subs	r2, #1
 800bfda:	21a0      	movs	r1, #160	; 0xa0
 800bfdc:	505a      	str	r2, [r3, r1]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfde:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <ulTaskNotifyTake+0x88>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	22a4      	movs	r2, #164	; 0xa4
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 800bfe8:	f000 fe24 	bl	800cc34 <vPortExitCritical>

		return ulReturn;
 800bfec:	68fb      	ldr	r3, [r7, #12]
	}
 800bfee:	0018      	movs	r0, r3
 800bff0:	46bd      	mov	sp, r7
 800bff2:	b004      	add	sp, #16
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	46c0      	nop			; (mov r8, r8)
 800bff8:	200011a4 	.word	0x200011a4

0800bffc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b088      	sub	sp, #32
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	603b      	str	r3, [r7, #0]
 800c008:	1dfb      	adds	r3, r7, #7
 800c00a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c00c:	2301      	movs	r3, #1
 800c00e:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <xTaskGenericNotify+0x1e>
 800c016:	b672      	cpsid	i
 800c018:	e7fe      	b.n	800c018 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 800c01e:	f000 fdf7 	bl	800cc10 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d004      	beq.n	800c032 <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	22a0      	movs	r2, #160	; 0xa0
 800c02c:	589a      	ldr	r2, [r3, r2]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c032:	2317      	movs	r3, #23
 800c034:	18fb      	adds	r3, r7, r3
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	21a4      	movs	r1, #164	; 0xa4
 800c03a:	5c52      	ldrb	r2, [r2, r1]
 800c03c:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	22a4      	movs	r2, #164	; 0xa4
 800c042:	2102      	movs	r1, #2
 800c044:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800c046:	1dfb      	adds	r3, r7, #7
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b04      	cmp	r3, #4
 800c04c:	d828      	bhi.n	800c0a0 <xTaskGenericNotify+0xa4>
 800c04e:	009a      	lsls	r2, r3, #2
 800c050:	4b2f      	ldr	r3, [pc, #188]	; (800c110 <xTaskGenericNotify+0x114>)
 800c052:	18d3      	adds	r3, r2, r3
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	22a0      	movs	r2, #160	; 0xa0
 800c05c:	589a      	ldr	r2, [r3, r2]
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	431a      	orrs	r2, r3
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	21a0      	movs	r1, #160	; 0xa0
 800c066:	505a      	str	r2, [r3, r1]
					break;
 800c068:	e01a      	b.n	800c0a0 <xTaskGenericNotify+0xa4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	22a0      	movs	r2, #160	; 0xa0
 800c06e:	589b      	ldr	r3, [r3, r2]
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	21a0      	movs	r1, #160	; 0xa0
 800c076:	505a      	str	r2, [r3, r1]
					break;
 800c078:	e012      	b.n	800c0a0 <xTaskGenericNotify+0xa4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	21a0      	movs	r1, #160	; 0xa0
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	505a      	str	r2, [r3, r1]
					break;
 800c082:	e00d      	b.n	800c0a0 <xTaskGenericNotify+0xa4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c084:	2317      	movs	r3, #23
 800c086:	18fb      	adds	r3, r7, r3
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d004      	beq.n	800c098 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	21a0      	movs	r1, #160	; 0xa0
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c096:	e003      	b.n	800c0a0 <xTaskGenericNotify+0xa4>
						xReturn = pdFAIL;
 800c098:	2300      	movs	r3, #0
 800c09a:	61fb      	str	r3, [r7, #28]
					break;
 800c09c:	e000      	b.n	800c0a0 <xTaskGenericNotify+0xa4>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 800c09e:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c0a0:	2317      	movs	r3, #23
 800c0a2:	18fb      	adds	r3, r7, r3
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d12b      	bne.n	800c102 <xTaskGenericNotify+0x106>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	0018      	movs	r0, r3
 800c0b0:	f7fe fa59 	bl	800a566 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b8:	4b16      	ldr	r3, [pc, #88]	; (800c114 <xTaskGenericNotify+0x118>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d903      	bls.n	800c0c8 <xTaskGenericNotify+0xcc>
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <xTaskGenericNotify+0x118>)
 800c0c6:	601a      	str	r2, [r3, #0]
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0cc:	0013      	movs	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	189b      	adds	r3, r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4a10      	ldr	r2, [pc, #64]	; (800c118 <xTaskGenericNotify+0x11c>)
 800c0d6:	189a      	adds	r2, r3, r2
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	0019      	movs	r1, r3
 800c0de:	0010      	movs	r0, r2
 800c0e0:	f7fe f9e9 	bl	800a4b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <xTaskGenericNotify+0xf4>
 800c0ec:	b672      	cpsid	i
 800c0ee:	e7fe      	b.n	800c0ee <xTaskGenericNotify+0xf2>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f4:	4b09      	ldr	r3, [pc, #36]	; (800c11c <xTaskGenericNotify+0x120>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d901      	bls.n	800c102 <xTaskGenericNotify+0x106>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c0fe:	f000 fd77 	bl	800cbf0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c102:	f000 fd97 	bl	800cc34 <vPortExitCritical>

		return xReturn;
 800c106:	69fb      	ldr	r3, [r7, #28]
	}
 800c108:	0018      	movs	r0, r3
 800c10a:	46bd      	mov	sp, r7
 800c10c:	b008      	add	sp, #32
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0800d6c4 	.word	0x0800d6c4
 800c114:	20001680 	.word	0x20001680
 800c118:	200011a8 	.word	0x200011a8
 800c11c:	200011a4 	.word	0x200011a4

0800c120 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	1dfb      	adds	r3, r7, #7
 800c12e:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c130:	2301      	movs	r3, #1
 800c132:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <xTaskGenericNotifyFromISR+0x1e>
 800c13a:	b672      	cpsid	i
 800c13c:	e7fe      	b.n	800c13c <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c142:	f000 fd8f 	bl	800cc64 <ulSetInterruptMaskFromISR>
 800c146:	0003      	movs	r3, r0
 800c148:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d004      	beq.n	800c15a <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	22a0      	movs	r2, #160	; 0xa0
 800c154:	589a      	ldr	r2, [r3, r2]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c15a:	2313      	movs	r3, #19
 800c15c:	18fb      	adds	r3, r7, r3
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	21a4      	movs	r1, #164	; 0xa4
 800c162:	5c52      	ldrb	r2, [r2, r1]
 800c164:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	22a4      	movs	r2, #164	; 0xa4
 800c16a:	2102      	movs	r1, #2
 800c16c:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800c16e:	1dfb      	adds	r3, r7, #7
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b04      	cmp	r3, #4
 800c174:	d828      	bhi.n	800c1c8 <xTaskGenericNotifyFromISR+0xa8>
 800c176:	009a      	lsls	r2, r3, #2
 800c178:	4b3b      	ldr	r3, [pc, #236]	; (800c268 <xTaskGenericNotifyFromISR+0x148>)
 800c17a:	18d3      	adds	r3, r2, r3
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	22a0      	movs	r2, #160	; 0xa0
 800c184:	589a      	ldr	r2, [r3, r2]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	431a      	orrs	r2, r3
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	21a0      	movs	r1, #160	; 0xa0
 800c18e:	505a      	str	r2, [r3, r1]
					break;
 800c190:	e01a      	b.n	800c1c8 <xTaskGenericNotifyFromISR+0xa8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	22a0      	movs	r2, #160	; 0xa0
 800c196:	589b      	ldr	r3, [r3, r2]
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	21a0      	movs	r1, #160	; 0xa0
 800c19e:	505a      	str	r2, [r3, r1]
					break;
 800c1a0:	e012      	b.n	800c1c8 <xTaskGenericNotifyFromISR+0xa8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	21a0      	movs	r1, #160	; 0xa0
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	505a      	str	r2, [r3, r1]
					break;
 800c1aa:	e00d      	b.n	800c1c8 <xTaskGenericNotifyFromISR+0xa8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c1ac:	2313      	movs	r3, #19
 800c1ae:	18fb      	adds	r3, r7, r3
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	d004      	beq.n	800c1c0 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	21a0      	movs	r1, #160	; 0xa0
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c1be:	e003      	b.n	800c1c8 <xTaskGenericNotifyFromISR+0xa8>
						xReturn = pdFAIL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61fb      	str	r3, [r7, #28]
					break;
 800c1c4:	e000      	b.n	800c1c8 <xTaskGenericNotifyFromISR+0xa8>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 800c1c6:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c1c8:	2313      	movs	r3, #19
 800c1ca:	18fb      	adds	r3, r7, r3
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d140      	bne.n	800c254 <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <xTaskGenericNotifyFromISR+0xbe>
 800c1da:	b672      	cpsid	i
 800c1dc:	e7fe      	b.n	800c1dc <xTaskGenericNotifyFromISR+0xbc>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1de:	4b23      	ldr	r3, [pc, #140]	; (800c26c <xTaskGenericNotifyFromISR+0x14c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d11d      	bne.n	800c222 <xTaskGenericNotifyFromISR+0x102>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	f7fe f9bb 	bl	800a566 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f4:	4b1e      	ldr	r3, [pc, #120]	; (800c270 <xTaskGenericNotifyFromISR+0x150>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d903      	bls.n	800c204 <xTaskGenericNotifyFromISR+0xe4>
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c200:	4b1b      	ldr	r3, [pc, #108]	; (800c270 <xTaskGenericNotifyFromISR+0x150>)
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c208:	0013      	movs	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	189b      	adds	r3, r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4a18      	ldr	r2, [pc, #96]	; (800c274 <xTaskGenericNotifyFromISR+0x154>)
 800c212:	189a      	adds	r2, r3, r2
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	3304      	adds	r3, #4
 800c218:	0019      	movs	r1, r3
 800c21a:	0010      	movs	r0, r2
 800c21c:	f7fe f94b 	bl	800a4b6 <vListInsertEnd>
 800c220:	e007      	b.n	800c232 <xTaskGenericNotifyFromISR+0x112>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	3318      	adds	r3, #24
 800c226:	001a      	movs	r2, r3
 800c228:	4b13      	ldr	r3, [pc, #76]	; (800c278 <xTaskGenericNotifyFromISR+0x158>)
 800c22a:	0011      	movs	r1, r2
 800c22c:	0018      	movs	r0, r3
 800c22e:	f7fe f942 	bl	800a4b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c236:	4b11      	ldr	r3, [pc, #68]	; (800c27c <xTaskGenericNotifyFromISR+0x15c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d909      	bls.n	800c254 <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	2201      	movs	r2, #1
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	e002      	b.n	800c254 <xTaskGenericNotifyFromISR+0x134>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c24e:	4b0c      	ldr	r3, [pc, #48]	; (800c280 <xTaskGenericNotifyFromISR+0x160>)
 800c250:	2201      	movs	r2, #1
 800c252:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	0018      	movs	r0, r3
 800c258:	f000 fd0a 	bl	800cc70 <vClearInterruptMaskFromISR>

		return xReturn;
 800c25c:	69fb      	ldr	r3, [r7, #28]
	}
 800c25e:	0018      	movs	r0, r3
 800c260:	46bd      	mov	sp, r7
 800c262:	b008      	add	sp, #32
 800c264:	bd80      	pop	{r7, pc}
 800c266:	46c0      	nop			; (mov r8, r8)
 800c268:	0800d6d8 	.word	0x0800d6d8
 800c26c:	200016a0 	.word	0x200016a0
 800c270:	20001680 	.word	0x20001680
 800c274:	200011a8 	.word	0x200011a8
 800c278:	20001638 	.word	0x20001638
 800c27c:	200011a4 	.word	0x200011a4
 800c280:	2000168c 	.word	0x2000168c

0800c284 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <vTaskNotifyGiveFromISR+0x14>
 800c294:	b672      	cpsid	i
 800c296:	e7fe      	b.n	800c296 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c29c:	f000 fce2 	bl	800cc64 <ulSetInterruptMaskFromISR>
 800c2a0:	0003      	movs	r3, r0
 800c2a2:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c2a4:	200f      	movs	r0, #15
 800c2a6:	183b      	adds	r3, r7, r0
 800c2a8:	697a      	ldr	r2, [r7, #20]
 800c2aa:	21a4      	movs	r1, #164	; 0xa4
 800c2ac:	5c52      	ldrb	r2, [r2, r1]
 800c2ae:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	22a4      	movs	r2, #164	; 0xa4
 800c2b4:	2102      	movs	r1, #2
 800c2b6:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	22a0      	movs	r2, #160	; 0xa0
 800c2bc:	589b      	ldr	r3, [r3, r2]
 800c2be:	1c5a      	adds	r2, r3, #1
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	21a0      	movs	r1, #160	; 0xa0
 800c2c4:	505a      	str	r2, [r3, r1]

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c2c6:	183b      	adds	r3, r7, r0
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d140      	bne.n	800c350 <vTaskNotifyGiveFromISR+0xcc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <vTaskNotifyGiveFromISR+0x56>
 800c2d6:	b672      	cpsid	i
 800c2d8:	e7fe      	b.n	800c2d8 <vTaskNotifyGiveFromISR+0x54>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2da:	4b21      	ldr	r3, [pc, #132]	; (800c360 <vTaskNotifyGiveFromISR+0xdc>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d11d      	bne.n	800c31e <vTaskNotifyGiveFromISR+0x9a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	f7fe f93d 	bl	800a566 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f0:	4b1c      	ldr	r3, [pc, #112]	; (800c364 <vTaskNotifyGiveFromISR+0xe0>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d903      	bls.n	800c300 <vTaskNotifyGiveFromISR+0x7c>
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fc:	4b19      	ldr	r3, [pc, #100]	; (800c364 <vTaskNotifyGiveFromISR+0xe0>)
 800c2fe:	601a      	str	r2, [r3, #0]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c304:	0013      	movs	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	189b      	adds	r3, r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4a16      	ldr	r2, [pc, #88]	; (800c368 <vTaskNotifyGiveFromISR+0xe4>)
 800c30e:	189a      	adds	r2, r3, r2
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	3304      	adds	r3, #4
 800c314:	0019      	movs	r1, r3
 800c316:	0010      	movs	r0, r2
 800c318:	f7fe f8cd 	bl	800a4b6 <vListInsertEnd>
 800c31c:	e007      	b.n	800c32e <vTaskNotifyGiveFromISR+0xaa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	3318      	adds	r3, #24
 800c322:	001a      	movs	r2, r3
 800c324:	4b11      	ldr	r3, [pc, #68]	; (800c36c <vTaskNotifyGiveFromISR+0xe8>)
 800c326:	0011      	movs	r1, r2
 800c328:	0018      	movs	r0, r3
 800c32a:	f7fe f8c4 	bl	800a4b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c332:	4b0f      	ldr	r3, [pc, #60]	; (800c370 <vTaskNotifyGiveFromISR+0xec>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c338:	429a      	cmp	r2, r3
 800c33a:	d909      	bls.n	800c350 <vTaskNotifyGiveFromISR+0xcc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <vTaskNotifyGiveFromISR+0xc6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2201      	movs	r2, #1
 800c346:	601a      	str	r2, [r3, #0]
 800c348:	e002      	b.n	800c350 <vTaskNotifyGiveFromISR+0xcc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c34a:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <vTaskNotifyGiveFromISR+0xf0>)
 800c34c:	2201      	movs	r2, #1
 800c34e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	0018      	movs	r0, r3
 800c354:	f000 fc8c 	bl	800cc70 <vClearInterruptMaskFromISR>
	}
 800c358:	46c0      	nop			; (mov r8, r8)
 800c35a:	46bd      	mov	sp, r7
 800c35c:	b006      	add	sp, #24
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	200016a0 	.word	0x200016a0
 800c364:	20001680 	.word	0x20001680
 800c368:	200011a8 	.word	0x200011a8
 800c36c:	20001638 	.word	0x20001638
 800c370:	200011a4 	.word	0x200011a4
 800c374:	2000168c 	.word	0x2000168c

0800c378 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c382:	4b21      	ldr	r3, [pc, #132]	; (800c408 <prvAddCurrentTaskToDelayedList+0x90>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c388:	4b20      	ldr	r3, [pc, #128]	; (800c40c <prvAddCurrentTaskToDelayedList+0x94>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3304      	adds	r3, #4
 800c38e:	0018      	movs	r0, r3
 800c390:	f7fe f8e9 	bl	800a566 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3301      	adds	r3, #1
 800c398:	d10b      	bne.n	800c3b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d008      	beq.n	800c3b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3a0:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	1d1a      	adds	r2, r3, #4
 800c3a6:	4b1a      	ldr	r3, [pc, #104]	; (800c410 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3a8:	0011      	movs	r1, r2
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	f7fe f883 	bl	800a4b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3b0:	e026      	b.n	800c400 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	18d3      	adds	r3, r2, r3
 800c3b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3ba:	4b14      	ldr	r3, [pc, #80]	; (800c40c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d209      	bcs.n	800c3de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ca:	4b12      	ldr	r3, [pc, #72]	; (800c414 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	0019      	movs	r1, r3
 800c3d6:	0010      	movs	r0, r2
 800c3d8:	f7fe f88f 	bl	800a4fa <vListInsert>
}
 800c3dc:	e010      	b.n	800c400 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3de:	4b0e      	ldr	r3, [pc, #56]	; (800c418 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	0019      	movs	r1, r3
 800c3ea:	0010      	movs	r0, r2
 800c3ec:	f7fe f885 	bl	800a4fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3f0:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d202      	bcs.n	800c400 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c3fa:	4b08      	ldr	r3, [pc, #32]	; (800c41c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3fc:	68ba      	ldr	r2, [r7, #8]
 800c3fe:	601a      	str	r2, [r3, #0]
}
 800c400:	46c0      	nop			; (mov r8, r8)
 800c402:	46bd      	mov	sp, r7
 800c404:	b004      	add	sp, #16
 800c406:	bd80      	pop	{r7, pc}
 800c408:	2000167c 	.word	0x2000167c
 800c40c:	200011a4 	.word	0x200011a4
 800c410:	20001664 	.word	0x20001664
 800c414:	20001634 	.word	0x20001634
 800c418:	20001630 	.word	0x20001630
 800c41c:	20001698 	.word	0x20001698

0800c420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c420:	b590      	push	{r4, r7, lr}
 800c422:	b089      	sub	sp, #36	; 0x24
 800c424:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c426:	2300      	movs	r3, #0
 800c428:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c42a:	f000 faff 	bl	800ca2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c42e:	4b17      	ldr	r3, [pc, #92]	; (800c48c <xTimerCreateTimerTask+0x6c>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d020      	beq.n	800c478 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c43a:	2300      	movs	r3, #0
 800c43c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c43e:	003a      	movs	r2, r7
 800c440:	1d39      	adds	r1, r7, #4
 800c442:	2308      	movs	r3, #8
 800c444:	18fb      	adds	r3, r7, r3
 800c446:	0018      	movs	r0, r3
 800c448:	f7fd fff4 	bl	800a434 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c44c:	683c      	ldr	r4, [r7, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	490f      	ldr	r1, [pc, #60]	; (800c490 <xTimerCreateTimerTask+0x70>)
 800c454:	480f      	ldr	r0, [pc, #60]	; (800c494 <xTimerCreateTimerTask+0x74>)
 800c456:	9202      	str	r2, [sp, #8]
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	2302      	movs	r3, #2
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	2300      	movs	r3, #0
 800c460:	0022      	movs	r2, r4
 800c462:	f7fe fe86 	bl	800b172 <xTaskCreateStatic>
 800c466:	0002      	movs	r2, r0
 800c468:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <xTimerCreateTimerTask+0x78>)
 800c46a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c46c:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <xTimerCreateTimerTask+0x78>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d001      	beq.n	800c478 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800c474:	2301      	movs	r3, #1
 800c476:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <xTimerCreateTimerTask+0x62>
 800c47e:	b672      	cpsid	i
 800c480:	e7fe      	b.n	800c480 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800c482:	68fb      	ldr	r3, [r7, #12]
}
 800c484:	0018      	movs	r0, r3
 800c486:	46bd      	mov	sp, r7
 800c488:	b005      	add	sp, #20
 800c48a:	bd90      	pop	{r4, r7, pc}
 800c48c:	200016d4 	.word	0x200016d4
 800c490:	0800d4a4 	.word	0x0800d4a4
 800c494:	0800c691 	.word	0x0800c691
 800c498:	200016d8 	.word	0x200016d8

0800c49c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c49c:	b590      	push	{r4, r7, lr}
 800c49e:	b089      	sub	sp, #36	; 0x24
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c4aa:	2030      	movs	r0, #48	; 0x30
 800c4ac:	f000 fc48 	bl	800cd40 <pvPortMalloc>
 800c4b0:	0003      	movs	r3, r0
 800c4b2:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00e      	beq.n	800c4d8 <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c4ba:	683c      	ldr	r4, [r7, #0]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	0023      	movs	r3, r4
 800c4cc:	f000 f835 	bl	800c53a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	222c      	movs	r2, #44	; 0x2c
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c4d8:	697b      	ldr	r3, [r7, #20]
	}
 800c4da:	0018      	movs	r0, r3
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	b007      	add	sp, #28
 800c4e0:	bd90      	pop	{r4, r7, pc}

0800c4e2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c4e2:	b590      	push	{r4, r7, lr}
 800c4e4:	b089      	sub	sp, #36	; 0x24
 800c4e6:	af02      	add	r7, sp, #8
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	60b9      	str	r1, [r7, #8]
 800c4ec:	607a      	str	r2, [r7, #4]
 800c4ee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c4f0:	2330      	movs	r3, #48	; 0x30
 800c4f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2b30      	cmp	r3, #48	; 0x30
 800c4f8:	d001      	beq.n	800c4fe <xTimerCreateStatic+0x1c>
 800c4fa:	b672      	cpsid	i
 800c4fc:	e7fe      	b.n	800c4fc <xTimerCreateStatic+0x1a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <xTimerCreateStatic+0x26>
 800c504:	b672      	cpsid	i
 800c506:	e7fe      	b.n	800c506 <xTimerCreateStatic+0x24>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00e      	beq.n	800c530 <xTimerCreateStatic+0x4e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c512:	683c      	ldr	r4, [r7, #0]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	68b9      	ldr	r1, [r7, #8]
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	0023      	movs	r3, r4
 800c524:	f000 f809 	bl	800c53a <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	222c      	movs	r2, #44	; 0x2c
 800c52c:	2101      	movs	r1, #1
 800c52e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c530:	697b      	ldr	r3, [r7, #20]
	}
 800c532:	0018      	movs	r0, r3
 800c534:	46bd      	mov	sp, r7
 800c536:	b007      	add	sp, #28
 800c538:	bd90      	pop	{r4, r7, pc}

0800c53a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b084      	sub	sp, #16
 800c53e:	af00      	add	r7, sp, #0
 800c540:	60f8      	str	r0, [r7, #12]
 800c542:	60b9      	str	r1, [r7, #8]
 800c544:	607a      	str	r2, [r7, #4]
 800c546:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <prvInitialiseNewTimer+0x18>
 800c54e:	b672      	cpsid	i
 800c550:	e7fe      	b.n	800c550 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d015      	beq.n	800c584 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c558:	f000 fa68 	bl	800ca2c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	69ba      	ldr	r2, [r7, #24]
 800c578:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	3304      	adds	r3, #4
 800c57e:	0018      	movs	r0, r3
 800c580:	f7fd ff8e 	bl	800a4a0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c584:	46c0      	nop			; (mov r8, r8)
 800c586:	46bd      	mov	sp, r7
 800c588:	b004      	add	sp, #16
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c58c:	b590      	push	{r4, r7, lr}
 800c58e:	b08b      	sub	sp, #44	; 0x2c
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <xTimerGenericCommand+0x1c>
 800c5a4:	b672      	cpsid	i
 800c5a6:	e7fe      	b.n	800c5a6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c5a8:	4b1c      	ldr	r3, [pc, #112]	; (800c61c <xTimerGenericCommand+0x90>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d030      	beq.n	800c612 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5b0:	2414      	movs	r4, #20
 800c5b2:	193b      	adds	r3, r7, r4
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5b8:	193b      	adds	r3, r7, r4
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c5be:	193b      	adds	r3, r7, r4
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b05      	cmp	r3, #5
 800c5c8:	dc19      	bgt.n	800c5fe <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5ca:	f7ff fb65 	bl	800bc98 <xTaskGetSchedulerState>
 800c5ce:	0003      	movs	r3, r0
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d109      	bne.n	800c5e8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5d4:	4b11      	ldr	r3, [pc, #68]	; (800c61c <xTimerGenericCommand+0x90>)
 800c5d6:	6818      	ldr	r0, [r3, #0]
 800c5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5da:	1939      	adds	r1, r7, r4
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f7fe f92f 	bl	800a840 <xQueueGenericSend>
 800c5e2:	0003      	movs	r3, r0
 800c5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c5e6:	e014      	b.n	800c612 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <xTimerGenericCommand+0x90>)
 800c5ea:	6818      	ldr	r0, [r3, #0]
 800c5ec:	2314      	movs	r3, #20
 800c5ee:	18f9      	adds	r1, r7, r3
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f7fe f924 	bl	800a840 <xQueueGenericSend>
 800c5f8:	0003      	movs	r3, r0
 800c5fa:	627b      	str	r3, [r7, #36]	; 0x24
 800c5fc:	e009      	b.n	800c612 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5fe:	4b07      	ldr	r3, [pc, #28]	; (800c61c <xTimerGenericCommand+0x90>)
 800c600:	6818      	ldr	r0, [r3, #0]
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	2314      	movs	r3, #20
 800c606:	18f9      	adds	r1, r7, r3
 800c608:	2300      	movs	r3, #0
 800c60a:	f7fe f9dd 	bl	800a9c8 <xQueueGenericSendFromISR>
 800c60e:	0003      	movs	r3, r0
 800c610:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c614:	0018      	movs	r0, r3
 800c616:	46bd      	mov	sp, r7
 800c618:	b00b      	add	sp, #44	; 0x2c
 800c61a:	bd90      	pop	{r4, r7, pc}
 800c61c:	200016d4 	.word	0x200016d4

0800c620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af02      	add	r7, sp, #8
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c62a:	4b18      	ldr	r3, [pc, #96]	; (800c68c <prvProcessExpiredTimer+0x6c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3304      	adds	r3, #4
 800c638:	0018      	movs	r0, r3
 800c63a:	f7fd ff94 	bl	800a566 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d119      	bne.n	800c67a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	699a      	ldr	r2, [r3, #24]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	18d1      	adds	r1, r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f000 f8b6 	bl	800c7c4 <prvInsertTimerInActiveList>
 800c658:	1e03      	subs	r3, r0, #0
 800c65a:	d00e      	beq.n	800c67a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	2300      	movs	r3, #0
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2300      	movs	r3, #0
 800c666:	2100      	movs	r1, #0
 800c668:	f7ff ff90 	bl	800c58c <xTimerGenericCommand>
 800c66c:	0003      	movs	r3, r0
 800c66e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <prvProcessExpiredTimer+0x5a>
 800c676:	b672      	cpsid	i
 800c678:	e7fe      	b.n	800c678 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	0010      	movs	r0, r2
 800c682:	4798      	blx	r3
}
 800c684:	46c0      	nop			; (mov r8, r8)
 800c686:	46bd      	mov	sp, r7
 800c688:	b004      	add	sp, #16
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	200016cc 	.word	0x200016cc

0800c690 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c698:	2308      	movs	r3, #8
 800c69a:	18fb      	adds	r3, r7, r3
 800c69c:	0018      	movs	r0, r3
 800c69e:	f000 f851 	bl	800c744 <prvGetNextExpireTime>
 800c6a2:	0003      	movs	r3, r0
 800c6a4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	0011      	movs	r1, r2
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	f000 f803 	bl	800c6b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6b2:	f000 f8c9 	bl	800c848 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6b6:	e7ef      	b.n	800c698 <prvTimerTask+0x8>

0800c6b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c6c2:	f7fe ff43 	bl	800b54c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6c6:	2308      	movs	r3, #8
 800c6c8:	18fb      	adds	r3, r7, r3
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	f000 f85a 	bl	800c784 <prvSampleTimeNow>
 800c6d0:	0003      	movs	r3, r0
 800c6d2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d129      	bne.n	800c72e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10c      	bne.n	800c6fa <prvProcessTimerOrBlockTask+0x42>
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d808      	bhi.n	800c6fa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800c6e8:	f7fe ff3c 	bl	800b564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	0011      	movs	r1, r2
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	f7ff ff94 	bl	800c620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6f8:	e01b      	b.n	800c732 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d006      	beq.n	800c70e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c700:	4b0e      	ldr	r3, [pc, #56]	; (800c73c <prvProcessTimerOrBlockTask+0x84>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	425a      	negs	r2, r3
 800c708:	4153      	adcs	r3, r2
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <prvProcessTimerOrBlockTask+0x88>)
 800c710:	6818      	ldr	r0, [r3, #0]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	0019      	movs	r1, r3
 800c71c:	f7fe fcf6 	bl	800b10c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c720:	f7fe ff20 	bl	800b564 <xTaskResumeAll>
 800c724:	1e03      	subs	r3, r0, #0
 800c726:	d104      	bne.n	800c732 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800c728:	f000 fa62 	bl	800cbf0 <vPortYield>
}
 800c72c:	e001      	b.n	800c732 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800c72e:	f7fe ff19 	bl	800b564 <xTaskResumeAll>
}
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	46bd      	mov	sp, r7
 800c736:	b004      	add	sp, #16
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	46c0      	nop			; (mov r8, r8)
 800c73c:	200016d0 	.word	0x200016d0
 800c740:	200016d4 	.word	0x200016d4

0800c744 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c74c:	4b0c      	ldr	r3, [pc, #48]	; (800c780 <prvGetNextExpireTime+0x3c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	425a      	negs	r2, r3
 800c754:	4153      	adcs	r3, r2
 800c756:	b2db      	uxtb	r3, r3
 800c758:	001a      	movs	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c766:	4b06      	ldr	r3, [pc, #24]	; (800c780 <prvGetNextExpireTime+0x3c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	e001      	b.n	800c776 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c776:	68fb      	ldr	r3, [r7, #12]
}
 800c778:	0018      	movs	r0, r3
 800c77a:	46bd      	mov	sp, r7
 800c77c:	b004      	add	sp, #16
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	200016cc 	.word	0x200016cc

0800c784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c78c:	f7fe ff76 	bl	800b67c <xTaskGetTickCount>
 800c790:	0003      	movs	r3, r0
 800c792:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800c794:	4b0a      	ldr	r3, [pc, #40]	; (800c7c0 <prvSampleTimeNow+0x3c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d205      	bcs.n	800c7aa <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800c79e:	f000 f8eb 	bl	800c978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	e002      	b.n	800c7b0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c7b0:	4b03      	ldr	r3, [pc, #12]	; (800c7c0 <prvSampleTimeNow+0x3c>)
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
}
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	b004      	add	sp, #16
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	200016dc 	.word	0x200016dc

0800c7c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d812      	bhi.n	800c810 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	699b      	ldr	r3, [r3, #24]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d302      	bcc.n	800c7fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	617b      	str	r3, [r7, #20]
 800c7fc:	e01b      	b.n	800c836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7fe:	4b10      	ldr	r3, [pc, #64]	; (800c840 <prvInsertTimerInActiveList+0x7c>)
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3304      	adds	r3, #4
 800c806:	0019      	movs	r1, r3
 800c808:	0010      	movs	r0, r2
 800c80a:	f7fd fe76 	bl	800a4fa <vListInsert>
 800c80e:	e012      	b.n	800c836 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	429a      	cmp	r2, r3
 800c816:	d206      	bcs.n	800c826 <prvInsertTimerInActiveList+0x62>
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d302      	bcc.n	800c826 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c820:	2301      	movs	r3, #1
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	e007      	b.n	800c836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c826:	4b07      	ldr	r3, [pc, #28]	; (800c844 <prvInsertTimerInActiveList+0x80>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3304      	adds	r3, #4
 800c82e:	0019      	movs	r1, r3
 800c830:	0010      	movs	r0, r2
 800c832:	f7fd fe62 	bl	800a4fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c836:	697b      	ldr	r3, [r7, #20]
}
 800c838:	0018      	movs	r0, r3
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b006      	add	sp, #24
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	200016d0 	.word	0x200016d0
 800c844:	200016cc 	.word	0x200016cc

0800c848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c848:	b590      	push	{r4, r7, lr}
 800c84a:	b08d      	sub	sp, #52	; 0x34
 800c84c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c84e:	e07f      	b.n	800c950 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c850:	2208      	movs	r2, #8
 800c852:	18bb      	adds	r3, r7, r2
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	da0f      	bge.n	800c87a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c85a:	18bb      	adds	r3, r7, r2
 800c85c:	3304      	adds	r3, #4
 800c85e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <prvProcessReceivedCommands+0x22>
 800c866:	b672      	cpsid	i
 800c868:	e7fe      	b.n	800c868 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	6858      	ldr	r0, [r3, #4]
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	0019      	movs	r1, r3
 800c878:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c87a:	2208      	movs	r2, #8
 800c87c:	18bb      	adds	r3, r7, r2
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	db65      	blt.n	800c950 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c884:	18bb      	adds	r3, r7, r2
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d004      	beq.n	800c89c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	3304      	adds	r3, #4
 800c896:	0018      	movs	r0, r3
 800c898:	f7fd fe65 	bl	800a566 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c89c:	1d3b      	adds	r3, r7, #4
 800c89e:	0018      	movs	r0, r3
 800c8a0:	f7ff ff70 	bl	800c784 <prvSampleTimeNow>
 800c8a4:	0003      	movs	r3, r0
 800c8a6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800c8a8:	2308      	movs	r3, #8
 800c8aa:	18fb      	adds	r3, r7, r3
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b09      	cmp	r3, #9
 800c8b0:	d84d      	bhi.n	800c94e <prvProcessReceivedCommands+0x106>
 800c8b2:	009a      	lsls	r2, r3, #2
 800c8b4:	4b2e      	ldr	r3, [pc, #184]	; (800c970 <prvProcessReceivedCommands+0x128>)
 800c8b6:	18d3      	adds	r3, r2, r3
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8bc:	2408      	movs	r4, #8
 800c8be:	193b      	adds	r3, r7, r4
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	18d1      	adds	r1, r2, r3
 800c8c8:	193b      	adds	r3, r7, r4
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	69fa      	ldr	r2, [r7, #28]
 800c8ce:	6a38      	ldr	r0, [r7, #32]
 800c8d0:	f7ff ff78 	bl	800c7c4 <prvInsertTimerInActiveList>
 800c8d4:	1e03      	subs	r3, r0, #0
 800c8d6:	d03b      	beq.n	800c950 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8dc:	6a3a      	ldr	r2, [r7, #32]
 800c8de:	0010      	movs	r0, r2
 800c8e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c8e2:	6a3b      	ldr	r3, [r7, #32]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d132      	bne.n	800c950 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8ea:	193b      	adds	r3, r7, r4
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	699b      	ldr	r3, [r3, #24]
 800c8f2:	18d2      	adds	r2, r2, r3
 800c8f4:	6a38      	ldr	r0, [r7, #32]
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	f7ff fe45 	bl	800c58c <xTimerGenericCommand>
 800c902:	0003      	movs	r3, r0
 800c904:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d121      	bne.n	800c950 <prvProcessReceivedCommands+0x108>
 800c90c:	b672      	cpsid	i
 800c90e:	e7fe      	b.n	800c90e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c910:	2308      	movs	r3, #8
 800c912:	18fb      	adds	r3, r7, r3
 800c914:	685a      	ldr	r2, [r3, #4]
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <prvProcessReceivedCommands+0xde>
 800c922:	b672      	cpsid	i
 800c924:	e7fe      	b.n	800c924 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	699a      	ldr	r2, [r3, #24]
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	18d1      	adds	r1, r2, r3
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	69fa      	ldr	r2, [r7, #28]
 800c932:	6a38      	ldr	r0, [r7, #32]
 800c934:	f7ff ff46 	bl	800c7c4 <prvInsertTimerInActiveList>
					break;
 800c938:	e00a      	b.n	800c950 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c93a:	6a3b      	ldr	r3, [r7, #32]
 800c93c:	222c      	movs	r2, #44	; 0x2c
 800c93e:	5c9b      	ldrb	r3, [r3, r2]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d105      	bne.n	800c950 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	0018      	movs	r0, r3
 800c948:	f000 faa0 	bl	800ce8c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c94c:	e000      	b.n	800c950 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800c94e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c950:	4b08      	ldr	r3, [pc, #32]	; (800c974 <prvProcessReceivedCommands+0x12c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2208      	movs	r2, #8
 800c956:	18b9      	adds	r1, r7, r2
 800c958:	2200      	movs	r2, #0
 800c95a:	0018      	movs	r0, r3
 800c95c:	f7fe f8a5 	bl	800aaaa <xQueueReceive>
 800c960:	1e03      	subs	r3, r0, #0
 800c962:	d000      	beq.n	800c966 <prvProcessReceivedCommands+0x11e>
 800c964:	e774      	b.n	800c850 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c966:	46c0      	nop			; (mov r8, r8)
 800c968:	46c0      	nop			; (mov r8, r8)
 800c96a:	46bd      	mov	sp, r7
 800c96c:	b00b      	add	sp, #44	; 0x2c
 800c96e:	bd90      	pop	{r4, r7, pc}
 800c970:	0800d6ec 	.word	0x0800d6ec
 800c974:	200016d4 	.word	0x200016d4

0800c978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c97e:	e03e      	b.n	800c9fe <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c980:	4b28      	ldr	r3, [pc, #160]	; (800ca24 <prvSwitchTimerLists+0xac>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c98a:	4b26      	ldr	r3, [pc, #152]	; (800ca24 <prvSwitchTimerLists+0xac>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3304      	adds	r3, #4
 800c998:	0018      	movs	r0, r3
 800c99a:	f7fd fde4 	bl	800a566 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	0010      	movs	r0, r2
 800c9a6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	69db      	ldr	r3, [r3, #28]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d126      	bne.n	800c9fe <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	18d3      	adds	r3, r2, r3
 800c9b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9ba:	68ba      	ldr	r2, [r7, #8]
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d90e      	bls.n	800c9e0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9ce:	4b15      	ldr	r3, [pc, #84]	; (800ca24 <prvSwitchTimerLists+0xac>)
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	0019      	movs	r1, r3
 800c9d8:	0010      	movs	r0, r2
 800c9da:	f7fd fd8e 	bl	800a4fa <vListInsert>
 800c9de:	e00e      	b.n	800c9fe <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	f7ff fdce 	bl	800c58c <xTimerGenericCommand>
 800c9f0:	0003      	movs	r3, r0
 800c9f2:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <prvSwitchTimerLists+0x86>
 800c9fa:	b672      	cpsid	i
 800c9fc:	e7fe      	b.n	800c9fc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9fe:	4b09      	ldr	r3, [pc, #36]	; (800ca24 <prvSwitchTimerLists+0xac>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1bb      	bne.n	800c980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca08:	4b06      	ldr	r3, [pc, #24]	; (800ca24 <prvSwitchTimerLists+0xac>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca0e:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <prvSwitchTimerLists+0xb0>)
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <prvSwitchTimerLists+0xac>)
 800ca14:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800ca16:	4b04      	ldr	r3, [pc, #16]	; (800ca28 <prvSwitchTimerLists+0xb0>)
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	601a      	str	r2, [r3, #0]
}
 800ca1c:	46c0      	nop			; (mov r8, r8)
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	b006      	add	sp, #24
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	200016cc 	.word	0x200016cc
 800ca28:	200016d0 	.word	0x200016d0

0800ca2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca32:	f000 f8ed 	bl	800cc10 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca36:	4b16      	ldr	r3, [pc, #88]	; (800ca90 <prvCheckForValidListAndQueue+0x64>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d123      	bne.n	800ca86 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca3e:	4b15      	ldr	r3, [pc, #84]	; (800ca94 <prvCheckForValidListAndQueue+0x68>)
 800ca40:	0018      	movs	r0, r3
 800ca42:	f7fd fd0f 	bl	800a464 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca46:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <prvCheckForValidListAndQueue+0x6c>)
 800ca48:	0018      	movs	r0, r3
 800ca4a:	f7fd fd0b 	bl	800a464 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca4e:	4b13      	ldr	r3, [pc, #76]	; (800ca9c <prvCheckForValidListAndQueue+0x70>)
 800ca50:	4a10      	ldr	r2, [pc, #64]	; (800ca94 <prvCheckForValidListAndQueue+0x68>)
 800ca52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca54:	4b12      	ldr	r3, [pc, #72]	; (800caa0 <prvCheckForValidListAndQueue+0x74>)
 800ca56:	4a10      	ldr	r2, [pc, #64]	; (800ca98 <prvCheckForValidListAndQueue+0x6c>)
 800ca58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca5a:	4b12      	ldr	r3, [pc, #72]	; (800caa4 <prvCheckForValidListAndQueue+0x78>)
 800ca5c:	4a12      	ldr	r2, [pc, #72]	; (800caa8 <prvCheckForValidListAndQueue+0x7c>)
 800ca5e:	2100      	movs	r1, #0
 800ca60:	9100      	str	r1, [sp, #0]
 800ca62:	2110      	movs	r1, #16
 800ca64:	200a      	movs	r0, #10
 800ca66:	f7fd fdfa 	bl	800a65e <xQueueGenericCreateStatic>
 800ca6a:	0002      	movs	r2, r0
 800ca6c:	4b08      	ldr	r3, [pc, #32]	; (800ca90 <prvCheckForValidListAndQueue+0x64>)
 800ca6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <prvCheckForValidListAndQueue+0x64>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d006      	beq.n	800ca86 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca78:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <prvCheckForValidListAndQueue+0x64>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a0b      	ldr	r2, [pc, #44]	; (800caac <prvCheckForValidListAndQueue+0x80>)
 800ca7e:	0011      	movs	r1, r2
 800ca80:	0018      	movs	r0, r3
 800ca82:	f7fe faf1 	bl	800b068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca86:	f000 f8d5 	bl	800cc34 <vPortExitCritical>
}
 800ca8a:	46c0      	nop			; (mov r8, r8)
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	200016d4 	.word	0x200016d4
 800ca94:	200016a4 	.word	0x200016a4
 800ca98:	200016b8 	.word	0x200016b8
 800ca9c:	200016cc 	.word	0x200016cc
 800caa0:	200016d0 	.word	0x200016d0
 800caa4:	20001780 	.word	0x20001780
 800caa8:	200016e0 	.word	0x200016e0
 800caac:	0800d4ac 	.word	0x0800d4ac

0800cab0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d101      	bne.n	800cac6 <pvTimerGetTimerID+0x16>
 800cac2:	b672      	cpsid	i
 800cac4:	e7fe      	b.n	800cac4 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800cac6:	f000 f8a3 	bl	800cc10 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6a1b      	ldr	r3, [r3, #32]
 800cace:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 800cad0:	f000 f8b0 	bl	800cc34 <vPortExitCritical>

	return pvReturn;
 800cad4:	68bb      	ldr	r3, [r7, #8]
}
 800cad6:	0018      	movs	r0, r3
 800cad8:	46bd      	mov	sp, r7
 800cada:	b004      	add	sp, #16
 800cadc:	bd80      	pop	{r7, pc}
	...

0800cae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3b04      	subs	r3, #4
 800caf0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2280      	movs	r2, #128	; 0x80
 800caf6:	0452      	lsls	r2, r2, #17
 800caf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3b04      	subs	r3, #4
 800cafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb0c:	4a08      	ldr	r2, [pc, #32]	; (800cb30 <pxPortInitialiseStack+0x50>)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3b14      	subs	r3, #20
 800cb16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3b20      	subs	r3, #32
 800cb22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb24:	68fb      	ldr	r3, [r7, #12]
}
 800cb26:	0018      	movs	r0, r3
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	b004      	add	sp, #16
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	0800cb35 	.word	0x0800cb35

0800cb34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb3e:	4b08      	ldr	r3, [pc, #32]	; (800cb60 <prvTaskExitError+0x2c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3301      	adds	r3, #1
 800cb44:	d001      	beq.n	800cb4a <prvTaskExitError+0x16>
 800cb46:	b672      	cpsid	i
 800cb48:	e7fe      	b.n	800cb48 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800cb4a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800cb4c:	46c0      	nop			; (mov r8, r8)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0fc      	beq.n	800cb4e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb54:	46c0      	nop			; (mov r8, r8)
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	b002      	add	sp, #8
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	46c0      	nop			; (mov r8, r8)
 800cb60:	20000010 	.word	0x20000010

0800cb64 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800cb68:	46c0      	nop			; (mov r8, r8)
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800cb70:	4a0b      	ldr	r2, [pc, #44]	; (800cba0 <pxCurrentTCBConst2>)
 800cb72:	6813      	ldr	r3, [r2, #0]
 800cb74:	6818      	ldr	r0, [r3, #0]
 800cb76:	3020      	adds	r0, #32
 800cb78:	f380 8809 	msr	PSP, r0
 800cb7c:	2002      	movs	r0, #2
 800cb7e:	f380 8814 	msr	CONTROL, r0
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800cb88:	46ae      	mov	lr, r5
 800cb8a:	bc08      	pop	{r3}
 800cb8c:	bc04      	pop	{r2}
 800cb8e:	b662      	cpsie	i
 800cb90:	4718      	bx	r3
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	46c0      	nop			; (mov r8, r8)
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	46c0      	nop			; (mov r8, r8)
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	46c0      	nop			; (mov r8, r8)
 800cb9e:	46c0      	nop			; (mov r8, r8)

0800cba0 <pxCurrentTCBConst2>:
 800cba0:	200011a4 	.word	0x200011a4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800cba4:	46c0      	nop			; (mov r8, r8)
 800cba6:	46c0      	nop			; (mov r8, r8)

0800cba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800cbac:	4b0e      	ldr	r3, [pc, #56]	; (800cbe8 <xPortStartScheduler+0x40>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	4b0d      	ldr	r3, [pc, #52]	; (800cbe8 <xPortStartScheduler+0x40>)
 800cbb2:	21ff      	movs	r1, #255	; 0xff
 800cbb4:	0409      	lsls	r1, r1, #16
 800cbb6:	430a      	orrs	r2, r1
 800cbb8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <xPortStartScheduler+0x40>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <xPortStartScheduler+0x40>)
 800cbc0:	21ff      	movs	r1, #255	; 0xff
 800cbc2:	0609      	lsls	r1, r1, #24
 800cbc4:	430a      	orrs	r2, r1
 800cbc6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800cbc8:	f000 f898 	bl	800ccfc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbcc:	4b07      	ldr	r3, [pc, #28]	; (800cbec <xPortStartScheduler+0x44>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800cbd2:	f7ff ffcd 	bl	800cb70 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbd6:	f7fe fe23 	bl	800b820 <vTaskSwitchContext>
	prvTaskExitError();
 800cbda:	f7ff ffab 	bl	800cb34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	0018      	movs	r0, r3
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	46c0      	nop			; (mov r8, r8)
 800cbe8:	e000ed20 	.word	0xe000ed20
 800cbec:	20000010 	.word	0x20000010

0800cbf0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800cbf4:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <vPortYield+0x1c>)
 800cbf6:	2280      	movs	r2, #128	; 0x80
 800cbf8:	0552      	lsls	r2, r2, #21
 800cbfa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800cbfc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800cc00:	f3bf 8f6f 	isb	sy
}
 800cc04:	46c0      	nop			; (mov r8, r8)
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	46c0      	nop			; (mov r8, r8)
 800cc0c:	e000ed04 	.word	0xe000ed04

0800cc10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800cc14:	b672      	cpsid	i
    uxCriticalNesting++;
 800cc16:	4b06      	ldr	r3, [pc, #24]	; (800cc30 <vPortEnterCritical+0x20>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	4b04      	ldr	r3, [pc, #16]	; (800cc30 <vPortEnterCritical+0x20>)
 800cc1e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800cc20:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800cc24:	f3bf 8f6f 	isb	sy
}
 800cc28:	46c0      	nop			; (mov r8, r8)
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	46c0      	nop			; (mov r8, r8)
 800cc30:	20000010 	.word	0x20000010

0800cc34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc38:	4b09      	ldr	r3, [pc, #36]	; (800cc60 <vPortExitCritical+0x2c>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <vPortExitCritical+0x10>
 800cc40:	b672      	cpsid	i
 800cc42:	e7fe      	b.n	800cc42 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800cc44:	4b06      	ldr	r3, [pc, #24]	; (800cc60 <vPortExitCritical+0x2c>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	1e5a      	subs	r2, r3, #1
 800cc4a:	4b05      	ldr	r3, [pc, #20]	; (800cc60 <vPortExitCritical+0x2c>)
 800cc4c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800cc4e:	4b04      	ldr	r3, [pc, #16]	; (800cc60 <vPortExitCritical+0x2c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d100      	bne.n	800cc58 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800cc56:	b662      	cpsie	i
    }
}
 800cc58:	46c0      	nop			; (mov r8, r8)
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	46c0      	nop			; (mov r8, r8)
 800cc60:	20000010 	.word	0x20000010

0800cc64 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800cc64:	f3ef 8010 	mrs	r0, PRIMASK
 800cc68:	b672      	cpsid	i
 800cc6a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800cc6c:	46c0      	nop			; (mov r8, r8)
 800cc6e:	0018      	movs	r0, r3

0800cc70 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800cc70:	f380 8810 	msr	PRIMASK, r0
 800cc74:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800cc76:	46c0      	nop			; (mov r8, r8)
	...

0800cc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc80:	f3ef 8009 	mrs	r0, PSP
 800cc84:	4b0e      	ldr	r3, [pc, #56]	; (800ccc0 <pxCurrentTCBConst>)
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	3820      	subs	r0, #32
 800cc8a:	6010      	str	r0, [r2, #0]
 800cc8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800cc8e:	4644      	mov	r4, r8
 800cc90:	464d      	mov	r5, r9
 800cc92:	4656      	mov	r6, sl
 800cc94:	465f      	mov	r7, fp
 800cc96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800cc98:	b508      	push	{r3, lr}
 800cc9a:	b672      	cpsid	i
 800cc9c:	f7fe fdc0 	bl	800b820 <vTaskSwitchContext>
 800cca0:	b662      	cpsie	i
 800cca2:	bc0c      	pop	{r2, r3}
 800cca4:	6811      	ldr	r1, [r2, #0]
 800cca6:	6808      	ldr	r0, [r1, #0]
 800cca8:	3010      	adds	r0, #16
 800ccaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ccac:	46a0      	mov	r8, r4
 800ccae:	46a9      	mov	r9, r5
 800ccb0:	46b2      	mov	sl, r6
 800ccb2:	46bb      	mov	fp, r7
 800ccb4:	f380 8809 	msr	PSP, r0
 800ccb8:	3820      	subs	r0, #32
 800ccba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ccbc:	4718      	bx	r3
 800ccbe:	46c0      	nop			; (mov r8, r8)

0800ccc0 <pxCurrentTCBConst>:
 800ccc0:	200011a4 	.word	0x200011a4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800ccc4:	46c0      	nop			; (mov r8, r8)
 800ccc6:	46c0      	nop			; (mov r8, r8)

0800ccc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccce:	f7ff ffc9 	bl	800cc64 <ulSetInterruptMaskFromISR>
 800ccd2:	0003      	movs	r3, r0
 800ccd4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccd6:	f7fe fcef 	bl	800b6b8 <xTaskIncrementTick>
 800ccda:	1e03      	subs	r3, r0, #0
 800ccdc:	d003      	beq.n	800cce6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ccde:	4b06      	ldr	r3, [pc, #24]	; (800ccf8 <xPortSysTickHandler+0x30>)
 800cce0:	2280      	movs	r2, #128	; 0x80
 800cce2:	0552      	lsls	r2, r2, #21
 800cce4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	0018      	movs	r0, r3
 800ccea:	f7ff ffc1 	bl	800cc70 <vClearInterruptMaskFromISR>
}
 800ccee:	46c0      	nop			; (mov r8, r8)
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	b002      	add	sp, #8
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	46c0      	nop			; (mov r8, r8)
 800ccf8:	e000ed04 	.word	0xe000ed04

0800ccfc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800cd00:	4b0b      	ldr	r3, [pc, #44]	; (800cd30 <prvSetupTimerInterrupt+0x34>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800cd06:	4b0b      	ldr	r3, [pc, #44]	; (800cd34 <prvSetupTimerInterrupt+0x38>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd0c:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <prvSetupTimerInterrupt+0x3c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	22fa      	movs	r2, #250	; 0xfa
 800cd12:	0091      	lsls	r1, r2, #2
 800cd14:	0018      	movs	r0, r3
 800cd16:	f7f3 f9f7 	bl	8000108 <__udivsi3>
 800cd1a:	0003      	movs	r3, r0
 800cd1c:	001a      	movs	r2, r3
 800cd1e:	4b07      	ldr	r3, [pc, #28]	; (800cd3c <prvSetupTimerInterrupt+0x40>)
 800cd20:	3a01      	subs	r2, #1
 800cd22:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800cd24:	4b02      	ldr	r3, [pc, #8]	; (800cd30 <prvSetupTimerInterrupt+0x34>)
 800cd26:	2207      	movs	r2, #7
 800cd28:	601a      	str	r2, [r3, #0]
}
 800cd2a:	46c0      	nop			; (mov r8, r8)
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	e000e010 	.word	0xe000e010
 800cd34:	e000e018 	.word	0xe000e018
 800cd38:	20000004 	.word	0x20000004
 800cd3c:	e000e014 	.word	0xe000e014

0800cd40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800cd4c:	f7fe fbfe 	bl	800b54c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd50:	4b49      	ldr	r3, [pc, #292]	; (800ce78 <pvPortMalloc+0x138>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd58:	f000 f8e0 	bl	800cf1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd5c:	4b47      	ldr	r3, [pc, #284]	; (800ce7c <pvPortMalloc+0x13c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	4013      	ands	r3, r2
 800cd64:	d000      	beq.n	800cd68 <pvPortMalloc+0x28>
 800cd66:	e079      	b.n	800ce5c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d012      	beq.n	800cd94 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800cd6e:	2208      	movs	r2, #8
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	189b      	adds	r3, r3, r2
 800cd74:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2207      	movs	r2, #7
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	d00a      	beq.n	800cd94 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2207      	movs	r2, #7
 800cd82:	4393      	bics	r3, r2
 800cd84:	3308      	adds	r3, #8
 800cd86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2207      	movs	r2, #7
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	d001      	beq.n	800cd94 <pvPortMalloc+0x54>
 800cd90:	b672      	cpsid	i
 800cd92:	e7fe      	b.n	800cd92 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d060      	beq.n	800ce5c <pvPortMalloc+0x11c>
 800cd9a:	4b39      	ldr	r3, [pc, #228]	; (800ce80 <pvPortMalloc+0x140>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d85b      	bhi.n	800ce5c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cda4:	4b37      	ldr	r3, [pc, #220]	; (800ce84 <pvPortMalloc+0x144>)
 800cda6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800cda8:	4b36      	ldr	r3, [pc, #216]	; (800ce84 <pvPortMalloc+0x144>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdae:	e004      	b.n	800cdba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d903      	bls.n	800cdcc <pvPortMalloc+0x8c>
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1f1      	bne.n	800cdb0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdcc:	4b2a      	ldr	r3, [pc, #168]	; (800ce78 <pvPortMalloc+0x138>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d042      	beq.n	800ce5c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2208      	movs	r2, #8
 800cddc:	189b      	adds	r3, r3, r2
 800cdde:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	1ad2      	subs	r2, r2, r3
 800cdf0:	2308      	movs	r3, #8
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d916      	bls.n	800ce26 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	18d3      	adds	r3, r2, r3
 800cdfe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2207      	movs	r2, #7
 800ce04:	4013      	ands	r3, r2
 800ce06:	d001      	beq.n	800ce0c <pvPortMalloc+0xcc>
 800ce08:	b672      	cpsid	i
 800ce0a:	e7fe      	b.n	800ce0a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	1ad2      	subs	r2, r2, r3
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	0018      	movs	r0, r3
 800ce22:	f000 f8db 	bl	800cfdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce26:	4b16      	ldr	r3, [pc, #88]	; (800ce80 <pvPortMalloc+0x140>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	1ad2      	subs	r2, r2, r3
 800ce30:	4b13      	ldr	r3, [pc, #76]	; (800ce80 <pvPortMalloc+0x140>)
 800ce32:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce34:	4b12      	ldr	r3, [pc, #72]	; (800ce80 <pvPortMalloc+0x140>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	4b13      	ldr	r3, [pc, #76]	; (800ce88 <pvPortMalloc+0x148>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d203      	bcs.n	800ce48 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce40:	4b0f      	ldr	r3, [pc, #60]	; (800ce80 <pvPortMalloc+0x140>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	4b10      	ldr	r3, [pc, #64]	; (800ce88 <pvPortMalloc+0x148>)
 800ce46:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <pvPortMalloc+0x13c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	431a      	orrs	r2, r3
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce5c:	f7fe fb82 	bl	800b564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2207      	movs	r2, #7
 800ce64:	4013      	ands	r3, r2
 800ce66:	d001      	beq.n	800ce6c <pvPortMalloc+0x12c>
 800ce68:	b672      	cpsid	i
 800ce6a:	e7fe      	b.n	800ce6a <pvPortMalloc+0x12a>
	return pvReturn;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
}
 800ce6e:	0018      	movs	r0, r3
 800ce70:	46bd      	mov	sp, r7
 800ce72:	b006      	add	sp, #24
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	46c0      	nop			; (mov r8, r8)
 800ce78:	200023d8 	.word	0x200023d8
 800ce7c:	200023e4 	.word	0x200023e4
 800ce80:	200023dc 	.word	0x200023dc
 800ce84:	200023d0 	.word	0x200023d0
 800ce88:	200023e0 	.word	0x200023e0

0800ce8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d035      	beq.n	800cf0a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce9e:	2308      	movs	r3, #8
 800cea0:	425b      	negs	r3, r3
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	18d3      	adds	r3, r2, r3
 800cea6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	4b18      	ldr	r3, [pc, #96]	; (800cf14 <vPortFree+0x88>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	d101      	bne.n	800cebc <vPortFree+0x30>
 800ceb8:	b672      	cpsid	i
 800ceba:	e7fe      	b.n	800ceba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <vPortFree+0x3c>
 800cec4:	b672      	cpsid	i
 800cec6:	e7fe      	b.n	800cec6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	4b11      	ldr	r3, [pc, #68]	; (800cf14 <vPortFree+0x88>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4013      	ands	r3, r2
 800ced2:	d01a      	beq.n	800cf0a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d116      	bne.n	800cf0a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	685a      	ldr	r2, [r3, #4]
 800cee0:	4b0c      	ldr	r3, [pc, #48]	; (800cf14 <vPortFree+0x88>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	43db      	mvns	r3, r3
 800cee6:	401a      	ands	r2, r3
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ceec:	f7fe fb2e 	bl	800b54c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	4b08      	ldr	r3, [pc, #32]	; (800cf18 <vPortFree+0x8c>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	18d2      	adds	r2, r2, r3
 800cefa:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <vPortFree+0x8c>)
 800cefc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	0018      	movs	r0, r3
 800cf02:	f000 f86b 	bl	800cfdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cf06:	f7fe fb2d 	bl	800b564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf0a:	46c0      	nop			; (mov r8, r8)
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	b004      	add	sp, #16
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	46c0      	nop			; (mov r8, r8)
 800cf14:	200023e4 	.word	0x200023e4
 800cf18:	200023dc 	.word	0x200023dc

0800cf1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf22:	23c0      	movs	r3, #192	; 0xc0
 800cf24:	011b      	lsls	r3, r3, #4
 800cf26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf28:	4b26      	ldr	r3, [pc, #152]	; (800cfc4 <prvHeapInit+0xa8>)
 800cf2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2207      	movs	r2, #7
 800cf30:	4013      	ands	r3, r2
 800cf32:	d00c      	beq.n	800cf4e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	3307      	adds	r3, #7
 800cf38:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2207      	movs	r2, #7
 800cf3e:	4393      	bics	r3, r2
 800cf40:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	1ad2      	subs	r2, r2, r3
 800cf48:	4b1e      	ldr	r3, [pc, #120]	; (800cfc4 <prvHeapInit+0xa8>)
 800cf4a:	18d3      	adds	r3, r2, r3
 800cf4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf52:	4b1d      	ldr	r3, [pc, #116]	; (800cfc8 <prvHeapInit+0xac>)
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf58:	4b1b      	ldr	r3, [pc, #108]	; (800cfc8 <prvHeapInit+0xac>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	18d3      	adds	r3, r2, r3
 800cf64:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf66:	2208      	movs	r2, #8
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	1a9b      	subs	r3, r3, r2
 800cf6c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2207      	movs	r2, #7
 800cf72:	4393      	bics	r3, r2
 800cf74:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	4b14      	ldr	r3, [pc, #80]	; (800cfcc <prvHeapInit+0xb0>)
 800cf7a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800cf7c:	4b13      	ldr	r3, [pc, #76]	; (800cfcc <prvHeapInit+0xb0>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2200      	movs	r2, #0
 800cf82:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf84:	4b11      	ldr	r3, [pc, #68]	; (800cfcc <prvHeapInit+0xb0>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	1ad2      	subs	r2, r2, r3
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf9a:	4b0c      	ldr	r3, [pc, #48]	; (800cfcc <prvHeapInit+0xb0>)
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <prvHeapInit+0xb4>)
 800cfa8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	4b09      	ldr	r3, [pc, #36]	; (800cfd4 <prvHeapInit+0xb8>)
 800cfb0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cfb2:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <prvHeapInit+0xbc>)
 800cfb4:	2280      	movs	r2, #128	; 0x80
 800cfb6:	0612      	lsls	r2, r2, #24
 800cfb8:	601a      	str	r2, [r3, #0]
}
 800cfba:	46c0      	nop			; (mov r8, r8)
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	b004      	add	sp, #16
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	46c0      	nop			; (mov r8, r8)
 800cfc4:	200017d0 	.word	0x200017d0
 800cfc8:	200023d0 	.word	0x200023d0
 800cfcc:	200023d8 	.word	0x200023d8
 800cfd0:	200023e0 	.word	0x200023e0
 800cfd4:	200023dc 	.word	0x200023dc
 800cfd8:	200023e4 	.word	0x200023e4

0800cfdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfe4:	4b27      	ldr	r3, [pc, #156]	; (800d084 <prvInsertBlockIntoFreeList+0xa8>)
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	e002      	b.n	800cff0 <prvInsertBlockIntoFreeList+0x14>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d8f7      	bhi.n	800cfea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	18d3      	adds	r3, r2, r3
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d108      	bne.n	800d01e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	685a      	ldr	r2, [r3, #4]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	18d2      	adds	r2, r2, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	18d2      	adds	r2, r2, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d118      	bne.n	800d064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	4b14      	ldr	r3, [pc, #80]	; (800d088 <prvInsertBlockIntoFreeList+0xac>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d00d      	beq.n	800d05a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	18d2      	adds	r2, r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	e008      	b.n	800d06c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d05a:	4b0b      	ldr	r3, [pc, #44]	; (800d088 <prvInsertBlockIntoFreeList+0xac>)
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	601a      	str	r2, [r3, #0]
 800d062:	e003      	b.n	800d06c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d002      	beq.n	800d07a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	46bd      	mov	sp, r7
 800d07e:	b004      	add	sp, #16
 800d080:	bd80      	pop	{r7, pc}
 800d082:	46c0      	nop			; (mov r8, r8)
 800d084:	200023d0 	.word	0x200023d0
 800d088:	200023d8 	.word	0x200023d8

0800d08c <MCP3462_ADCInit>:
#include "main.h"
#include "cmsis_os.h"
#include "spi.h"
#include "MCP3462.h"

void MCP3462_ADCInit() {
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af00      	add	r7, sp, #0

	uint8_t TX_Data[19];

	// Reset the MCP3462
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800d092:	2390      	movs	r3, #144	; 0x90
 800d094:	05db      	lsls	r3, r3, #23
 800d096:	2201      	movs	r2, #1
 800d098:	2110      	movs	r1, #16
 800d09a:	0018      	movs	r0, r3
 800d09c:	f7f7 fa0b 	bl	80044b6 <HAL_GPIO_WritePin>
//	osDelay(50);
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800d0a0:	2390      	movs	r3, #144	; 0x90
 800d0a2:	05db      	lsls	r3, r3, #23
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2110      	movs	r1, #16
 800d0a8:	0018      	movs	r0, r3
 800d0aa:	f7f7 fa04 	bl	80044b6 <HAL_GPIO_WritePin>
//	osDelay(50);

	TX_Data[0] = 0b01000110;	// Device = 1 - write starting at register 1
 800d0ae:	1d3b      	adds	r3, r7, #4
 800d0b0:	2246      	movs	r2, #70	; 0x46
 800d0b2:	701a      	strb	r2, [r3, #0]
	TX_Data[1] = MCP3462_CLK_INT | MCP3462_CurrentNone | MCP3462_CONVERSION;
 800d0b4:	1d3b      	adds	r3, r7, #4
 800d0b6:	2223      	movs	r2, #35	; 0x23
 800d0b8:	705a      	strb	r2, [r3, #1]
	TX_Data[2] = MCP3462_AMCLK_PRESCALE1 | MCP3462_OSR_256;
 800d0ba:	1d3b      	adds	r3, r7, #4
 800d0bc:	220c      	movs	r2, #12
 800d0be:	709a      	strb	r2, [r3, #2]
	TX_Data[3] = MCP3462_BIAS_1 | MCP3462_GAIN_1_3 | MCP3462_AZ_MUX_DISABLED;
 800d0c0:	1d3b      	adds	r3, r7, #4
 800d0c2:	2280      	movs	r2, #128	; 0x80
 800d0c4:	70da      	strb	r2, [r3, #3]
	TX_Data[4] = MCP3462_MODE_CONTINUOUS | MCP3462_FORMAT_32_17_D | MCP3462_CRC16_16 | MCP3462_CRC_DISABLE | MCP3462_OFFCAL_DISABLE | MCP3462_GAINCAL_DISABLE;
 800d0c6:	1d3b      	adds	r3, r7, #4
 800d0c8:	22f0      	movs	r2, #240	; 0xf0
 800d0ca:	711a      	strb	r2, [r3, #4]
	TX_Data[5] = MCP3462_IRQ_STATE | MCP3462_FAST_COMMAND;
 800d0cc:	1d3b      	adds	r3, r7, #4
 800d0ce:	2206      	movs	r2, #6
 800d0d0:	715a      	strb	r2, [r3, #5]
	TX_Data[6] = MCP3462_VINPOS_CH0 | MCP3462_VINNEG_AGND;
 800d0d2:	1d3b      	adds	r3, r7, #4
 800d0d4:	2208      	movs	r2, #8
 800d0d6:	719a      	strb	r2, [r3, #6]
	TX_Data[7] = 0b00000000; 	// Scan 0		|
 800d0d8:	1d3b      	adds	r3, r7, #4
 800d0da:	2200      	movs	r2, #0
 800d0dc:	71da      	strb	r2, [r3, #7]
	TX_Data[8] = 0b00000000; 	// Scan 1		|
 800d0de:	1d3b      	adds	r3, r7, #4
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	721a      	strb	r2, [r3, #8]
	TX_Data[9] = 0b00000011; 	// Scan 2		| Scanning channels 0 and 1
 800d0e4:	1d3b      	adds	r3, r7, #4
 800d0e6:	2203      	movs	r2, #3
 800d0e8:	725a      	strb	r2, [r3, #9]
	TX_Data[10] = 0x00;
 800d0ea:	1d3b      	adds	r3, r7, #4
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	729a      	strb	r2, [r3, #10]
	TX_Data[11] = 0x00;
 800d0f0:	1d3b      	adds	r3, r7, #4
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	72da      	strb	r2, [r3, #11]
	TX_Data[12] = 0x01;			// No delay
 800d0f6:	1d3b      	adds	r3, r7, #4
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	731a      	strb	r2, [r3, #12]
	TX_Data[13] = 0x00;
 800d0fc:	1d3b      	adds	r3, r7, #4
 800d0fe:	2200      	movs	r2, #0
 800d100:	735a      	strb	r2, [r3, #13]
	TX_Data[14] = 0x00;
 800d102:	1d3b      	adds	r3, r7, #4
 800d104:	2200      	movs	r2, #0
 800d106:	739a      	strb	r2, [r3, #14]
	TX_Data[15] = 0x00;			// Offset Calibration
 800d108:	1d3b      	adds	r3, r7, #4
 800d10a:	2200      	movs	r2, #0
 800d10c:	73da      	strb	r2, [r3, #15]
	TX_Data[16] = 0x00;
 800d10e:	1d3b      	adds	r3, r7, #4
 800d110:	2200      	movs	r2, #0
 800d112:	741a      	strb	r2, [r3, #16]
	TX_Data[17] = 0x00;
 800d114:	1d3b      	adds	r3, r7, #4
 800d116:	2200      	movs	r2, #0
 800d118:	745a      	strb	r2, [r3, #17]
	TX_Data[18] = 0x00;			// Gain Calibration
 800d11a:	1d3b      	adds	r3, r7, #4
 800d11c:	2200      	movs	r2, #0
 800d11e:	749a      	strb	r2, [r3, #18]

	HAL_SPI_Transmit(&hspi1, TX_Data, sizeof(TX_Data), 5000);
 800d120:	4b08      	ldr	r3, [pc, #32]	; (800d144 <MCP3462_ADCInit+0xb8>)
 800d122:	1d39      	adds	r1, r7, #4
 800d124:	4808      	ldr	r0, [pc, #32]	; (800d148 <MCP3462_ADCInit+0xbc>)
 800d126:	2213      	movs	r2, #19
 800d128:	f7f8 f9e0 	bl	80054ec <HAL_SPI_Transmit>

	// Deselect the MCP3462 to end the command
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800d12c:	2390      	movs	r3, #144	; 0x90
 800d12e:	05db      	lsls	r3, r3, #23
 800d130:	2201      	movs	r2, #1
 800d132:	2110      	movs	r1, #16
 800d134:	0018      	movs	r0, r3
 800d136:	f7f7 f9be 	bl	80044b6 <HAL_GPIO_WritePin>

}
 800d13a:	46c0      	nop			; (mov r8, r8)
 800d13c:	46bd      	mov	sp, r7
 800d13e:	b006      	add	sp, #24
 800d140:	bd80      	pop	{r7, pc}
 800d142:	46c0      	nop			; (mov r8, r8)
 800d144:	00001388 	.word	0x00001388
 800d148:	200005e0 	.word	0x200005e0

0800d14c <MCP3462_ADCRead>:

uint8_t MCP3462_ADCRead(int32_t *value, uint8_t *channel) {
 800d14c:	b5b0      	push	{r4, r5, r7, lr}
 800d14e:	b08a      	sub	sp, #40	; 0x28
 800d150:	af02      	add	r7, sp, #8
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	61fb      	str	r3, [r7, #28]
	uint8_t TX_Data[5];
	uint8_t RX_Data[5];

	TX_Data[0] = 0b01000011;		// Read register 0
 800d15a:	2514      	movs	r5, #20
 800d15c:	197b      	adds	r3, r7, r5
 800d15e:	2243      	movs	r2, #67	; 0x43
 800d160:	701a      	strb	r2, [r3, #0]

	RX_Data[0] = 0xa0;	//Status
 800d162:	240c      	movs	r4, #12
 800d164:	193b      	adds	r3, r7, r4
 800d166:	22a0      	movs	r2, #160	; 0xa0
 800d168:	701a      	strb	r2, [r3, #0]
	RX_Data[1] = 0x0a;	//Data 24:31
 800d16a:	193b      	adds	r3, r7, r4
 800d16c:	220a      	movs	r2, #10
 800d16e:	705a      	strb	r2, [r3, #1]
	RX_Data[2] = 0xa0;	//Data 16:23
 800d170:	193b      	adds	r3, r7, r4
 800d172:	22a0      	movs	r2, #160	; 0xa0
 800d174:	709a      	strb	r2, [r3, #2]
	RX_Data[3] = 0x0a;	//Data 08:15
 800d176:	193b      	adds	r3, r7, r4
 800d178:	220a      	movs	r2, #10
 800d17a:	70da      	strb	r2, [r3, #3]
	RX_Data[4] = 0xa0;	//Data 00:07
 800d17c:	193b      	adds	r3, r7, r4
 800d17e:	22a0      	movs	r2, #160	; 0xa0
 800d180:	711a      	strb	r2, [r3, #4]

	// Select the MCP3462
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800d182:	2390      	movs	r3, #144	; 0x90
 800d184:	05db      	lsls	r3, r3, #23
 800d186:	2200      	movs	r2, #0
 800d188:	2110      	movs	r1, #16
 800d18a:	0018      	movs	r0, r3
 800d18c:	f7f7 f993 	bl	80044b6 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, TX_Data, RX_Data, sizeof(TX_Data), 5000);
 800d190:	193a      	adds	r2, r7, r4
 800d192:	1979      	adds	r1, r7, r5
 800d194:	4818      	ldr	r0, [pc, #96]	; (800d1f8 <MCP3462_ADCRead+0xac>)
 800d196:	4b19      	ldr	r3, [pc, #100]	; (800d1fc <MCP3462_ADCRead+0xb0>)
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	2305      	movs	r3, #5
 800d19c:	f7f8 fb06 	bl	80057ac <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800d1a0:	2390      	movs	r3, #144	; 0x90
 800d1a2:	05db      	lsls	r3, r3, #23
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	2110      	movs	r1, #16
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	f7f7 f984 	bl	80044b6 <HAL_GPIO_WritePin>


	if (RX_Data[2] & 1) {
 800d1ae:	193b      	adds	r3, r7, r4
 800d1b0:	789b      	ldrb	r3, [r3, #2]
 800d1b2:	001a      	movs	r2, r3
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	d001      	beq.n	800d1be <MCP3462_ADCRead+0x72>
		val = 0xFFFF0000;
 800d1ba:	4b11      	ldr	r3, [pc, #68]	; (800d200 <MCP3462_ADCRead+0xb4>)
 800d1bc:	61fb      	str	r3, [r7, #28]
	}
	val |=  (RX_Data[3] << 8);
 800d1be:	210c      	movs	r1, #12
 800d1c0:	187b      	adds	r3, r7, r1
 800d1c2:	78db      	ldrb	r3, [r3, #3]
 800d1c4:	021b      	lsls	r3, r3, #8
 800d1c6:	001a      	movs	r2, r3
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	61fb      	str	r3, [r7, #28]
	val |= RX_Data[4];
 800d1ce:	187b      	adds	r3, r7, r1
 800d1d0:	791b      	ldrb	r3, [r3, #4]
 800d1d2:	001a      	movs	r2, r3
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	61fb      	str	r3, [r7, #28]
	*value = val;
 800d1da:	69fa      	ldr	r2, [r7, #28]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	601a      	str	r2, [r3, #0]
	*channel = RX_Data[1] >> 4;
 800d1e0:	187b      	adds	r3, r7, r1
 800d1e2:	785b      	ldrb	r3, [r3, #1]
 800d1e4:	091b      	lsrs	r3, r3, #4
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	701a      	strb	r2, [r3, #0]

	return RX_Data[0];
 800d1ec:	187b      	adds	r3, r7, r1
 800d1ee:	781b      	ldrb	r3, [r3, #0]
}
 800d1f0:	0018      	movs	r0, r3
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	b008      	add	sp, #32
 800d1f6:	bdb0      	pop	{r4, r5, r7, pc}
 800d1f8:	200005e0 	.word	0x200005e0
 800d1fc:	00001388 	.word	0x00001388
 800d200:	ffff0000 	.word	0xffff0000

0800d204 <memset>:
 800d204:	0003      	movs	r3, r0
 800d206:	1882      	adds	r2, r0, r2
 800d208:	4293      	cmp	r3, r2
 800d20a:	d100      	bne.n	800d20e <memset+0xa>
 800d20c:	4770      	bx	lr
 800d20e:	7019      	strb	r1, [r3, #0]
 800d210:	3301      	adds	r3, #1
 800d212:	e7f9      	b.n	800d208 <memset+0x4>

0800d214 <_reclaim_reent>:
 800d214:	4b2d      	ldr	r3, [pc, #180]	; (800d2cc <_reclaim_reent+0xb8>)
 800d216:	b570      	push	{r4, r5, r6, lr}
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	0004      	movs	r4, r0
 800d21c:	4283      	cmp	r3, r0
 800d21e:	d042      	beq.n	800d2a6 <_reclaim_reent+0x92>
 800d220:	69c3      	ldr	r3, [r0, #28]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00a      	beq.n	800d23c <_reclaim_reent+0x28>
 800d226:	2500      	movs	r5, #0
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	42ab      	cmp	r3, r5
 800d22c:	d140      	bne.n	800d2b0 <_reclaim_reent+0x9c>
 800d22e:	69e3      	ldr	r3, [r4, #28]
 800d230:	6819      	ldr	r1, [r3, #0]
 800d232:	2900      	cmp	r1, #0
 800d234:	d002      	beq.n	800d23c <_reclaim_reent+0x28>
 800d236:	0020      	movs	r0, r4
 800d238:	f000 f87a 	bl	800d330 <_free_r>
 800d23c:	6961      	ldr	r1, [r4, #20]
 800d23e:	2900      	cmp	r1, #0
 800d240:	d002      	beq.n	800d248 <_reclaim_reent+0x34>
 800d242:	0020      	movs	r0, r4
 800d244:	f000 f874 	bl	800d330 <_free_r>
 800d248:	69e1      	ldr	r1, [r4, #28]
 800d24a:	2900      	cmp	r1, #0
 800d24c:	d002      	beq.n	800d254 <_reclaim_reent+0x40>
 800d24e:	0020      	movs	r0, r4
 800d250:	f000 f86e 	bl	800d330 <_free_r>
 800d254:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d256:	2900      	cmp	r1, #0
 800d258:	d002      	beq.n	800d260 <_reclaim_reent+0x4c>
 800d25a:	0020      	movs	r0, r4
 800d25c:	f000 f868 	bl	800d330 <_free_r>
 800d260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d262:	2900      	cmp	r1, #0
 800d264:	d002      	beq.n	800d26c <_reclaim_reent+0x58>
 800d266:	0020      	movs	r0, r4
 800d268:	f000 f862 	bl	800d330 <_free_r>
 800d26c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d26e:	2900      	cmp	r1, #0
 800d270:	d002      	beq.n	800d278 <_reclaim_reent+0x64>
 800d272:	0020      	movs	r0, r4
 800d274:	f000 f85c 	bl	800d330 <_free_r>
 800d278:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d27a:	2900      	cmp	r1, #0
 800d27c:	d002      	beq.n	800d284 <_reclaim_reent+0x70>
 800d27e:	0020      	movs	r0, r4
 800d280:	f000 f856 	bl	800d330 <_free_r>
 800d284:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d286:	2900      	cmp	r1, #0
 800d288:	d002      	beq.n	800d290 <_reclaim_reent+0x7c>
 800d28a:	0020      	movs	r0, r4
 800d28c:	f000 f850 	bl	800d330 <_free_r>
 800d290:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d292:	2900      	cmp	r1, #0
 800d294:	d002      	beq.n	800d29c <_reclaim_reent+0x88>
 800d296:	0020      	movs	r0, r4
 800d298:	f000 f84a 	bl	800d330 <_free_r>
 800d29c:	6a23      	ldr	r3, [r4, #32]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <_reclaim_reent+0x92>
 800d2a2:	0020      	movs	r0, r4
 800d2a4:	4798      	blx	r3
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	5949      	ldr	r1, [r1, r5]
 800d2aa:	2900      	cmp	r1, #0
 800d2ac:	d108      	bne.n	800d2c0 <_reclaim_reent+0xac>
 800d2ae:	3504      	adds	r5, #4
 800d2b0:	69e3      	ldr	r3, [r4, #28]
 800d2b2:	68d9      	ldr	r1, [r3, #12]
 800d2b4:	2d80      	cmp	r5, #128	; 0x80
 800d2b6:	d1f7      	bne.n	800d2a8 <_reclaim_reent+0x94>
 800d2b8:	0020      	movs	r0, r4
 800d2ba:	f000 f839 	bl	800d330 <_free_r>
 800d2be:	e7b6      	b.n	800d22e <_reclaim_reent+0x1a>
 800d2c0:	680e      	ldr	r6, [r1, #0]
 800d2c2:	0020      	movs	r0, r4
 800d2c4:	f000 f834 	bl	800d330 <_free_r>
 800d2c8:	0031      	movs	r1, r6
 800d2ca:	e7ee      	b.n	800d2aa <_reclaim_reent+0x96>
 800d2cc:	20000060 	.word	0x20000060

0800d2d0 <__libc_init_array>:
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	2600      	movs	r6, #0
 800d2d4:	4c0c      	ldr	r4, [pc, #48]	; (800d308 <__libc_init_array+0x38>)
 800d2d6:	4d0d      	ldr	r5, [pc, #52]	; (800d30c <__libc_init_array+0x3c>)
 800d2d8:	1b64      	subs	r4, r4, r5
 800d2da:	10a4      	asrs	r4, r4, #2
 800d2dc:	42a6      	cmp	r6, r4
 800d2de:	d109      	bne.n	800d2f4 <__libc_init_array+0x24>
 800d2e0:	2600      	movs	r6, #0
 800d2e2:	f000 f87f 	bl	800d3e4 <_init>
 800d2e6:	4c0a      	ldr	r4, [pc, #40]	; (800d310 <__libc_init_array+0x40>)
 800d2e8:	4d0a      	ldr	r5, [pc, #40]	; (800d314 <__libc_init_array+0x44>)
 800d2ea:	1b64      	subs	r4, r4, r5
 800d2ec:	10a4      	asrs	r4, r4, #2
 800d2ee:	42a6      	cmp	r6, r4
 800d2f0:	d105      	bne.n	800d2fe <__libc_init_array+0x2e>
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	00b3      	lsls	r3, r6, #2
 800d2f6:	58eb      	ldr	r3, [r5, r3]
 800d2f8:	4798      	blx	r3
 800d2fa:	3601      	adds	r6, #1
 800d2fc:	e7ee      	b.n	800d2dc <__libc_init_array+0xc>
 800d2fe:	00b3      	lsls	r3, r6, #2
 800d300:	58eb      	ldr	r3, [r5, r3]
 800d302:	4798      	blx	r3
 800d304:	3601      	adds	r6, #1
 800d306:	e7f2      	b.n	800d2ee <__libc_init_array+0x1e>
 800d308:	0800d714 	.word	0x0800d714
 800d30c:	0800d714 	.word	0x0800d714
 800d310:	0800d718 	.word	0x0800d718
 800d314:	0800d714 	.word	0x0800d714

0800d318 <__retarget_lock_acquire_recursive>:
 800d318:	4770      	bx	lr

0800d31a <__retarget_lock_release_recursive>:
 800d31a:	4770      	bx	lr

0800d31c <memcpy>:
 800d31c:	2300      	movs	r3, #0
 800d31e:	b510      	push	{r4, lr}
 800d320:	429a      	cmp	r2, r3
 800d322:	d100      	bne.n	800d326 <memcpy+0xa>
 800d324:	bd10      	pop	{r4, pc}
 800d326:	5ccc      	ldrb	r4, [r1, r3]
 800d328:	54c4      	strb	r4, [r0, r3]
 800d32a:	3301      	adds	r3, #1
 800d32c:	e7f8      	b.n	800d320 <memcpy+0x4>
	...

0800d330 <_free_r>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	0005      	movs	r5, r0
 800d334:	2900      	cmp	r1, #0
 800d336:	d010      	beq.n	800d35a <_free_r+0x2a>
 800d338:	1f0c      	subs	r4, r1, #4
 800d33a:	6823      	ldr	r3, [r4, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	da00      	bge.n	800d342 <_free_r+0x12>
 800d340:	18e4      	adds	r4, r4, r3
 800d342:	0028      	movs	r0, r5
 800d344:	f000 f83e 	bl	800d3c4 <__malloc_lock>
 800d348:	4a1d      	ldr	r2, [pc, #116]	; (800d3c0 <_free_r+0x90>)
 800d34a:	6813      	ldr	r3, [r2, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d105      	bne.n	800d35c <_free_r+0x2c>
 800d350:	6063      	str	r3, [r4, #4]
 800d352:	6014      	str	r4, [r2, #0]
 800d354:	0028      	movs	r0, r5
 800d356:	f000 f83d 	bl	800d3d4 <__malloc_unlock>
 800d35a:	bd70      	pop	{r4, r5, r6, pc}
 800d35c:	42a3      	cmp	r3, r4
 800d35e:	d908      	bls.n	800d372 <_free_r+0x42>
 800d360:	6820      	ldr	r0, [r4, #0]
 800d362:	1821      	adds	r1, r4, r0
 800d364:	428b      	cmp	r3, r1
 800d366:	d1f3      	bne.n	800d350 <_free_r+0x20>
 800d368:	6819      	ldr	r1, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	1809      	adds	r1, r1, r0
 800d36e:	6021      	str	r1, [r4, #0]
 800d370:	e7ee      	b.n	800d350 <_free_r+0x20>
 800d372:	001a      	movs	r2, r3
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <_free_r+0x4e>
 800d37a:	42a3      	cmp	r3, r4
 800d37c:	d9f9      	bls.n	800d372 <_free_r+0x42>
 800d37e:	6811      	ldr	r1, [r2, #0]
 800d380:	1850      	adds	r0, r2, r1
 800d382:	42a0      	cmp	r0, r4
 800d384:	d10b      	bne.n	800d39e <_free_r+0x6e>
 800d386:	6820      	ldr	r0, [r4, #0]
 800d388:	1809      	adds	r1, r1, r0
 800d38a:	1850      	adds	r0, r2, r1
 800d38c:	6011      	str	r1, [r2, #0]
 800d38e:	4283      	cmp	r3, r0
 800d390:	d1e0      	bne.n	800d354 <_free_r+0x24>
 800d392:	6818      	ldr	r0, [r3, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	1841      	adds	r1, r0, r1
 800d398:	6011      	str	r1, [r2, #0]
 800d39a:	6053      	str	r3, [r2, #4]
 800d39c:	e7da      	b.n	800d354 <_free_r+0x24>
 800d39e:	42a0      	cmp	r0, r4
 800d3a0:	d902      	bls.n	800d3a8 <_free_r+0x78>
 800d3a2:	230c      	movs	r3, #12
 800d3a4:	602b      	str	r3, [r5, #0]
 800d3a6:	e7d5      	b.n	800d354 <_free_r+0x24>
 800d3a8:	6820      	ldr	r0, [r4, #0]
 800d3aa:	1821      	adds	r1, r4, r0
 800d3ac:	428b      	cmp	r3, r1
 800d3ae:	d103      	bne.n	800d3b8 <_free_r+0x88>
 800d3b0:	6819      	ldr	r1, [r3, #0]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	1809      	adds	r1, r1, r0
 800d3b6:	6021      	str	r1, [r4, #0]
 800d3b8:	6063      	str	r3, [r4, #4]
 800d3ba:	6054      	str	r4, [r2, #4]
 800d3bc:	e7ca      	b.n	800d354 <_free_r+0x24>
 800d3be:	46c0      	nop			; (mov r8, r8)
 800d3c0:	20002524 	.word	0x20002524

0800d3c4 <__malloc_lock>:
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	4802      	ldr	r0, [pc, #8]	; (800d3d0 <__malloc_lock+0xc>)
 800d3c8:	f7ff ffa6 	bl	800d318 <__retarget_lock_acquire_recursive>
 800d3cc:	bd10      	pop	{r4, pc}
 800d3ce:	46c0      	nop			; (mov r8, r8)
 800d3d0:	20002520 	.word	0x20002520

0800d3d4 <__malloc_unlock>:
 800d3d4:	b510      	push	{r4, lr}
 800d3d6:	4802      	ldr	r0, [pc, #8]	; (800d3e0 <__malloc_unlock+0xc>)
 800d3d8:	f7ff ff9f 	bl	800d31a <__retarget_lock_release_recursive>
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	46c0      	nop			; (mov r8, r8)
 800d3e0:	20002520 	.word	0x20002520

0800d3e4 <_init>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	46c0      	nop			; (mov r8, r8)
 800d3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ea:	bc08      	pop	{r3}
 800d3ec:	469e      	mov	lr, r3
 800d3ee:	4770      	bx	lr

0800d3f0 <_fini>:
 800d3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3f2:	46c0      	nop			; (mov r8, r8)
 800d3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3f6:	bc08      	pop	{r3}
 800d3f8:	469e      	mov	lr, r3
 800d3fa:	4770      	bx	lr
