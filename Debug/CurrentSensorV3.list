
CurrentSensorV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbbc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800dc7c  0800dc7c  0001dc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df94  0800df94  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800df94  0800df94  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df94  0800df94  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df98  0800df98  0001df98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800df9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024b0  20000068  0800e000  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002518  0800e000  00022518  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020664  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005634  00000000  00000000  00040733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  00045d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d9  00000000  00000000  00047618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201dd  00000000  00000000  000488f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023575  00000000  00000000  00068ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5b9a  00000000  00000000  0008c043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ac4  00000000  00000000  00131be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001376a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dc64 	.word	0x0800dc64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800dc64 	.word	0x0800dc64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f001 fd43 	bl	8001e88 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f001 fca3 	bl	8001d54 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f001 f91a 	bl	8001650 <__aeabi_dsub>
 800041c:	f001 fc9a 	bl	8001d54 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_dadd>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	0004      	movs	r4, r0
 800043a:	b5c0      	push	{r6, r7, lr}
 800043c:	001f      	movs	r7, r3
 800043e:	030b      	lsls	r3, r1, #12
 8000440:	0010      	movs	r0, r2
 8000442:	004e      	lsls	r6, r1, #1
 8000444:	0a5b      	lsrs	r3, r3, #9
 8000446:	0fcd      	lsrs	r5, r1, #31
 8000448:	0f61      	lsrs	r1, r4, #29
 800044a:	007a      	lsls	r2, r7, #1
 800044c:	4319      	orrs	r1, r3
 800044e:	00e3      	lsls	r3, r4, #3
 8000450:	033c      	lsls	r4, r7, #12
 8000452:	0fff      	lsrs	r7, r7, #31
 8000454:	46bc      	mov	ip, r7
 8000456:	0a64      	lsrs	r4, r4, #9
 8000458:	0f47      	lsrs	r7, r0, #29
 800045a:	4327      	orrs	r7, r4
 800045c:	0d76      	lsrs	r6, r6, #21
 800045e:	0d52      	lsrs	r2, r2, #21
 8000460:	00c0      	lsls	r0, r0, #3
 8000462:	46b9      	mov	r9, r7
 8000464:	4680      	mov	r8, r0
 8000466:	1ab7      	subs	r7, r6, r2
 8000468:	4565      	cmp	r5, ip
 800046a:	d100      	bne.n	800046e <__aeabi_dadd+0x3e>
 800046c:	e09b      	b.n	80005a6 <__aeabi_dadd+0x176>
 800046e:	2f00      	cmp	r7, #0
 8000470:	dc00      	bgt.n	8000474 <__aeabi_dadd+0x44>
 8000472:	e084      	b.n	800057e <__aeabi_dadd+0x14e>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d100      	bne.n	800047a <__aeabi_dadd+0x4a>
 8000478:	e0be      	b.n	80005f8 <__aeabi_dadd+0x1c8>
 800047a:	4ac8      	ldr	r2, [pc, #800]	; (800079c <__aeabi_dadd+0x36c>)
 800047c:	4296      	cmp	r6, r2
 800047e:	d100      	bne.n	8000482 <__aeabi_dadd+0x52>
 8000480:	e124      	b.n	80006cc <__aeabi_dadd+0x29c>
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	464c      	mov	r4, r9
 8000486:	0412      	lsls	r2, r2, #16
 8000488:	4314      	orrs	r4, r2
 800048a:	46a1      	mov	r9, r4
 800048c:	2f38      	cmp	r7, #56	; 0x38
 800048e:	dd00      	ble.n	8000492 <__aeabi_dadd+0x62>
 8000490:	e167      	b.n	8000762 <__aeabi_dadd+0x332>
 8000492:	2f1f      	cmp	r7, #31
 8000494:	dd00      	ble.n	8000498 <__aeabi_dadd+0x68>
 8000496:	e1d6      	b.n	8000846 <__aeabi_dadd+0x416>
 8000498:	2220      	movs	r2, #32
 800049a:	464c      	mov	r4, r9
 800049c:	1bd2      	subs	r2, r2, r7
 800049e:	4094      	lsls	r4, r2
 80004a0:	46a2      	mov	sl, r4
 80004a2:	4644      	mov	r4, r8
 80004a4:	40fc      	lsrs	r4, r7
 80004a6:	0020      	movs	r0, r4
 80004a8:	4654      	mov	r4, sl
 80004aa:	4304      	orrs	r4, r0
 80004ac:	4640      	mov	r0, r8
 80004ae:	4090      	lsls	r0, r2
 80004b0:	1e42      	subs	r2, r0, #1
 80004b2:	4190      	sbcs	r0, r2
 80004b4:	464a      	mov	r2, r9
 80004b6:	40fa      	lsrs	r2, r7
 80004b8:	4304      	orrs	r4, r0
 80004ba:	1a89      	subs	r1, r1, r2
 80004bc:	1b1c      	subs	r4, r3, r4
 80004be:	42a3      	cmp	r3, r4
 80004c0:	4192      	sbcs	r2, r2
 80004c2:	4252      	negs	r2, r2
 80004c4:	1a8b      	subs	r3, r1, r2
 80004c6:	469a      	mov	sl, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	021b      	lsls	r3, r3, #8
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_dadd+0xa0>
 80004ce:	e0d4      	b.n	800067a <__aeabi_dadd+0x24a>
 80004d0:	4653      	mov	r3, sl
 80004d2:	025a      	lsls	r2, r3, #9
 80004d4:	0a53      	lsrs	r3, r2, #9
 80004d6:	469a      	mov	sl, r3
 80004d8:	4653      	mov	r3, sl
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dadd+0xb0>
 80004de:	e104      	b.n	80006ea <__aeabi_dadd+0x2ba>
 80004e0:	4650      	mov	r0, sl
 80004e2:	f001 fcdb 	bl	8001e9c <__clzsi2>
 80004e6:	0003      	movs	r3, r0
 80004e8:	3b08      	subs	r3, #8
 80004ea:	2220      	movs	r2, #32
 80004ec:	0020      	movs	r0, r4
 80004ee:	1ad2      	subs	r2, r2, r3
 80004f0:	4651      	mov	r1, sl
 80004f2:	40d0      	lsrs	r0, r2
 80004f4:	4099      	lsls	r1, r3
 80004f6:	0002      	movs	r2, r0
 80004f8:	409c      	lsls	r4, r3
 80004fa:	430a      	orrs	r2, r1
 80004fc:	42b3      	cmp	r3, r6
 80004fe:	da00      	bge.n	8000502 <__aeabi_dadd+0xd2>
 8000500:	e102      	b.n	8000708 <__aeabi_dadd+0x2d8>
 8000502:	1b9b      	subs	r3, r3, r6
 8000504:	1c59      	adds	r1, r3, #1
 8000506:	291f      	cmp	r1, #31
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0xdc>
 800050a:	e0a7      	b.n	800065c <__aeabi_dadd+0x22c>
 800050c:	2320      	movs	r3, #32
 800050e:	0010      	movs	r0, r2
 8000510:	0026      	movs	r6, r4
 8000512:	1a5b      	subs	r3, r3, r1
 8000514:	409c      	lsls	r4, r3
 8000516:	4098      	lsls	r0, r3
 8000518:	40ce      	lsrs	r6, r1
 800051a:	40ca      	lsrs	r2, r1
 800051c:	1e63      	subs	r3, r4, #1
 800051e:	419c      	sbcs	r4, r3
 8000520:	4330      	orrs	r0, r6
 8000522:	4692      	mov	sl, r2
 8000524:	2600      	movs	r6, #0
 8000526:	4304      	orrs	r4, r0
 8000528:	0763      	lsls	r3, r4, #29
 800052a:	d009      	beq.n	8000540 <__aeabi_dadd+0x110>
 800052c:	230f      	movs	r3, #15
 800052e:	4023      	ands	r3, r4
 8000530:	2b04      	cmp	r3, #4
 8000532:	d005      	beq.n	8000540 <__aeabi_dadd+0x110>
 8000534:	1d23      	adds	r3, r4, #4
 8000536:	42a3      	cmp	r3, r4
 8000538:	41a4      	sbcs	r4, r4
 800053a:	4264      	negs	r4, r4
 800053c:	44a2      	add	sl, r4
 800053e:	001c      	movs	r4, r3
 8000540:	4653      	mov	r3, sl
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	d400      	bmi.n	8000548 <__aeabi_dadd+0x118>
 8000546:	e09b      	b.n	8000680 <__aeabi_dadd+0x250>
 8000548:	4b94      	ldr	r3, [pc, #592]	; (800079c <__aeabi_dadd+0x36c>)
 800054a:	3601      	adds	r6, #1
 800054c:	429e      	cmp	r6, r3
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0x122>
 8000550:	e0b8      	b.n	80006c4 <__aeabi_dadd+0x294>
 8000552:	4653      	mov	r3, sl
 8000554:	4992      	ldr	r1, [pc, #584]	; (80007a0 <__aeabi_dadd+0x370>)
 8000556:	08e4      	lsrs	r4, r4, #3
 8000558:	400b      	ands	r3, r1
 800055a:	0019      	movs	r1, r3
 800055c:	075b      	lsls	r3, r3, #29
 800055e:	4323      	orrs	r3, r4
 8000560:	0572      	lsls	r2, r6, #21
 8000562:	024c      	lsls	r4, r1, #9
 8000564:	0b24      	lsrs	r4, r4, #12
 8000566:	0d52      	lsrs	r2, r2, #21
 8000568:	0512      	lsls	r2, r2, #20
 800056a:	07ed      	lsls	r5, r5, #31
 800056c:	4322      	orrs	r2, r4
 800056e:	432a      	orrs	r2, r5
 8000570:	0018      	movs	r0, r3
 8000572:	0011      	movs	r1, r2
 8000574:	bce0      	pop	{r5, r6, r7}
 8000576:	46ba      	mov	sl, r7
 8000578:	46b1      	mov	r9, r6
 800057a:	46a8      	mov	r8, r5
 800057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057e:	2f00      	cmp	r7, #0
 8000580:	d048      	beq.n	8000614 <__aeabi_dadd+0x1e4>
 8000582:	1b97      	subs	r7, r2, r6
 8000584:	2e00      	cmp	r6, #0
 8000586:	d000      	beq.n	800058a <__aeabi_dadd+0x15a>
 8000588:	e10e      	b.n	80007a8 <__aeabi_dadd+0x378>
 800058a:	000c      	movs	r4, r1
 800058c:	431c      	orrs	r4, r3
 800058e:	d100      	bne.n	8000592 <__aeabi_dadd+0x162>
 8000590:	e1b7      	b.n	8000902 <__aeabi_dadd+0x4d2>
 8000592:	1e7c      	subs	r4, r7, #1
 8000594:	2f01      	cmp	r7, #1
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x16a>
 8000598:	e226      	b.n	80009e8 <__aeabi_dadd+0x5b8>
 800059a:	4d80      	ldr	r5, [pc, #512]	; (800079c <__aeabi_dadd+0x36c>)
 800059c:	42af      	cmp	r7, r5
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0x172>
 80005a0:	e1d5      	b.n	800094e <__aeabi_dadd+0x51e>
 80005a2:	0027      	movs	r7, r4
 80005a4:	e107      	b.n	80007b6 <__aeabi_dadd+0x386>
 80005a6:	2f00      	cmp	r7, #0
 80005a8:	dc00      	bgt.n	80005ac <__aeabi_dadd+0x17c>
 80005aa:	e0b2      	b.n	8000712 <__aeabi_dadd+0x2e2>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d047      	beq.n	8000640 <__aeabi_dadd+0x210>
 80005b0:	4a7a      	ldr	r2, [pc, #488]	; (800079c <__aeabi_dadd+0x36c>)
 80005b2:	4296      	cmp	r6, r2
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x188>
 80005b6:	e089      	b.n	80006cc <__aeabi_dadd+0x29c>
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	464c      	mov	r4, r9
 80005bc:	0412      	lsls	r2, r2, #16
 80005be:	4314      	orrs	r4, r2
 80005c0:	46a1      	mov	r9, r4
 80005c2:	2f38      	cmp	r7, #56	; 0x38
 80005c4:	dc6b      	bgt.n	800069e <__aeabi_dadd+0x26e>
 80005c6:	2f1f      	cmp	r7, #31
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_dadd+0x19c>
 80005ca:	e16e      	b.n	80008aa <__aeabi_dadd+0x47a>
 80005cc:	003a      	movs	r2, r7
 80005ce:	4648      	mov	r0, r9
 80005d0:	3a20      	subs	r2, #32
 80005d2:	40d0      	lsrs	r0, r2
 80005d4:	4684      	mov	ip, r0
 80005d6:	2f20      	cmp	r7, #32
 80005d8:	d007      	beq.n	80005ea <__aeabi_dadd+0x1ba>
 80005da:	2240      	movs	r2, #64	; 0x40
 80005dc:	4648      	mov	r0, r9
 80005de:	1bd2      	subs	r2, r2, r7
 80005e0:	4090      	lsls	r0, r2
 80005e2:	0002      	movs	r2, r0
 80005e4:	4640      	mov	r0, r8
 80005e6:	4310      	orrs	r0, r2
 80005e8:	4680      	mov	r8, r0
 80005ea:	4640      	mov	r0, r8
 80005ec:	1e42      	subs	r2, r0, #1
 80005ee:	4190      	sbcs	r0, r2
 80005f0:	4662      	mov	r2, ip
 80005f2:	0004      	movs	r4, r0
 80005f4:	4314      	orrs	r4, r2
 80005f6:	e057      	b.n	80006a8 <__aeabi_dadd+0x278>
 80005f8:	464a      	mov	r2, r9
 80005fa:	4302      	orrs	r2, r0
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x1d0>
 80005fe:	e103      	b.n	8000808 <__aeabi_dadd+0x3d8>
 8000600:	1e7a      	subs	r2, r7, #1
 8000602:	2f01      	cmp	r7, #1
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x1d8>
 8000606:	e193      	b.n	8000930 <__aeabi_dadd+0x500>
 8000608:	4c64      	ldr	r4, [pc, #400]	; (800079c <__aeabi_dadd+0x36c>)
 800060a:	42a7      	cmp	r7, r4
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0x1e0>
 800060e:	e18a      	b.n	8000926 <__aeabi_dadd+0x4f6>
 8000610:	0017      	movs	r7, r2
 8000612:	e73b      	b.n	800048c <__aeabi_dadd+0x5c>
 8000614:	4c63      	ldr	r4, [pc, #396]	; (80007a4 <__aeabi_dadd+0x374>)
 8000616:	1c72      	adds	r2, r6, #1
 8000618:	4222      	tst	r2, r4
 800061a:	d000      	beq.n	800061e <__aeabi_dadd+0x1ee>
 800061c:	e0e0      	b.n	80007e0 <__aeabi_dadd+0x3b0>
 800061e:	000a      	movs	r2, r1
 8000620:	431a      	orrs	r2, r3
 8000622:	2e00      	cmp	r6, #0
 8000624:	d000      	beq.n	8000628 <__aeabi_dadd+0x1f8>
 8000626:	e174      	b.n	8000912 <__aeabi_dadd+0x4e2>
 8000628:	2a00      	cmp	r2, #0
 800062a:	d100      	bne.n	800062e <__aeabi_dadd+0x1fe>
 800062c:	e1d0      	b.n	80009d0 <__aeabi_dadd+0x5a0>
 800062e:	464a      	mov	r2, r9
 8000630:	4302      	orrs	r2, r0
 8000632:	d000      	beq.n	8000636 <__aeabi_dadd+0x206>
 8000634:	e1e3      	b.n	80009fe <__aeabi_dadd+0x5ce>
 8000636:	074a      	lsls	r2, r1, #29
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	4313      	orrs	r3, r2
 800063c:	08c9      	lsrs	r1, r1, #3
 800063e:	e029      	b.n	8000694 <__aeabi_dadd+0x264>
 8000640:	464a      	mov	r2, r9
 8000642:	4302      	orrs	r2, r0
 8000644:	d100      	bne.n	8000648 <__aeabi_dadd+0x218>
 8000646:	e17d      	b.n	8000944 <__aeabi_dadd+0x514>
 8000648:	1e7a      	subs	r2, r7, #1
 800064a:	2f01      	cmp	r7, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_dadd+0x220>
 800064e:	e0e0      	b.n	8000812 <__aeabi_dadd+0x3e2>
 8000650:	4c52      	ldr	r4, [pc, #328]	; (800079c <__aeabi_dadd+0x36c>)
 8000652:	42a7      	cmp	r7, r4
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x228>
 8000656:	e166      	b.n	8000926 <__aeabi_dadd+0x4f6>
 8000658:	0017      	movs	r7, r2
 800065a:	e7b2      	b.n	80005c2 <__aeabi_dadd+0x192>
 800065c:	0010      	movs	r0, r2
 800065e:	3b1f      	subs	r3, #31
 8000660:	40d8      	lsrs	r0, r3
 8000662:	2920      	cmp	r1, #32
 8000664:	d003      	beq.n	800066e <__aeabi_dadd+0x23e>
 8000666:	2340      	movs	r3, #64	; 0x40
 8000668:	1a5b      	subs	r3, r3, r1
 800066a:	409a      	lsls	r2, r3
 800066c:	4314      	orrs	r4, r2
 800066e:	1e63      	subs	r3, r4, #1
 8000670:	419c      	sbcs	r4, r3
 8000672:	2300      	movs	r3, #0
 8000674:	2600      	movs	r6, #0
 8000676:	469a      	mov	sl, r3
 8000678:	4304      	orrs	r4, r0
 800067a:	0763      	lsls	r3, r4, #29
 800067c:	d000      	beq.n	8000680 <__aeabi_dadd+0x250>
 800067e:	e755      	b.n	800052c <__aeabi_dadd+0xfc>
 8000680:	4652      	mov	r2, sl
 8000682:	08e3      	lsrs	r3, r4, #3
 8000684:	0752      	lsls	r2, r2, #29
 8000686:	4313      	orrs	r3, r2
 8000688:	4652      	mov	r2, sl
 800068a:	0037      	movs	r7, r6
 800068c:	08d1      	lsrs	r1, r2, #3
 800068e:	4a43      	ldr	r2, [pc, #268]	; (800079c <__aeabi_dadd+0x36c>)
 8000690:	4297      	cmp	r7, r2
 8000692:	d01f      	beq.n	80006d4 <__aeabi_dadd+0x2a4>
 8000694:	0309      	lsls	r1, r1, #12
 8000696:	057a      	lsls	r2, r7, #21
 8000698:	0b0c      	lsrs	r4, r1, #12
 800069a:	0d52      	lsrs	r2, r2, #21
 800069c:	e764      	b.n	8000568 <__aeabi_dadd+0x138>
 800069e:	4642      	mov	r2, r8
 80006a0:	464c      	mov	r4, r9
 80006a2:	4314      	orrs	r4, r2
 80006a4:	1e62      	subs	r2, r4, #1
 80006a6:	4194      	sbcs	r4, r2
 80006a8:	18e4      	adds	r4, r4, r3
 80006aa:	429c      	cmp	r4, r3
 80006ac:	4192      	sbcs	r2, r2
 80006ae:	4252      	negs	r2, r2
 80006b0:	4692      	mov	sl, r2
 80006b2:	448a      	add	sl, r1
 80006b4:	4653      	mov	r3, sl
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	d5df      	bpl.n	800067a <__aeabi_dadd+0x24a>
 80006ba:	4b38      	ldr	r3, [pc, #224]	; (800079c <__aeabi_dadd+0x36c>)
 80006bc:	3601      	adds	r6, #1
 80006be:	429e      	cmp	r6, r3
 80006c0:	d000      	beq.n	80006c4 <__aeabi_dadd+0x294>
 80006c2:	e0b3      	b.n	800082c <__aeabi_dadd+0x3fc>
 80006c4:	0032      	movs	r2, r6
 80006c6:	2400      	movs	r4, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	e74d      	b.n	8000568 <__aeabi_dadd+0x138>
 80006cc:	074a      	lsls	r2, r1, #29
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	08c9      	lsrs	r1, r1, #3
 80006d4:	001a      	movs	r2, r3
 80006d6:	430a      	orrs	r2, r1
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x2ac>
 80006da:	e200      	b.n	8000ade <__aeabi_dadd+0x6ae>
 80006dc:	2480      	movs	r4, #128	; 0x80
 80006de:	0324      	lsls	r4, r4, #12
 80006e0:	430c      	orrs	r4, r1
 80006e2:	0324      	lsls	r4, r4, #12
 80006e4:	4a2d      	ldr	r2, [pc, #180]	; (800079c <__aeabi_dadd+0x36c>)
 80006e6:	0b24      	lsrs	r4, r4, #12
 80006e8:	e73e      	b.n	8000568 <__aeabi_dadd+0x138>
 80006ea:	0020      	movs	r0, r4
 80006ec:	f001 fbd6 	bl	8001e9c <__clzsi2>
 80006f0:	0003      	movs	r3, r0
 80006f2:	3318      	adds	r3, #24
 80006f4:	2b1f      	cmp	r3, #31
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_dadd+0x2ca>
 80006f8:	e6f7      	b.n	80004ea <__aeabi_dadd+0xba>
 80006fa:	0022      	movs	r2, r4
 80006fc:	3808      	subs	r0, #8
 80006fe:	4082      	lsls	r2, r0
 8000700:	2400      	movs	r4, #0
 8000702:	42b3      	cmp	r3, r6
 8000704:	db00      	blt.n	8000708 <__aeabi_dadd+0x2d8>
 8000706:	e6fc      	b.n	8000502 <__aeabi_dadd+0xd2>
 8000708:	1af6      	subs	r6, r6, r3
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <__aeabi_dadd+0x370>)
 800070c:	401a      	ands	r2, r3
 800070e:	4692      	mov	sl, r2
 8000710:	e70a      	b.n	8000528 <__aeabi_dadd+0xf8>
 8000712:	2f00      	cmp	r7, #0
 8000714:	d02b      	beq.n	800076e <__aeabi_dadd+0x33e>
 8000716:	1b97      	subs	r7, r2, r6
 8000718:	2e00      	cmp	r6, #0
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x2ee>
 800071c:	e0b8      	b.n	8000890 <__aeabi_dadd+0x460>
 800071e:	4c1f      	ldr	r4, [pc, #124]	; (800079c <__aeabi_dadd+0x36c>)
 8000720:	42a2      	cmp	r2, r4
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x2f6>
 8000724:	e11c      	b.n	8000960 <__aeabi_dadd+0x530>
 8000726:	2480      	movs	r4, #128	; 0x80
 8000728:	0424      	lsls	r4, r4, #16
 800072a:	4321      	orrs	r1, r4
 800072c:	2f38      	cmp	r7, #56	; 0x38
 800072e:	dd00      	ble.n	8000732 <__aeabi_dadd+0x302>
 8000730:	e11e      	b.n	8000970 <__aeabi_dadd+0x540>
 8000732:	2f1f      	cmp	r7, #31
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0x308>
 8000736:	e19e      	b.n	8000a76 <__aeabi_dadd+0x646>
 8000738:	2620      	movs	r6, #32
 800073a:	000c      	movs	r4, r1
 800073c:	1bf6      	subs	r6, r6, r7
 800073e:	0018      	movs	r0, r3
 8000740:	40b3      	lsls	r3, r6
 8000742:	40b4      	lsls	r4, r6
 8000744:	40f8      	lsrs	r0, r7
 8000746:	1e5e      	subs	r6, r3, #1
 8000748:	41b3      	sbcs	r3, r6
 800074a:	40f9      	lsrs	r1, r7
 800074c:	4304      	orrs	r4, r0
 800074e:	431c      	orrs	r4, r3
 8000750:	4489      	add	r9, r1
 8000752:	4444      	add	r4, r8
 8000754:	4544      	cmp	r4, r8
 8000756:	419b      	sbcs	r3, r3
 8000758:	425b      	negs	r3, r3
 800075a:	444b      	add	r3, r9
 800075c:	469a      	mov	sl, r3
 800075e:	0016      	movs	r6, r2
 8000760:	e7a8      	b.n	80006b4 <__aeabi_dadd+0x284>
 8000762:	4642      	mov	r2, r8
 8000764:	464c      	mov	r4, r9
 8000766:	4314      	orrs	r4, r2
 8000768:	1e62      	subs	r2, r4, #1
 800076a:	4194      	sbcs	r4, r2
 800076c:	e6a6      	b.n	80004bc <__aeabi_dadd+0x8c>
 800076e:	4c0d      	ldr	r4, [pc, #52]	; (80007a4 <__aeabi_dadd+0x374>)
 8000770:	1c72      	adds	r2, r6, #1
 8000772:	4222      	tst	r2, r4
 8000774:	d000      	beq.n	8000778 <__aeabi_dadd+0x348>
 8000776:	e0a8      	b.n	80008ca <__aeabi_dadd+0x49a>
 8000778:	000a      	movs	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	2e00      	cmp	r6, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x352>
 8000780:	e10a      	b.n	8000998 <__aeabi_dadd+0x568>
 8000782:	2a00      	cmp	r2, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x358>
 8000786:	e15e      	b.n	8000a46 <__aeabi_dadd+0x616>
 8000788:	464a      	mov	r2, r9
 800078a:	4302      	orrs	r2, r0
 800078c:	d000      	beq.n	8000790 <__aeabi_dadd+0x360>
 800078e:	e161      	b.n	8000a54 <__aeabi_dadd+0x624>
 8000790:	074a      	lsls	r2, r1, #29
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	4313      	orrs	r3, r2
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	e77c      	b.n	8000694 <__aeabi_dadd+0x264>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	000007ff 	.word	0x000007ff
 80007a0:	ff7fffff 	.word	0xff7fffff
 80007a4:	000007fe 	.word	0x000007fe
 80007a8:	4ccf      	ldr	r4, [pc, #828]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 80007aa:	42a2      	cmp	r2, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x380>
 80007ae:	e0ce      	b.n	800094e <__aeabi_dadd+0x51e>
 80007b0:	2480      	movs	r4, #128	; 0x80
 80007b2:	0424      	lsls	r4, r4, #16
 80007b4:	4321      	orrs	r1, r4
 80007b6:	2f38      	cmp	r7, #56	; 0x38
 80007b8:	dc5b      	bgt.n	8000872 <__aeabi_dadd+0x442>
 80007ba:	2f1f      	cmp	r7, #31
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_dadd+0x390>
 80007be:	e0dc      	b.n	800097a <__aeabi_dadd+0x54a>
 80007c0:	2520      	movs	r5, #32
 80007c2:	000c      	movs	r4, r1
 80007c4:	1bed      	subs	r5, r5, r7
 80007c6:	001e      	movs	r6, r3
 80007c8:	40ab      	lsls	r3, r5
 80007ca:	40ac      	lsls	r4, r5
 80007cc:	40fe      	lsrs	r6, r7
 80007ce:	1e5d      	subs	r5, r3, #1
 80007d0:	41ab      	sbcs	r3, r5
 80007d2:	4334      	orrs	r4, r6
 80007d4:	40f9      	lsrs	r1, r7
 80007d6:	431c      	orrs	r4, r3
 80007d8:	464b      	mov	r3, r9
 80007da:	1a5b      	subs	r3, r3, r1
 80007dc:	4699      	mov	r9, r3
 80007de:	e04c      	b.n	800087a <__aeabi_dadd+0x44a>
 80007e0:	464a      	mov	r2, r9
 80007e2:	1a1c      	subs	r4, r3, r0
 80007e4:	1a88      	subs	r0, r1, r2
 80007e6:	42a3      	cmp	r3, r4
 80007e8:	4192      	sbcs	r2, r2
 80007ea:	4252      	negs	r2, r2
 80007ec:	4692      	mov	sl, r2
 80007ee:	0002      	movs	r2, r0
 80007f0:	4650      	mov	r0, sl
 80007f2:	1a12      	subs	r2, r2, r0
 80007f4:	4692      	mov	sl, r2
 80007f6:	0212      	lsls	r2, r2, #8
 80007f8:	d478      	bmi.n	80008ec <__aeabi_dadd+0x4bc>
 80007fa:	4653      	mov	r3, sl
 80007fc:	4323      	orrs	r3, r4
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x3d2>
 8000800:	e66a      	b.n	80004d8 <__aeabi_dadd+0xa8>
 8000802:	2100      	movs	r1, #0
 8000804:	2500      	movs	r5, #0
 8000806:	e745      	b.n	8000694 <__aeabi_dadd+0x264>
 8000808:	074a      	lsls	r2, r1, #29
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	4313      	orrs	r3, r2
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	e73d      	b.n	800068e <__aeabi_dadd+0x25e>
 8000812:	181c      	adds	r4, r3, r0
 8000814:	429c      	cmp	r4, r3
 8000816:	419b      	sbcs	r3, r3
 8000818:	4449      	add	r1, r9
 800081a:	468a      	mov	sl, r1
 800081c:	425b      	negs	r3, r3
 800081e:	449a      	add	sl, r3
 8000820:	4653      	mov	r3, sl
 8000822:	2601      	movs	r6, #1
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	d400      	bmi.n	800082a <__aeabi_dadd+0x3fa>
 8000828:	e727      	b.n	800067a <__aeabi_dadd+0x24a>
 800082a:	2602      	movs	r6, #2
 800082c:	4652      	mov	r2, sl
 800082e:	4baf      	ldr	r3, [pc, #700]	; (8000aec <__aeabi_dadd+0x6bc>)
 8000830:	2101      	movs	r1, #1
 8000832:	401a      	ands	r2, r3
 8000834:	0013      	movs	r3, r2
 8000836:	4021      	ands	r1, r4
 8000838:	0862      	lsrs	r2, r4, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	07dc      	lsls	r4, r3, #31
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	469a      	mov	sl, r3
 8000842:	4314      	orrs	r4, r2
 8000844:	e670      	b.n	8000528 <__aeabi_dadd+0xf8>
 8000846:	003a      	movs	r2, r7
 8000848:	464c      	mov	r4, r9
 800084a:	3a20      	subs	r2, #32
 800084c:	40d4      	lsrs	r4, r2
 800084e:	46a4      	mov	ip, r4
 8000850:	2f20      	cmp	r7, #32
 8000852:	d007      	beq.n	8000864 <__aeabi_dadd+0x434>
 8000854:	2240      	movs	r2, #64	; 0x40
 8000856:	4648      	mov	r0, r9
 8000858:	1bd2      	subs	r2, r2, r7
 800085a:	4090      	lsls	r0, r2
 800085c:	0002      	movs	r2, r0
 800085e:	4640      	mov	r0, r8
 8000860:	4310      	orrs	r0, r2
 8000862:	4680      	mov	r8, r0
 8000864:	4640      	mov	r0, r8
 8000866:	1e42      	subs	r2, r0, #1
 8000868:	4190      	sbcs	r0, r2
 800086a:	4662      	mov	r2, ip
 800086c:	0004      	movs	r4, r0
 800086e:	4314      	orrs	r4, r2
 8000870:	e624      	b.n	80004bc <__aeabi_dadd+0x8c>
 8000872:	4319      	orrs	r1, r3
 8000874:	000c      	movs	r4, r1
 8000876:	1e63      	subs	r3, r4, #1
 8000878:	419c      	sbcs	r4, r3
 800087a:	4643      	mov	r3, r8
 800087c:	1b1c      	subs	r4, r3, r4
 800087e:	45a0      	cmp	r8, r4
 8000880:	419b      	sbcs	r3, r3
 8000882:	4649      	mov	r1, r9
 8000884:	425b      	negs	r3, r3
 8000886:	1acb      	subs	r3, r1, r3
 8000888:	469a      	mov	sl, r3
 800088a:	4665      	mov	r5, ip
 800088c:	0016      	movs	r6, r2
 800088e:	e61b      	b.n	80004c8 <__aeabi_dadd+0x98>
 8000890:	000c      	movs	r4, r1
 8000892:	431c      	orrs	r4, r3
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x468>
 8000896:	e0c7      	b.n	8000a28 <__aeabi_dadd+0x5f8>
 8000898:	1e7c      	subs	r4, r7, #1
 800089a:	2f01      	cmp	r7, #1
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x470>
 800089e:	e0f9      	b.n	8000a94 <__aeabi_dadd+0x664>
 80008a0:	4e91      	ldr	r6, [pc, #580]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 80008a2:	42b7      	cmp	r7, r6
 80008a4:	d05c      	beq.n	8000960 <__aeabi_dadd+0x530>
 80008a6:	0027      	movs	r7, r4
 80008a8:	e740      	b.n	800072c <__aeabi_dadd+0x2fc>
 80008aa:	2220      	movs	r2, #32
 80008ac:	464c      	mov	r4, r9
 80008ae:	4640      	mov	r0, r8
 80008b0:	1bd2      	subs	r2, r2, r7
 80008b2:	4094      	lsls	r4, r2
 80008b4:	40f8      	lsrs	r0, r7
 80008b6:	4304      	orrs	r4, r0
 80008b8:	4640      	mov	r0, r8
 80008ba:	4090      	lsls	r0, r2
 80008bc:	1e42      	subs	r2, r0, #1
 80008be:	4190      	sbcs	r0, r2
 80008c0:	464a      	mov	r2, r9
 80008c2:	40fa      	lsrs	r2, r7
 80008c4:	4304      	orrs	r4, r0
 80008c6:	1889      	adds	r1, r1, r2
 80008c8:	e6ee      	b.n	80006a8 <__aeabi_dadd+0x278>
 80008ca:	4c87      	ldr	r4, [pc, #540]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 80008cc:	42a2      	cmp	r2, r4
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x4a2>
 80008d0:	e6f9      	b.n	80006c6 <__aeabi_dadd+0x296>
 80008d2:	1818      	adds	r0, r3, r0
 80008d4:	4298      	cmp	r0, r3
 80008d6:	419b      	sbcs	r3, r3
 80008d8:	4449      	add	r1, r9
 80008da:	425b      	negs	r3, r3
 80008dc:	18cb      	adds	r3, r1, r3
 80008de:	07dc      	lsls	r4, r3, #31
 80008e0:	0840      	lsrs	r0, r0, #1
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	469a      	mov	sl, r3
 80008e6:	0016      	movs	r6, r2
 80008e8:	4304      	orrs	r4, r0
 80008ea:	e6c6      	b.n	800067a <__aeabi_dadd+0x24a>
 80008ec:	4642      	mov	r2, r8
 80008ee:	1ad4      	subs	r4, r2, r3
 80008f0:	45a0      	cmp	r8, r4
 80008f2:	4180      	sbcs	r0, r0
 80008f4:	464b      	mov	r3, r9
 80008f6:	4240      	negs	r0, r0
 80008f8:	1a59      	subs	r1, r3, r1
 80008fa:	1a0b      	subs	r3, r1, r0
 80008fc:	469a      	mov	sl, r3
 80008fe:	4665      	mov	r5, ip
 8000900:	e5ea      	b.n	80004d8 <__aeabi_dadd+0xa8>
 8000902:	464b      	mov	r3, r9
 8000904:	464a      	mov	r2, r9
 8000906:	08c0      	lsrs	r0, r0, #3
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	4665      	mov	r5, ip
 800090c:	4303      	orrs	r3, r0
 800090e:	08d1      	lsrs	r1, r2, #3
 8000910:	e6bd      	b.n	800068e <__aeabi_dadd+0x25e>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d000      	beq.n	8000918 <__aeabi_dadd+0x4e8>
 8000916:	e08e      	b.n	8000a36 <__aeabi_dadd+0x606>
 8000918:	464b      	mov	r3, r9
 800091a:	4303      	orrs	r3, r0
 800091c:	d117      	bne.n	800094e <__aeabi_dadd+0x51e>
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	2500      	movs	r5, #0
 8000922:	0309      	lsls	r1, r1, #12
 8000924:	e6da      	b.n	80006dc <__aeabi_dadd+0x2ac>
 8000926:	074a      	lsls	r2, r1, #29
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	4313      	orrs	r3, r2
 800092c:	08c9      	lsrs	r1, r1, #3
 800092e:	e6d1      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000930:	1a1c      	subs	r4, r3, r0
 8000932:	464a      	mov	r2, r9
 8000934:	42a3      	cmp	r3, r4
 8000936:	419b      	sbcs	r3, r3
 8000938:	1a89      	subs	r1, r1, r2
 800093a:	425b      	negs	r3, r3
 800093c:	1acb      	subs	r3, r1, r3
 800093e:	469a      	mov	sl, r3
 8000940:	2601      	movs	r6, #1
 8000942:	e5c1      	b.n	80004c8 <__aeabi_dadd+0x98>
 8000944:	074a      	lsls	r2, r1, #29
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	4313      	orrs	r3, r2
 800094a:	08c9      	lsrs	r1, r1, #3
 800094c:	e69f      	b.n	800068e <__aeabi_dadd+0x25e>
 800094e:	4643      	mov	r3, r8
 8000950:	08d8      	lsrs	r0, r3, #3
 8000952:	464b      	mov	r3, r9
 8000954:	464a      	mov	r2, r9
 8000956:	075b      	lsls	r3, r3, #29
 8000958:	4665      	mov	r5, ip
 800095a:	4303      	orrs	r3, r0
 800095c:	08d1      	lsrs	r1, r2, #3
 800095e:	e6b9      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000960:	4643      	mov	r3, r8
 8000962:	08d8      	lsrs	r0, r3, #3
 8000964:	464b      	mov	r3, r9
 8000966:	464a      	mov	r2, r9
 8000968:	075b      	lsls	r3, r3, #29
 800096a:	4303      	orrs	r3, r0
 800096c:	08d1      	lsrs	r1, r2, #3
 800096e:	e6b1      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000970:	4319      	orrs	r1, r3
 8000972:	000c      	movs	r4, r1
 8000974:	1e63      	subs	r3, r4, #1
 8000976:	419c      	sbcs	r4, r3
 8000978:	e6eb      	b.n	8000752 <__aeabi_dadd+0x322>
 800097a:	003c      	movs	r4, r7
 800097c:	000d      	movs	r5, r1
 800097e:	3c20      	subs	r4, #32
 8000980:	40e5      	lsrs	r5, r4
 8000982:	2f20      	cmp	r7, #32
 8000984:	d003      	beq.n	800098e <__aeabi_dadd+0x55e>
 8000986:	2440      	movs	r4, #64	; 0x40
 8000988:	1be4      	subs	r4, r4, r7
 800098a:	40a1      	lsls	r1, r4
 800098c:	430b      	orrs	r3, r1
 800098e:	001c      	movs	r4, r3
 8000990:	1e63      	subs	r3, r4, #1
 8000992:	419c      	sbcs	r4, r3
 8000994:	432c      	orrs	r4, r5
 8000996:	e770      	b.n	800087a <__aeabi_dadd+0x44a>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d0e1      	beq.n	8000960 <__aeabi_dadd+0x530>
 800099c:	464a      	mov	r2, r9
 800099e:	4302      	orrs	r2, r0
 80009a0:	d0c1      	beq.n	8000926 <__aeabi_dadd+0x4f6>
 80009a2:	074a      	lsls	r2, r1, #29
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	08c9      	lsrs	r1, r1, #3
 80009ac:	0312      	lsls	r2, r2, #12
 80009ae:	4211      	tst	r1, r2
 80009b0:	d008      	beq.n	80009c4 <__aeabi_dadd+0x594>
 80009b2:	4648      	mov	r0, r9
 80009b4:	08c4      	lsrs	r4, r0, #3
 80009b6:	4214      	tst	r4, r2
 80009b8:	d104      	bne.n	80009c4 <__aeabi_dadd+0x594>
 80009ba:	4643      	mov	r3, r8
 80009bc:	0021      	movs	r1, r4
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	0742      	lsls	r2, r0, #29
 80009c2:	4313      	orrs	r3, r2
 80009c4:	0f5a      	lsrs	r2, r3, #29
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	0752      	lsls	r2, r2, #29
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	e681      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 80009d0:	464b      	mov	r3, r9
 80009d2:	4303      	orrs	r3, r0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x5a8>
 80009d6:	e714      	b.n	8000802 <__aeabi_dadd+0x3d2>
 80009d8:	464b      	mov	r3, r9
 80009da:	464a      	mov	r2, r9
 80009dc:	08c0      	lsrs	r0, r0, #3
 80009de:	075b      	lsls	r3, r3, #29
 80009e0:	4665      	mov	r5, ip
 80009e2:	4303      	orrs	r3, r0
 80009e4:	08d1      	lsrs	r1, r2, #3
 80009e6:	e655      	b.n	8000694 <__aeabi_dadd+0x264>
 80009e8:	1ac4      	subs	r4, r0, r3
 80009ea:	45a0      	cmp	r8, r4
 80009ec:	4180      	sbcs	r0, r0
 80009ee:	464b      	mov	r3, r9
 80009f0:	4240      	negs	r0, r0
 80009f2:	1a59      	subs	r1, r3, r1
 80009f4:	1a0b      	subs	r3, r1, r0
 80009f6:	469a      	mov	sl, r3
 80009f8:	4665      	mov	r5, ip
 80009fa:	2601      	movs	r6, #1
 80009fc:	e564      	b.n	80004c8 <__aeabi_dadd+0x98>
 80009fe:	1a1c      	subs	r4, r3, r0
 8000a00:	464a      	mov	r2, r9
 8000a02:	42a3      	cmp	r3, r4
 8000a04:	4180      	sbcs	r0, r0
 8000a06:	1a8a      	subs	r2, r1, r2
 8000a08:	4240      	negs	r0, r0
 8000a0a:	1a12      	subs	r2, r2, r0
 8000a0c:	4692      	mov	sl, r2
 8000a0e:	0212      	lsls	r2, r2, #8
 8000a10:	d549      	bpl.n	8000aa6 <__aeabi_dadd+0x676>
 8000a12:	4642      	mov	r2, r8
 8000a14:	1ad4      	subs	r4, r2, r3
 8000a16:	45a0      	cmp	r8, r4
 8000a18:	4180      	sbcs	r0, r0
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	4240      	negs	r0, r0
 8000a1e:	1a59      	subs	r1, r3, r1
 8000a20:	1a0b      	subs	r3, r1, r0
 8000a22:	469a      	mov	sl, r3
 8000a24:	4665      	mov	r5, ip
 8000a26:	e57f      	b.n	8000528 <__aeabi_dadd+0xf8>
 8000a28:	464b      	mov	r3, r9
 8000a2a:	464a      	mov	r2, r9
 8000a2c:	08c0      	lsrs	r0, r0, #3
 8000a2e:	075b      	lsls	r3, r3, #29
 8000a30:	4303      	orrs	r3, r0
 8000a32:	08d1      	lsrs	r1, r2, #3
 8000a34:	e62b      	b.n	800068e <__aeabi_dadd+0x25e>
 8000a36:	464a      	mov	r2, r9
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	4302      	orrs	r2, r0
 8000a3c:	d138      	bne.n	8000ab0 <__aeabi_dadd+0x680>
 8000a3e:	074a      	lsls	r2, r1, #29
 8000a40:	4313      	orrs	r3, r2
 8000a42:	08c9      	lsrs	r1, r1, #3
 8000a44:	e646      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000a46:	464b      	mov	r3, r9
 8000a48:	464a      	mov	r2, r9
 8000a4a:	08c0      	lsrs	r0, r0, #3
 8000a4c:	075b      	lsls	r3, r3, #29
 8000a4e:	4303      	orrs	r3, r0
 8000a50:	08d1      	lsrs	r1, r2, #3
 8000a52:	e61f      	b.n	8000694 <__aeabi_dadd+0x264>
 8000a54:	181c      	adds	r4, r3, r0
 8000a56:	429c      	cmp	r4, r3
 8000a58:	419b      	sbcs	r3, r3
 8000a5a:	4449      	add	r1, r9
 8000a5c:	468a      	mov	sl, r1
 8000a5e:	425b      	negs	r3, r3
 8000a60:	449a      	add	sl, r3
 8000a62:	4653      	mov	r3, sl
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	d400      	bmi.n	8000a6a <__aeabi_dadd+0x63a>
 8000a68:	e607      	b.n	800067a <__aeabi_dadd+0x24a>
 8000a6a:	4652      	mov	r2, sl
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <__aeabi_dadd+0x6bc>)
 8000a6e:	2601      	movs	r6, #1
 8000a70:	401a      	ands	r2, r3
 8000a72:	4692      	mov	sl, r2
 8000a74:	e601      	b.n	800067a <__aeabi_dadd+0x24a>
 8000a76:	003c      	movs	r4, r7
 8000a78:	000e      	movs	r6, r1
 8000a7a:	3c20      	subs	r4, #32
 8000a7c:	40e6      	lsrs	r6, r4
 8000a7e:	2f20      	cmp	r7, #32
 8000a80:	d003      	beq.n	8000a8a <__aeabi_dadd+0x65a>
 8000a82:	2440      	movs	r4, #64	; 0x40
 8000a84:	1be4      	subs	r4, r4, r7
 8000a86:	40a1      	lsls	r1, r4
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	001c      	movs	r4, r3
 8000a8c:	1e63      	subs	r3, r4, #1
 8000a8e:	419c      	sbcs	r4, r3
 8000a90:	4334      	orrs	r4, r6
 8000a92:	e65e      	b.n	8000752 <__aeabi_dadd+0x322>
 8000a94:	4443      	add	r3, r8
 8000a96:	4283      	cmp	r3, r0
 8000a98:	4180      	sbcs	r0, r0
 8000a9a:	4449      	add	r1, r9
 8000a9c:	468a      	mov	sl, r1
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	001c      	movs	r4, r3
 8000aa2:	4482      	add	sl, r0
 8000aa4:	e6bc      	b.n	8000820 <__aeabi_dadd+0x3f0>
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	4323      	orrs	r3, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x67e>
 8000aac:	e6a9      	b.n	8000802 <__aeabi_dadd+0x3d2>
 8000aae:	e5e4      	b.n	800067a <__aeabi_dadd+0x24a>
 8000ab0:	074a      	lsls	r2, r1, #29
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	08c9      	lsrs	r1, r1, #3
 8000ab8:	0312      	lsls	r2, r2, #12
 8000aba:	4211      	tst	r1, r2
 8000abc:	d009      	beq.n	8000ad2 <__aeabi_dadd+0x6a2>
 8000abe:	4648      	mov	r0, r9
 8000ac0:	08c4      	lsrs	r4, r0, #3
 8000ac2:	4214      	tst	r4, r2
 8000ac4:	d105      	bne.n	8000ad2 <__aeabi_dadd+0x6a2>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	4665      	mov	r5, ip
 8000aca:	0021      	movs	r1, r4
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	0742      	lsls	r2, r0, #29
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	0f5a      	lsrs	r2, r3, #29
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	0752      	lsls	r2, r2, #29
 8000ada:	4313      	orrs	r3, r2
 8000adc:	e5fa      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	4a01      	ldr	r2, [pc, #4]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 8000ae2:	001c      	movs	r4, r3
 8000ae4:	e540      	b.n	8000568 <__aeabi_dadd+0x138>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	000007ff 	.word	0x000007ff
 8000aec:	ff7fffff 	.word	0xff7fffff

08000af0 <__aeabi_ddiv>:
 8000af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af2:	4657      	mov	r7, sl
 8000af4:	464e      	mov	r6, r9
 8000af6:	4645      	mov	r5, r8
 8000af8:	46de      	mov	lr, fp
 8000afa:	b5e0      	push	{r5, r6, r7, lr}
 8000afc:	030c      	lsls	r4, r1, #12
 8000afe:	001f      	movs	r7, r3
 8000b00:	004b      	lsls	r3, r1, #1
 8000b02:	4681      	mov	r9, r0
 8000b04:	4692      	mov	sl, r2
 8000b06:	0005      	movs	r5, r0
 8000b08:	b085      	sub	sp, #20
 8000b0a:	0b24      	lsrs	r4, r4, #12
 8000b0c:	0d5b      	lsrs	r3, r3, #21
 8000b0e:	0fce      	lsrs	r6, r1, #31
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_ddiv+0x26>
 8000b14:	e152      	b.n	8000dbc <__aeabi_ddiv+0x2cc>
 8000b16:	4ad2      	ldr	r2, [pc, #840]	; (8000e60 <__aeabi_ddiv+0x370>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_ddiv+0x2e>
 8000b1c:	e16e      	b.n	8000dfc <__aeabi_ddiv+0x30c>
 8000b1e:	0f42      	lsrs	r2, r0, #29
 8000b20:	00e4      	lsls	r4, r4, #3
 8000b22:	4314      	orrs	r4, r2
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	0412      	lsls	r2, r2, #16
 8000b28:	4322      	orrs	r2, r4
 8000b2a:	4690      	mov	r8, r2
 8000b2c:	4acd      	ldr	r2, [pc, #820]	; (8000e64 <__aeabi_ddiv+0x374>)
 8000b2e:	00c5      	lsls	r5, r0, #3
 8000b30:	4693      	mov	fp, r2
 8000b32:	449b      	add	fp, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	4699      	mov	r9, r3
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	033c      	lsls	r4, r7, #12
 8000b3c:	007b      	lsls	r3, r7, #1
 8000b3e:	4650      	mov	r0, sl
 8000b40:	0b24      	lsrs	r4, r4, #12
 8000b42:	0d5b      	lsrs	r3, r3, #21
 8000b44:	0fff      	lsrs	r7, r7, #31
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d100      	bne.n	8000b4c <__aeabi_ddiv+0x5c>
 8000b4a:	e11a      	b.n	8000d82 <__aeabi_ddiv+0x292>
 8000b4c:	4ac4      	ldr	r2, [pc, #784]	; (8000e60 <__aeabi_ddiv+0x370>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d100      	bne.n	8000b54 <__aeabi_ddiv+0x64>
 8000b52:	e15e      	b.n	8000e12 <__aeabi_ddiv+0x322>
 8000b54:	0f42      	lsrs	r2, r0, #29
 8000b56:	00e4      	lsls	r4, r4, #3
 8000b58:	4322      	orrs	r2, r4
 8000b5a:	2480      	movs	r4, #128	; 0x80
 8000b5c:	0424      	lsls	r4, r4, #16
 8000b5e:	4314      	orrs	r4, r2
 8000b60:	4ac0      	ldr	r2, [pc, #768]	; (8000e64 <__aeabi_ddiv+0x374>)
 8000b62:	00c1      	lsls	r1, r0, #3
 8000b64:	4694      	mov	ip, r2
 8000b66:	465a      	mov	r2, fp
 8000b68:	4463      	add	r3, ip
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	469b      	mov	fp, r3
 8000b6e:	2000      	movs	r0, #0
 8000b70:	0033      	movs	r3, r6
 8000b72:	407b      	eors	r3, r7
 8000b74:	469a      	mov	sl, r3
 8000b76:	464b      	mov	r3, r9
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d827      	bhi.n	8000bcc <__aeabi_ddiv+0xdc>
 8000b7c:	4aba      	ldr	r2, [pc, #744]	; (8000e68 <__aeabi_ddiv+0x378>)
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	58d3      	ldr	r3, [r2, r3]
 8000b82:	469f      	mov	pc, r3
 8000b84:	46b2      	mov	sl, r6
 8000b86:	9b00      	ldr	r3, [sp, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d016      	beq.n	8000bba <__aeabi_ddiv+0xca>
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0xa2>
 8000b90:	e287      	b.n	80010a2 <__aeabi_ddiv+0x5b2>
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d000      	beq.n	8000b98 <__aeabi_ddiv+0xa8>
 8000b96:	e0d5      	b.n	8000d44 <__aeabi_ddiv+0x254>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	051b      	lsls	r3, r3, #20
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	4652      	mov	r2, sl
 8000ba4:	07d2      	lsls	r2, r2, #31
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	0028      	movs	r0, r5
 8000baa:	0019      	movs	r1, r3
 8000bac:	b005      	add	sp, #20
 8000bae:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb0:	46bb      	mov	fp, r7
 8000bb2:	46b2      	mov	sl, r6
 8000bb4:	46a9      	mov	r9, r5
 8000bb6:	46a0      	mov	r8, r4
 8000bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	4ba8      	ldr	r3, [pc, #672]	; (8000e60 <__aeabi_ddiv+0x370>)
 8000bc0:	e7ed      	b.n	8000b9e <__aeabi_ddiv+0xae>
 8000bc2:	46ba      	mov	sl, r7
 8000bc4:	46a0      	mov	r8, r4
 8000bc6:	000d      	movs	r5, r1
 8000bc8:	9000      	str	r0, [sp, #0]
 8000bca:	e7dc      	b.n	8000b86 <__aeabi_ddiv+0x96>
 8000bcc:	4544      	cmp	r4, r8
 8000bce:	d200      	bcs.n	8000bd2 <__aeabi_ddiv+0xe2>
 8000bd0:	e1c4      	b.n	8000f5c <__aeabi_ddiv+0x46c>
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_ddiv+0xe6>
 8000bd4:	e1bf      	b.n	8000f56 <__aeabi_ddiv+0x466>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	425b      	negs	r3, r3
 8000bda:	469c      	mov	ip, r3
 8000bdc:	002e      	movs	r6, r5
 8000bde:	4640      	mov	r0, r8
 8000be0:	2500      	movs	r5, #0
 8000be2:	44e3      	add	fp, ip
 8000be4:	0223      	lsls	r3, r4, #8
 8000be6:	0e0c      	lsrs	r4, r1, #24
 8000be8:	431c      	orrs	r4, r3
 8000bea:	0c1b      	lsrs	r3, r3, #16
 8000bec:	4699      	mov	r9, r3
 8000bee:	0423      	lsls	r3, r4, #16
 8000bf0:	020a      	lsls	r2, r1, #8
 8000bf2:	0c1f      	lsrs	r7, r3, #16
 8000bf4:	4649      	mov	r1, r9
 8000bf6:	9200      	str	r2, [sp, #0]
 8000bf8:	9701      	str	r7, [sp, #4]
 8000bfa:	f7ff fb0b 	bl	8000214 <__aeabi_uidivmod>
 8000bfe:	0002      	movs	r2, r0
 8000c00:	437a      	muls	r2, r7
 8000c02:	040b      	lsls	r3, r1, #16
 8000c04:	0c31      	lsrs	r1, r6, #16
 8000c06:	4680      	mov	r8, r0
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	d907      	bls.n	8000c1e <__aeabi_ddiv+0x12e>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	425b      	negs	r3, r3
 8000c12:	469c      	mov	ip, r3
 8000c14:	1909      	adds	r1, r1, r4
 8000c16:	44e0      	add	r8, ip
 8000c18:	428c      	cmp	r4, r1
 8000c1a:	d800      	bhi.n	8000c1e <__aeabi_ddiv+0x12e>
 8000c1c:	e201      	b.n	8001022 <__aeabi_ddiv+0x532>
 8000c1e:	1a88      	subs	r0, r1, r2
 8000c20:	4649      	mov	r1, r9
 8000c22:	f7ff faf7 	bl	8000214 <__aeabi_uidivmod>
 8000c26:	9a01      	ldr	r2, [sp, #4]
 8000c28:	0436      	lsls	r6, r6, #16
 8000c2a:	4342      	muls	r2, r0
 8000c2c:	0409      	lsls	r1, r1, #16
 8000c2e:	0c36      	lsrs	r6, r6, #16
 8000c30:	0003      	movs	r3, r0
 8000c32:	430e      	orrs	r6, r1
 8000c34:	42b2      	cmp	r2, r6
 8000c36:	d904      	bls.n	8000c42 <__aeabi_ddiv+0x152>
 8000c38:	1936      	adds	r6, r6, r4
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	42b4      	cmp	r4, r6
 8000c3e:	d800      	bhi.n	8000c42 <__aeabi_ddiv+0x152>
 8000c40:	e1e9      	b.n	8001016 <__aeabi_ddiv+0x526>
 8000c42:	1ab0      	subs	r0, r6, r2
 8000c44:	4642      	mov	r2, r8
 8000c46:	9e00      	ldr	r6, [sp, #0]
 8000c48:	0412      	lsls	r2, r2, #16
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	0c33      	lsrs	r3, r6, #16
 8000c4e:	001f      	movs	r7, r3
 8000c50:	0c11      	lsrs	r1, r2, #16
 8000c52:	4690      	mov	r8, r2
 8000c54:	9302      	str	r3, [sp, #8]
 8000c56:	0413      	lsls	r3, r2, #16
 8000c58:	0432      	lsls	r2, r6, #16
 8000c5a:	0c16      	lsrs	r6, r2, #16
 8000c5c:	0032      	movs	r2, r6
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	435a      	muls	r2, r3
 8000c62:	9603      	str	r6, [sp, #12]
 8000c64:	437b      	muls	r3, r7
 8000c66:	434e      	muls	r6, r1
 8000c68:	4379      	muls	r1, r7
 8000c6a:	0c17      	lsrs	r7, r2, #16
 8000c6c:	46bc      	mov	ip, r7
 8000c6e:	199b      	adds	r3, r3, r6
 8000c70:	4463      	add	r3, ip
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d903      	bls.n	8000c7e <__aeabi_ddiv+0x18e>
 8000c76:	2680      	movs	r6, #128	; 0x80
 8000c78:	0276      	lsls	r6, r6, #9
 8000c7a:	46b4      	mov	ip, r6
 8000c7c:	4461      	add	r1, ip
 8000c7e:	0c1e      	lsrs	r6, r3, #16
 8000c80:	1871      	adds	r1, r6, r1
 8000c82:	0416      	lsls	r6, r2, #16
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	0c36      	lsrs	r6, r6, #16
 8000c88:	199e      	adds	r6, r3, r6
 8000c8a:	4288      	cmp	r0, r1
 8000c8c:	d302      	bcc.n	8000c94 <__aeabi_ddiv+0x1a4>
 8000c8e:	d112      	bne.n	8000cb6 <__aeabi_ddiv+0x1c6>
 8000c90:	42b5      	cmp	r5, r6
 8000c92:	d210      	bcs.n	8000cb6 <__aeabi_ddiv+0x1c6>
 8000c94:	4643      	mov	r3, r8
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	9b00      	ldr	r3, [sp, #0]
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	4465      	add	r5, ip
 8000c9e:	001f      	movs	r7, r3
 8000ca0:	429d      	cmp	r5, r3
 8000ca2:	419b      	sbcs	r3, r3
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	191b      	adds	r3, r3, r4
 8000ca8:	18c0      	adds	r0, r0, r3
 8000caa:	4284      	cmp	r4, r0
 8000cac:	d200      	bcs.n	8000cb0 <__aeabi_ddiv+0x1c0>
 8000cae:	e19e      	b.n	8000fee <__aeabi_ddiv+0x4fe>
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_ddiv+0x1c4>
 8000cb2:	e199      	b.n	8000fe8 <__aeabi_ddiv+0x4f8>
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	1bae      	subs	r6, r5, r6
 8000cb8:	42b5      	cmp	r5, r6
 8000cba:	41ad      	sbcs	r5, r5
 8000cbc:	1a40      	subs	r0, r0, r1
 8000cbe:	426d      	negs	r5, r5
 8000cc0:	1b40      	subs	r0, r0, r5
 8000cc2:	4284      	cmp	r4, r0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_ddiv+0x1d8>
 8000cc6:	e1d2      	b.n	800106e <__aeabi_ddiv+0x57e>
 8000cc8:	4649      	mov	r1, r9
 8000cca:	f7ff faa3 	bl	8000214 <__aeabi_uidivmod>
 8000cce:	9a01      	ldr	r2, [sp, #4]
 8000cd0:	040b      	lsls	r3, r1, #16
 8000cd2:	4342      	muls	r2, r0
 8000cd4:	0c31      	lsrs	r1, r6, #16
 8000cd6:	0005      	movs	r5, r0
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	d900      	bls.n	8000ce0 <__aeabi_ddiv+0x1f0>
 8000cde:	e16c      	b.n	8000fba <__aeabi_ddiv+0x4ca>
 8000ce0:	1a88      	subs	r0, r1, r2
 8000ce2:	4649      	mov	r1, r9
 8000ce4:	f7ff fa96 	bl	8000214 <__aeabi_uidivmod>
 8000ce8:	9a01      	ldr	r2, [sp, #4]
 8000cea:	0436      	lsls	r6, r6, #16
 8000cec:	4342      	muls	r2, r0
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	0c36      	lsrs	r6, r6, #16
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	430e      	orrs	r6, r1
 8000cf6:	42b2      	cmp	r2, r6
 8000cf8:	d900      	bls.n	8000cfc <__aeabi_ddiv+0x20c>
 8000cfa:	e153      	b.n	8000fa4 <__aeabi_ddiv+0x4b4>
 8000cfc:	9803      	ldr	r0, [sp, #12]
 8000cfe:	1ab6      	subs	r6, r6, r2
 8000d00:	0002      	movs	r2, r0
 8000d02:	042d      	lsls	r5, r5, #16
 8000d04:	431d      	orrs	r5, r3
 8000d06:	9f02      	ldr	r7, [sp, #8]
 8000d08:	042b      	lsls	r3, r5, #16
 8000d0a:	0c1b      	lsrs	r3, r3, #16
 8000d0c:	435a      	muls	r2, r3
 8000d0e:	437b      	muls	r3, r7
 8000d10:	469c      	mov	ip, r3
 8000d12:	0c29      	lsrs	r1, r5, #16
 8000d14:	4348      	muls	r0, r1
 8000d16:	0c13      	lsrs	r3, r2, #16
 8000d18:	4484      	add	ip, r0
 8000d1a:	4463      	add	r3, ip
 8000d1c:	4379      	muls	r1, r7
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d903      	bls.n	8000d2a <__aeabi_ddiv+0x23a>
 8000d22:	2080      	movs	r0, #128	; 0x80
 8000d24:	0240      	lsls	r0, r0, #9
 8000d26:	4684      	mov	ip, r0
 8000d28:	4461      	add	r1, ip
 8000d2a:	0c18      	lsrs	r0, r3, #16
 8000d2c:	0412      	lsls	r2, r2, #16
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	0c12      	lsrs	r2, r2, #16
 8000d32:	1840      	adds	r0, r0, r1
 8000d34:	189b      	adds	r3, r3, r2
 8000d36:	4286      	cmp	r6, r0
 8000d38:	d200      	bcs.n	8000d3c <__aeabi_ddiv+0x24c>
 8000d3a:	e100      	b.n	8000f3e <__aeabi_ddiv+0x44e>
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x250>
 8000d3e:	e0fb      	b.n	8000f38 <__aeabi_ddiv+0x448>
 8000d40:	2301      	movs	r3, #1
 8000d42:	431d      	orrs	r5, r3
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <__aeabi_ddiv+0x37c>)
 8000d46:	445b      	add	r3, fp
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_ddiv+0x25e>
 8000d4c:	e0aa      	b.n	8000ea4 <__aeabi_ddiv+0x3b4>
 8000d4e:	076a      	lsls	r2, r5, #29
 8000d50:	d000      	beq.n	8000d54 <__aeabi_ddiv+0x264>
 8000d52:	e13d      	b.n	8000fd0 <__aeabi_ddiv+0x4e0>
 8000d54:	08e9      	lsrs	r1, r5, #3
 8000d56:	4642      	mov	r2, r8
 8000d58:	01d2      	lsls	r2, r2, #7
 8000d5a:	d506      	bpl.n	8000d6a <__aeabi_ddiv+0x27a>
 8000d5c:	4642      	mov	r2, r8
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <__aeabi_ddiv+0x380>)
 8000d60:	401a      	ands	r2, r3
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	4690      	mov	r8, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	445b      	add	r3, fp
 8000d6a:	4a42      	ldr	r2, [pc, #264]	; (8000e74 <__aeabi_ddiv+0x384>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	dd00      	ble.n	8000d72 <__aeabi_ddiv+0x282>
 8000d70:	e723      	b.n	8000bba <__aeabi_ddiv+0xca>
 8000d72:	4642      	mov	r2, r8
 8000d74:	055b      	lsls	r3, r3, #21
 8000d76:	0755      	lsls	r5, r2, #29
 8000d78:	0252      	lsls	r2, r2, #9
 8000d7a:	430d      	orrs	r5, r1
 8000d7c:	0b12      	lsrs	r2, r2, #12
 8000d7e:	0d5b      	lsrs	r3, r3, #21
 8000d80:	e70d      	b.n	8000b9e <__aeabi_ddiv+0xae>
 8000d82:	4651      	mov	r1, sl
 8000d84:	4321      	orrs	r1, r4
 8000d86:	d100      	bne.n	8000d8a <__aeabi_ddiv+0x29a>
 8000d88:	e07c      	b.n	8000e84 <__aeabi_ddiv+0x394>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x2a0>
 8000d8e:	e0fb      	b.n	8000f88 <__aeabi_ddiv+0x498>
 8000d90:	0020      	movs	r0, r4
 8000d92:	f001 f883 	bl	8001e9c <__clzsi2>
 8000d96:	0002      	movs	r2, r0
 8000d98:	3a0b      	subs	r2, #11
 8000d9a:	231d      	movs	r3, #29
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	4652      	mov	r2, sl
 8000da0:	0001      	movs	r1, r0
 8000da2:	40da      	lsrs	r2, r3
 8000da4:	4653      	mov	r3, sl
 8000da6:	3908      	subs	r1, #8
 8000da8:	408b      	lsls	r3, r1
 8000daa:	408c      	lsls	r4, r1
 8000dac:	0019      	movs	r1, r3
 8000dae:	4314      	orrs	r4, r2
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <__aeabi_ddiv+0x388>)
 8000db2:	4458      	add	r0, fp
 8000db4:	469b      	mov	fp, r3
 8000db6:	4483      	add	fp, r0
 8000db8:	2000      	movs	r0, #0
 8000dba:	e6d9      	b.n	8000b70 <__aeabi_ddiv+0x80>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	4323      	orrs	r3, r4
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	d044      	beq.n	8000e4e <__aeabi_ddiv+0x35e>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2da>
 8000dc8:	e0cf      	b.n	8000f6a <__aeabi_ddiv+0x47a>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 f866 	bl	8001e9c <__clzsi2>
 8000dd0:	0001      	movs	r1, r0
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	390b      	subs	r1, #11
 8000dd6:	231d      	movs	r3, #29
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	4649      	mov	r1, r9
 8000ddc:	0010      	movs	r0, r2
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	3808      	subs	r0, #8
 8000de2:	4084      	lsls	r4, r0
 8000de4:	000b      	movs	r3, r1
 8000de6:	464d      	mov	r5, r9
 8000de8:	4323      	orrs	r3, r4
 8000dea:	4698      	mov	r8, r3
 8000dec:	4085      	lsls	r5, r0
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <__aeabi_ddiv+0x38c>)
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	469b      	mov	fp, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	4699      	mov	r9, r3
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	e69e      	b.n	8000b3a <__aeabi_ddiv+0x4a>
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	4322      	orrs	r2, r4
 8000e00:	4690      	mov	r8, r2
 8000e02:	d11d      	bne.n	8000e40 <__aeabi_ddiv+0x350>
 8000e04:	2208      	movs	r2, #8
 8000e06:	469b      	mov	fp, r3
 8000e08:	2302      	movs	r3, #2
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	4691      	mov	r9, r2
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	e693      	b.n	8000b3a <__aeabi_ddiv+0x4a>
 8000e12:	4651      	mov	r1, sl
 8000e14:	4321      	orrs	r1, r4
 8000e16:	d109      	bne.n	8000e2c <__aeabi_ddiv+0x33c>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <__aeabi_ddiv+0x390>)
 8000e20:	4691      	mov	r9, r2
 8000e22:	469c      	mov	ip, r3
 8000e24:	2400      	movs	r4, #0
 8000e26:	2002      	movs	r0, #2
 8000e28:	44e3      	add	fp, ip
 8000e2a:	e6a1      	b.n	8000b70 <__aeabi_ddiv+0x80>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	464a      	mov	r2, r9
 8000e30:	431a      	orrs	r2, r3
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <__aeabi_ddiv+0x390>)
 8000e34:	4691      	mov	r9, r2
 8000e36:	469c      	mov	ip, r3
 8000e38:	4651      	mov	r1, sl
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	44e3      	add	fp, ip
 8000e3e:	e697      	b.n	8000b70 <__aeabi_ddiv+0x80>
 8000e40:	220c      	movs	r2, #12
 8000e42:	469b      	mov	fp, r3
 8000e44:	2303      	movs	r3, #3
 8000e46:	46a0      	mov	r8, r4
 8000e48:	4691      	mov	r9, r2
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	e675      	b.n	8000b3a <__aeabi_ddiv+0x4a>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	4699      	mov	r9, r3
 8000e52:	2300      	movs	r3, #0
 8000e54:	469b      	mov	fp, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	2500      	movs	r5, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	e66d      	b.n	8000b3a <__aeabi_ddiv+0x4a>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	fffffc01 	.word	0xfffffc01
 8000e68:	0800dd34 	.word	0x0800dd34
 8000e6c:	000003ff 	.word	0x000003ff
 8000e70:	feffffff 	.word	0xfeffffff
 8000e74:	000007fe 	.word	0x000007fe
 8000e78:	000003f3 	.word	0x000003f3
 8000e7c:	fffffc0d 	.word	0xfffffc0d
 8000e80:	fffff801 	.word	0xfffff801
 8000e84:	464a      	mov	r2, r9
 8000e86:	2301      	movs	r3, #1
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	4691      	mov	r9, r2
 8000e8c:	2400      	movs	r4, #0
 8000e8e:	2001      	movs	r0, #1
 8000e90:	e66e      	b.n	8000b70 <__aeabi_ddiv+0x80>
 8000e92:	2300      	movs	r3, #0
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	469a      	mov	sl, r3
 8000e98:	2500      	movs	r5, #0
 8000e9a:	4b88      	ldr	r3, [pc, #544]	; (80010bc <__aeabi_ddiv+0x5cc>)
 8000e9c:	0312      	lsls	r2, r2, #12
 8000e9e:	e67e      	b.n	8000b9e <__aeabi_ddiv+0xae>
 8000ea0:	2501      	movs	r5, #1
 8000ea2:	426d      	negs	r5, r5
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	2a38      	cmp	r2, #56	; 0x38
 8000eaa:	dd00      	ble.n	8000eae <__aeabi_ddiv+0x3be>
 8000eac:	e674      	b.n	8000b98 <__aeabi_ddiv+0xa8>
 8000eae:	2a1f      	cmp	r2, #31
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_ddiv+0x3c4>
 8000eb2:	e0bd      	b.n	8001030 <__aeabi_ddiv+0x540>
 8000eb4:	211f      	movs	r1, #31
 8000eb6:	4249      	negs	r1, r1
 8000eb8:	1acb      	subs	r3, r1, r3
 8000eba:	4641      	mov	r1, r8
 8000ebc:	40d9      	lsrs	r1, r3
 8000ebe:	000b      	movs	r3, r1
 8000ec0:	2a20      	cmp	r2, #32
 8000ec2:	d004      	beq.n	8000ece <__aeabi_ddiv+0x3de>
 8000ec4:	4641      	mov	r1, r8
 8000ec6:	4a7e      	ldr	r2, [pc, #504]	; (80010c0 <__aeabi_ddiv+0x5d0>)
 8000ec8:	445a      	add	r2, fp
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	430d      	orrs	r5, r1
 8000ece:	0029      	movs	r1, r5
 8000ed0:	1e4a      	subs	r2, r1, #1
 8000ed2:	4191      	sbcs	r1, r2
 8000ed4:	4319      	orrs	r1, r3
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	001d      	movs	r5, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	400d      	ands	r5, r1
 8000ede:	420b      	tst	r3, r1
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_ddiv+0x3f4>
 8000ee2:	e0d0      	b.n	8001086 <__aeabi_ddiv+0x596>
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	400a      	ands	r2, r1
 8000eea:	2a04      	cmp	r2, #4
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x400>
 8000eee:	e0c7      	b.n	8001080 <__aeabi_ddiv+0x590>
 8000ef0:	1d0a      	adds	r2, r1, #4
 8000ef2:	428a      	cmp	r2, r1
 8000ef4:	4189      	sbcs	r1, r1
 8000ef6:	4249      	negs	r1, r1
 8000ef8:	185b      	adds	r3, r3, r1
 8000efa:	0011      	movs	r1, r2
 8000efc:	021a      	lsls	r2, r3, #8
 8000efe:	d400      	bmi.n	8000f02 <__aeabi_ddiv+0x412>
 8000f00:	e0be      	b.n	8001080 <__aeabi_ddiv+0x590>
 8000f02:	2301      	movs	r3, #1
 8000f04:	2200      	movs	r2, #0
 8000f06:	2500      	movs	r5, #0
 8000f08:	e649      	b.n	8000b9e <__aeabi_ddiv+0xae>
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	4643      	mov	r3, r8
 8000f0e:	0312      	lsls	r2, r2, #12
 8000f10:	4213      	tst	r3, r2
 8000f12:	d008      	beq.n	8000f26 <__aeabi_ddiv+0x436>
 8000f14:	4214      	tst	r4, r2
 8000f16:	d106      	bne.n	8000f26 <__aeabi_ddiv+0x436>
 8000f18:	4322      	orrs	r2, r4
 8000f1a:	0312      	lsls	r2, r2, #12
 8000f1c:	46ba      	mov	sl, r7
 8000f1e:	000d      	movs	r5, r1
 8000f20:	4b66      	ldr	r3, [pc, #408]	; (80010bc <__aeabi_ddiv+0x5cc>)
 8000f22:	0b12      	lsrs	r2, r2, #12
 8000f24:	e63b      	b.n	8000b9e <__aeabi_ddiv+0xae>
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	4643      	mov	r3, r8
 8000f2a:	0312      	lsls	r2, r2, #12
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	0312      	lsls	r2, r2, #12
 8000f30:	46b2      	mov	sl, r6
 8000f32:	4b62      	ldr	r3, [pc, #392]	; (80010bc <__aeabi_ddiv+0x5cc>)
 8000f34:	0b12      	lsrs	r2, r2, #12
 8000f36:	e632      	b.n	8000b9e <__aeabi_ddiv+0xae>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x44e>
 8000f3c:	e702      	b.n	8000d44 <__aeabi_ddiv+0x254>
 8000f3e:	19a6      	adds	r6, r4, r6
 8000f40:	1e6a      	subs	r2, r5, #1
 8000f42:	42a6      	cmp	r6, r4
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_ddiv+0x458>
 8000f46:	e089      	b.n	800105c <__aeabi_ddiv+0x56c>
 8000f48:	4286      	cmp	r6, r0
 8000f4a:	d200      	bcs.n	8000f4e <__aeabi_ddiv+0x45e>
 8000f4c:	e09f      	b.n	800108e <__aeabi_ddiv+0x59e>
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_ddiv+0x462>
 8000f50:	e0af      	b.n	80010b2 <__aeabi_ddiv+0x5c2>
 8000f52:	0015      	movs	r5, r2
 8000f54:	e6f4      	b.n	8000d40 <__aeabi_ddiv+0x250>
 8000f56:	42a9      	cmp	r1, r5
 8000f58:	d900      	bls.n	8000f5c <__aeabi_ddiv+0x46c>
 8000f5a:	e63c      	b.n	8000bd6 <__aeabi_ddiv+0xe6>
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	07de      	lsls	r6, r3, #31
 8000f60:	0858      	lsrs	r0, r3, #1
 8000f62:	086b      	lsrs	r3, r5, #1
 8000f64:	431e      	orrs	r6, r3
 8000f66:	07ed      	lsls	r5, r5, #31
 8000f68:	e63c      	b.n	8000be4 <__aeabi_ddiv+0xf4>
 8000f6a:	f000 ff97 	bl	8001e9c <__clzsi2>
 8000f6e:	0001      	movs	r1, r0
 8000f70:	0002      	movs	r2, r0
 8000f72:	3115      	adds	r1, #21
 8000f74:	3220      	adds	r2, #32
 8000f76:	291c      	cmp	r1, #28
 8000f78:	dc00      	bgt.n	8000f7c <__aeabi_ddiv+0x48c>
 8000f7a:	e72c      	b.n	8000dd6 <__aeabi_ddiv+0x2e6>
 8000f7c:	464b      	mov	r3, r9
 8000f7e:	3808      	subs	r0, #8
 8000f80:	4083      	lsls	r3, r0
 8000f82:	2500      	movs	r5, #0
 8000f84:	4698      	mov	r8, r3
 8000f86:	e732      	b.n	8000dee <__aeabi_ddiv+0x2fe>
 8000f88:	f000 ff88 	bl	8001e9c <__clzsi2>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	001a      	movs	r2, r3
 8000f90:	3215      	adds	r2, #21
 8000f92:	3020      	adds	r0, #32
 8000f94:	2a1c      	cmp	r2, #28
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x4aa>
 8000f98:	e6ff      	b.n	8000d9a <__aeabi_ddiv+0x2aa>
 8000f9a:	4654      	mov	r4, sl
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	409c      	lsls	r4, r3
 8000fa2:	e705      	b.n	8000db0 <__aeabi_ddiv+0x2c0>
 8000fa4:	1936      	adds	r6, r6, r4
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	42b4      	cmp	r4, r6
 8000faa:	d900      	bls.n	8000fae <__aeabi_ddiv+0x4be>
 8000fac:	e6a6      	b.n	8000cfc <__aeabi_ddiv+0x20c>
 8000fae:	42b2      	cmp	r2, r6
 8000fb0:	d800      	bhi.n	8000fb4 <__aeabi_ddiv+0x4c4>
 8000fb2:	e6a3      	b.n	8000cfc <__aeabi_ddiv+0x20c>
 8000fb4:	1e83      	subs	r3, r0, #2
 8000fb6:	1936      	adds	r6, r6, r4
 8000fb8:	e6a0      	b.n	8000cfc <__aeabi_ddiv+0x20c>
 8000fba:	1909      	adds	r1, r1, r4
 8000fbc:	3d01      	subs	r5, #1
 8000fbe:	428c      	cmp	r4, r1
 8000fc0:	d900      	bls.n	8000fc4 <__aeabi_ddiv+0x4d4>
 8000fc2:	e68d      	b.n	8000ce0 <__aeabi_ddiv+0x1f0>
 8000fc4:	428a      	cmp	r2, r1
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x4da>
 8000fc8:	e68a      	b.n	8000ce0 <__aeabi_ddiv+0x1f0>
 8000fca:	1e85      	subs	r5, r0, #2
 8000fcc:	1909      	adds	r1, r1, r4
 8000fce:	e687      	b.n	8000ce0 <__aeabi_ddiv+0x1f0>
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	402a      	ands	r2, r5
 8000fd4:	2a04      	cmp	r2, #4
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x4ea>
 8000fd8:	e6bc      	b.n	8000d54 <__aeabi_ddiv+0x264>
 8000fda:	1d29      	adds	r1, r5, #4
 8000fdc:	42a9      	cmp	r1, r5
 8000fde:	41ad      	sbcs	r5, r5
 8000fe0:	426d      	negs	r5, r5
 8000fe2:	08c9      	lsrs	r1, r1, #3
 8000fe4:	44a8      	add	r8, r5
 8000fe6:	e6b6      	b.n	8000d56 <__aeabi_ddiv+0x266>
 8000fe8:	42af      	cmp	r7, r5
 8000fea:	d900      	bls.n	8000fee <__aeabi_ddiv+0x4fe>
 8000fec:	e662      	b.n	8000cb4 <__aeabi_ddiv+0x1c4>
 8000fee:	4281      	cmp	r1, r0
 8000ff0:	d804      	bhi.n	8000ffc <__aeabi_ddiv+0x50c>
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_ddiv+0x506>
 8000ff4:	e65e      	b.n	8000cb4 <__aeabi_ddiv+0x1c4>
 8000ff6:	42ae      	cmp	r6, r5
 8000ff8:	d800      	bhi.n	8000ffc <__aeabi_ddiv+0x50c>
 8000ffa:	e65b      	b.n	8000cb4 <__aeabi_ddiv+0x1c4>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	425b      	negs	r3, r3
 8001000:	469c      	mov	ip, r3
 8001002:	9b00      	ldr	r3, [sp, #0]
 8001004:	44e0      	add	r8, ip
 8001006:	469c      	mov	ip, r3
 8001008:	4465      	add	r5, ip
 800100a:	429d      	cmp	r5, r3
 800100c:	419b      	sbcs	r3, r3
 800100e:	425b      	negs	r3, r3
 8001010:	191b      	adds	r3, r3, r4
 8001012:	18c0      	adds	r0, r0, r3
 8001014:	e64f      	b.n	8000cb6 <__aeabi_ddiv+0x1c6>
 8001016:	42b2      	cmp	r2, r6
 8001018:	d800      	bhi.n	800101c <__aeabi_ddiv+0x52c>
 800101a:	e612      	b.n	8000c42 <__aeabi_ddiv+0x152>
 800101c:	1e83      	subs	r3, r0, #2
 800101e:	1936      	adds	r6, r6, r4
 8001020:	e60f      	b.n	8000c42 <__aeabi_ddiv+0x152>
 8001022:	428a      	cmp	r2, r1
 8001024:	d800      	bhi.n	8001028 <__aeabi_ddiv+0x538>
 8001026:	e5fa      	b.n	8000c1e <__aeabi_ddiv+0x12e>
 8001028:	1e83      	subs	r3, r0, #2
 800102a:	4698      	mov	r8, r3
 800102c:	1909      	adds	r1, r1, r4
 800102e:	e5f6      	b.n	8000c1e <__aeabi_ddiv+0x12e>
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <__aeabi_ddiv+0x5d4>)
 8001032:	0028      	movs	r0, r5
 8001034:	445b      	add	r3, fp
 8001036:	4641      	mov	r1, r8
 8001038:	409d      	lsls	r5, r3
 800103a:	4099      	lsls	r1, r3
 800103c:	40d0      	lsrs	r0, r2
 800103e:	1e6b      	subs	r3, r5, #1
 8001040:	419d      	sbcs	r5, r3
 8001042:	4643      	mov	r3, r8
 8001044:	4301      	orrs	r1, r0
 8001046:	4329      	orrs	r1, r5
 8001048:	40d3      	lsrs	r3, r2
 800104a:	074a      	lsls	r2, r1, #29
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x560>
 800104e:	e755      	b.n	8000efc <__aeabi_ddiv+0x40c>
 8001050:	220f      	movs	r2, #15
 8001052:	400a      	ands	r2, r1
 8001054:	2a04      	cmp	r2, #4
 8001056:	d000      	beq.n	800105a <__aeabi_ddiv+0x56a>
 8001058:	e74a      	b.n	8000ef0 <__aeabi_ddiv+0x400>
 800105a:	e74f      	b.n	8000efc <__aeabi_ddiv+0x40c>
 800105c:	0015      	movs	r5, r2
 800105e:	4286      	cmp	r6, r0
 8001060:	d000      	beq.n	8001064 <__aeabi_ddiv+0x574>
 8001062:	e66d      	b.n	8000d40 <__aeabi_ddiv+0x250>
 8001064:	9a00      	ldr	r2, [sp, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0x57c>
 800106a:	e669      	b.n	8000d40 <__aeabi_ddiv+0x250>
 800106c:	e66a      	b.n	8000d44 <__aeabi_ddiv+0x254>
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <__aeabi_ddiv+0x5d8>)
 8001070:	445b      	add	r3, fp
 8001072:	2b00      	cmp	r3, #0
 8001074:	dc00      	bgt.n	8001078 <__aeabi_ddiv+0x588>
 8001076:	e713      	b.n	8000ea0 <__aeabi_ddiv+0x3b0>
 8001078:	2501      	movs	r5, #1
 800107a:	2100      	movs	r1, #0
 800107c:	44a8      	add	r8, r5
 800107e:	e66a      	b.n	8000d56 <__aeabi_ddiv+0x266>
 8001080:	075d      	lsls	r5, r3, #29
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	0b1a      	lsrs	r2, r3, #12
 8001086:	08c9      	lsrs	r1, r1, #3
 8001088:	2300      	movs	r3, #0
 800108a:	430d      	orrs	r5, r1
 800108c:	e587      	b.n	8000b9e <__aeabi_ddiv+0xae>
 800108e:	9900      	ldr	r1, [sp, #0]
 8001090:	3d02      	subs	r5, #2
 8001092:	004a      	lsls	r2, r1, #1
 8001094:	428a      	cmp	r2, r1
 8001096:	41bf      	sbcs	r7, r7
 8001098:	427f      	negs	r7, r7
 800109a:	193f      	adds	r7, r7, r4
 800109c:	19f6      	adds	r6, r6, r7
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	e7dd      	b.n	800105e <__aeabi_ddiv+0x56e>
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	4643      	mov	r3, r8
 80010a6:	0312      	lsls	r2, r2, #12
 80010a8:	431a      	orrs	r2, r3
 80010aa:	0312      	lsls	r2, r2, #12
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <__aeabi_ddiv+0x5cc>)
 80010ae:	0b12      	lsrs	r2, r2, #12
 80010b0:	e575      	b.n	8000b9e <__aeabi_ddiv+0xae>
 80010b2:	9900      	ldr	r1, [sp, #0]
 80010b4:	4299      	cmp	r1, r3
 80010b6:	d3ea      	bcc.n	800108e <__aeabi_ddiv+0x59e>
 80010b8:	0015      	movs	r5, r2
 80010ba:	e7d3      	b.n	8001064 <__aeabi_ddiv+0x574>
 80010bc:	000007ff 	.word	0x000007ff
 80010c0:	0000043e 	.word	0x0000043e
 80010c4:	0000041e 	.word	0x0000041e
 80010c8:	000003ff 	.word	0x000003ff

080010cc <__aeabi_dmul>:
 80010cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ce:	4645      	mov	r5, r8
 80010d0:	46de      	mov	lr, fp
 80010d2:	4657      	mov	r7, sl
 80010d4:	464e      	mov	r6, r9
 80010d6:	b5e0      	push	{r5, r6, r7, lr}
 80010d8:	001f      	movs	r7, r3
 80010da:	030b      	lsls	r3, r1, #12
 80010dc:	0b1b      	lsrs	r3, r3, #12
 80010de:	469b      	mov	fp, r3
 80010e0:	004d      	lsls	r5, r1, #1
 80010e2:	0fcb      	lsrs	r3, r1, #31
 80010e4:	0004      	movs	r4, r0
 80010e6:	4691      	mov	r9, r2
 80010e8:	4698      	mov	r8, r3
 80010ea:	b087      	sub	sp, #28
 80010ec:	0d6d      	lsrs	r5, r5, #21
 80010ee:	d100      	bne.n	80010f2 <__aeabi_dmul+0x26>
 80010f0:	e1cd      	b.n	800148e <__aeabi_dmul+0x3c2>
 80010f2:	4bce      	ldr	r3, [pc, #824]	; (800142c <__aeabi_dmul+0x360>)
 80010f4:	429d      	cmp	r5, r3
 80010f6:	d100      	bne.n	80010fa <__aeabi_dmul+0x2e>
 80010f8:	e1e9      	b.n	80014ce <__aeabi_dmul+0x402>
 80010fa:	465a      	mov	r2, fp
 80010fc:	0f43      	lsrs	r3, r0, #29
 80010fe:	00d2      	lsls	r2, r2, #3
 8001100:	4313      	orrs	r3, r2
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	0412      	lsls	r2, r2, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	00c3      	lsls	r3, r0, #3
 800110a:	469a      	mov	sl, r3
 800110c:	4bc8      	ldr	r3, [pc, #800]	; (8001430 <__aeabi_dmul+0x364>)
 800110e:	4693      	mov	fp, r2
 8001110:	469c      	mov	ip, r3
 8001112:	2300      	movs	r3, #0
 8001114:	2600      	movs	r6, #0
 8001116:	4465      	add	r5, ip
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	033c      	lsls	r4, r7, #12
 800111c:	007b      	lsls	r3, r7, #1
 800111e:	4648      	mov	r0, r9
 8001120:	0b24      	lsrs	r4, r4, #12
 8001122:	0d5b      	lsrs	r3, r3, #21
 8001124:	0fff      	lsrs	r7, r7, #31
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <__aeabi_dmul+0x60>
 800112a:	e189      	b.n	8001440 <__aeabi_dmul+0x374>
 800112c:	4abf      	ldr	r2, [pc, #764]	; (800142c <__aeabi_dmul+0x360>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <__aeabi_dmul+0x9a>
 8001132:	0f42      	lsrs	r2, r0, #29
 8001134:	00e4      	lsls	r4, r4, #3
 8001136:	4322      	orrs	r2, r4
 8001138:	2480      	movs	r4, #128	; 0x80
 800113a:	0424      	lsls	r4, r4, #16
 800113c:	4314      	orrs	r4, r2
 800113e:	4abc      	ldr	r2, [pc, #752]	; (8001430 <__aeabi_dmul+0x364>)
 8001140:	2100      	movs	r1, #0
 8001142:	4694      	mov	ip, r2
 8001144:	4642      	mov	r2, r8
 8001146:	4463      	add	r3, ip
 8001148:	195b      	adds	r3, r3, r5
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	9b01      	ldr	r3, [sp, #4]
 800114e:	407a      	eors	r2, r7
 8001150:	3301      	adds	r3, #1
 8001152:	00c0      	lsls	r0, r0, #3
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2e0a      	cmp	r6, #10
 800115a:	dd1c      	ble.n	8001196 <__aeabi_dmul+0xca>
 800115c:	003a      	movs	r2, r7
 800115e:	2e0b      	cmp	r6, #11
 8001160:	d05e      	beq.n	8001220 <__aeabi_dmul+0x154>
 8001162:	4647      	mov	r7, r8
 8001164:	e056      	b.n	8001214 <__aeabi_dmul+0x148>
 8001166:	4649      	mov	r1, r9
 8001168:	4bb0      	ldr	r3, [pc, #704]	; (800142c <__aeabi_dmul+0x360>)
 800116a:	4321      	orrs	r1, r4
 800116c:	18eb      	adds	r3, r5, r3
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2900      	cmp	r1, #0
 8001172:	d12a      	bne.n	80011ca <__aeabi_dmul+0xfe>
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	2202      	movs	r2, #2
 8001178:	0100      	lsls	r0, r0, #4
 800117a:	002b      	movs	r3, r5
 800117c:	4684      	mov	ip, r0
 800117e:	4316      	orrs	r6, r2
 8001180:	4642      	mov	r2, r8
 8001182:	4463      	add	r3, ip
 8001184:	407a      	eors	r2, r7
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2e0a      	cmp	r6, #10
 800118c:	dd00      	ble.n	8001190 <__aeabi_dmul+0xc4>
 800118e:	e231      	b.n	80015f4 <__aeabi_dmul+0x528>
 8001190:	2000      	movs	r0, #0
 8001192:	2400      	movs	r4, #0
 8001194:	2102      	movs	r1, #2
 8001196:	2e02      	cmp	r6, #2
 8001198:	dc26      	bgt.n	80011e8 <__aeabi_dmul+0x11c>
 800119a:	3e01      	subs	r6, #1
 800119c:	2e01      	cmp	r6, #1
 800119e:	d852      	bhi.n	8001246 <__aeabi_dmul+0x17a>
 80011a0:	2902      	cmp	r1, #2
 80011a2:	d04c      	beq.n	800123e <__aeabi_dmul+0x172>
 80011a4:	2901      	cmp	r1, #1
 80011a6:	d000      	beq.n	80011aa <__aeabi_dmul+0xde>
 80011a8:	e118      	b.n	80013dc <__aeabi_dmul+0x310>
 80011aa:	2300      	movs	r3, #0
 80011ac:	2400      	movs	r4, #0
 80011ae:	2500      	movs	r5, #0
 80011b0:	051b      	lsls	r3, r3, #20
 80011b2:	4323      	orrs	r3, r4
 80011b4:	07d2      	lsls	r2, r2, #31
 80011b6:	4313      	orrs	r3, r2
 80011b8:	0028      	movs	r0, r5
 80011ba:	0019      	movs	r1, r3
 80011bc:	b007      	add	sp, #28
 80011be:	bcf0      	pop	{r4, r5, r6, r7}
 80011c0:	46bb      	mov	fp, r7
 80011c2:	46b2      	mov	sl, r6
 80011c4:	46a9      	mov	r9, r5
 80011c6:	46a0      	mov	r8, r4
 80011c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	2203      	movs	r2, #3
 80011ce:	0109      	lsls	r1, r1, #4
 80011d0:	002b      	movs	r3, r5
 80011d2:	468c      	mov	ip, r1
 80011d4:	4316      	orrs	r6, r2
 80011d6:	4642      	mov	r2, r8
 80011d8:	4463      	add	r3, ip
 80011da:	407a      	eors	r2, r7
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2e0a      	cmp	r6, #10
 80011e2:	dd00      	ble.n	80011e6 <__aeabi_dmul+0x11a>
 80011e4:	e228      	b.n	8001638 <__aeabi_dmul+0x56c>
 80011e6:	2103      	movs	r1, #3
 80011e8:	2501      	movs	r5, #1
 80011ea:	40b5      	lsls	r5, r6
 80011ec:	46ac      	mov	ip, r5
 80011ee:	26a6      	movs	r6, #166	; 0xa6
 80011f0:	4663      	mov	r3, ip
 80011f2:	00f6      	lsls	r6, r6, #3
 80011f4:	4035      	ands	r5, r6
 80011f6:	4233      	tst	r3, r6
 80011f8:	d10b      	bne.n	8001212 <__aeabi_dmul+0x146>
 80011fa:	2690      	movs	r6, #144	; 0x90
 80011fc:	00b6      	lsls	r6, r6, #2
 80011fe:	4233      	tst	r3, r6
 8001200:	d118      	bne.n	8001234 <__aeabi_dmul+0x168>
 8001202:	3eb9      	subs	r6, #185	; 0xb9
 8001204:	3eff      	subs	r6, #255	; 0xff
 8001206:	421e      	tst	r6, r3
 8001208:	d01d      	beq.n	8001246 <__aeabi_dmul+0x17a>
 800120a:	46a3      	mov	fp, r4
 800120c:	4682      	mov	sl, r0
 800120e:	9100      	str	r1, [sp, #0]
 8001210:	e000      	b.n	8001214 <__aeabi_dmul+0x148>
 8001212:	0017      	movs	r7, r2
 8001214:	9900      	ldr	r1, [sp, #0]
 8001216:	003a      	movs	r2, r7
 8001218:	2902      	cmp	r1, #2
 800121a:	d010      	beq.n	800123e <__aeabi_dmul+0x172>
 800121c:	465c      	mov	r4, fp
 800121e:	4650      	mov	r0, sl
 8001220:	2903      	cmp	r1, #3
 8001222:	d1bf      	bne.n	80011a4 <__aeabi_dmul+0xd8>
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	031b      	lsls	r3, r3, #12
 8001228:	431c      	orrs	r4, r3
 800122a:	0324      	lsls	r4, r4, #12
 800122c:	0005      	movs	r5, r0
 800122e:	4b7f      	ldr	r3, [pc, #508]	; (800142c <__aeabi_dmul+0x360>)
 8001230:	0b24      	lsrs	r4, r4, #12
 8001232:	e7bd      	b.n	80011b0 <__aeabi_dmul+0xe4>
 8001234:	2480      	movs	r4, #128	; 0x80
 8001236:	2200      	movs	r2, #0
 8001238:	4b7c      	ldr	r3, [pc, #496]	; (800142c <__aeabi_dmul+0x360>)
 800123a:	0324      	lsls	r4, r4, #12
 800123c:	e7b8      	b.n	80011b0 <__aeabi_dmul+0xe4>
 800123e:	2400      	movs	r4, #0
 8001240:	2500      	movs	r5, #0
 8001242:	4b7a      	ldr	r3, [pc, #488]	; (800142c <__aeabi_dmul+0x360>)
 8001244:	e7b4      	b.n	80011b0 <__aeabi_dmul+0xe4>
 8001246:	4653      	mov	r3, sl
 8001248:	041e      	lsls	r6, r3, #16
 800124a:	0c36      	lsrs	r6, r6, #16
 800124c:	0c1f      	lsrs	r7, r3, #16
 800124e:	0033      	movs	r3, r6
 8001250:	0c01      	lsrs	r1, r0, #16
 8001252:	0400      	lsls	r0, r0, #16
 8001254:	0c00      	lsrs	r0, r0, #16
 8001256:	4343      	muls	r3, r0
 8001258:	4698      	mov	r8, r3
 800125a:	0003      	movs	r3, r0
 800125c:	437b      	muls	r3, r7
 800125e:	4699      	mov	r9, r3
 8001260:	0033      	movs	r3, r6
 8001262:	434b      	muls	r3, r1
 8001264:	469c      	mov	ip, r3
 8001266:	4643      	mov	r3, r8
 8001268:	000d      	movs	r5, r1
 800126a:	0c1b      	lsrs	r3, r3, #16
 800126c:	469a      	mov	sl, r3
 800126e:	437d      	muls	r5, r7
 8001270:	44cc      	add	ip, r9
 8001272:	44d4      	add	ip, sl
 8001274:	9500      	str	r5, [sp, #0]
 8001276:	45e1      	cmp	r9, ip
 8001278:	d904      	bls.n	8001284 <__aeabi_dmul+0x1b8>
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	025b      	lsls	r3, r3, #9
 800127e:	4699      	mov	r9, r3
 8001280:	444d      	add	r5, r9
 8001282:	9500      	str	r5, [sp, #0]
 8001284:	4663      	mov	r3, ip
 8001286:	0c1b      	lsrs	r3, r3, #16
 8001288:	001d      	movs	r5, r3
 800128a:	4663      	mov	r3, ip
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	469c      	mov	ip, r3
 8001290:	4643      	mov	r3, r8
 8001292:	041b      	lsls	r3, r3, #16
 8001294:	0c1b      	lsrs	r3, r3, #16
 8001296:	4698      	mov	r8, r3
 8001298:	4663      	mov	r3, ip
 800129a:	4443      	add	r3, r8
 800129c:	9303      	str	r3, [sp, #12]
 800129e:	0c23      	lsrs	r3, r4, #16
 80012a0:	4698      	mov	r8, r3
 80012a2:	0033      	movs	r3, r6
 80012a4:	0424      	lsls	r4, r4, #16
 80012a6:	0c24      	lsrs	r4, r4, #16
 80012a8:	4363      	muls	r3, r4
 80012aa:	469c      	mov	ip, r3
 80012ac:	0023      	movs	r3, r4
 80012ae:	437b      	muls	r3, r7
 80012b0:	4699      	mov	r9, r3
 80012b2:	4643      	mov	r3, r8
 80012b4:	435e      	muls	r6, r3
 80012b6:	435f      	muls	r7, r3
 80012b8:	444e      	add	r6, r9
 80012ba:	4663      	mov	r3, ip
 80012bc:	46b2      	mov	sl, r6
 80012be:	0c1e      	lsrs	r6, r3, #16
 80012c0:	4456      	add	r6, sl
 80012c2:	45b1      	cmp	r9, r6
 80012c4:	d903      	bls.n	80012ce <__aeabi_dmul+0x202>
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	025b      	lsls	r3, r3, #9
 80012ca:	4699      	mov	r9, r3
 80012cc:	444f      	add	r7, r9
 80012ce:	0c33      	lsrs	r3, r6, #16
 80012d0:	4699      	mov	r9, r3
 80012d2:	003b      	movs	r3, r7
 80012d4:	444b      	add	r3, r9
 80012d6:	9305      	str	r3, [sp, #20]
 80012d8:	4663      	mov	r3, ip
 80012da:	46ac      	mov	ip, r5
 80012dc:	041f      	lsls	r7, r3, #16
 80012de:	0c3f      	lsrs	r7, r7, #16
 80012e0:	0436      	lsls	r6, r6, #16
 80012e2:	19f6      	adds	r6, r6, r7
 80012e4:	44b4      	add	ip, r6
 80012e6:	4663      	mov	r3, ip
 80012e8:	9304      	str	r3, [sp, #16]
 80012ea:	465b      	mov	r3, fp
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	469c      	mov	ip, r3
 80012f0:	465b      	mov	r3, fp
 80012f2:	041f      	lsls	r7, r3, #16
 80012f4:	0c3f      	lsrs	r7, r7, #16
 80012f6:	003b      	movs	r3, r7
 80012f8:	4343      	muls	r3, r0
 80012fa:	4699      	mov	r9, r3
 80012fc:	4663      	mov	r3, ip
 80012fe:	4343      	muls	r3, r0
 8001300:	469a      	mov	sl, r3
 8001302:	464b      	mov	r3, r9
 8001304:	4660      	mov	r0, ip
 8001306:	0c1b      	lsrs	r3, r3, #16
 8001308:	469b      	mov	fp, r3
 800130a:	4348      	muls	r0, r1
 800130c:	4379      	muls	r1, r7
 800130e:	4451      	add	r1, sl
 8001310:	4459      	add	r1, fp
 8001312:	458a      	cmp	sl, r1
 8001314:	d903      	bls.n	800131e <__aeabi_dmul+0x252>
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	469a      	mov	sl, r3
 800131c:	4450      	add	r0, sl
 800131e:	0c0b      	lsrs	r3, r1, #16
 8001320:	469a      	mov	sl, r3
 8001322:	464b      	mov	r3, r9
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	0c1b      	lsrs	r3, r3, #16
 8001328:	4699      	mov	r9, r3
 800132a:	003b      	movs	r3, r7
 800132c:	4363      	muls	r3, r4
 800132e:	0409      	lsls	r1, r1, #16
 8001330:	4645      	mov	r5, r8
 8001332:	4449      	add	r1, r9
 8001334:	4699      	mov	r9, r3
 8001336:	4663      	mov	r3, ip
 8001338:	435c      	muls	r4, r3
 800133a:	436b      	muls	r3, r5
 800133c:	469c      	mov	ip, r3
 800133e:	464b      	mov	r3, r9
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	4698      	mov	r8, r3
 8001344:	436f      	muls	r7, r5
 8001346:	193f      	adds	r7, r7, r4
 8001348:	4447      	add	r7, r8
 800134a:	4450      	add	r0, sl
 800134c:	42bc      	cmp	r4, r7
 800134e:	d903      	bls.n	8001358 <__aeabi_dmul+0x28c>
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	4698      	mov	r8, r3
 8001356:	44c4      	add	ip, r8
 8001358:	9b04      	ldr	r3, [sp, #16]
 800135a:	9d00      	ldr	r5, [sp, #0]
 800135c:	4698      	mov	r8, r3
 800135e:	4445      	add	r5, r8
 8001360:	42b5      	cmp	r5, r6
 8001362:	41b6      	sbcs	r6, r6
 8001364:	4273      	negs	r3, r6
 8001366:	4698      	mov	r8, r3
 8001368:	464b      	mov	r3, r9
 800136a:	041e      	lsls	r6, r3, #16
 800136c:	9b05      	ldr	r3, [sp, #20]
 800136e:	043c      	lsls	r4, r7, #16
 8001370:	4699      	mov	r9, r3
 8001372:	0c36      	lsrs	r6, r6, #16
 8001374:	19a4      	adds	r4, r4, r6
 8001376:	444c      	add	r4, r9
 8001378:	46a1      	mov	r9, r4
 800137a:	4683      	mov	fp, r0
 800137c:	186e      	adds	r6, r5, r1
 800137e:	44c1      	add	r9, r8
 8001380:	428e      	cmp	r6, r1
 8001382:	4189      	sbcs	r1, r1
 8001384:	44cb      	add	fp, r9
 8001386:	465d      	mov	r5, fp
 8001388:	4249      	negs	r1, r1
 800138a:	186d      	adds	r5, r5, r1
 800138c:	429c      	cmp	r4, r3
 800138e:	41a4      	sbcs	r4, r4
 8001390:	45c1      	cmp	r9, r8
 8001392:	419b      	sbcs	r3, r3
 8001394:	4583      	cmp	fp, r0
 8001396:	4180      	sbcs	r0, r0
 8001398:	428d      	cmp	r5, r1
 800139a:	4189      	sbcs	r1, r1
 800139c:	425b      	negs	r3, r3
 800139e:	4264      	negs	r4, r4
 80013a0:	431c      	orrs	r4, r3
 80013a2:	4240      	negs	r0, r0
 80013a4:	9b03      	ldr	r3, [sp, #12]
 80013a6:	4249      	negs	r1, r1
 80013a8:	4301      	orrs	r1, r0
 80013aa:	0270      	lsls	r0, r6, #9
 80013ac:	0c3f      	lsrs	r7, r7, #16
 80013ae:	4318      	orrs	r0, r3
 80013b0:	19e4      	adds	r4, r4, r7
 80013b2:	1e47      	subs	r7, r0, #1
 80013b4:	41b8      	sbcs	r0, r7
 80013b6:	1864      	adds	r4, r4, r1
 80013b8:	4464      	add	r4, ip
 80013ba:	0df6      	lsrs	r6, r6, #23
 80013bc:	0261      	lsls	r1, r4, #9
 80013be:	4330      	orrs	r0, r6
 80013c0:	0dec      	lsrs	r4, r5, #23
 80013c2:	026e      	lsls	r6, r5, #9
 80013c4:	430c      	orrs	r4, r1
 80013c6:	4330      	orrs	r0, r6
 80013c8:	01c9      	lsls	r1, r1, #7
 80013ca:	d400      	bmi.n	80013ce <__aeabi_dmul+0x302>
 80013cc:	e0f1      	b.n	80015b2 <__aeabi_dmul+0x4e6>
 80013ce:	2101      	movs	r1, #1
 80013d0:	0843      	lsrs	r3, r0, #1
 80013d2:	4001      	ands	r1, r0
 80013d4:	430b      	orrs	r3, r1
 80013d6:	07e0      	lsls	r0, r4, #31
 80013d8:	4318      	orrs	r0, r3
 80013da:	0864      	lsrs	r4, r4, #1
 80013dc:	4915      	ldr	r1, [pc, #84]	; (8001434 <__aeabi_dmul+0x368>)
 80013de:	9b02      	ldr	r3, [sp, #8]
 80013e0:	468c      	mov	ip, r1
 80013e2:	4463      	add	r3, ip
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dc00      	bgt.n	80013ea <__aeabi_dmul+0x31e>
 80013e8:	e097      	b.n	800151a <__aeabi_dmul+0x44e>
 80013ea:	0741      	lsls	r1, r0, #29
 80013ec:	d009      	beq.n	8001402 <__aeabi_dmul+0x336>
 80013ee:	210f      	movs	r1, #15
 80013f0:	4001      	ands	r1, r0
 80013f2:	2904      	cmp	r1, #4
 80013f4:	d005      	beq.n	8001402 <__aeabi_dmul+0x336>
 80013f6:	1d01      	adds	r1, r0, #4
 80013f8:	4281      	cmp	r1, r0
 80013fa:	4180      	sbcs	r0, r0
 80013fc:	4240      	negs	r0, r0
 80013fe:	1824      	adds	r4, r4, r0
 8001400:	0008      	movs	r0, r1
 8001402:	01e1      	lsls	r1, r4, #7
 8001404:	d506      	bpl.n	8001414 <__aeabi_dmul+0x348>
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	00c9      	lsls	r1, r1, #3
 800140a:	468c      	mov	ip, r1
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <__aeabi_dmul+0x36c>)
 800140e:	401c      	ands	r4, r3
 8001410:	9b02      	ldr	r3, [sp, #8]
 8001412:	4463      	add	r3, ip
 8001414:	4909      	ldr	r1, [pc, #36]	; (800143c <__aeabi_dmul+0x370>)
 8001416:	428b      	cmp	r3, r1
 8001418:	dd00      	ble.n	800141c <__aeabi_dmul+0x350>
 800141a:	e710      	b.n	800123e <__aeabi_dmul+0x172>
 800141c:	0761      	lsls	r1, r4, #29
 800141e:	08c5      	lsrs	r5, r0, #3
 8001420:	0264      	lsls	r4, r4, #9
 8001422:	055b      	lsls	r3, r3, #21
 8001424:	430d      	orrs	r5, r1
 8001426:	0b24      	lsrs	r4, r4, #12
 8001428:	0d5b      	lsrs	r3, r3, #21
 800142a:	e6c1      	b.n	80011b0 <__aeabi_dmul+0xe4>
 800142c:	000007ff 	.word	0x000007ff
 8001430:	fffffc01 	.word	0xfffffc01
 8001434:	000003ff 	.word	0x000003ff
 8001438:	feffffff 	.word	0xfeffffff
 800143c:	000007fe 	.word	0x000007fe
 8001440:	464b      	mov	r3, r9
 8001442:	4323      	orrs	r3, r4
 8001444:	d059      	beq.n	80014fa <__aeabi_dmul+0x42e>
 8001446:	2c00      	cmp	r4, #0
 8001448:	d100      	bne.n	800144c <__aeabi_dmul+0x380>
 800144a:	e0a3      	b.n	8001594 <__aeabi_dmul+0x4c8>
 800144c:	0020      	movs	r0, r4
 800144e:	f000 fd25 	bl	8001e9c <__clzsi2>
 8001452:	0001      	movs	r1, r0
 8001454:	0003      	movs	r3, r0
 8001456:	390b      	subs	r1, #11
 8001458:	221d      	movs	r2, #29
 800145a:	1a52      	subs	r2, r2, r1
 800145c:	4649      	mov	r1, r9
 800145e:	0018      	movs	r0, r3
 8001460:	40d1      	lsrs	r1, r2
 8001462:	464a      	mov	r2, r9
 8001464:	3808      	subs	r0, #8
 8001466:	4082      	lsls	r2, r0
 8001468:	4084      	lsls	r4, r0
 800146a:	0010      	movs	r0, r2
 800146c:	430c      	orrs	r4, r1
 800146e:	4a74      	ldr	r2, [pc, #464]	; (8001640 <__aeabi_dmul+0x574>)
 8001470:	1aeb      	subs	r3, r5, r3
 8001472:	4694      	mov	ip, r2
 8001474:	4642      	mov	r2, r8
 8001476:	4463      	add	r3, ip
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	407a      	eors	r2, r7
 800147e:	3301      	adds	r3, #1
 8001480:	2100      	movs	r1, #0
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	2e0a      	cmp	r6, #10
 8001488:	dd00      	ble.n	800148c <__aeabi_dmul+0x3c0>
 800148a:	e667      	b.n	800115c <__aeabi_dmul+0x90>
 800148c:	e683      	b.n	8001196 <__aeabi_dmul+0xca>
 800148e:	465b      	mov	r3, fp
 8001490:	4303      	orrs	r3, r0
 8001492:	469a      	mov	sl, r3
 8001494:	d02a      	beq.n	80014ec <__aeabi_dmul+0x420>
 8001496:	465b      	mov	r3, fp
 8001498:	2b00      	cmp	r3, #0
 800149a:	d06d      	beq.n	8001578 <__aeabi_dmul+0x4ac>
 800149c:	4658      	mov	r0, fp
 800149e:	f000 fcfd 	bl	8001e9c <__clzsi2>
 80014a2:	0001      	movs	r1, r0
 80014a4:	0003      	movs	r3, r0
 80014a6:	390b      	subs	r1, #11
 80014a8:	221d      	movs	r2, #29
 80014aa:	1a52      	subs	r2, r2, r1
 80014ac:	0021      	movs	r1, r4
 80014ae:	0018      	movs	r0, r3
 80014b0:	465d      	mov	r5, fp
 80014b2:	40d1      	lsrs	r1, r2
 80014b4:	3808      	subs	r0, #8
 80014b6:	4085      	lsls	r5, r0
 80014b8:	000a      	movs	r2, r1
 80014ba:	4084      	lsls	r4, r0
 80014bc:	432a      	orrs	r2, r5
 80014be:	4693      	mov	fp, r2
 80014c0:	46a2      	mov	sl, r4
 80014c2:	4d5f      	ldr	r5, [pc, #380]	; (8001640 <__aeabi_dmul+0x574>)
 80014c4:	2600      	movs	r6, #0
 80014c6:	1aed      	subs	r5, r5, r3
 80014c8:	2300      	movs	r3, #0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	e625      	b.n	800111a <__aeabi_dmul+0x4e>
 80014ce:	465b      	mov	r3, fp
 80014d0:	4303      	orrs	r3, r0
 80014d2:	469a      	mov	sl, r3
 80014d4:	d105      	bne.n	80014e2 <__aeabi_dmul+0x416>
 80014d6:	2300      	movs	r3, #0
 80014d8:	469b      	mov	fp, r3
 80014da:	3302      	adds	r3, #2
 80014dc:	2608      	movs	r6, #8
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	e61b      	b.n	800111a <__aeabi_dmul+0x4e>
 80014e2:	2303      	movs	r3, #3
 80014e4:	4682      	mov	sl, r0
 80014e6:	260c      	movs	r6, #12
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	e616      	b.n	800111a <__aeabi_dmul+0x4e>
 80014ec:	2300      	movs	r3, #0
 80014ee:	469b      	mov	fp, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	2604      	movs	r6, #4
 80014f4:	2500      	movs	r5, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	e60f      	b.n	800111a <__aeabi_dmul+0x4e>
 80014fa:	4642      	mov	r2, r8
 80014fc:	3301      	adds	r3, #1
 80014fe:	9501      	str	r5, [sp, #4]
 8001500:	431e      	orrs	r6, r3
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	407a      	eors	r2, r7
 8001506:	3301      	adds	r3, #1
 8001508:	2400      	movs	r4, #0
 800150a:	2000      	movs	r0, #0
 800150c:	2101      	movs	r1, #1
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2e0a      	cmp	r6, #10
 8001514:	dd00      	ble.n	8001518 <__aeabi_dmul+0x44c>
 8001516:	e621      	b.n	800115c <__aeabi_dmul+0x90>
 8001518:	e63d      	b.n	8001196 <__aeabi_dmul+0xca>
 800151a:	2101      	movs	r1, #1
 800151c:	1ac9      	subs	r1, r1, r3
 800151e:	2938      	cmp	r1, #56	; 0x38
 8001520:	dd00      	ble.n	8001524 <__aeabi_dmul+0x458>
 8001522:	e642      	b.n	80011aa <__aeabi_dmul+0xde>
 8001524:	291f      	cmp	r1, #31
 8001526:	dd47      	ble.n	80015b8 <__aeabi_dmul+0x4ec>
 8001528:	261f      	movs	r6, #31
 800152a:	0025      	movs	r5, r4
 800152c:	4276      	negs	r6, r6
 800152e:	1af3      	subs	r3, r6, r3
 8001530:	40dd      	lsrs	r5, r3
 8001532:	002b      	movs	r3, r5
 8001534:	2920      	cmp	r1, #32
 8001536:	d005      	beq.n	8001544 <__aeabi_dmul+0x478>
 8001538:	4942      	ldr	r1, [pc, #264]	; (8001644 <__aeabi_dmul+0x578>)
 800153a:	9d02      	ldr	r5, [sp, #8]
 800153c:	468c      	mov	ip, r1
 800153e:	4465      	add	r5, ip
 8001540:	40ac      	lsls	r4, r5
 8001542:	4320      	orrs	r0, r4
 8001544:	1e41      	subs	r1, r0, #1
 8001546:	4188      	sbcs	r0, r1
 8001548:	4318      	orrs	r0, r3
 800154a:	2307      	movs	r3, #7
 800154c:	001d      	movs	r5, r3
 800154e:	2400      	movs	r4, #0
 8001550:	4005      	ands	r5, r0
 8001552:	4203      	tst	r3, r0
 8001554:	d04a      	beq.n	80015ec <__aeabi_dmul+0x520>
 8001556:	230f      	movs	r3, #15
 8001558:	2400      	movs	r4, #0
 800155a:	4003      	ands	r3, r0
 800155c:	2b04      	cmp	r3, #4
 800155e:	d042      	beq.n	80015e6 <__aeabi_dmul+0x51a>
 8001560:	1d03      	adds	r3, r0, #4
 8001562:	4283      	cmp	r3, r0
 8001564:	4180      	sbcs	r0, r0
 8001566:	4240      	negs	r0, r0
 8001568:	1824      	adds	r4, r4, r0
 800156a:	0018      	movs	r0, r3
 800156c:	0223      	lsls	r3, r4, #8
 800156e:	d53a      	bpl.n	80015e6 <__aeabi_dmul+0x51a>
 8001570:	2301      	movs	r3, #1
 8001572:	2400      	movs	r4, #0
 8001574:	2500      	movs	r5, #0
 8001576:	e61b      	b.n	80011b0 <__aeabi_dmul+0xe4>
 8001578:	f000 fc90 	bl	8001e9c <__clzsi2>
 800157c:	0001      	movs	r1, r0
 800157e:	0003      	movs	r3, r0
 8001580:	3115      	adds	r1, #21
 8001582:	3320      	adds	r3, #32
 8001584:	291c      	cmp	r1, #28
 8001586:	dd8f      	ble.n	80014a8 <__aeabi_dmul+0x3dc>
 8001588:	3808      	subs	r0, #8
 800158a:	2200      	movs	r2, #0
 800158c:	4084      	lsls	r4, r0
 800158e:	4692      	mov	sl, r2
 8001590:	46a3      	mov	fp, r4
 8001592:	e796      	b.n	80014c2 <__aeabi_dmul+0x3f6>
 8001594:	f000 fc82 	bl	8001e9c <__clzsi2>
 8001598:	0001      	movs	r1, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3115      	adds	r1, #21
 800159e:	3320      	adds	r3, #32
 80015a0:	291c      	cmp	r1, #28
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dmul+0x4da>
 80015a4:	e758      	b.n	8001458 <__aeabi_dmul+0x38c>
 80015a6:	0002      	movs	r2, r0
 80015a8:	464c      	mov	r4, r9
 80015aa:	3a08      	subs	r2, #8
 80015ac:	2000      	movs	r0, #0
 80015ae:	4094      	lsls	r4, r2
 80015b0:	e75d      	b.n	800146e <__aeabi_dmul+0x3a2>
 80015b2:	9b01      	ldr	r3, [sp, #4]
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	e711      	b.n	80013dc <__aeabi_dmul+0x310>
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <__aeabi_dmul+0x57c>)
 80015ba:	0026      	movs	r6, r4
 80015bc:	469c      	mov	ip, r3
 80015be:	0003      	movs	r3, r0
 80015c0:	9d02      	ldr	r5, [sp, #8]
 80015c2:	40cb      	lsrs	r3, r1
 80015c4:	4465      	add	r5, ip
 80015c6:	40ae      	lsls	r6, r5
 80015c8:	431e      	orrs	r6, r3
 80015ca:	0003      	movs	r3, r0
 80015cc:	40ab      	lsls	r3, r5
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	4183      	sbcs	r3, r0
 80015d2:	0030      	movs	r0, r6
 80015d4:	4318      	orrs	r0, r3
 80015d6:	40cc      	lsrs	r4, r1
 80015d8:	0743      	lsls	r3, r0, #29
 80015da:	d0c7      	beq.n	800156c <__aeabi_dmul+0x4a0>
 80015dc:	230f      	movs	r3, #15
 80015de:	4003      	ands	r3, r0
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d1bd      	bne.n	8001560 <__aeabi_dmul+0x494>
 80015e4:	e7c2      	b.n	800156c <__aeabi_dmul+0x4a0>
 80015e6:	0765      	lsls	r5, r4, #29
 80015e8:	0264      	lsls	r4, r4, #9
 80015ea:	0b24      	lsrs	r4, r4, #12
 80015ec:	08c0      	lsrs	r0, r0, #3
 80015ee:	2300      	movs	r3, #0
 80015f0:	4305      	orrs	r5, r0
 80015f2:	e5dd      	b.n	80011b0 <__aeabi_dmul+0xe4>
 80015f4:	2500      	movs	r5, #0
 80015f6:	2302      	movs	r3, #2
 80015f8:	2e0f      	cmp	r6, #15
 80015fa:	d10c      	bne.n	8001616 <__aeabi_dmul+0x54a>
 80015fc:	2480      	movs	r4, #128	; 0x80
 80015fe:	465b      	mov	r3, fp
 8001600:	0324      	lsls	r4, r4, #12
 8001602:	4223      	tst	r3, r4
 8001604:	d00e      	beq.n	8001624 <__aeabi_dmul+0x558>
 8001606:	4221      	tst	r1, r4
 8001608:	d10c      	bne.n	8001624 <__aeabi_dmul+0x558>
 800160a:	430c      	orrs	r4, r1
 800160c:	0324      	lsls	r4, r4, #12
 800160e:	003a      	movs	r2, r7
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <__aeabi_dmul+0x580>)
 8001612:	0b24      	lsrs	r4, r4, #12
 8001614:	e5cc      	b.n	80011b0 <__aeabi_dmul+0xe4>
 8001616:	2e0b      	cmp	r6, #11
 8001618:	d000      	beq.n	800161c <__aeabi_dmul+0x550>
 800161a:	e5a2      	b.n	8001162 <__aeabi_dmul+0x96>
 800161c:	468b      	mov	fp, r1
 800161e:	46aa      	mov	sl, r5
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	e5f7      	b.n	8001214 <__aeabi_dmul+0x148>
 8001624:	2480      	movs	r4, #128	; 0x80
 8001626:	465b      	mov	r3, fp
 8001628:	0324      	lsls	r4, r4, #12
 800162a:	431c      	orrs	r4, r3
 800162c:	0324      	lsls	r4, r4, #12
 800162e:	4642      	mov	r2, r8
 8001630:	4655      	mov	r5, sl
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <__aeabi_dmul+0x580>)
 8001634:	0b24      	lsrs	r4, r4, #12
 8001636:	e5bb      	b.n	80011b0 <__aeabi_dmul+0xe4>
 8001638:	464d      	mov	r5, r9
 800163a:	0021      	movs	r1, r4
 800163c:	2303      	movs	r3, #3
 800163e:	e7db      	b.n	80015f8 <__aeabi_dmul+0x52c>
 8001640:	fffffc0d 	.word	0xfffffc0d
 8001644:	0000043e 	.word	0x0000043e
 8001648:	0000041e 	.word	0x0000041e
 800164c:	000007ff 	.word	0x000007ff

08001650 <__aeabi_dsub>:
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	4657      	mov	r7, sl
 8001654:	464e      	mov	r6, r9
 8001656:	4645      	mov	r5, r8
 8001658:	46de      	mov	lr, fp
 800165a:	b5e0      	push	{r5, r6, r7, lr}
 800165c:	000d      	movs	r5, r1
 800165e:	0004      	movs	r4, r0
 8001660:	0019      	movs	r1, r3
 8001662:	0010      	movs	r0, r2
 8001664:	032b      	lsls	r3, r5, #12
 8001666:	0a5b      	lsrs	r3, r3, #9
 8001668:	0f62      	lsrs	r2, r4, #29
 800166a:	431a      	orrs	r2, r3
 800166c:	00e3      	lsls	r3, r4, #3
 800166e:	030c      	lsls	r4, r1, #12
 8001670:	0a64      	lsrs	r4, r4, #9
 8001672:	0f47      	lsrs	r7, r0, #29
 8001674:	4327      	orrs	r7, r4
 8001676:	4cd0      	ldr	r4, [pc, #832]	; (80019b8 <__aeabi_dsub+0x368>)
 8001678:	006e      	lsls	r6, r5, #1
 800167a:	4691      	mov	r9, r2
 800167c:	b083      	sub	sp, #12
 800167e:	004a      	lsls	r2, r1, #1
 8001680:	00c0      	lsls	r0, r0, #3
 8001682:	4698      	mov	r8, r3
 8001684:	46a2      	mov	sl, r4
 8001686:	0d76      	lsrs	r6, r6, #21
 8001688:	0fed      	lsrs	r5, r5, #31
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	0fc9      	lsrs	r1, r1, #31
 800168e:	9001      	str	r0, [sp, #4]
 8001690:	42a2      	cmp	r2, r4
 8001692:	d100      	bne.n	8001696 <__aeabi_dsub+0x46>
 8001694:	e0b9      	b.n	800180a <__aeabi_dsub+0x1ba>
 8001696:	2401      	movs	r4, #1
 8001698:	4061      	eors	r1, r4
 800169a:	468b      	mov	fp, r1
 800169c:	428d      	cmp	r5, r1
 800169e:	d100      	bne.n	80016a2 <__aeabi_dsub+0x52>
 80016a0:	e08d      	b.n	80017be <__aeabi_dsub+0x16e>
 80016a2:	1ab4      	subs	r4, r6, r2
 80016a4:	46a4      	mov	ip, r4
 80016a6:	2c00      	cmp	r4, #0
 80016a8:	dc00      	bgt.n	80016ac <__aeabi_dsub+0x5c>
 80016aa:	e0b7      	b.n	800181c <__aeabi_dsub+0x1cc>
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dsub+0x62>
 80016b0:	e0cb      	b.n	800184a <__aeabi_dsub+0x1fa>
 80016b2:	4ac1      	ldr	r2, [pc, #772]	; (80019b8 <__aeabi_dsub+0x368>)
 80016b4:	4296      	cmp	r6, r2
 80016b6:	d100      	bne.n	80016ba <__aeabi_dsub+0x6a>
 80016b8:	e186      	b.n	80019c8 <__aeabi_dsub+0x378>
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	4317      	orrs	r7, r2
 80016c0:	4662      	mov	r2, ip
 80016c2:	2a38      	cmp	r2, #56	; 0x38
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dsub+0x78>
 80016c6:	e1a4      	b.n	8001a12 <__aeabi_dsub+0x3c2>
 80016c8:	2a1f      	cmp	r2, #31
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dsub+0x7e>
 80016cc:	e21d      	b.n	8001b0a <__aeabi_dsub+0x4ba>
 80016ce:	4661      	mov	r1, ip
 80016d0:	2220      	movs	r2, #32
 80016d2:	003c      	movs	r4, r7
 80016d4:	1a52      	subs	r2, r2, r1
 80016d6:	0001      	movs	r1, r0
 80016d8:	4090      	lsls	r0, r2
 80016da:	4094      	lsls	r4, r2
 80016dc:	1e42      	subs	r2, r0, #1
 80016de:	4190      	sbcs	r0, r2
 80016e0:	4662      	mov	r2, ip
 80016e2:	46a0      	mov	r8, r4
 80016e4:	4664      	mov	r4, ip
 80016e6:	40d7      	lsrs	r7, r2
 80016e8:	464a      	mov	r2, r9
 80016ea:	40e1      	lsrs	r1, r4
 80016ec:	4644      	mov	r4, r8
 80016ee:	1bd2      	subs	r2, r2, r7
 80016f0:	4691      	mov	r9, r2
 80016f2:	430c      	orrs	r4, r1
 80016f4:	4304      	orrs	r4, r0
 80016f6:	1b1c      	subs	r4, r3, r4
 80016f8:	42a3      	cmp	r3, r4
 80016fa:	4192      	sbcs	r2, r2
 80016fc:	464b      	mov	r3, r9
 80016fe:	4252      	negs	r2, r2
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	469a      	mov	sl, r3
 8001704:	4653      	mov	r3, sl
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	d400      	bmi.n	800170c <__aeabi_dsub+0xbc>
 800170a:	e12b      	b.n	8001964 <__aeabi_dsub+0x314>
 800170c:	4653      	mov	r3, sl
 800170e:	025a      	lsls	r2, r3, #9
 8001710:	0a53      	lsrs	r3, r2, #9
 8001712:	469a      	mov	sl, r3
 8001714:	4653      	mov	r3, sl
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dsub+0xcc>
 800171a:	e166      	b.n	80019ea <__aeabi_dsub+0x39a>
 800171c:	4650      	mov	r0, sl
 800171e:	f000 fbbd 	bl	8001e9c <__clzsi2>
 8001722:	0003      	movs	r3, r0
 8001724:	3b08      	subs	r3, #8
 8001726:	2220      	movs	r2, #32
 8001728:	0020      	movs	r0, r4
 800172a:	1ad2      	subs	r2, r2, r3
 800172c:	4651      	mov	r1, sl
 800172e:	40d0      	lsrs	r0, r2
 8001730:	4099      	lsls	r1, r3
 8001732:	0002      	movs	r2, r0
 8001734:	409c      	lsls	r4, r3
 8001736:	430a      	orrs	r2, r1
 8001738:	429e      	cmp	r6, r3
 800173a:	dd00      	ble.n	800173e <__aeabi_dsub+0xee>
 800173c:	e164      	b.n	8001a08 <__aeabi_dsub+0x3b8>
 800173e:	1b9b      	subs	r3, r3, r6
 8001740:	1c59      	adds	r1, r3, #1
 8001742:	291f      	cmp	r1, #31
 8001744:	dd00      	ble.n	8001748 <__aeabi_dsub+0xf8>
 8001746:	e0fe      	b.n	8001946 <__aeabi_dsub+0x2f6>
 8001748:	2320      	movs	r3, #32
 800174a:	0010      	movs	r0, r2
 800174c:	0026      	movs	r6, r4
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	409c      	lsls	r4, r3
 8001752:	4098      	lsls	r0, r3
 8001754:	40ce      	lsrs	r6, r1
 8001756:	40ca      	lsrs	r2, r1
 8001758:	1e63      	subs	r3, r4, #1
 800175a:	419c      	sbcs	r4, r3
 800175c:	4330      	orrs	r0, r6
 800175e:	4692      	mov	sl, r2
 8001760:	2600      	movs	r6, #0
 8001762:	4304      	orrs	r4, r0
 8001764:	0763      	lsls	r3, r4, #29
 8001766:	d009      	beq.n	800177c <__aeabi_dsub+0x12c>
 8001768:	230f      	movs	r3, #15
 800176a:	4023      	ands	r3, r4
 800176c:	2b04      	cmp	r3, #4
 800176e:	d005      	beq.n	800177c <__aeabi_dsub+0x12c>
 8001770:	1d23      	adds	r3, r4, #4
 8001772:	42a3      	cmp	r3, r4
 8001774:	41a4      	sbcs	r4, r4
 8001776:	4264      	negs	r4, r4
 8001778:	44a2      	add	sl, r4
 800177a:	001c      	movs	r4, r3
 800177c:	4653      	mov	r3, sl
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	d400      	bmi.n	8001784 <__aeabi_dsub+0x134>
 8001782:	e0f2      	b.n	800196a <__aeabi_dsub+0x31a>
 8001784:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <__aeabi_dsub+0x368>)
 8001786:	3601      	adds	r6, #1
 8001788:	429e      	cmp	r6, r3
 800178a:	d100      	bne.n	800178e <__aeabi_dsub+0x13e>
 800178c:	e10f      	b.n	80019ae <__aeabi_dsub+0x35e>
 800178e:	4653      	mov	r3, sl
 8001790:	498a      	ldr	r1, [pc, #552]	; (80019bc <__aeabi_dsub+0x36c>)
 8001792:	08e4      	lsrs	r4, r4, #3
 8001794:	400b      	ands	r3, r1
 8001796:	0019      	movs	r1, r3
 8001798:	075b      	lsls	r3, r3, #29
 800179a:	4323      	orrs	r3, r4
 800179c:	0572      	lsls	r2, r6, #21
 800179e:	024c      	lsls	r4, r1, #9
 80017a0:	0b24      	lsrs	r4, r4, #12
 80017a2:	0d52      	lsrs	r2, r2, #21
 80017a4:	0512      	lsls	r2, r2, #20
 80017a6:	4322      	orrs	r2, r4
 80017a8:	07ed      	lsls	r5, r5, #31
 80017aa:	432a      	orrs	r2, r5
 80017ac:	0018      	movs	r0, r3
 80017ae:	0011      	movs	r1, r2
 80017b0:	b003      	add	sp, #12
 80017b2:	bcf0      	pop	{r4, r5, r6, r7}
 80017b4:	46bb      	mov	fp, r7
 80017b6:	46b2      	mov	sl, r6
 80017b8:	46a9      	mov	r9, r5
 80017ba:	46a0      	mov	r8, r4
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017be:	1ab4      	subs	r4, r6, r2
 80017c0:	46a4      	mov	ip, r4
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	dd59      	ble.n	800187a <__aeabi_dsub+0x22a>
 80017c6:	2a00      	cmp	r2, #0
 80017c8:	d100      	bne.n	80017cc <__aeabi_dsub+0x17c>
 80017ca:	e0b0      	b.n	800192e <__aeabi_dsub+0x2de>
 80017cc:	4556      	cmp	r6, sl
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dsub+0x182>
 80017d0:	e0fa      	b.n	80019c8 <__aeabi_dsub+0x378>
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	0412      	lsls	r2, r2, #16
 80017d6:	4317      	orrs	r7, r2
 80017d8:	4662      	mov	r2, ip
 80017da:	2a38      	cmp	r2, #56	; 0x38
 80017dc:	dd00      	ble.n	80017e0 <__aeabi_dsub+0x190>
 80017de:	e0d4      	b.n	800198a <__aeabi_dsub+0x33a>
 80017e0:	2a1f      	cmp	r2, #31
 80017e2:	dc00      	bgt.n	80017e6 <__aeabi_dsub+0x196>
 80017e4:	e1c0      	b.n	8001b68 <__aeabi_dsub+0x518>
 80017e6:	0039      	movs	r1, r7
 80017e8:	3a20      	subs	r2, #32
 80017ea:	40d1      	lsrs	r1, r2
 80017ec:	4662      	mov	r2, ip
 80017ee:	2a20      	cmp	r2, #32
 80017f0:	d006      	beq.n	8001800 <__aeabi_dsub+0x1b0>
 80017f2:	4664      	mov	r4, ip
 80017f4:	2240      	movs	r2, #64	; 0x40
 80017f6:	1b12      	subs	r2, r2, r4
 80017f8:	003c      	movs	r4, r7
 80017fa:	4094      	lsls	r4, r2
 80017fc:	4304      	orrs	r4, r0
 80017fe:	9401      	str	r4, [sp, #4]
 8001800:	9c01      	ldr	r4, [sp, #4]
 8001802:	1e62      	subs	r2, r4, #1
 8001804:	4194      	sbcs	r4, r2
 8001806:	430c      	orrs	r4, r1
 8001808:	e0c3      	b.n	8001992 <__aeabi_dsub+0x342>
 800180a:	003c      	movs	r4, r7
 800180c:	4304      	orrs	r4, r0
 800180e:	d02b      	beq.n	8001868 <__aeabi_dsub+0x218>
 8001810:	468b      	mov	fp, r1
 8001812:	428d      	cmp	r5, r1
 8001814:	d02e      	beq.n	8001874 <__aeabi_dsub+0x224>
 8001816:	4c6a      	ldr	r4, [pc, #424]	; (80019c0 <__aeabi_dsub+0x370>)
 8001818:	46a4      	mov	ip, r4
 800181a:	44b4      	add	ip, r6
 800181c:	4664      	mov	r4, ip
 800181e:	2c00      	cmp	r4, #0
 8001820:	d05f      	beq.n	80018e2 <__aeabi_dsub+0x292>
 8001822:	1b94      	subs	r4, r2, r6
 8001824:	46a4      	mov	ip, r4
 8001826:	2e00      	cmp	r6, #0
 8001828:	d000      	beq.n	800182c <__aeabi_dsub+0x1dc>
 800182a:	e120      	b.n	8001a6e <__aeabi_dsub+0x41e>
 800182c:	464c      	mov	r4, r9
 800182e:	431c      	orrs	r4, r3
 8001830:	d100      	bne.n	8001834 <__aeabi_dsub+0x1e4>
 8001832:	e1c7      	b.n	8001bc4 <__aeabi_dsub+0x574>
 8001834:	4661      	mov	r1, ip
 8001836:	1e4c      	subs	r4, r1, #1
 8001838:	2901      	cmp	r1, #1
 800183a:	d100      	bne.n	800183e <__aeabi_dsub+0x1ee>
 800183c:	e223      	b.n	8001c86 <__aeabi_dsub+0x636>
 800183e:	4d5e      	ldr	r5, [pc, #376]	; (80019b8 <__aeabi_dsub+0x368>)
 8001840:	45ac      	cmp	ip, r5
 8001842:	d100      	bne.n	8001846 <__aeabi_dsub+0x1f6>
 8001844:	e1d8      	b.n	8001bf8 <__aeabi_dsub+0x5a8>
 8001846:	46a4      	mov	ip, r4
 8001848:	e11a      	b.n	8001a80 <__aeabi_dsub+0x430>
 800184a:	003a      	movs	r2, r7
 800184c:	4302      	orrs	r2, r0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x202>
 8001850:	e0e4      	b.n	8001a1c <__aeabi_dsub+0x3cc>
 8001852:	0022      	movs	r2, r4
 8001854:	3a01      	subs	r2, #1
 8001856:	2c01      	cmp	r4, #1
 8001858:	d100      	bne.n	800185c <__aeabi_dsub+0x20c>
 800185a:	e1c3      	b.n	8001be4 <__aeabi_dsub+0x594>
 800185c:	4956      	ldr	r1, [pc, #344]	; (80019b8 <__aeabi_dsub+0x368>)
 800185e:	428c      	cmp	r4, r1
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0x214>
 8001862:	e0b1      	b.n	80019c8 <__aeabi_dsub+0x378>
 8001864:	4694      	mov	ip, r2
 8001866:	e72b      	b.n	80016c0 <__aeabi_dsub+0x70>
 8001868:	2401      	movs	r4, #1
 800186a:	4061      	eors	r1, r4
 800186c:	468b      	mov	fp, r1
 800186e:	428d      	cmp	r5, r1
 8001870:	d000      	beq.n	8001874 <__aeabi_dsub+0x224>
 8001872:	e716      	b.n	80016a2 <__aeabi_dsub+0x52>
 8001874:	4952      	ldr	r1, [pc, #328]	; (80019c0 <__aeabi_dsub+0x370>)
 8001876:	468c      	mov	ip, r1
 8001878:	44b4      	add	ip, r6
 800187a:	4664      	mov	r4, ip
 800187c:	2c00      	cmp	r4, #0
 800187e:	d100      	bne.n	8001882 <__aeabi_dsub+0x232>
 8001880:	e0d3      	b.n	8001a2a <__aeabi_dsub+0x3da>
 8001882:	1b91      	subs	r1, r2, r6
 8001884:	468c      	mov	ip, r1
 8001886:	2e00      	cmp	r6, #0
 8001888:	d100      	bne.n	800188c <__aeabi_dsub+0x23c>
 800188a:	e15e      	b.n	8001b4a <__aeabi_dsub+0x4fa>
 800188c:	494a      	ldr	r1, [pc, #296]	; (80019b8 <__aeabi_dsub+0x368>)
 800188e:	428a      	cmp	r2, r1
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x244>
 8001892:	e1be      	b.n	8001c12 <__aeabi_dsub+0x5c2>
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	464c      	mov	r4, r9
 8001898:	0409      	lsls	r1, r1, #16
 800189a:	430c      	orrs	r4, r1
 800189c:	46a1      	mov	r9, r4
 800189e:	4661      	mov	r1, ip
 80018a0:	2938      	cmp	r1, #56	; 0x38
 80018a2:	dd00      	ble.n	80018a6 <__aeabi_dsub+0x256>
 80018a4:	e1ba      	b.n	8001c1c <__aeabi_dsub+0x5cc>
 80018a6:	291f      	cmp	r1, #31
 80018a8:	dd00      	ble.n	80018ac <__aeabi_dsub+0x25c>
 80018aa:	e227      	b.n	8001cfc <__aeabi_dsub+0x6ac>
 80018ac:	2420      	movs	r4, #32
 80018ae:	1a64      	subs	r4, r4, r1
 80018b0:	4649      	mov	r1, r9
 80018b2:	40a1      	lsls	r1, r4
 80018b4:	001e      	movs	r6, r3
 80018b6:	4688      	mov	r8, r1
 80018b8:	4661      	mov	r1, ip
 80018ba:	40a3      	lsls	r3, r4
 80018bc:	40ce      	lsrs	r6, r1
 80018be:	4641      	mov	r1, r8
 80018c0:	1e5c      	subs	r4, r3, #1
 80018c2:	41a3      	sbcs	r3, r4
 80018c4:	4331      	orrs	r1, r6
 80018c6:	4319      	orrs	r1, r3
 80018c8:	000c      	movs	r4, r1
 80018ca:	4663      	mov	r3, ip
 80018cc:	4649      	mov	r1, r9
 80018ce:	40d9      	lsrs	r1, r3
 80018d0:	187f      	adds	r7, r7, r1
 80018d2:	1824      	adds	r4, r4, r0
 80018d4:	4284      	cmp	r4, r0
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	425b      	negs	r3, r3
 80018da:	469a      	mov	sl, r3
 80018dc:	0016      	movs	r6, r2
 80018de:	44ba      	add	sl, r7
 80018e0:	e05d      	b.n	800199e <__aeabi_dsub+0x34e>
 80018e2:	4c38      	ldr	r4, [pc, #224]	; (80019c4 <__aeabi_dsub+0x374>)
 80018e4:	1c72      	adds	r2, r6, #1
 80018e6:	4222      	tst	r2, r4
 80018e8:	d000      	beq.n	80018ec <__aeabi_dsub+0x29c>
 80018ea:	e0df      	b.n	8001aac <__aeabi_dsub+0x45c>
 80018ec:	464a      	mov	r2, r9
 80018ee:	431a      	orrs	r2, r3
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	d000      	beq.n	80018f6 <__aeabi_dsub+0x2a6>
 80018f4:	e15c      	b.n	8001bb0 <__aeabi_dsub+0x560>
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x2ac>
 80018fa:	e1cf      	b.n	8001c9c <__aeabi_dsub+0x64c>
 80018fc:	003a      	movs	r2, r7
 80018fe:	4302      	orrs	r2, r0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x2b4>
 8001902:	e17f      	b.n	8001c04 <__aeabi_dsub+0x5b4>
 8001904:	1a1c      	subs	r4, r3, r0
 8001906:	464a      	mov	r2, r9
 8001908:	42a3      	cmp	r3, r4
 800190a:	4189      	sbcs	r1, r1
 800190c:	1bd2      	subs	r2, r2, r7
 800190e:	4249      	negs	r1, r1
 8001910:	1a52      	subs	r2, r2, r1
 8001912:	4692      	mov	sl, r2
 8001914:	0212      	lsls	r2, r2, #8
 8001916:	d400      	bmi.n	800191a <__aeabi_dsub+0x2ca>
 8001918:	e20a      	b.n	8001d30 <__aeabi_dsub+0x6e0>
 800191a:	1ac4      	subs	r4, r0, r3
 800191c:	42a0      	cmp	r0, r4
 800191e:	4180      	sbcs	r0, r0
 8001920:	464b      	mov	r3, r9
 8001922:	4240      	negs	r0, r0
 8001924:	1aff      	subs	r7, r7, r3
 8001926:	1a3b      	subs	r3, r7, r0
 8001928:	469a      	mov	sl, r3
 800192a:	465d      	mov	r5, fp
 800192c:	e71a      	b.n	8001764 <__aeabi_dsub+0x114>
 800192e:	003a      	movs	r2, r7
 8001930:	4302      	orrs	r2, r0
 8001932:	d073      	beq.n	8001a1c <__aeabi_dsub+0x3cc>
 8001934:	0022      	movs	r2, r4
 8001936:	3a01      	subs	r2, #1
 8001938:	2c01      	cmp	r4, #1
 800193a:	d100      	bne.n	800193e <__aeabi_dsub+0x2ee>
 800193c:	e0cb      	b.n	8001ad6 <__aeabi_dsub+0x486>
 800193e:	4554      	cmp	r4, sl
 8001940:	d042      	beq.n	80019c8 <__aeabi_dsub+0x378>
 8001942:	4694      	mov	ip, r2
 8001944:	e748      	b.n	80017d8 <__aeabi_dsub+0x188>
 8001946:	0010      	movs	r0, r2
 8001948:	3b1f      	subs	r3, #31
 800194a:	40d8      	lsrs	r0, r3
 800194c:	2920      	cmp	r1, #32
 800194e:	d003      	beq.n	8001958 <__aeabi_dsub+0x308>
 8001950:	2340      	movs	r3, #64	; 0x40
 8001952:	1a5b      	subs	r3, r3, r1
 8001954:	409a      	lsls	r2, r3
 8001956:	4314      	orrs	r4, r2
 8001958:	1e63      	subs	r3, r4, #1
 800195a:	419c      	sbcs	r4, r3
 800195c:	2300      	movs	r3, #0
 800195e:	2600      	movs	r6, #0
 8001960:	469a      	mov	sl, r3
 8001962:	4304      	orrs	r4, r0
 8001964:	0763      	lsls	r3, r4, #29
 8001966:	d000      	beq.n	800196a <__aeabi_dsub+0x31a>
 8001968:	e6fe      	b.n	8001768 <__aeabi_dsub+0x118>
 800196a:	4652      	mov	r2, sl
 800196c:	08e3      	lsrs	r3, r4, #3
 800196e:	0752      	lsls	r2, r2, #29
 8001970:	4313      	orrs	r3, r2
 8001972:	4652      	mov	r2, sl
 8001974:	46b4      	mov	ip, r6
 8001976:	08d2      	lsrs	r2, r2, #3
 8001978:	490f      	ldr	r1, [pc, #60]	; (80019b8 <__aeabi_dsub+0x368>)
 800197a:	458c      	cmp	ip, r1
 800197c:	d02a      	beq.n	80019d4 <__aeabi_dsub+0x384>
 800197e:	0312      	lsls	r2, r2, #12
 8001980:	0b14      	lsrs	r4, r2, #12
 8001982:	4662      	mov	r2, ip
 8001984:	0552      	lsls	r2, r2, #21
 8001986:	0d52      	lsrs	r2, r2, #21
 8001988:	e70c      	b.n	80017a4 <__aeabi_dsub+0x154>
 800198a:	003c      	movs	r4, r7
 800198c:	4304      	orrs	r4, r0
 800198e:	1e62      	subs	r2, r4, #1
 8001990:	4194      	sbcs	r4, r2
 8001992:	18e4      	adds	r4, r4, r3
 8001994:	429c      	cmp	r4, r3
 8001996:	4192      	sbcs	r2, r2
 8001998:	4252      	negs	r2, r2
 800199a:	444a      	add	r2, r9
 800199c:	4692      	mov	sl, r2
 800199e:	4653      	mov	r3, sl
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	d5df      	bpl.n	8001964 <__aeabi_dsub+0x314>
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__aeabi_dsub+0x368>)
 80019a6:	3601      	adds	r6, #1
 80019a8:	429e      	cmp	r6, r3
 80019aa:	d000      	beq.n	80019ae <__aeabi_dsub+0x35e>
 80019ac:	e0a0      	b.n	8001af0 <__aeabi_dsub+0x4a0>
 80019ae:	0032      	movs	r2, r6
 80019b0:	2400      	movs	r4, #0
 80019b2:	2300      	movs	r3, #0
 80019b4:	e6f6      	b.n	80017a4 <__aeabi_dsub+0x154>
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	000007ff 	.word	0x000007ff
 80019bc:	ff7fffff 	.word	0xff7fffff
 80019c0:	fffff801 	.word	0xfffff801
 80019c4:	000007fe 	.word	0x000007fe
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	464a      	mov	r2, r9
 80019cc:	0752      	lsls	r2, r2, #29
 80019ce:	4313      	orrs	r3, r2
 80019d0:	464a      	mov	r2, r9
 80019d2:	08d2      	lsrs	r2, r2, #3
 80019d4:	0019      	movs	r1, r3
 80019d6:	4311      	orrs	r1, r2
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x38c>
 80019da:	e1b5      	b.n	8001d48 <__aeabi_dsub+0x6f8>
 80019dc:	2480      	movs	r4, #128	; 0x80
 80019de:	0324      	lsls	r4, r4, #12
 80019e0:	4314      	orrs	r4, r2
 80019e2:	0324      	lsls	r4, r4, #12
 80019e4:	4ad5      	ldr	r2, [pc, #852]	; (8001d3c <__aeabi_dsub+0x6ec>)
 80019e6:	0b24      	lsrs	r4, r4, #12
 80019e8:	e6dc      	b.n	80017a4 <__aeabi_dsub+0x154>
 80019ea:	0020      	movs	r0, r4
 80019ec:	f000 fa56 	bl	8001e9c <__clzsi2>
 80019f0:	0003      	movs	r3, r0
 80019f2:	3318      	adds	r3, #24
 80019f4:	2b1f      	cmp	r3, #31
 80019f6:	dc00      	bgt.n	80019fa <__aeabi_dsub+0x3aa>
 80019f8:	e695      	b.n	8001726 <__aeabi_dsub+0xd6>
 80019fa:	0022      	movs	r2, r4
 80019fc:	3808      	subs	r0, #8
 80019fe:	4082      	lsls	r2, r0
 8001a00:	2400      	movs	r4, #0
 8001a02:	429e      	cmp	r6, r3
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dsub+0x3b8>
 8001a06:	e69a      	b.n	800173e <__aeabi_dsub+0xee>
 8001a08:	1af6      	subs	r6, r6, r3
 8001a0a:	4bcd      	ldr	r3, [pc, #820]	; (8001d40 <__aeabi_dsub+0x6f0>)
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	4692      	mov	sl, r2
 8001a10:	e6a8      	b.n	8001764 <__aeabi_dsub+0x114>
 8001a12:	003c      	movs	r4, r7
 8001a14:	4304      	orrs	r4, r0
 8001a16:	1e62      	subs	r2, r4, #1
 8001a18:	4194      	sbcs	r4, r2
 8001a1a:	e66c      	b.n	80016f6 <__aeabi_dsub+0xa6>
 8001a1c:	464a      	mov	r2, r9
 8001a1e:	08db      	lsrs	r3, r3, #3
 8001a20:	0752      	lsls	r2, r2, #29
 8001a22:	4313      	orrs	r3, r2
 8001a24:	464a      	mov	r2, r9
 8001a26:	08d2      	lsrs	r2, r2, #3
 8001a28:	e7a6      	b.n	8001978 <__aeabi_dsub+0x328>
 8001a2a:	4cc6      	ldr	r4, [pc, #792]	; (8001d44 <__aeabi_dsub+0x6f4>)
 8001a2c:	1c72      	adds	r2, r6, #1
 8001a2e:	4222      	tst	r2, r4
 8001a30:	d000      	beq.n	8001a34 <__aeabi_dsub+0x3e4>
 8001a32:	e0ac      	b.n	8001b8e <__aeabi_dsub+0x53e>
 8001a34:	464a      	mov	r2, r9
 8001a36:	431a      	orrs	r2, r3
 8001a38:	2e00      	cmp	r6, #0
 8001a3a:	d000      	beq.n	8001a3e <__aeabi_dsub+0x3ee>
 8001a3c:	e105      	b.n	8001c4a <__aeabi_dsub+0x5fa>
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x3f4>
 8001a42:	e156      	b.n	8001cf2 <__aeabi_dsub+0x6a2>
 8001a44:	003a      	movs	r2, r7
 8001a46:	4302      	orrs	r2, r0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x3fc>
 8001a4a:	e0db      	b.n	8001c04 <__aeabi_dsub+0x5b4>
 8001a4c:	181c      	adds	r4, r3, r0
 8001a4e:	429c      	cmp	r4, r3
 8001a50:	419b      	sbcs	r3, r3
 8001a52:	444f      	add	r7, r9
 8001a54:	46ba      	mov	sl, r7
 8001a56:	425b      	negs	r3, r3
 8001a58:	449a      	add	sl, r3
 8001a5a:	4653      	mov	r3, sl
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	d400      	bmi.n	8001a62 <__aeabi_dsub+0x412>
 8001a60:	e780      	b.n	8001964 <__aeabi_dsub+0x314>
 8001a62:	4652      	mov	r2, sl
 8001a64:	4bb6      	ldr	r3, [pc, #728]	; (8001d40 <__aeabi_dsub+0x6f0>)
 8001a66:	2601      	movs	r6, #1
 8001a68:	401a      	ands	r2, r3
 8001a6a:	4692      	mov	sl, r2
 8001a6c:	e77a      	b.n	8001964 <__aeabi_dsub+0x314>
 8001a6e:	4cb3      	ldr	r4, [pc, #716]	; (8001d3c <__aeabi_dsub+0x6ec>)
 8001a70:	42a2      	cmp	r2, r4
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dsub+0x426>
 8001a74:	e0c0      	b.n	8001bf8 <__aeabi_dsub+0x5a8>
 8001a76:	2480      	movs	r4, #128	; 0x80
 8001a78:	464d      	mov	r5, r9
 8001a7a:	0424      	lsls	r4, r4, #16
 8001a7c:	4325      	orrs	r5, r4
 8001a7e:	46a9      	mov	r9, r5
 8001a80:	4664      	mov	r4, ip
 8001a82:	2c38      	cmp	r4, #56	; 0x38
 8001a84:	dc53      	bgt.n	8001b2e <__aeabi_dsub+0x4de>
 8001a86:	4661      	mov	r1, ip
 8001a88:	2c1f      	cmp	r4, #31
 8001a8a:	dd00      	ble.n	8001a8e <__aeabi_dsub+0x43e>
 8001a8c:	e0cd      	b.n	8001c2a <__aeabi_dsub+0x5da>
 8001a8e:	2520      	movs	r5, #32
 8001a90:	001e      	movs	r6, r3
 8001a92:	1b2d      	subs	r5, r5, r4
 8001a94:	464c      	mov	r4, r9
 8001a96:	40ab      	lsls	r3, r5
 8001a98:	40ac      	lsls	r4, r5
 8001a9a:	40ce      	lsrs	r6, r1
 8001a9c:	1e5d      	subs	r5, r3, #1
 8001a9e:	41ab      	sbcs	r3, r5
 8001aa0:	4334      	orrs	r4, r6
 8001aa2:	4323      	orrs	r3, r4
 8001aa4:	464c      	mov	r4, r9
 8001aa6:	40cc      	lsrs	r4, r1
 8001aa8:	1b3f      	subs	r7, r7, r4
 8001aaa:	e045      	b.n	8001b38 <__aeabi_dsub+0x4e8>
 8001aac:	464a      	mov	r2, r9
 8001aae:	1a1c      	subs	r4, r3, r0
 8001ab0:	1bd1      	subs	r1, r2, r7
 8001ab2:	42a3      	cmp	r3, r4
 8001ab4:	4192      	sbcs	r2, r2
 8001ab6:	4252      	negs	r2, r2
 8001ab8:	4692      	mov	sl, r2
 8001aba:	000a      	movs	r2, r1
 8001abc:	4651      	mov	r1, sl
 8001abe:	1a52      	subs	r2, r2, r1
 8001ac0:	4692      	mov	sl, r2
 8001ac2:	0212      	lsls	r2, r2, #8
 8001ac4:	d500      	bpl.n	8001ac8 <__aeabi_dsub+0x478>
 8001ac6:	e083      	b.n	8001bd0 <__aeabi_dsub+0x580>
 8001ac8:	4653      	mov	r3, sl
 8001aca:	4323      	orrs	r3, r4
 8001acc:	d000      	beq.n	8001ad0 <__aeabi_dsub+0x480>
 8001ace:	e621      	b.n	8001714 <__aeabi_dsub+0xc4>
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	e753      	b.n	800197e <__aeabi_dsub+0x32e>
 8001ad6:	181c      	adds	r4, r3, r0
 8001ad8:	429c      	cmp	r4, r3
 8001ada:	419b      	sbcs	r3, r3
 8001adc:	444f      	add	r7, r9
 8001ade:	46ba      	mov	sl, r7
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	449a      	add	sl, r3
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	2601      	movs	r6, #1
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	d400      	bmi.n	8001aee <__aeabi_dsub+0x49e>
 8001aec:	e73a      	b.n	8001964 <__aeabi_dsub+0x314>
 8001aee:	2602      	movs	r6, #2
 8001af0:	4652      	mov	r2, sl
 8001af2:	4b93      	ldr	r3, [pc, #588]	; (8001d40 <__aeabi_dsub+0x6f0>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	401a      	ands	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	4021      	ands	r1, r4
 8001afc:	0862      	lsrs	r2, r4, #1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	07dc      	lsls	r4, r3, #31
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	469a      	mov	sl, r3
 8001b06:	4314      	orrs	r4, r2
 8001b08:	e62c      	b.n	8001764 <__aeabi_dsub+0x114>
 8001b0a:	0039      	movs	r1, r7
 8001b0c:	3a20      	subs	r2, #32
 8001b0e:	40d1      	lsrs	r1, r2
 8001b10:	4662      	mov	r2, ip
 8001b12:	2a20      	cmp	r2, #32
 8001b14:	d006      	beq.n	8001b24 <__aeabi_dsub+0x4d4>
 8001b16:	4664      	mov	r4, ip
 8001b18:	2240      	movs	r2, #64	; 0x40
 8001b1a:	1b12      	subs	r2, r2, r4
 8001b1c:	003c      	movs	r4, r7
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	4304      	orrs	r4, r0
 8001b22:	9401      	str	r4, [sp, #4]
 8001b24:	9c01      	ldr	r4, [sp, #4]
 8001b26:	1e62      	subs	r2, r4, #1
 8001b28:	4194      	sbcs	r4, r2
 8001b2a:	430c      	orrs	r4, r1
 8001b2c:	e5e3      	b.n	80016f6 <__aeabi_dsub+0xa6>
 8001b2e:	4649      	mov	r1, r9
 8001b30:	4319      	orrs	r1, r3
 8001b32:	000b      	movs	r3, r1
 8001b34:	1e5c      	subs	r4, r3, #1
 8001b36:	41a3      	sbcs	r3, r4
 8001b38:	1ac4      	subs	r4, r0, r3
 8001b3a:	42a0      	cmp	r0, r4
 8001b3c:	419b      	sbcs	r3, r3
 8001b3e:	425b      	negs	r3, r3
 8001b40:	1afb      	subs	r3, r7, r3
 8001b42:	469a      	mov	sl, r3
 8001b44:	465d      	mov	r5, fp
 8001b46:	0016      	movs	r6, r2
 8001b48:	e5dc      	b.n	8001704 <__aeabi_dsub+0xb4>
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dsub+0x502>
 8001b50:	e0ae      	b.n	8001cb0 <__aeabi_dsub+0x660>
 8001b52:	4661      	mov	r1, ip
 8001b54:	4664      	mov	r4, ip
 8001b56:	3901      	subs	r1, #1
 8001b58:	2c01      	cmp	r4, #1
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dsub+0x50e>
 8001b5c:	e0e0      	b.n	8001d20 <__aeabi_dsub+0x6d0>
 8001b5e:	4c77      	ldr	r4, [pc, #476]	; (8001d3c <__aeabi_dsub+0x6ec>)
 8001b60:	45a4      	cmp	ip, r4
 8001b62:	d056      	beq.n	8001c12 <__aeabi_dsub+0x5c2>
 8001b64:	468c      	mov	ip, r1
 8001b66:	e69a      	b.n	800189e <__aeabi_dsub+0x24e>
 8001b68:	4661      	mov	r1, ip
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	003c      	movs	r4, r7
 8001b6e:	1a52      	subs	r2, r2, r1
 8001b70:	4094      	lsls	r4, r2
 8001b72:	0001      	movs	r1, r0
 8001b74:	4090      	lsls	r0, r2
 8001b76:	46a0      	mov	r8, r4
 8001b78:	4664      	mov	r4, ip
 8001b7a:	1e42      	subs	r2, r0, #1
 8001b7c:	4190      	sbcs	r0, r2
 8001b7e:	4662      	mov	r2, ip
 8001b80:	40e1      	lsrs	r1, r4
 8001b82:	4644      	mov	r4, r8
 8001b84:	40d7      	lsrs	r7, r2
 8001b86:	430c      	orrs	r4, r1
 8001b88:	4304      	orrs	r4, r0
 8001b8a:	44b9      	add	r9, r7
 8001b8c:	e701      	b.n	8001992 <__aeabi_dsub+0x342>
 8001b8e:	496b      	ldr	r1, [pc, #428]	; (8001d3c <__aeabi_dsub+0x6ec>)
 8001b90:	428a      	cmp	r2, r1
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x546>
 8001b94:	e70c      	b.n	80019b0 <__aeabi_dsub+0x360>
 8001b96:	1818      	adds	r0, r3, r0
 8001b98:	4298      	cmp	r0, r3
 8001b9a:	419b      	sbcs	r3, r3
 8001b9c:	444f      	add	r7, r9
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	07dc      	lsls	r4, r3, #31
 8001ba4:	0840      	lsrs	r0, r0, #1
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	469a      	mov	sl, r3
 8001baa:	0016      	movs	r6, r2
 8001bac:	4304      	orrs	r4, r0
 8001bae:	e6d9      	b.n	8001964 <__aeabi_dsub+0x314>
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dsub+0x566>
 8001bb4:	e081      	b.n	8001cba <__aeabi_dsub+0x66a>
 8001bb6:	003b      	movs	r3, r7
 8001bb8:	4303      	orrs	r3, r0
 8001bba:	d11d      	bne.n	8001bf8 <__aeabi_dsub+0x5a8>
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	0312      	lsls	r2, r2, #12
 8001bc2:	e70b      	b.n	80019dc <__aeabi_dsub+0x38c>
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	077b      	lsls	r3, r7, #29
 8001bc8:	465d      	mov	r5, fp
 8001bca:	4303      	orrs	r3, r0
 8001bcc:	08fa      	lsrs	r2, r7, #3
 8001bce:	e6d3      	b.n	8001978 <__aeabi_dsub+0x328>
 8001bd0:	1ac4      	subs	r4, r0, r3
 8001bd2:	42a0      	cmp	r0, r4
 8001bd4:	4180      	sbcs	r0, r0
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	4240      	negs	r0, r0
 8001bda:	1aff      	subs	r7, r7, r3
 8001bdc:	1a3b      	subs	r3, r7, r0
 8001bde:	469a      	mov	sl, r3
 8001be0:	465d      	mov	r5, fp
 8001be2:	e597      	b.n	8001714 <__aeabi_dsub+0xc4>
 8001be4:	1a1c      	subs	r4, r3, r0
 8001be6:	464a      	mov	r2, r9
 8001be8:	42a3      	cmp	r3, r4
 8001bea:	419b      	sbcs	r3, r3
 8001bec:	1bd7      	subs	r7, r2, r7
 8001bee:	425b      	negs	r3, r3
 8001bf0:	1afb      	subs	r3, r7, r3
 8001bf2:	469a      	mov	sl, r3
 8001bf4:	2601      	movs	r6, #1
 8001bf6:	e585      	b.n	8001704 <__aeabi_dsub+0xb4>
 8001bf8:	08c0      	lsrs	r0, r0, #3
 8001bfa:	077b      	lsls	r3, r7, #29
 8001bfc:	465d      	mov	r5, fp
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	08fa      	lsrs	r2, r7, #3
 8001c02:	e6e7      	b.n	80019d4 <__aeabi_dsub+0x384>
 8001c04:	464a      	mov	r2, r9
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	0752      	lsls	r2, r2, #29
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	08d2      	lsrs	r2, r2, #3
 8001c10:	e6b5      	b.n	800197e <__aeabi_dsub+0x32e>
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	077b      	lsls	r3, r7, #29
 8001c16:	4303      	orrs	r3, r0
 8001c18:	08fa      	lsrs	r2, r7, #3
 8001c1a:	e6db      	b.n	80019d4 <__aeabi_dsub+0x384>
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	4319      	orrs	r1, r3
 8001c20:	000b      	movs	r3, r1
 8001c22:	1e59      	subs	r1, r3, #1
 8001c24:	418b      	sbcs	r3, r1
 8001c26:	001c      	movs	r4, r3
 8001c28:	e653      	b.n	80018d2 <__aeabi_dsub+0x282>
 8001c2a:	464d      	mov	r5, r9
 8001c2c:	3c20      	subs	r4, #32
 8001c2e:	40e5      	lsrs	r5, r4
 8001c30:	2920      	cmp	r1, #32
 8001c32:	d005      	beq.n	8001c40 <__aeabi_dsub+0x5f0>
 8001c34:	2440      	movs	r4, #64	; 0x40
 8001c36:	1a64      	subs	r4, r4, r1
 8001c38:	4649      	mov	r1, r9
 8001c3a:	40a1      	lsls	r1, r4
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	4698      	mov	r8, r3
 8001c40:	4643      	mov	r3, r8
 8001c42:	1e5c      	subs	r4, r3, #1
 8001c44:	41a3      	sbcs	r3, r4
 8001c46:	432b      	orrs	r3, r5
 8001c48:	e776      	b.n	8001b38 <__aeabi_dsub+0x4e8>
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d0e1      	beq.n	8001c12 <__aeabi_dsub+0x5c2>
 8001c4e:	003a      	movs	r2, r7
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	4302      	orrs	r2, r0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x608>
 8001c56:	e6b8      	b.n	80019ca <__aeabi_dsub+0x37a>
 8001c58:	464a      	mov	r2, r9
 8001c5a:	0752      	lsls	r2, r2, #29
 8001c5c:	2480      	movs	r4, #128	; 0x80
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	464a      	mov	r2, r9
 8001c62:	0324      	lsls	r4, r4, #12
 8001c64:	08d2      	lsrs	r2, r2, #3
 8001c66:	4222      	tst	r2, r4
 8001c68:	d007      	beq.n	8001c7a <__aeabi_dsub+0x62a>
 8001c6a:	08fe      	lsrs	r6, r7, #3
 8001c6c:	4226      	tst	r6, r4
 8001c6e:	d104      	bne.n	8001c7a <__aeabi_dsub+0x62a>
 8001c70:	465d      	mov	r5, fp
 8001c72:	0032      	movs	r2, r6
 8001c74:	08c3      	lsrs	r3, r0, #3
 8001c76:	077f      	lsls	r7, r7, #29
 8001c78:	433b      	orrs	r3, r7
 8001c7a:	0f59      	lsrs	r1, r3, #29
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	0749      	lsls	r1, r1, #29
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	430b      	orrs	r3, r1
 8001c84:	e6a6      	b.n	80019d4 <__aeabi_dsub+0x384>
 8001c86:	1ac4      	subs	r4, r0, r3
 8001c88:	42a0      	cmp	r0, r4
 8001c8a:	4180      	sbcs	r0, r0
 8001c8c:	464b      	mov	r3, r9
 8001c8e:	4240      	negs	r0, r0
 8001c90:	1aff      	subs	r7, r7, r3
 8001c92:	1a3b      	subs	r3, r7, r0
 8001c94:	469a      	mov	sl, r3
 8001c96:	465d      	mov	r5, fp
 8001c98:	2601      	movs	r6, #1
 8001c9a:	e533      	b.n	8001704 <__aeabi_dsub+0xb4>
 8001c9c:	003b      	movs	r3, r7
 8001c9e:	4303      	orrs	r3, r0
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x654>
 8001ca2:	e715      	b.n	8001ad0 <__aeabi_dsub+0x480>
 8001ca4:	08c0      	lsrs	r0, r0, #3
 8001ca6:	077b      	lsls	r3, r7, #29
 8001ca8:	465d      	mov	r5, fp
 8001caa:	4303      	orrs	r3, r0
 8001cac:	08fa      	lsrs	r2, r7, #3
 8001cae:	e666      	b.n	800197e <__aeabi_dsub+0x32e>
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	077b      	lsls	r3, r7, #29
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	08fa      	lsrs	r2, r7, #3
 8001cb8:	e65e      	b.n	8001978 <__aeabi_dsub+0x328>
 8001cba:	003a      	movs	r2, r7
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x674>
 8001cc2:	e682      	b.n	80019ca <__aeabi_dsub+0x37a>
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	0752      	lsls	r2, r2, #29
 8001cc8:	2480      	movs	r4, #128	; 0x80
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	464a      	mov	r2, r9
 8001cce:	0324      	lsls	r4, r4, #12
 8001cd0:	08d2      	lsrs	r2, r2, #3
 8001cd2:	4222      	tst	r2, r4
 8001cd4:	d007      	beq.n	8001ce6 <__aeabi_dsub+0x696>
 8001cd6:	08fe      	lsrs	r6, r7, #3
 8001cd8:	4226      	tst	r6, r4
 8001cda:	d104      	bne.n	8001ce6 <__aeabi_dsub+0x696>
 8001cdc:	465d      	mov	r5, fp
 8001cde:	0032      	movs	r2, r6
 8001ce0:	08c3      	lsrs	r3, r0, #3
 8001ce2:	077f      	lsls	r7, r7, #29
 8001ce4:	433b      	orrs	r3, r7
 8001ce6:	0f59      	lsrs	r1, r3, #29
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	08db      	lsrs	r3, r3, #3
 8001cec:	0749      	lsls	r1, r1, #29
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	e670      	b.n	80019d4 <__aeabi_dsub+0x384>
 8001cf2:	08c0      	lsrs	r0, r0, #3
 8001cf4:	077b      	lsls	r3, r7, #29
 8001cf6:	4303      	orrs	r3, r0
 8001cf8:	08fa      	lsrs	r2, r7, #3
 8001cfa:	e640      	b.n	800197e <__aeabi_dsub+0x32e>
 8001cfc:	464c      	mov	r4, r9
 8001cfe:	3920      	subs	r1, #32
 8001d00:	40cc      	lsrs	r4, r1
 8001d02:	4661      	mov	r1, ip
 8001d04:	2920      	cmp	r1, #32
 8001d06:	d006      	beq.n	8001d16 <__aeabi_dsub+0x6c6>
 8001d08:	4666      	mov	r6, ip
 8001d0a:	2140      	movs	r1, #64	; 0x40
 8001d0c:	1b89      	subs	r1, r1, r6
 8001d0e:	464e      	mov	r6, r9
 8001d10:	408e      	lsls	r6, r1
 8001d12:	4333      	orrs	r3, r6
 8001d14:	4698      	mov	r8, r3
 8001d16:	4643      	mov	r3, r8
 8001d18:	1e59      	subs	r1, r3, #1
 8001d1a:	418b      	sbcs	r3, r1
 8001d1c:	431c      	orrs	r4, r3
 8001d1e:	e5d8      	b.n	80018d2 <__aeabi_dsub+0x282>
 8001d20:	181c      	adds	r4, r3, r0
 8001d22:	4284      	cmp	r4, r0
 8001d24:	4180      	sbcs	r0, r0
 8001d26:	444f      	add	r7, r9
 8001d28:	46ba      	mov	sl, r7
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	4482      	add	sl, r0
 8001d2e:	e6d9      	b.n	8001ae4 <__aeabi_dsub+0x494>
 8001d30:	4653      	mov	r3, sl
 8001d32:	4323      	orrs	r3, r4
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dsub+0x6e8>
 8001d36:	e6cb      	b.n	8001ad0 <__aeabi_dsub+0x480>
 8001d38:	e614      	b.n	8001964 <__aeabi_dsub+0x314>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	000007ff 	.word	0x000007ff
 8001d40:	ff7fffff 	.word	0xff7fffff
 8001d44:	000007fe 	.word	0x000007fe
 8001d48:	2300      	movs	r3, #0
 8001d4a:	4a01      	ldr	r2, [pc, #4]	; (8001d50 <__aeabi_dsub+0x700>)
 8001d4c:	001c      	movs	r4, r3
 8001d4e:	e529      	b.n	80017a4 <__aeabi_dsub+0x154>
 8001d50:	000007ff 	.word	0x000007ff

08001d54 <__aeabi_d2iz>:
 8001d54:	000a      	movs	r2, r1
 8001d56:	b530      	push	{r4, r5, lr}
 8001d58:	4c13      	ldr	r4, [pc, #76]	; (8001da8 <__aeabi_d2iz+0x54>)
 8001d5a:	0053      	lsls	r3, r2, #1
 8001d5c:	0309      	lsls	r1, r1, #12
 8001d5e:	0005      	movs	r5, r0
 8001d60:	0b09      	lsrs	r1, r1, #12
 8001d62:	2000      	movs	r0, #0
 8001d64:	0d5b      	lsrs	r3, r3, #21
 8001d66:	0fd2      	lsrs	r2, r2, #31
 8001d68:	42a3      	cmp	r3, r4
 8001d6a:	dd04      	ble.n	8001d76 <__aeabi_d2iz+0x22>
 8001d6c:	480f      	ldr	r0, [pc, #60]	; (8001dac <__aeabi_d2iz+0x58>)
 8001d6e:	4283      	cmp	r3, r0
 8001d70:	dd02      	ble.n	8001d78 <__aeabi_d2iz+0x24>
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <__aeabi_d2iz+0x5c>)
 8001d74:	18d0      	adds	r0, r2, r3
 8001d76:	bd30      	pop	{r4, r5, pc}
 8001d78:	2080      	movs	r0, #128	; 0x80
 8001d7a:	0340      	lsls	r0, r0, #13
 8001d7c:	4301      	orrs	r1, r0
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <__aeabi_d2iz+0x60>)
 8001d80:	1ac0      	subs	r0, r0, r3
 8001d82:	281f      	cmp	r0, #31
 8001d84:	dd08      	ble.n	8001d98 <__aeabi_d2iz+0x44>
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <__aeabi_d2iz+0x64>)
 8001d88:	1ac3      	subs	r3, r0, r3
 8001d8a:	40d9      	lsrs	r1, r3
 8001d8c:	000b      	movs	r3, r1
 8001d8e:	4258      	negs	r0, r3
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d1f0      	bne.n	8001d76 <__aeabi_d2iz+0x22>
 8001d94:	0018      	movs	r0, r3
 8001d96:	e7ee      	b.n	8001d76 <__aeabi_d2iz+0x22>
 8001d98:	4c08      	ldr	r4, [pc, #32]	; (8001dbc <__aeabi_d2iz+0x68>)
 8001d9a:	40c5      	lsrs	r5, r0
 8001d9c:	46a4      	mov	ip, r4
 8001d9e:	4463      	add	r3, ip
 8001da0:	4099      	lsls	r1, r3
 8001da2:	000b      	movs	r3, r1
 8001da4:	432b      	orrs	r3, r5
 8001da6:	e7f2      	b.n	8001d8e <__aeabi_d2iz+0x3a>
 8001da8:	000003fe 	.word	0x000003fe
 8001dac:	0000041d 	.word	0x0000041d
 8001db0:	7fffffff 	.word	0x7fffffff
 8001db4:	00000433 	.word	0x00000433
 8001db8:	00000413 	.word	0x00000413
 8001dbc:	fffffbed 	.word	0xfffffbed

08001dc0 <__aeabi_i2d>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d016      	beq.n	8001df4 <__aeabi_i2d+0x34>
 8001dc6:	17c3      	asrs	r3, r0, #31
 8001dc8:	18c5      	adds	r5, r0, r3
 8001dca:	405d      	eors	r5, r3
 8001dcc:	0fc4      	lsrs	r4, r0, #31
 8001dce:	0028      	movs	r0, r5
 8001dd0:	f000 f864 	bl	8001e9c <__clzsi2>
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <__aeabi_i2d+0x5c>)
 8001dd6:	1a1b      	subs	r3, r3, r0
 8001dd8:	280a      	cmp	r0, #10
 8001dda:	dc16      	bgt.n	8001e0a <__aeabi_i2d+0x4a>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	002e      	movs	r6, r5
 8001de0:	3215      	adds	r2, #21
 8001de2:	4096      	lsls	r6, r2
 8001de4:	220b      	movs	r2, #11
 8001de6:	1a12      	subs	r2, r2, r0
 8001de8:	40d5      	lsrs	r5, r2
 8001dea:	055b      	lsls	r3, r3, #21
 8001dec:	032d      	lsls	r5, r5, #12
 8001dee:	0b2d      	lsrs	r5, r5, #12
 8001df0:	0d5b      	lsrs	r3, r3, #21
 8001df2:	e003      	b.n	8001dfc <__aeabi_i2d+0x3c>
 8001df4:	2400      	movs	r4, #0
 8001df6:	2300      	movs	r3, #0
 8001df8:	2500      	movs	r5, #0
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	432b      	orrs	r3, r5
 8001e00:	07e4      	lsls	r4, r4, #31
 8001e02:	4323      	orrs	r3, r4
 8001e04:	0030      	movs	r0, r6
 8001e06:	0019      	movs	r1, r3
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
 8001e0a:	380b      	subs	r0, #11
 8001e0c:	4085      	lsls	r5, r0
 8001e0e:	055b      	lsls	r3, r3, #21
 8001e10:	032d      	lsls	r5, r5, #12
 8001e12:	2600      	movs	r6, #0
 8001e14:	0b2d      	lsrs	r5, r5, #12
 8001e16:	0d5b      	lsrs	r3, r3, #21
 8001e18:	e7f0      	b.n	8001dfc <__aeabi_i2d+0x3c>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	0000041e 	.word	0x0000041e

08001e20 <__aeabi_cdrcmple>:
 8001e20:	4684      	mov	ip, r0
 8001e22:	0010      	movs	r0, r2
 8001e24:	4662      	mov	r2, ip
 8001e26:	468c      	mov	ip, r1
 8001e28:	0019      	movs	r1, r3
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	e000      	b.n	8001e30 <__aeabi_cdcmpeq>
 8001e2e:	46c0      	nop			; (mov r8, r8)

08001e30 <__aeabi_cdcmpeq>:
 8001e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e32:	f000 f8f9 	bl	8002028 <__ledf2>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d401      	bmi.n	8001e3e <__aeabi_cdcmpeq+0xe>
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	42c8      	cmn	r0, r1
 8001e3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001e40 <__aeabi_dcmpeq>:
 8001e40:	b510      	push	{r4, lr}
 8001e42:	f000 f849 	bl	8001ed8 <__eqdf2>
 8001e46:	4240      	negs	r0, r0
 8001e48:	3001      	adds	r0, #1
 8001e4a:	bd10      	pop	{r4, pc}

08001e4c <__aeabi_dcmplt>:
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	f000 f8eb 	bl	8002028 <__ledf2>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	db01      	blt.n	8001e5a <__aeabi_dcmplt+0xe>
 8001e56:	2000      	movs	r0, #0
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)

08001e60 <__aeabi_dcmple>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	f000 f8e1 	bl	8002028 <__ledf2>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	dd01      	ble.n	8001e6e <__aeabi_dcmple+0xe>
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	bd10      	pop	{r4, pc}
 8001e6e:	2001      	movs	r0, #1
 8001e70:	bd10      	pop	{r4, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)

08001e74 <__aeabi_dcmpgt>:
 8001e74:	b510      	push	{r4, lr}
 8001e76:	f000 f871 	bl	8001f5c <__gedf2>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	dc01      	bgt.n	8001e82 <__aeabi_dcmpgt+0xe>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	bd10      	pop	{r4, pc}
 8001e82:	2001      	movs	r0, #1
 8001e84:	bd10      	pop	{r4, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)

08001e88 <__aeabi_dcmpge>:
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	f000 f867 	bl	8001f5c <__gedf2>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	da01      	bge.n	8001e96 <__aeabi_dcmpge+0xe>
 8001e92:	2000      	movs	r0, #0
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	2001      	movs	r0, #1
 8001e98:	bd10      	pop	{r4, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)

08001e9c <__clzsi2>:
 8001e9c:	211c      	movs	r1, #28
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	4298      	cmp	r0, r3
 8001ea4:	d301      	bcc.n	8001eaa <__clzsi2+0xe>
 8001ea6:	0c00      	lsrs	r0, r0, #16
 8001ea8:	3910      	subs	r1, #16
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	4298      	cmp	r0, r3
 8001eae:	d301      	bcc.n	8001eb4 <__clzsi2+0x18>
 8001eb0:	0a00      	lsrs	r0, r0, #8
 8001eb2:	3908      	subs	r1, #8
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	4298      	cmp	r0, r3
 8001eb8:	d301      	bcc.n	8001ebe <__clzsi2+0x22>
 8001eba:	0900      	lsrs	r0, r0, #4
 8001ebc:	3904      	subs	r1, #4
 8001ebe:	a202      	add	r2, pc, #8	; (adr r2, 8001ec8 <__clzsi2+0x2c>)
 8001ec0:	5c10      	ldrb	r0, [r2, r0]
 8001ec2:	1840      	adds	r0, r0, r1
 8001ec4:	4770      	bx	lr
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	02020304 	.word	0x02020304
 8001ecc:	01010101 	.word	0x01010101
	...

08001ed8 <__eqdf2>:
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	464e      	mov	r6, r9
 8001edc:	4645      	mov	r5, r8
 8001ede:	46de      	mov	lr, fp
 8001ee0:	4657      	mov	r7, sl
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	b5e0      	push	{r5, r6, r7, lr}
 8001ee6:	0017      	movs	r7, r2
 8001ee8:	031a      	lsls	r2, r3, #12
 8001eea:	0b12      	lsrs	r2, r2, #12
 8001eec:	0005      	movs	r5, r0
 8001eee:	4684      	mov	ip, r0
 8001ef0:	4819      	ldr	r0, [pc, #100]	; (8001f58 <__eqdf2+0x80>)
 8001ef2:	030e      	lsls	r6, r1, #12
 8001ef4:	004c      	lsls	r4, r1, #1
 8001ef6:	4691      	mov	r9, r2
 8001ef8:	005a      	lsls	r2, r3, #1
 8001efa:	0fdb      	lsrs	r3, r3, #31
 8001efc:	469b      	mov	fp, r3
 8001efe:	0b36      	lsrs	r6, r6, #12
 8001f00:	0d64      	lsrs	r4, r4, #21
 8001f02:	0fc9      	lsrs	r1, r1, #31
 8001f04:	0d52      	lsrs	r2, r2, #21
 8001f06:	4284      	cmp	r4, r0
 8001f08:	d019      	beq.n	8001f3e <__eqdf2+0x66>
 8001f0a:	4282      	cmp	r2, r0
 8001f0c:	d010      	beq.n	8001f30 <__eqdf2+0x58>
 8001f0e:	2001      	movs	r0, #1
 8001f10:	4294      	cmp	r4, r2
 8001f12:	d10e      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f14:	454e      	cmp	r6, r9
 8001f16:	d10c      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	45c4      	cmp	ip, r8
 8001f1c:	d109      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f1e:	4559      	cmp	r1, fp
 8001f20:	d017      	beq.n	8001f52 <__eqdf2+0x7a>
 8001f22:	2c00      	cmp	r4, #0
 8001f24:	d105      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f26:	0030      	movs	r0, r6
 8001f28:	4328      	orrs	r0, r5
 8001f2a:	1e43      	subs	r3, r0, #1
 8001f2c:	4198      	sbcs	r0, r3
 8001f2e:	e000      	b.n	8001f32 <__eqdf2+0x5a>
 8001f30:	2001      	movs	r0, #1
 8001f32:	bcf0      	pop	{r4, r5, r6, r7}
 8001f34:	46bb      	mov	fp, r7
 8001f36:	46b2      	mov	sl, r6
 8001f38:	46a9      	mov	r9, r5
 8001f3a:	46a0      	mov	r8, r4
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3e:	0033      	movs	r3, r6
 8001f40:	2001      	movs	r0, #1
 8001f42:	432b      	orrs	r3, r5
 8001f44:	d1f5      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f46:	42a2      	cmp	r2, r4
 8001f48:	d1f3      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d1f0      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f50:	e7e2      	b.n	8001f18 <__eqdf2+0x40>
 8001f52:	2000      	movs	r0, #0
 8001f54:	e7ed      	b.n	8001f32 <__eqdf2+0x5a>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__gedf2>:
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5e:	4647      	mov	r7, r8
 8001f60:	46ce      	mov	lr, r9
 8001f62:	0004      	movs	r4, r0
 8001f64:	0018      	movs	r0, r3
 8001f66:	0016      	movs	r6, r2
 8001f68:	031b      	lsls	r3, r3, #12
 8001f6a:	0b1b      	lsrs	r3, r3, #12
 8001f6c:	4d2d      	ldr	r5, [pc, #180]	; (8002024 <__gedf2+0xc8>)
 8001f6e:	004a      	lsls	r2, r1, #1
 8001f70:	4699      	mov	r9, r3
 8001f72:	b580      	push	{r7, lr}
 8001f74:	0043      	lsls	r3, r0, #1
 8001f76:	030f      	lsls	r7, r1, #12
 8001f78:	46a4      	mov	ip, r4
 8001f7a:	46b0      	mov	r8, r6
 8001f7c:	0b3f      	lsrs	r7, r7, #12
 8001f7e:	0d52      	lsrs	r2, r2, #21
 8001f80:	0fc9      	lsrs	r1, r1, #31
 8001f82:	0d5b      	lsrs	r3, r3, #21
 8001f84:	0fc0      	lsrs	r0, r0, #31
 8001f86:	42aa      	cmp	r2, r5
 8001f88:	d021      	beq.n	8001fce <__gedf2+0x72>
 8001f8a:	42ab      	cmp	r3, r5
 8001f8c:	d013      	beq.n	8001fb6 <__gedf2+0x5a>
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	d122      	bne.n	8001fd8 <__gedf2+0x7c>
 8001f92:	433c      	orrs	r4, r7
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <__gedf2+0x42>
 8001f98:	464d      	mov	r5, r9
 8001f9a:	432e      	orrs	r6, r5
 8001f9c:	d022      	beq.n	8001fe4 <__gedf2+0x88>
 8001f9e:	2c00      	cmp	r4, #0
 8001fa0:	d010      	beq.n	8001fc4 <__gedf2+0x68>
 8001fa2:	4281      	cmp	r1, r0
 8001fa4:	d022      	beq.n	8001fec <__gedf2+0x90>
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	3901      	subs	r1, #1
 8001faa:	4008      	ands	r0, r1
 8001fac:	3801      	subs	r0, #1
 8001fae:	bcc0      	pop	{r6, r7}
 8001fb0:	46b9      	mov	r9, r7
 8001fb2:	46b0      	mov	r8, r6
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb6:	464d      	mov	r5, r9
 8001fb8:	432e      	orrs	r6, r5
 8001fba:	d129      	bne.n	8002010 <__gedf2+0xb4>
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <__gedf2+0x46>
 8001fc0:	433c      	orrs	r4, r7
 8001fc2:	d1ee      	bne.n	8001fa2 <__gedf2+0x46>
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d1f2      	bne.n	8001fae <__gedf2+0x52>
 8001fc8:	2001      	movs	r0, #1
 8001fca:	4240      	negs	r0, r0
 8001fcc:	e7ef      	b.n	8001fae <__gedf2+0x52>
 8001fce:	003d      	movs	r5, r7
 8001fd0:	4325      	orrs	r5, r4
 8001fd2:	d11d      	bne.n	8002010 <__gedf2+0xb4>
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d0ee      	beq.n	8001fb6 <__gedf2+0x5a>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e2      	bne.n	8001fa2 <__gedf2+0x46>
 8001fdc:	464c      	mov	r4, r9
 8001fde:	4326      	orrs	r6, r4
 8001fe0:	d1df      	bne.n	8001fa2 <__gedf2+0x46>
 8001fe2:	e7e0      	b.n	8001fa6 <__gedf2+0x4a>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	d0e1      	beq.n	8001fae <__gedf2+0x52>
 8001fea:	e7dc      	b.n	8001fa6 <__gedf2+0x4a>
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dc0a      	bgt.n	8002006 <__gedf2+0xaa>
 8001ff0:	dbe8      	blt.n	8001fc4 <__gedf2+0x68>
 8001ff2:	454f      	cmp	r7, r9
 8001ff4:	d8d7      	bhi.n	8001fa6 <__gedf2+0x4a>
 8001ff6:	d00e      	beq.n	8002016 <__gedf2+0xba>
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	454f      	cmp	r7, r9
 8001ffc:	d2d7      	bcs.n	8001fae <__gedf2+0x52>
 8001ffe:	2900      	cmp	r1, #0
 8002000:	d0e2      	beq.n	8001fc8 <__gedf2+0x6c>
 8002002:	0008      	movs	r0, r1
 8002004:	e7d3      	b.n	8001fae <__gedf2+0x52>
 8002006:	4243      	negs	r3, r0
 8002008:	4158      	adcs	r0, r3
 800200a:	0040      	lsls	r0, r0, #1
 800200c:	3801      	subs	r0, #1
 800200e:	e7ce      	b.n	8001fae <__gedf2+0x52>
 8002010:	2002      	movs	r0, #2
 8002012:	4240      	negs	r0, r0
 8002014:	e7cb      	b.n	8001fae <__gedf2+0x52>
 8002016:	45c4      	cmp	ip, r8
 8002018:	d8c5      	bhi.n	8001fa6 <__gedf2+0x4a>
 800201a:	2000      	movs	r0, #0
 800201c:	45c4      	cmp	ip, r8
 800201e:	d2c6      	bcs.n	8001fae <__gedf2+0x52>
 8002020:	e7ed      	b.n	8001ffe <__gedf2+0xa2>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff

08002028 <__ledf2>:
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	4647      	mov	r7, r8
 800202c:	46ce      	mov	lr, r9
 800202e:	0004      	movs	r4, r0
 8002030:	0018      	movs	r0, r3
 8002032:	0016      	movs	r6, r2
 8002034:	031b      	lsls	r3, r3, #12
 8002036:	0b1b      	lsrs	r3, r3, #12
 8002038:	4d2c      	ldr	r5, [pc, #176]	; (80020ec <__ledf2+0xc4>)
 800203a:	004a      	lsls	r2, r1, #1
 800203c:	4699      	mov	r9, r3
 800203e:	b580      	push	{r7, lr}
 8002040:	0043      	lsls	r3, r0, #1
 8002042:	030f      	lsls	r7, r1, #12
 8002044:	46a4      	mov	ip, r4
 8002046:	46b0      	mov	r8, r6
 8002048:	0b3f      	lsrs	r7, r7, #12
 800204a:	0d52      	lsrs	r2, r2, #21
 800204c:	0fc9      	lsrs	r1, r1, #31
 800204e:	0d5b      	lsrs	r3, r3, #21
 8002050:	0fc0      	lsrs	r0, r0, #31
 8002052:	42aa      	cmp	r2, r5
 8002054:	d00d      	beq.n	8002072 <__ledf2+0x4a>
 8002056:	42ab      	cmp	r3, r5
 8002058:	d010      	beq.n	800207c <__ledf2+0x54>
 800205a:	2a00      	cmp	r2, #0
 800205c:	d127      	bne.n	80020ae <__ledf2+0x86>
 800205e:	433c      	orrs	r4, r7
 8002060:	2b00      	cmp	r3, #0
 8002062:	d111      	bne.n	8002088 <__ledf2+0x60>
 8002064:	464d      	mov	r5, r9
 8002066:	432e      	orrs	r6, r5
 8002068:	d10e      	bne.n	8002088 <__ledf2+0x60>
 800206a:	2000      	movs	r0, #0
 800206c:	2c00      	cmp	r4, #0
 800206e:	d015      	beq.n	800209c <__ledf2+0x74>
 8002070:	e00e      	b.n	8002090 <__ledf2+0x68>
 8002072:	003d      	movs	r5, r7
 8002074:	4325      	orrs	r5, r4
 8002076:	d110      	bne.n	800209a <__ledf2+0x72>
 8002078:	4293      	cmp	r3, r2
 800207a:	d118      	bne.n	80020ae <__ledf2+0x86>
 800207c:	464d      	mov	r5, r9
 800207e:	432e      	orrs	r6, r5
 8002080:	d10b      	bne.n	800209a <__ledf2+0x72>
 8002082:	2a00      	cmp	r2, #0
 8002084:	d102      	bne.n	800208c <__ledf2+0x64>
 8002086:	433c      	orrs	r4, r7
 8002088:	2c00      	cmp	r4, #0
 800208a:	d00b      	beq.n	80020a4 <__ledf2+0x7c>
 800208c:	4281      	cmp	r1, r0
 800208e:	d014      	beq.n	80020ba <__ledf2+0x92>
 8002090:	2002      	movs	r0, #2
 8002092:	3901      	subs	r1, #1
 8002094:	4008      	ands	r0, r1
 8002096:	3801      	subs	r0, #1
 8002098:	e000      	b.n	800209c <__ledf2+0x74>
 800209a:	2002      	movs	r0, #2
 800209c:	bcc0      	pop	{r6, r7}
 800209e:	46b9      	mov	r9, r7
 80020a0:	46b0      	mov	r8, r6
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d1f9      	bne.n	800209c <__ledf2+0x74>
 80020a8:	2001      	movs	r0, #1
 80020aa:	4240      	negs	r0, r0
 80020ac:	e7f6      	b.n	800209c <__ledf2+0x74>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ec      	bne.n	800208c <__ledf2+0x64>
 80020b2:	464c      	mov	r4, r9
 80020b4:	4326      	orrs	r6, r4
 80020b6:	d1e9      	bne.n	800208c <__ledf2+0x64>
 80020b8:	e7ea      	b.n	8002090 <__ledf2+0x68>
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dd04      	ble.n	80020c8 <__ledf2+0xa0>
 80020be:	4243      	negs	r3, r0
 80020c0:	4158      	adcs	r0, r3
 80020c2:	0040      	lsls	r0, r0, #1
 80020c4:	3801      	subs	r0, #1
 80020c6:	e7e9      	b.n	800209c <__ledf2+0x74>
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dbeb      	blt.n	80020a4 <__ledf2+0x7c>
 80020cc:	454f      	cmp	r7, r9
 80020ce:	d8df      	bhi.n	8002090 <__ledf2+0x68>
 80020d0:	d006      	beq.n	80020e0 <__ledf2+0xb8>
 80020d2:	2000      	movs	r0, #0
 80020d4:	454f      	cmp	r7, r9
 80020d6:	d2e1      	bcs.n	800209c <__ledf2+0x74>
 80020d8:	2900      	cmp	r1, #0
 80020da:	d0e5      	beq.n	80020a8 <__ledf2+0x80>
 80020dc:	0008      	movs	r0, r1
 80020de:	e7dd      	b.n	800209c <__ledf2+0x74>
 80020e0:	45c4      	cmp	ip, r8
 80020e2:	d8d5      	bhi.n	8002090 <__ledf2+0x68>
 80020e4:	2000      	movs	r0, #0
 80020e6:	45c4      	cmp	ip, r8
 80020e8:	d2d8      	bcs.n	800209c <__ledf2+0x74>
 80020ea:	e7f5      	b.n	80020d8 <__ledf2+0xb0>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 31 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e01a      	b.n	8002134 <GetPage+0x44>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <GetPage+0x54>)
 8002102:	4694      	mov	ip, r2
 8002104:	4463      	add	r3, ip
 8002106:	02db      	lsls	r3, r3, #11
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d20f      	bcs.n	800212e <GetPage+0x3e>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	0252      	lsls	r2, r2, #9
 8002114:	4694      	mov	ip, r2
 8002116:	4463      	add	r3, ip
 8002118:	02db      	lsls	r3, r3, #11
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	d306      	bcc.n	800212e <GetPage+0x3e>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0252      	lsls	r2, r2, #9
 8002126:	4694      	mov	ip, r2
 8002128:	4463      	add	r3, ip
 800212a:	02db      	lsls	r3, r3, #11
 800212c:	e006      	b.n	800213c <GetPage+0x4c>
  for (int indx=0; indx<128; indx++)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3301      	adds	r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b7f      	cmp	r3, #127	; 0x7f
 8002138:	dde1      	ble.n	80020fe <GetPage+0xe>
	  }
  }

  return 0;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}
 8002144:	00010001 	.word	0x00010001

08002148 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	1dbb      	adds	r3, r7, #6
 8002154:	801a      	strh	r2, [r3, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800215a:	f002 fa21 	bl	80045a0 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ffc5 	bl	80020f0 <GetPage>
 8002166:	0003      	movs	r3, r0
 8002168:	623b      	str	r3, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	001a      	movs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	189b      	adds	r3, r3, r2
 8002176:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff ffb8 	bl	80020f0 <GetPage>
 8002180:	0003      	movs	r3, r0
 8002182:	61bb      	str	r3, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <Flash_Write_Data+0xc0>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <Flash_Write_Data+0xc0>)
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	0adb      	lsrs	r3, r3, #11
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <Flash_Write_Data+0xc0>)
 800219c:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800219e:	2314      	movs	r3, #20
 80021a0:	18fa      	adds	r2, r7, r3
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <Flash_Write_Data+0xc0>)
 80021a4:	0011      	movs	r1, r2
 80021a6:	0018      	movs	r0, r3
 80021a8:	f002 fac4 	bl	8004734 <HAL_FLASHEx_Erase>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d01e      	beq.n	80021ee <Flash_Write_Data+0xa6>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80021b0:	f002 fa2a 	bl	8004608 <HAL_FLASH_GetError>
 80021b4:	0003      	movs	r3, r0
 80021b6:	e022      	b.n	80021fe <Flash_Write_Data+0xb6>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	18d3      	adds	r3, r2, r3
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	001c      	movs	r4, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	001d      	movs	r5, r3
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	0022      	movs	r2, r4
 80021cc:	002b      	movs	r3, r5
 80021ce:	2002      	movs	r0, #2
 80021d0:	f002 f950 	bl	8004474 <HAL_FLASH_Program>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d106      	bne.n	80021e6 <Flash_Write_Data+0x9e>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3304      	adds	r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3301      	adds	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	e003      	b.n	80021ee <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80021e6:	f002 fa0f 	bl	8004608 <HAL_FLASH_GetError>
 80021ea:	0003      	movs	r3, r0
 80021ec:	e007      	b.n	80021fe <Flash_Write_Data+0xb6>
	   while (sofar<numberofwords)
 80021ee:	1dbb      	adds	r3, r7, #6
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	429a      	cmp	r2, r3
 80021f6:	dbdf      	blt.n	80021b8 <Flash_Write_Data+0x70>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80021f8:	f002 f9f8 	bl	80045ec <HAL_FLASH_Lock>

	   return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b00a      	add	sp, #40	; 0x28
 8002204:	bdb0      	pop	{r4, r5, r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	20000084 	.word	0x20000084

0800220c <HAL_GPIO_EXTI_Callback>:
#include "main.h"
#include "InterruptHandlers.h"

extern osThreadId_t ADCTaskHandle;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	0002      	movs	r2, r0
 8002214:	1dbb      	adds	r3, r7, #6
 8002216:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == ADC_INT_Pin) {
 8002218:	1dbb      	adds	r3, r7, #6
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d109      	bne.n	8002234 <HAL_GPIO_EXTI_Callback+0x28>
		if (ADCTaskHandle != 0) {
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_GPIO_EXTI_Callback+0x30>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_GPIO_EXTI_Callback+0x28>
			vTaskNotifyGiveFromISR(ADCTaskHandle, NULL);
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_GPIO_EXTI_Callback+0x30>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2100      	movs	r1, #0
 800222e:	0018      	movs	r0, r3
 8002230:	f00a fc64 	bl	800cafc <vTaskNotifyGiveFromISR>
		}
	}
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200000e4 	.word	0x200000e4

08002240 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
	uint32_t PRESCALER = 8;		// 500 kbps
 8002246:	2308      	movs	r3, #8
 8002248:	607b      	str	r3, [r7, #4]
	if (!HAL_GPIO_ReadPin(CAN250_GPIO_Port, ADDR1_Pin)) {
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_CAN_Init+0x80>)
 800224c:	2108      	movs	r1, #8
 800224e:	0018      	movs	r0, r3
 8002250:	f002 fc94 	bl	8004b7c <HAL_GPIO_ReadPin>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d101      	bne.n	800225c <MX_CAN_Init+0x1c>
		PRESCALER = 16;		// 250kbps
 8002258:	2310      	movs	r3, #16
 800225a:	607b      	str	r3, [r7, #4]
	}
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <MX_CAN_Init+0x84>)
 800225e:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <MX_CAN_Init+0x88>)
 8002260:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = PRESCALER;
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_CAN_Init+0x84>)
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <MX_CAN_Init+0x84>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <MX_CAN_Init+0x84>)
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_CAN_Init+0x84>)
 8002276:	22c0      	movs	r2, #192	; 0xc0
 8002278:	0292      	lsls	r2, r2, #10
 800227a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_CAN_Init+0x84>)
 800227e:	22c0      	movs	r2, #192	; 0xc0
 8002280:	03d2      	lsls	r2, r2, #15
 8002282:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_CAN_Init+0x84>)
 8002286:	2200      	movs	r2, #0
 8002288:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_CAN_Init+0x84>)
 800228c:	2201      	movs	r2, #1
 800228e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_CAN_Init+0x84>)
 8002292:	2201      	movs	r2, #1
 8002294:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_CAN_Init+0x84>)
 8002298:	2200      	movs	r2, #0
 800229a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_CAN_Init+0x84>)
 800229e:	2200      	movs	r2, #0
 80022a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_CAN_Init+0x84>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_CAN_Init+0x84>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 f8dc 	bl	8003468 <HAL_CAN_Init>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d001      	beq.n	80022b8 <MX_CAN_Init+0x78>
  {
    Error_Handler();
 80022b4:	f000 fe2c 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	48000400 	.word	0x48000400
 80022c4:	20000090 	.word	0x20000090
 80022c8:	40006400 	.word	0x40006400

080022cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b08b      	sub	sp, #44	; 0x2c
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	2414      	movs	r4, #20
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	0018      	movs	r0, r3
 80022da:	2314      	movs	r3, #20
 80022dc:	001a      	movs	r2, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	f00b fbd0 	bl	800da84 <memset>
  if(canHandle->Instance==CAN)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a20      	ldr	r2, [pc, #128]	; (800236c <HAL_CAN_MspInit+0xa0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d13a      	bne.n	8002364 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_CAN_MspInit+0xa4>)
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_CAN_MspInit+0xa4>)
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	0489      	lsls	r1, r1, #18
 80022f8:	430a      	orrs	r2, r1
 80022fa:	61da      	str	r2, [r3, #28]
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_CAN_MspInit+0xa4>)
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	049b      	lsls	r3, r3, #18
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_CAN_MspInit+0xa4>)
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_CAN_MspInit+0xa4>)
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	02c9      	lsls	r1, r1, #11
 8002314:	430a      	orrs	r2, r1
 8002316:	615a      	str	r2, [r3, #20]
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_CAN_MspInit+0xa4>)
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	02db      	lsls	r3, r3, #11
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002326:	193b      	adds	r3, r7, r4
 8002328:	22c0      	movs	r2, #192	; 0xc0
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	0021      	movs	r1, r4
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2202      	movs	r2, #2
 8002334:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800233c:	187b      	adds	r3, r7, r1
 800233e:	2203      	movs	r2, #3
 8002340:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002342:	187b      	adds	r3, r7, r1
 8002344:	2204      	movs	r2, #4
 8002346:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	187b      	adds	r3, r7, r1
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_CAN_MspInit+0xa8>)
 800234c:	0019      	movs	r1, r3
 800234e:	0010      	movs	r0, r2
 8002350:	f002 fa9c 	bl	800488c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 3, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2103      	movs	r1, #3
 8002358:	201e      	movs	r0, #30
 800235a:	f001 ffdb 	bl	8004314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800235e:	201e      	movs	r0, #30
 8002360:	f001 ffed 	bl	800433e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b00b      	add	sp, #44	; 0x2c
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	40006400 	.word	0x40006400
 8002370:	40021000 	.word	0x40021000
 8002374:	48000400 	.word	0x48000400

08002378 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t               RxData[8];

extern osMessageQueueId_t RelayOuputQueueHandle;

// Receiving CAN frames
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b085      	sub	sp, #20
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002382:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	2100      	movs	r1, #0
 8002388:	f001 fbae 	bl	8003ae8 <HAL_CAN_GetRxMessage>
 800238c:	1e03      	subs	r3, r0, #0
 800238e:	d012      	beq.n	80023b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
		/* Reception Error */
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002392:	2201      	movs	r2, #1
 8002394:	2101      	movs	r1, #1
 8002396:	0018      	movs	r0, r3
 8002398:	f002 fc0d 	bl	8004bb6 <HAL_GPIO_WritePin>
		xTimerStart(RedLedOffTimerHandle, 200);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800239e:	681c      	ldr	r4, [r3, #0]
 80023a0:	f009 fda8 	bl	800bef4 <xTaskGetTickCount>
 80023a4:	0002      	movs	r2, r0
 80023a6:	23c8      	movs	r3, #200	; 0xc8
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	2101      	movs	r1, #1
 80023ae:	0020      	movs	r0, r4
 80023b0:	f00a fd28 	bl	800ce04 <xTimerGenericCommand>
		return;
 80023b4:	46c0      	nop			; (mov r8, r8)
	}
	// TODO - Handle incoming CAN frames
}
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b003      	add	sp, #12
 80023ba:	bd90      	pop	{r4, r7, pc}
 80023bc:	200000d4 	.word	0x200000d4
 80023c0:	200000b8 	.word	0x200000b8
 80023c4:	48000400 	.word	0x48000400
 80023c8:	200000ec 	.word	0x200000ec

080023cc <StartCANReception>:

void StartCANReception (CAN_HandleTypeDef hcan) {
 80023cc:	b084      	sub	sp, #16
 80023ce:	b5b0      	push	{r4, r5, r7, lr}
 80023d0:	b08a      	sub	sp, #40	; 0x28
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	2538      	movs	r5, #56	; 0x38
 80023d6:	197c      	adds	r4, r7, r5
 80023d8:	6020      	str	r0, [r4, #0]
 80023da:	6061      	str	r1, [r4, #4]
 80023dc:	60a2      	str	r2, [r4, #8]
 80023de:	60e3      	str	r3, [r4, #12]

		/*##- Configure the CAN Filter ###########################################*/
	/* Set the filter to allow only the calibration frames through for this devices address */
		CAN_FilterTypeDef  sFilterConfig;

		sFilterConfig.FilterBank = 0;
 80023e0:	003b      	movs	r3, r7
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80023e6:	003b      	movs	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80023ec:	003b      	movs	r3, r7
 80023ee:	2201      	movs	r2, #1
 80023f0:	61da      	str	r2, [r3, #28]
		sFilterConfig.FilterIdHigh = 0x0000;
 80023f2:	003b      	movs	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
		sFilterConfig.FilterIdLow = 0x0000;
 80023f8:	003b      	movs	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]
		sFilterConfig.FilterMaskIdHigh = 0x0000;
 80023fe:	003b      	movs	r3, r7
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
		sFilterConfig.FilterMaskIdLow = 0x0000;
 8002404:	003b      	movs	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800240a:	003b      	movs	r3, r7
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
		sFilterConfig.FilterActivation = ENABLE;
 8002410:	003b      	movs	r3, r7
 8002412:	2201      	movs	r2, #1
 8002414:	621a      	str	r2, [r3, #32]
		sFilterConfig.SlaveStartFilterBank = 14;
 8002416:	003b      	movs	r3, r7
 8002418:	220e      	movs	r2, #14
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

		if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 800241c:	003a      	movs	r2, r7
 800241e:	197b      	adds	r3, r7, r5
 8002420:	0011      	movs	r1, r2
 8002422:	0018      	movs	r0, r3
 8002424:	f001 f91e 	bl	8003664 <HAL_CAN_ConfigFilter>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d001      	beq.n	8002430 <StartCANReception+0x64>
			/* Filter configuration Error */
			Error_Handler();
 800242c:	f000 fd70 	bl	8002f10 <Error_Handler>
		}

		if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002430:	2338      	movs	r3, #56	; 0x38
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	0018      	movs	r0, r3
 8002436:	f001 fa07 	bl	8003848 <HAL_CAN_Start>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d001      	beq.n	8002442 <StartCANReception+0x76>
			/* Failed to start the CAN interface */
			Error_Handler();
 800243e:	f000 fd67 	bl	8002f10 <Error_Handler>
		}

		if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002442:	2338      	movs	r3, #56	; 0x38
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2102      	movs	r1, #2
 8002448:	0018      	movs	r0, r3
 800244a:	f001 fc78 	bl	8003d3e <HAL_CAN_ActivateNotification>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <StartCANReception+0x8a>
		{
			/* Notification Error */
			Error_Handler();
 8002452:	f000 fd5d 	bl	8002f10 <Error_Handler>
		}
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b00a      	add	sp, #40	; 0x28
 800245c:	bcb0      	pop	{r4, r5, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	b004      	add	sp, #16
 8002462:	4718      	bx	r3

08002464 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN Init */
	ModbusH.uModbusType = MB_SLAVE;
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 800246c:	2203      	movs	r2, #3
 800246e:	701a      	strb	r2, [r3, #0]
	ModbusH.port =  &huart1;
 8002470:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 8002472:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <MX_FREERTOS_Init+0x150>)
 8002474:	605a      	str	r2, [r3, #4]

	// Links 0..2 set the low byte of the Modbus address so it ranges from 0x10 to 0x17
	int ModbusAddressOffset = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(ADDR0_GPIO_Port, ADDR0_Pin)) {
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <MX_FREERTOS_Init+0x154>)
 800247c:	2104      	movs	r1, #4
 800247e:	0018      	movs	r0, r3
 8002480:	f002 fb7c 	bl	8004b7c <HAL_GPIO_ReadPin>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d00a      	beq.n	800249e <MX_FREERTOS_Init+0x3a>
		ModbusAddressOffset |= 1;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	4313      	orrs	r3, r2
 800248e:	607b      	str	r3, [r7, #4]
		CANBaseAddress |= 0x04;
 8002490:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <MX_FREERTOS_Init+0x158>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	2204      	movs	r2, #4
 8002496:	4313      	orrs	r3, r2
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b48      	ldr	r3, [pc, #288]	; (80025bc <MX_FREERTOS_Init+0x158>)
 800249c:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(ADDR1_GPIO_Port, ADDR1_Pin)) {
 800249e:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <MX_FREERTOS_Init+0x154>)
 80024a0:	2108      	movs	r1, #8
 80024a2:	0018      	movs	r0, r3
 80024a4:	f002 fb6a 	bl	8004b7c <HAL_GPIO_ReadPin>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d00a      	beq.n	80024c2 <MX_FREERTOS_Init+0x5e>
		ModbusAddressOffset |= 2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	4313      	orrs	r3, r2
 80024b2:	607b      	str	r3, [r7, #4]
		CANBaseAddress |= 0x08;
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <MX_FREERTOS_Init+0x158>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	2208      	movs	r2, #8
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <MX_FREERTOS_Init+0x158>)
 80024c0:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(ADDR2_GPIO_Port, ADDR2_Pin)) {
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <MX_FREERTOS_Init+0x154>)
 80024c4:	2110      	movs	r1, #16
 80024c6:	0018      	movs	r0, r3
 80024c8:	f002 fb58 	bl	8004b7c <HAL_GPIO_ReadPin>
 80024cc:	1e03      	subs	r3, r0, #0
 80024ce:	d00a      	beq.n	80024e6 <MX_FREERTOS_Init+0x82>
		ModbusAddressOffset |= 4;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2204      	movs	r2, #4
 80024d4:	4313      	orrs	r3, r2
 80024d6:	607b      	str	r3, [r7, #4]
		CANBaseAddress |= 0x10;
 80024d8:	4b38      	ldr	r3, [pc, #224]	; (80025bc <MX_FREERTOS_Init+0x158>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2210      	movs	r2, #16
 80024de:	4313      	orrs	r3, r2
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <MX_FREERTOS_Init+0x158>)
 80024e4:	801a      	strh	r2, [r3, #0]
	}
	ModbusH.u8id = ModbusSlaveID + ModbusAddressOffset;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	330a      	adds	r3, #10
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 80024f0:	721a      	strb	r2, [r3, #8]
	ModbusH.u16timeOut = ModbusTimeoutMs;			// Modbus timeout in Milliseconds
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 80024f4:	22a2      	movs	r2, #162	; 0xa2
 80024f6:	2164      	movs	r1, #100	; 0x64
 80024f8:	5299      	strh	r1, [r3, r2]

	//  ModbusH.EN_Port = NULL;
	// Port for the TXEN line to enable the RS485 driver
	ModbusH.EN_Port = RS485_TXEN_GPIO_Port;
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 80024fc:	2290      	movs	r2, #144	; 0x90
 80024fe:	05d2      	lsls	r2, r2, #23
 8002500:	60da      	str	r2, [r3, #12]
	ModbusH.EN_Pin = RS485_TXEN_Pin;
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	0052      	lsls	r2, r2, #1
 8002508:	821a      	strh	r2, [r3, #16]

	ModbusH.u16regs = ModbusDATA;
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 800250c:	2198      	movs	r1, #152	; 0x98
 800250e:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <MX_FREERTOS_Init+0x15c>)
 8002510:	505a      	str	r2, [r3, r1]
	ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 8002514:	22a4      	movs	r2, #164	; 0xa4
 8002516:	2126      	movs	r1, #38	; 0x26
 8002518:	5299      	strh	r1, [r3, r2]
	ModbusH.xTypeHW = USART_HW;
 800251a:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 800251c:	23a0      	movs	r3, #160	; 0xa0
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2101      	movs	r1, #1
 8002522:	54d1      	strb	r1, [r2, r3]
	//Initialize Modbus library
	ModbusInit(&ModbusH);
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 8002526:	0018      	movs	r0, r3
 8002528:	f005 fe7a 	bl	8008220 <ModbusInit>

	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH);
 800252c:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <MX_FREERTOS_Init+0x14c>)
 800252e:	0018      	movs	r0, r3
 8002530:	f005 ff20 	bl	8008374 <ModbusStart>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of GreenLedOffTimer */
  GreenLedOffTimerHandle = osTimerNew(TurnOffGreenLED, osTimerOnce, NULL, &GreenLedOffTimer_attributes);
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <MX_FREERTOS_Init+0x160>)
 8002536:	4824      	ldr	r0, [pc, #144]	; (80025c8 <MX_FREERTOS_Init+0x164>)
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	f008 f98e 	bl	800a85c <osTimerNew>
 8002540:	0002      	movs	r2, r0
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <MX_FREERTOS_Init+0x168>)
 8002544:	601a      	str	r2, [r3, #0]

  /* creation of RedLedOffTimer */
  RedLedOffTimerHandle = osTimerNew(TurnOffRedLED, osTimerOnce, NULL, &RedLedOffTimer_attributes);
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <MX_FREERTOS_Init+0x16c>)
 8002548:	4822      	ldr	r0, [pc, #136]	; (80025d4 <MX_FREERTOS_Init+0x170>)
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	f008 f985 	bl	800a85c <osTimerNew>
 8002552:	0002      	movs	r2, r0
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <MX_FREERTOS_Init+0x174>)
 8002556:	601a      	str	r2, [r3, #0]

  /* creation of sendCANDataTimer */
  sendCANDataTimerHandle = osTimerNew(sendCANData, osTimerPeriodic, NULL, &sendCANDataTimer_attributes);
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <MX_FREERTOS_Init+0x178>)
 800255a:	4821      	ldr	r0, [pc, #132]	; (80025e0 <MX_FREERTOS_Init+0x17c>)
 800255c:	2200      	movs	r2, #0
 800255e:	2101      	movs	r1, #1
 8002560:	f008 f97c 	bl	800a85c <osTimerNew>
 8002564:	0002      	movs	r2, r0
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_FREERTOS_Init+0x180>)
 8002568:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */

	osTimerStart(sendCANDataTimerHandle, 5000);	// Send the calibration data every 5 seconds
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_FREERTOS_Init+0x180>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <MX_FREERTOS_Init+0x184>)
 8002570:	0011      	movs	r1, r2
 8002572:	0018      	movs	r0, r3
 8002574:	f008 f9fa 	bl	800a96c <osTimerStart>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 8002578:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <MX_FREERTOS_Init+0x188>)
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <MX_FREERTOS_Init+0x18c>)
 800257c:	2100      	movs	r1, #0
 800257e:	0018      	movs	r0, r3
 8002580:	f008 f8ac 	bl	800a6dc <osThreadNew>
 8002584:	0002      	movs	r2, r0
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <MX_FREERTOS_Init+0x190>)
 8002588:	601a      	str	r2, [r3, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	StartCANReception(hcan);
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <MX_FREERTOS_Init+0x194>)
 800258c:	466a      	mov	r2, sp
 800258e:	0011      	movs	r1, r2
 8002590:	001a      	movs	r2, r3
 8002592:	3210      	adds	r2, #16
 8002594:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002596:	c131      	stmia	r1!, {r0, r4, r5}
 8002598:	ca31      	ldmia	r2!, {r0, r4, r5}
 800259a:	c131      	stmia	r1!, {r0, r4, r5}
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f7ff ff12 	bl	80023cc <StartCANReception>

  /* USER CODE END RTOS_EVENTS */

}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bdb0      	pop	{r4, r5, r7, pc}
 80025b0:	20000444 	.word	0x20000444
 80025b4:	20000638 	.word	0x20000638
 80025b8:	48000400 	.word	0x48000400
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000588 	.word	0x20000588
 80025c4:	0800dd98 	.word	0x0800dd98
 80025c8:	08002af1 	.word	0x08002af1
 80025cc:	200000e8 	.word	0x200000e8
 80025d0:	0800dda8 	.word	0x0800dda8
 80025d4:	08002b11 	.word	0x08002b11
 80025d8:	200000ec 	.word	0x200000ec
 80025dc:	0800ddb8 	.word	0x0800ddb8
 80025e0:	08002b31 	.word	0x08002b31
 80025e4:	200000f0 	.word	0x200000f0
 80025e8:	00001388 	.word	0x00001388
 80025ec:	0800dd74 	.word	0x0800dd74
 80025f0:	0800290d 	.word	0x0800290d
 80025f4:	200000e4 	.word	0x200000e4
 80025f8:	20000090 	.word	0x20000090

080025fc <ResetBuffer>:
} adcBuffer;

/**
 * Clears the ADC buffer
 */
void ResetBuffer() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
	for (int i = 0; i < BufferSize; i++) {
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	e019      	b.n	800263c <ResetBuffer+0x40>
		adcBuffer.voltage.data[i] = 0;
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <ResetBuffer+0x50>)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	2100      	movs	r1, #0
 8002610:	50d1      	str	r1, [r2, r3]
		adcBuffer.voltage.dataPtr = 0;
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <ResetBuffer+0x50>)
 8002614:	23c8      	movs	r3, #200	; 0xc8
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2100      	movs	r1, #0
 800261a:	50d1      	str	r1, [r2, r3]
		adcBuffer.current.data[i] = 0;
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <ResetBuffer+0x50>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3364      	adds	r3, #100	; 0x64
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	3304      	adds	r3, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
		adcBuffer.current.dataPtr = 0;
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <ResetBuffer+0x50>)
 800262e:	23c9      	movs	r3, #201	; 0xc9
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	2100      	movs	r1, #0
 8002634:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < BufferSize; i++) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3301      	adds	r3, #1
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b63      	cmp	r3, #99	; 0x63
 8002640:	dde2      	ble.n	8002608 <ResetBuffer+0xc>
	}
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200000f4 	.word	0x200000f4

08002650 <CalculateAverageVoltage>:

/**
 * Calculate average voltage
 */
int32_t CalculateAverageVoltage() {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
	int32_t voltage = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	e009      	b.n	8002674 <CalculateAverageVoltage+0x24>
		voltage += adcBuffer.voltage.data[i];
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <CalculateAverageVoltage+0x40>)
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	58d3      	ldr	r3, [r2, r3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	18d3      	adds	r3, r2, r3
 800266c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b63      	cmp	r3, #99	; 0x63
 8002678:	ddf2      	ble.n	8002660 <CalculateAverageVoltage+0x10>
	}
	return voltage / BufferSize;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2164      	movs	r1, #100	; 0x64
 800267e:	0018      	movs	r0, r3
 8002680:	f7fd fdcc 	bl	800021c <__divsi3>
 8002684:	0003      	movs	r3, r0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b002      	add	sp, #8
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	200000f4 	.word	0x200000f4

08002694 <CalculateActualVoltage>:

/**
 * Applies the calibration values to calculate the actual voltage
 */
uint16_t  CalculateActualVoltage(double rawVoltage) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6038      	str	r0, [r7, #0]
 800269c:	6079      	str	r1, [r7, #4]
	double m;
	double c;
	double v;
	GetVoltageCalibration(&m, &c);
 800269e:	2308      	movs	r3, #8
 80026a0:	18fa      	adds	r2, r7, r3
 80026a2:	2310      	movs	r3, #16
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f007 fdc7 	bl	800a23c <GetVoltageCalibration>
	v = (m * rawVoltage) + c;
 80026ae:	6938      	ldr	r0, [r7, #16]
 80026b0:	6979      	ldr	r1, [r7, #20]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f7fe fd09 	bl	80010cc <__aeabi_dmul>
 80026ba:	0002      	movs	r2, r0
 80026bc:	000b      	movs	r3, r1
 80026be:	0010      	movs	r0, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f7fd feb3 	bl	8000430 <__aeabi_dadd>
 80026ca:	0002      	movs	r2, r0
 80026cc:	000b      	movs	r3, r1
 80026ce:	61ba      	str	r2, [r7, #24]
 80026d0:	61fb      	str	r3, [r7, #28]
	return (uint16_t)v;
 80026d2:	69b8      	ldr	r0, [r7, #24]
 80026d4:	69f9      	ldr	r1, [r7, #28]
 80026d6:	f7fd fe8d 	bl	80003f4 <__aeabi_d2uiz>
 80026da:	0003      	movs	r3, r0
 80026dc:	b29b      	uxth	r3, r3
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b008      	add	sp, #32
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <CalculateAverageCurrent>:

/**
 * Calculate average current
 */
int32_t CalculateAverageCurrent() {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
	int32_t current = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	e00e      	b.n	8002716 <CalculateAverageCurrent+0x2e>
		current += adcBuffer.current.data[i] * 100;
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <CalculateAverageCurrent+0x48>)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3364      	adds	r3, #100	; 0x64
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	18d3      	adds	r3, r2, r3
 8002702:	3304      	adds	r3, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2264      	movs	r2, #100	; 0x64
 8002708:	4353      	muls	r3, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	18d3      	adds	r3, r2, r3
 800270e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BufferSize; i++) {
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b63      	cmp	r3, #99	; 0x63
 800271a:	dded      	ble.n	80026f8 <CalculateAverageCurrent+0x10>
	}
	return current  / BufferSize;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2164      	movs	r1, #100	; 0x64
 8002720:	0018      	movs	r0, r3
 8002722:	f7fd fd7b 	bl	800021c <__divsi3>
 8002726:	0003      	movs	r3, r0
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200000f4 	.word	0x200000f4

08002734 <CalculateActualCurrent>:

/**
 * Applies the calibration values to calculate the actual current
 */
int32_t CalculateActualCurrent(double rawCurrent) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6038      	str	r0, [r7, #0]
 800273c:	6079      	str	r1, [r7, #4]
	double m;
	double c;
	double i;
	GetCurrentCalibration(&m, &c);
 800273e:	2308      	movs	r3, #8
 8002740:	18fa      	adds	r2, r7, r3
 8002742:	2310      	movs	r3, #16
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	0011      	movs	r1, r2
 8002748:	0018      	movs	r0, r3
 800274a:	f007 fdd7 	bl	800a2fc <GetCurrentCalibration>
	i = (m * rawCurrent) + c;
 800274e:	6938      	ldr	r0, [r7, #16]
 8002750:	6979      	ldr	r1, [r7, #20]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f7fe fcb9 	bl	80010cc <__aeabi_dmul>
 800275a:	0002      	movs	r2, r0
 800275c:	000b      	movs	r3, r1
 800275e:	0010      	movs	r0, r2
 8002760:	0019      	movs	r1, r3
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f7fd fe63 	bl	8000430 <__aeabi_dadd>
 800276a:	0002      	movs	r2, r0
 800276c:	000b      	movs	r3, r1
 800276e:	61ba      	str	r2, [r7, #24]
 8002770:	61fb      	str	r3, [r7, #28]
	return (int32_t)i;
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	69f9      	ldr	r1, [r7, #28]
 8002776:	f7ff faed 	bl	8001d54 <__aeabi_d2iz>
 800277a:	0003      	movs	r3, r0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b008      	add	sp, #32
 8002782:	bd80      	pop	{r7, pc}

08002784 <SendBufferOverCAN>:

uint8_t CANBuffer[8];	// Define an 8 byte buffer for information sent on the CAN bus
CAN_TxHeaderTypeDef msg;

void SendBufferOverCAN(int16_t messageID, const uint8_t *buffer) {
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af02      	add	r7, sp, #8
 800278a:	0002      	movs	r2, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	801a      	strh	r2, [r3, #0]
	uint32_t mb;	// TxMailbox returned by the HAL driver

	msg.DLC = 8;	// 8 bytes of data
 8002792:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <SendBufferOverCAN+0xbc>)
 8002794:	2208      	movs	r2, #8
 8002796:	611a      	str	r2, [r3, #16]
	msg.ExtId = 0;
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <SendBufferOverCAN+0xbc>)
 800279a:	2200      	movs	r2, #0
 800279c:	605a      	str	r2, [r3, #4]
	msg.StdId = CANBaseAddress + messageID;
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <SendBufferOverCAN+0xc0>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	001a      	movs	r2, r3
 80027a4:	1dbb      	adds	r3, r7, #6
 80027a6:	2100      	movs	r1, #0
 80027a8:	5e5b      	ldrsh	r3, [r3, r1]
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	001a      	movs	r2, r3
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <SendBufferOverCAN+0xbc>)
 80027b0:	601a      	str	r2, [r3, #0]
	msg.IDE = CAN_ID_STD;
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <SendBufferOverCAN+0xbc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
	msg.RTR = CAN_RTR_DATA;
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <SendBufferOverCAN+0xbc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
	msg.TransmitGlobalTime = DISABLE;
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <SendBufferOverCAN+0xbc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <SendBufferOverCAN+0xc4>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f001 f956 	bl	8003a78 <HAL_CAN_GetTxMailboxesFreeLevel>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d021      	beq.n	8002814 <SendBufferOverCAN+0x90>

		HAL_StatusTypeDef st = HAL_CAN_AddTxMessage(&hcan, &msg, buffer, &mb);
 80027d0:	250f      	movs	r5, #15
 80027d2:	197c      	adds	r4, r7, r5
 80027d4:	2308      	movs	r3, #8
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4919      	ldr	r1, [pc, #100]	; (8002840 <SendBufferOverCAN+0xbc>)
 80027dc:	481a      	ldr	r0, [pc, #104]	; (8002848 <SendBufferOverCAN+0xc4>)
 80027de:	f001 f879 	bl	80038d4 <HAL_CAN_AddTxMessage>
 80027e2:	0003      	movs	r3, r0
 80027e4:	7023      	strb	r3, [r4, #0]
		if (st != HAL_OK) {
 80027e6:	197b      	adds	r3, r7, r5
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d024      	beq.n	8002838 <SendBufferOverCAN+0xb4>
			// Turn on Red LED to indicate there is a problem
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <SendBufferOverCAN+0xc8>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	2101      	movs	r1, #1
 80027f4:	0018      	movs	r0, r3
 80027f6:	f002 f9de 	bl	8004bb6 <HAL_GPIO_WritePin>
			xTimerStart(RedLedOffTimerHandle, 75);
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <SendBufferOverCAN+0xcc>)
 80027fc:	681c      	ldr	r4, [r3, #0]
 80027fe:	f009 fb79 	bl	800bef4 <xTaskGetTickCount>
 8002802:	0002      	movs	r2, r0
 8002804:	234b      	movs	r3, #75	; 0x4b
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	2101      	movs	r1, #1
 800280c:	0020      	movs	r0, r4
 800280e:	f00a faf9 	bl	800ce04 <xTimerGenericCommand>
		}
	} else {
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
		xTimerStart(RedLedOffTimerHandle, 75);
	}
}
 8002812:	e011      	b.n	8002838 <SendBufferOverCAN+0xb4>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <SendBufferOverCAN+0xc8>)
 8002816:	2201      	movs	r2, #1
 8002818:	2101      	movs	r1, #1
 800281a:	0018      	movs	r0, r3
 800281c:	f002 f9cb 	bl	8004bb6 <HAL_GPIO_WritePin>
		xTimerStart(RedLedOffTimerHandle, 75);
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <SendBufferOverCAN+0xcc>)
 8002822:	681c      	ldr	r4, [r3, #0]
 8002824:	f009 fb66 	bl	800bef4 <xTaskGetTickCount>
 8002828:	0002      	movs	r2, r0
 800282a:	234b      	movs	r3, #75	; 0x4b
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2300      	movs	r3, #0
 8002830:	2101      	movs	r1, #1
 8002832:	0020      	movs	r0, r4
 8002834:	f00a fae6 	bl	800ce04 <xTimerGenericCommand>
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b004      	add	sp, #16
 800283e:	bdb0      	pop	{r4, r5, r7, pc}
 8002840:	2000041c 	.word	0x2000041c
 8002844:	20000000 	.word	0x20000000
 8002848:	20000090 	.word	0x20000090
 800284c:	48000400 	.word	0x48000400
 8002850:	200000ec 	.word	0x200000ec

08002854 <SendVoltageOverCAN>:

void SendVoltageOverCAN(uint32_t raw, uint16_t calculated) {
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	000a      	movs	r2, r1
 800285e:	1cbb      	adds	r3, r7, #2
 8002860:	801a      	strh	r2, [r3, #0]
	uint8_t Buffer[8];
	memset(Buffer, 0, sizeof(Buffer));
 8002862:	2408      	movs	r4, #8
 8002864:	193b      	adds	r3, r7, r4
 8002866:	2208      	movs	r2, #8
 8002868:	2100      	movs	r1, #0
 800286a:	0018      	movs	r0, r3
 800286c:	f00b f90a 	bl	800da84 <memset>
	memcpy(Buffer, &calculated, 2);			// Calculated value goes in the first two bytes
 8002870:	1cb9      	adds	r1, r7, #2
 8002872:	193b      	adds	r3, r7, r4
 8002874:	2202      	movs	r2, #2
 8002876:	0018      	movs	r0, r3
 8002878:	f00b f990 	bl	800db9c <memcpy>
	memcpy(Buffer + 4, &raw, 4);				// Raw value goes in byte 3 to 6
 800287c:	193b      	adds	r3, r7, r4
 800287e:	3304      	adds	r3, #4
 8002880:	1d39      	adds	r1, r7, #4
 8002882:	2204      	movs	r2, #4
 8002884:	0018      	movs	r0, r3
 8002886:	f00b f989 	bl	800db9c <memcpy>

	SendBufferOverCAN(0, Buffer);
 800288a:	193b      	adds	r3, r7, r4
 800288c:	0019      	movs	r1, r3
 800288e:	2000      	movs	r0, #0
 8002890:	f7ff ff78 	bl	8002784 <SendBufferOverCAN>
	if (HAL_GPIO_ReadPin(Debug_GPIO_Port, Debug_Pin)) {
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <SendVoltageOverCAN+0x70>)
 8002896:	2120      	movs	r1, #32
 8002898:	0018      	movs	r0, r3
 800289a:	f002 f96f 	bl	8004b7c <HAL_GPIO_ReadPin>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d006      	beq.n	80028b0 <SendVoltageOverCAN+0x5c>
		HAL_GPIO_WritePin(Debug_GPIO_Port, Debug_Pin, GPIO_PIN_RESET);
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <SendVoltageOverCAN+0x70>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	2120      	movs	r1, #32
 80028a8:	0018      	movs	r0, r3
 80028aa:	f002 f984 	bl	8004bb6 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(Debug_GPIO_Port, Debug_Pin, GPIO_PIN_SET);
	}
}
 80028ae:	e005      	b.n	80028bc <SendVoltageOverCAN+0x68>
		HAL_GPIO_WritePin(Debug_GPIO_Port, Debug_Pin, GPIO_PIN_SET);
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SendVoltageOverCAN+0x70>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	2120      	movs	r1, #32
 80028b6:	0018      	movs	r0, r3
 80028b8:	f002 f97d 	bl	8004bb6 <HAL_GPIO_WritePin>
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b005      	add	sp, #20
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	48000400 	.word	0x48000400

080028c8 <SendCurrentOverCAN>:

void SendCurrentOverCAN(uint32_t raw, int32_t calculated) {
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	uint8_t Buffer[8];
	memset(Buffer, 0, sizeof(Buffer));
 80028d2:	2408      	movs	r4, #8
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	2208      	movs	r2, #8
 80028d8:	2100      	movs	r1, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f00b f8d2 	bl	800da84 <memset>
	memcpy(Buffer, &calculated, 4);			// Calculated value goes in the first four bytes
 80028e0:	0039      	movs	r1, r7
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2204      	movs	r2, #4
 80028e6:	0018      	movs	r0, r3
 80028e8:	f00b f958 	bl	800db9c <memcpy>
	memcpy(Buffer + 4, &raw, 4);				// Raw value goes in byte 3 to 6
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	3304      	adds	r3, #4
 80028f0:	1d39      	adds	r1, r7, #4
 80028f2:	2204      	movs	r2, #4
 80028f4:	0018      	movs	r0, r3
 80028f6:	f00b f951 	bl	800db9c <memcpy>

	SendBufferOverCAN(1, Buffer);
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	0019      	movs	r1, r3
 80028fe:	2001      	movs	r0, #1
 8002900:	f7ff ff40 	bl	8002784 <SendBufferOverCAN>
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b005      	add	sp, #20
 800290a:	bd90      	pop	{r4, r7, pc}

0800290c <StartADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument)
{
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADCTask */
	uint8_t status;
	int16_t	value16;
	int32_t	value32;
	uint8_t channel;
	ResetBuffer();
 8002914:	f7ff fe72 	bl	80025fc <ResetBuffer>

  MCP3462_ADCInit();
 8002918:	f00a fff8 	bl	800d90c <MCP3462_ADCInit>
 // StartCANReception(hcan);

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(0, osWaitForever);
 800291c:	2301      	movs	r3, #1
 800291e:	425b      	negs	r3, r3
 8002920:	0019      	movs	r1, r3
 8002922:	2000      	movs	r0, #0
 8002924:	f009 ff60 	bl	800c7e8 <ulTaskNotifyTake>

	  HAL_IWDG_Refresh(&hiwdg);
 8002928:	4b6c      	ldr	r3, [pc, #432]	; (8002adc <StartADCTask+0x1d0>)
 800292a:	0018      	movs	r0, r3
 800292c:	f002 f9ce 	bl	8004ccc <HAL_IWDG_Refresh>

	  // Read the A-D converter
	  status = MCP3462_ADCRead(&value32, &channel);
 8002930:	2517      	movs	r5, #23
 8002932:	197c      	adds	r4, r7, r5
 8002934:	230f      	movs	r3, #15
 8002936:	18fa      	adds	r2, r7, r3
 8002938:	2310      	movs	r3, #16
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	0011      	movs	r1, r2
 800293e:	0018      	movs	r0, r3
 8002940:	f00b f844 	bl	800d9cc <MCP3462_ADCRead>
 8002944:	0003      	movs	r3, r0
 8002946:	7023      	strb	r3, [r4, #0]
	  if (((status & 0x18) == 0) || ((status & 0x18) == 0x18)) {
 8002948:	197b      	adds	r3, r7, r5
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2218      	movs	r2, #24
 800294e:	4013      	ands	r3, r2
 8002950:	d005      	beq.n	800295e <StartADCTask+0x52>
 8002952:	197b      	adds	r3, r7, r5
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2218      	movs	r2, #24
 8002958:	4013      	ands	r3, r2
 800295a:	2b18      	cmp	r3, #24
 800295c:	d103      	bne.n	8002966 <StartADCTask+0x5a>
		  // No device is answering us
		  status = 0b01000000;
 800295e:	2317      	movs	r3, #23
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	701a      	strb	r2, [r3, #0]
	  }

	  // If we have new data
	  if ((status & 0b01000000) == 0) {
 8002966:	2317      	movs	r3, #23
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2240      	movs	r2, #64	; 0x40
 800296e:	4013      	ands	r3, r2
 8002970:	d1d4      	bne.n	800291c <StartADCTask+0x10>
		  if (channel == 0) {
 8002972:	230f      	movs	r3, #15
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d150      	bne.n	8002a1e <StartADCTask+0x112>
//			  lastVoltage = value32;

			  SendVoltageOverCAN(value32, CalculateActualVoltage((double)value32));
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	001c      	movs	r4, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	0018      	movs	r0, r3
 8002984:	f7ff fa1c 	bl	8001dc0 <__aeabi_i2d>
 8002988:	0002      	movs	r2, r0
 800298a:	000b      	movs	r3, r1
 800298c:	0010      	movs	r0, r2
 800298e:	0019      	movs	r1, r3
 8002990:	f7ff fe80 	bl	8002694 <CalculateActualVoltage>
 8002994:	0003      	movs	r3, r0
 8002996:	0019      	movs	r1, r3
 8002998:	0020      	movs	r0, r4
 800299a:	f7ff ff5b 	bl	8002854 <SendVoltageOverCAN>

//			  newVoltage = true;
			  adcBuffer.voltage.data[adcBuffer.voltage.dataPtr++] = value32;
 800299e:	4a50      	ldr	r2, [pc, #320]	; (8002ae0 <StartADCTask+0x1d4>)
 80029a0:	23c8      	movs	r3, #200	; 0xc8
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	58d3      	ldr	r3, [r2, r3]
 80029a6:	1c58      	adds	r0, r3, #1
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <StartADCTask+0x1d4>)
 80029aa:	22c8      	movs	r2, #200	; 0xc8
 80029ac:	0052      	lsls	r2, r2, #1
 80029ae:	5088      	str	r0, [r1, r2]
 80029b0:	6939      	ldr	r1, [r7, #16]
 80029b2:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <StartADCTask+0x1d4>)
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	5099      	str	r1, [r3, r2]
			  if (adcBuffer.voltage.dataPtr >= BufferSize) {
 80029b8:	4a49      	ldr	r2, [pc, #292]	; (8002ae0 <StartADCTask+0x1d4>)
 80029ba:	23c8      	movs	r3, #200	; 0xc8
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	58d3      	ldr	r3, [r2, r3]
 80029c0:	2b63      	cmp	r3, #99	; 0x63
 80029c2:	dd04      	ble.n	80029ce <StartADCTask+0xc2>
				  adcBuffer.voltage.dataPtr = 0;
 80029c4:	4a46      	ldr	r2, [pc, #280]	; (8002ae0 <StartADCTask+0x1d4>)
 80029c6:	23c8      	movs	r3, #200	; 0xc8
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2100      	movs	r1, #0
 80029cc:	50d1      	str	r1, [r2, r3]
			  }
			  value16 = CalculateActualVoltage((double)CalculateAverageVoltage());
 80029ce:	f7ff fe3f 	bl	8002650 <CalculateAverageVoltage>
 80029d2:	0003      	movs	r3, r0
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7ff f9f3 	bl	8001dc0 <__aeabi_i2d>
 80029da:	0002      	movs	r2, r0
 80029dc:	000b      	movs	r3, r1
 80029de:	0010      	movs	r0, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	f7ff fe57 	bl	8002694 <CalculateActualVoltage>
 80029e6:	0003      	movs	r3, r0
 80029e8:	001a      	movs	r2, r3
 80029ea:	2414      	movs	r4, #20
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	801a      	strh	r2, [r3, #0]
			  // Put the average data in the modbus registers
			  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 80029f0:	4b3c      	ldr	r3, [pc, #240]	; (8002ae4 <StartADCTask+0x1d8>)
 80029f2:	22b8      	movs	r2, #184	; 0xb8
 80029f4:	589b      	ldr	r3, [r3, r2]
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	0018      	movs	r0, r3
 80029fa:	f008 fd21 	bl	800b440 <xQueueSemaphoreTake>
			  ModbusH.u16regs[InputRegistersStart + VoltageRegister] = (uint16_t)value16;
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <StartADCTask+0x1d8>)
 8002a00:	2298      	movs	r2, #152	; 0x98
 8002a02:	589b      	ldr	r3, [r3, r2]
 8002a04:	3304      	adds	r3, #4
 8002a06:	193a      	adds	r2, r7, r4
 8002a08:	8812      	ldrh	r2, [r2, #0]
 8002a0a:	801a      	strh	r2, [r3, #0]
			  xSemaphoreGive(ModbusH.ModBusSphrHandle);
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <StartADCTask+0x1d8>)
 8002a0e:	22b8      	movs	r2, #184	; 0xb8
 8002a10:	5898      	ldr	r0, [r3, r2]
 8002a12:	2300      	movs	r3, #0
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	f008 fb28 	bl	800b06c <xQueueGenericSend>
 8002a1c:	e77e      	b.n	800291c <StartADCTask+0x10>
		  } else {
			  lastCurrent = value32;
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <StartADCTask+0x1dc>)
 8002a22:	601a      	str	r2, [r3, #0]

			  SendCurrentOverCAN(value32, CalculateActualCurrent((double)value32));
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	001c      	movs	r4, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff f9c8 	bl	8001dc0 <__aeabi_i2d>
 8002a30:	0002      	movs	r2, r0
 8002a32:	000b      	movs	r3, r1
 8002a34:	0010      	movs	r0, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	f7ff fe7c 	bl	8002734 <CalculateActualCurrent>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0020      	movs	r0, r4
 8002a42:	f7ff ff41 	bl	80028c8 <SendCurrentOverCAN>

			  newCurrent = true;
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <StartADCTask+0x1e0>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
			  adcBuffer.current.data[adcBuffer.current.dataPtr++] = value32;
 8002a4c:	4a24      	ldr	r2, [pc, #144]	; (8002ae0 <StartADCTask+0x1d4>)
 8002a4e:	23c9      	movs	r3, #201	; 0xc9
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	58d3      	ldr	r3, [r2, r3]
 8002a54:	1c58      	adds	r0, r3, #1
 8002a56:	4922      	ldr	r1, [pc, #136]	; (8002ae0 <StartADCTask+0x1d4>)
 8002a58:	22c9      	movs	r2, #201	; 0xc9
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	5088      	str	r0, [r1, r2]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	491f      	ldr	r1, [pc, #124]	; (8002ae0 <StartADCTask+0x1d4>)
 8002a62:	3364      	adds	r3, #100	; 0x64
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	18cb      	adds	r3, r1, r3
 8002a68:	3304      	adds	r3, #4
 8002a6a:	601a      	str	r2, [r3, #0]
			  if (adcBuffer.current.dataPtr >= BufferSize) {
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <StartADCTask+0x1d4>)
 8002a6e:	23c9      	movs	r3, #201	; 0xc9
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	58d3      	ldr	r3, [r2, r3]
 8002a74:	2b63      	cmp	r3, #99	; 0x63
 8002a76:	dd04      	ble.n	8002a82 <StartADCTask+0x176>
				  adcBuffer.current.dataPtr = 0;
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <StartADCTask+0x1d4>)
 8002a7a:	23c9      	movs	r3, #201	; 0xc9
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	2100      	movs	r1, #0
 8002a80:	50d1      	str	r1, [r2, r3]
			  }
			  value32 = CalculateActualCurrent((double)CalculateAverageCurrent());
 8002a82:	f7ff fe31 	bl	80026e8 <CalculateAverageCurrent>
 8002a86:	0003      	movs	r3, r0
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff f999 	bl	8001dc0 <__aeabi_i2d>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	000b      	movs	r3, r1
 8002a92:	0010      	movs	r0, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	f7ff fe4d 	bl	8002734 <CalculateActualCurrent>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	613b      	str	r3, [r7, #16]
			  // Put the average data in the modbus registers
			  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <StartADCTask+0x1d8>)
 8002aa0:	22b8      	movs	r2, #184	; 0xb8
 8002aa2:	589b      	ldr	r3, [r3, r2]
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f008 fcca 	bl	800b440 <xQueueSemaphoreTake>
			  ModbusH.u16regs[InputRegistersStart + CurrentLow] = (uint16_t)(value32 & 0xffff);
 8002aac:	6939      	ldr	r1, [r7, #16]
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <StartADCTask+0x1d8>)
 8002ab0:	2298      	movs	r2, #152	; 0x98
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	3306      	adds	r3, #6
 8002ab6:	b28a      	uxth	r2, r1
 8002ab8:	801a      	strh	r2, [r3, #0]
			  ModbusH.u16regs[InputRegistersStart + CurrentHigh] = (uint16_t)((value32 >> 16) & 0xffff);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1419      	asrs	r1, r3, #16
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <StartADCTask+0x1d8>)
 8002ac0:	2298      	movs	r2, #152	; 0x98
 8002ac2:	589b      	ldr	r3, [r3, r2]
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	b28a      	uxth	r2, r1
 8002ac8:	801a      	strh	r2, [r3, #0]
			  xSemaphoreGive(ModbusH.ModBusSphrHandle);
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <StartADCTask+0x1d8>)
 8002acc:	22b8      	movs	r2, #184	; 0xb8
 8002ace:	5898      	ldr	r0, [r3, r2]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	f008 fac9 	bl	800b06c <xQueueGenericSend>
	  ulTaskNotifyTake(0, osWaitForever);
 8002ada:	e71f      	b.n	800291c <StartADCTask+0x10>
 8002adc:	20000434 	.word	0x20000434
 8002ae0:	200000f4 	.word	0x200000f4
 8002ae4:	20000444 	.word	0x20000444
 8002ae8:	200000dc 	.word	0x200000dc
 8002aec:	200000e0 	.word	0x200000e0

08002af0 <TurnOffGreenLED>:
  /* USER CODE END StartADCTask */
}

/* TurnOffGreenLED function */
void TurnOffGreenLED(void *argument)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TurnOffGreenLED */
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <TurnOffGreenLED+0x1c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	2102      	movs	r1, #2
 8002afe:	0018      	movs	r0, r3
 8002b00:	f002 f859 	bl	8004bb6 <HAL_GPIO_WritePin>

  /* USER CODE END TurnOffGreenLED */
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	48000400 	.word	0x48000400

08002b10 <TurnOffRedLED>:

/* TurnOffRedLED function */
void TurnOffRedLED(void *argument)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TurnOffRedLED */
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <TurnOffRedLED+0x1c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f002 f849 	bl	8004bb6 <HAL_GPIO_WritePin>

  /* USER CODE END TurnOffRedLED */
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	48000400 	.word	0x48000400

08002b30 <sendCANData>:

/* sendCANData function */
void sendCANData(void *argument)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendCANData */
	// Send the voltage calibration as four 16 bit numbers
	SendBufferOverCAN(2, GetCalibrationDataPtr());
 8002b38:	f007 fb78 	bl	800a22c <GetCalibrationDataPtr>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	0019      	movs	r1, r3
 8002b40:	2002      	movs	r0, #2
 8002b42:	f7ff fe1f 	bl	8002784 <SendBufferOverCAN>

	vTaskDelay( 100 );
 8002b46:	2064      	movs	r0, #100	; 0x64
 8002b48:	f009 f8b8 	bl	800bcbc <vTaskDelay>

	// Send the low current calibration points as two 32 bit numbers
	SendBufferOverCAN(3, GetCalibrationDataPtr() + 8);
 8002b4c:	f007 fb6e 	bl	800a22c <GetCalibrationDataPtr>
 8002b50:	0003      	movs	r3, r0
 8002b52:	3308      	adds	r3, #8
 8002b54:	0019      	movs	r1, r3
 8002b56:	2003      	movs	r0, #3
 8002b58:	f7ff fe14 	bl	8002784 <SendBufferOverCAN>

	vTaskDelay( 100 );
 8002b5c:	2064      	movs	r0, #100	; 0x64
 8002b5e:	f009 f8ad 	bl	800bcbc <vTaskDelay>

	// Send the high current calibration points as two 32 bit numbers
	SendBufferOverCAN(4, GetCalibrationDataPtr() + 16);
 8002b62:	f007 fb63 	bl	800a22c <GetCalibrationDataPtr>
 8002b66:	0003      	movs	r3, r0
 8002b68:	3310      	adds	r3, #16
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	2004      	movs	r0, #4
 8002b6e:	f7ff fe09 	bl	8002784 <SendBufferOverCAN>
  /* USER CODE END sendCANData */
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b82:	2414      	movs	r4, #20
 8002b84:	193b      	adds	r3, r7, r4
 8002b86:	0018      	movs	r0, r3
 8002b88:	2314      	movs	r3, #20
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f00a ff79 	bl	800da84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	0309      	lsls	r1, r1, #12
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	615a      	str	r2, [r3, #20]
 8002ba0:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	031b      	lsls	r3, r3, #12
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	4b5e      	ldr	r3, [pc, #376]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	03c9      	lsls	r1, r1, #15
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	615a      	str	r2, [r3, #20]
 8002bbc:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	03db      	lsls	r3, r3, #15
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	0289      	lsls	r1, r1, #10
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	615a      	str	r2, [r3, #20]
 8002bd8:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	029b      	lsls	r3, r3, #10
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	02c9      	lsls	r1, r1, #11
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	615a      	str	r2, [r3, #20]
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <MX_GPIO_Init+0x1b0>)
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	02db      	lsls	r3, r3, #11
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin|RS485_TXEN_Pin, GPIO_PIN_RESET);
 8002c02:	2388      	movs	r3, #136	; 0x88
 8002c04:	0059      	lsls	r1, r3, #1
 8002c06:	2390      	movs	r3, #144	; 0x90
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f001 ffd2 	bl	8004bb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|GREEN_LED_Pin|Debug_Pin, GPIO_PIN_RESET);
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <MX_GPIO_Init+0x1b4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	2123      	movs	r1, #35	; 0x23
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f001 ffcc 	bl	8004bb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	22e0      	movs	r2, #224	; 0xe0
 8002c22:	0212      	lsls	r2, r2, #8
 8002c24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	2201      	movs	r2, #1
 8002c30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	4a3f      	ldr	r2, [pc, #252]	; (8002d34 <MX_GPIO_Init+0x1b8>)
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f001 fe27 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	4a3d      	ldr	r2, [pc, #244]	; (8002d38 <MX_GPIO_Init+0x1bc>)
 8002c42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	193a      	adds	r2, r7, r4
 8002c52:	2390      	movs	r3, #144	; 0x90
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	0011      	movs	r1, r2
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f001 fe17 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_INT_Pin;
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	2208      	movs	r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c64:	193b      	adds	r3, r7, r4
 8002c66:	2284      	movs	r2, #132	; 0x84
 8002c68:	0392      	lsls	r2, r2, #14
 8002c6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	2201      	movs	r2, #1
 8002c70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_INT_GPIO_Port, &GPIO_InitStruct);
 8002c72:	193a      	adds	r2, r7, r4
 8002c74:	2390      	movs	r3, #144	; 0x90
 8002c76:	05db      	lsls	r3, r3, #23
 8002c78:	0011      	movs	r1, r2
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f001 fe06 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|RS485_TXEN_Pin;
 8002c80:	0021      	movs	r1, r4
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	2288      	movs	r2, #136	; 0x88
 8002c86:	0052      	lsls	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8a:	000c      	movs	r4, r1
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2201      	movs	r2, #1
 8002c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	193a      	adds	r2, r7, r4
 8002ca0:	2390      	movs	r3, #144	; 0x90
 8002ca2:	05db      	lsls	r3, r3, #23
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f001 fdf0 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2203      	movs	r2, #3
 8002cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <MX_GPIO_Init+0x1b4>)
 8002cc8:	0019      	movs	r1, r3
 8002cca:	0010      	movs	r0, r2
 8002ccc:	f001 fdde 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB10 PB11 PB12
                           PB13 PB14 PB15 PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ADDR0_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <MX_GPIO_Init+0x1c0>)
 8002cd4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|ADDR1_Pin
                          |ADDR2_Pin|CAN250_Pin|MODBUS9600_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	2201      	movs	r2, #1
 8002ce0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <MX_GPIO_Init+0x1b4>)
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	0010      	movs	r0, r2
 8002cea:	f001 fdcf 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_Pin;
 8002cee:	0021      	movs	r1, r4
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2203      	movs	r2, #3
 8002d06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Debug_GPIO_Port, &GPIO_InitStruct);
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <MX_GPIO_Init+0x1b4>)
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	0010      	movs	r0, r2
 8002d10:	f001 fdbc 	bl	800488c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2103      	movs	r1, #3
 8002d18:	2006      	movs	r0, #6
 8002d1a:	f001 fafb 	bl	8004314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002d1e:	2006      	movs	r0, #6
 8002d20:	f001 fb0d 	bl	800433e <HAL_NVIC_EnableIRQ>

}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b00b      	add	sp, #44	; 0x2c
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	48000400 	.word	0x48000400
 8002d34:	48000800 	.word	0x48000800
 8002d38:	00008007 	.word	0x00008007
 8002d3c:	0000fcdc 	.word	0x0000fcdc

08002d40 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <MX_IWDG_Init+0x34>)
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <MX_IWDG_Init+0x38>)
 8002d48:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <MX_IWDG_Init+0x34>)
 8002d4c:	2205      	movs	r2, #5
 8002d4e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <MX_IWDG_Init+0x34>)
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <MX_IWDG_Init+0x3c>)
 8002d54:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <MX_IWDG_Init+0x34>)
 8002d58:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <MX_IWDG_Init+0x3c>)
 8002d5a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <MX_IWDG_Init+0x34>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f001 ff62 	bl	8004c28 <HAL_IWDG_Init>
 8002d64:	1e03      	subs	r3, r0, #0
 8002d66:	d001      	beq.n	8002d6c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8002d68:	f000 f8d2 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	20000434 	.word	0x20000434
 8002d78:	40003000 	.word	0x40003000
 8002d7c:	00000fff 	.word	0x00000fff

08002d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d86:	f000 fae7 	bl	8003358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d8a:	f000 f857 	bl	8002e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d8e:	f7ff fef5 	bl	8002b7c <MX_GPIO_Init>
  MX_CAN_Init();
 8002d92:	f7ff fa55 	bl	8002240 <MX_CAN_Init>
  MX_SPI1_Init();
 8002d96:	f000 f8d5 	bl	8002f44 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002d9a:	f000 f9d7 	bl	800314c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002d9e:	f000 fa6b 	bl	8003278 <MX_USB_PCD_Init>
  MX_IWDG_Init();
 8002da2:	f7ff ffcd 	bl	8002d40 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* Get the slope and offset parameters from Flash memory */
  LoadCalibrationData();
 8002da6:	f007 fa0d 	bl	800a1c4 <LoadCalibrationData>

  /* flash LEDs to show startup */
  for ( int i = 0; i < 5; i++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	e026      	b.n	8002dfe <main+0x7e>
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <main+0xb8>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	2102      	movs	r1, #2
 8002db6:	0018      	movs	r0, r3
 8002db8:	f001 fefd 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002dbc:	2064      	movs	r0, #100	; 0x64
 8002dbe:	f000 fb2f 	bl	8003420 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <main+0xb8>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f001 fef4 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002dce:	2064      	movs	r0, #100	; 0x64
 8002dd0:	f000 fb26 	bl	8003420 <HAL_Delay>
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <main+0xb8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2102      	movs	r1, #2
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f001 feeb 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002de0:	2064      	movs	r0, #100	; 0x64
 8002de2:	f000 fb1d 	bl	8003420 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <main+0xb8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	2101      	movs	r1, #1
 8002dec:	0018      	movs	r0, r3
 8002dee:	f001 fee2 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002df2:	2064      	movs	r0, #100	; 0x64
 8002df4:	f000 fb14 	bl	8003420 <HAL_Delay>
  for ( int i = 0; i < 5; i++) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	ddd5      	ble.n	8002db0 <main+0x30>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002e04:	f007 fc10 	bl	800a628 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002e08:	f7ff fb2c 	bl	8002464 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002e0c:	f007 fc38 	bl	800a680 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <main+0xb8>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	2101      	movs	r1, #1
 8002e16:	0018      	movs	r0, r3
 8002e18:	f001 fecd 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8002e1c:	20c8      	movs	r0, #200	; 0xc8
 8002e1e:	f000 faff 	bl	8003420 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <main+0xb8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	2101      	movs	r1, #1
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f001 fec4 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002e2e:	2064      	movs	r0, #100	; 0x64
 8002e30:	f000 faf6 	bl	8003420 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002e34:	e7ec      	b.n	8002e10 <main+0x90>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	48000400 	.word	0x48000400

08002e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b099      	sub	sp, #100	; 0x64
 8002e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e42:	242c      	movs	r4, #44	; 0x2c
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	0018      	movs	r0, r3
 8002e48:	2334      	movs	r3, #52	; 0x34
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f00a fe19 	bl	800da84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e52:	231c      	movs	r3, #28
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	0018      	movs	r0, r3
 8002e58:	2310      	movs	r3, #16
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	f00a fe11 	bl	800da84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e62:	003b      	movs	r3, r7
 8002e64:	0018      	movs	r0, r3
 8002e66:	231c      	movs	r3, #28
 8002e68:	001a      	movs	r2, r3
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f00a fe0a 	bl	800da84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8002e70:	0021      	movs	r1, r4
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2229      	movs	r2, #41	; 0x29
 8002e76:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2201      	movs	r2, #1
 8002e82:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	2201      	movs	r2, #1
 8002e88:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	0252      	lsls	r2, r2, #9
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	02d2      	lsls	r2, r2, #11
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f002 f849 	bl	8004f40 <HAL_RCC_OscConfig>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d001      	beq.n	8002eb6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002eb2:	f000 f82d 	bl	8002f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eb6:	211c      	movs	r1, #28
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	2207      	movs	r2, #7
 8002ebc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f002 fbb9 	bl	800564c <HAL_RCC_ClockConfig>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d001      	beq.n	8002ee2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002ede:	f000 f817 	bl	8002f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002ee2:	003b      	movs	r3, r7
 8002ee4:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <SystemClock_Config+0xd0>)
 8002ee6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ee8:	003b      	movs	r3, r7
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002eee:	003b      	movs	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef4:	003b      	movs	r3, r7
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f002 fd16 	bl	8005928 <HAL_RCCEx_PeriphCLKConfig>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d001      	beq.n	8002f04 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f00:	f000 f806 	bl	8002f10 <Error_Handler>
  }
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b019      	add	sp, #100	; 0x64
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	00020001 	.word	0x00020001

08002f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f14:	b672      	cpsid	i
}
 8002f16:	46c0      	nop			; (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  /* flash thee RED LED to show we hit a problem. The watchdog will reset us eventually. */
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <Error_Handler+0x30>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f001 fe49 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8002f24:	2032      	movs	r0, #50	; 0x32
 8002f26:	f000 fa7b 	bl	8003420 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <Error_Handler+0x30>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2101      	movs	r1, #1
 8002f30:	0018      	movs	r0, r3
 8002f32:	f001 fe40 	bl	8004bb6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002f36:	2064      	movs	r0, #100	; 0x64
 8002f38:	f000 fa72 	bl	8003420 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002f3c:	e7ec      	b.n	8002f18 <Error_Handler+0x8>
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	48000400 	.word	0x48000400

08002f44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <MX_SPI1_Init+0x78>)
 8002f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f50:	2282      	movs	r2, #130	; 0x82
 8002f52:	0052      	lsls	r2, r2, #1
 8002f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f5e:	22e0      	movs	r2, #224	; 0xe0
 8002f60:	00d2      	lsls	r2, r2, #3
 8002f62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	0092      	lsls	r2, r2, #2
 8002f76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f7a:	2228      	movs	r2, #40	; 0x28
 8002f7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f92:	2207      	movs	r2, #7
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <MX_SPI1_Init+0x74>)
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f002 fdbd 	bl	8005b24 <HAL_SPI_Init>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fae:	f7ff ffaf 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200005d4 	.word	0x200005d4
 8002fbc:	40013000 	.word	0x40013000

08002fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b08b      	sub	sp, #44	; 0x2c
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	2414      	movs	r4, #20
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	0018      	movs	r0, r3
 8002fce:	2314      	movs	r3, #20
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	f00a fd56 	bl	800da84 <memset>
  if(spiHandle->Instance==SPI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_SPI_MspInit+0x90>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d132      	bne.n	8003048 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_SPI_MspInit+0x94>)
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_SPI_MspInit+0x94>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	0149      	lsls	r1, r1, #5
 8002fec:	430a      	orrs	r2, r1
 8002fee:	619a      	str	r2, [r3, #24]
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_SPI_MspInit+0x94>)
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	015b      	lsls	r3, r3, #5
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_SPI_MspInit+0x94>)
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_SPI_MspInit+0x94>)
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	0289      	lsls	r1, r1, #10
 8003008:	430a      	orrs	r2, r1
 800300a:	615a      	str	r2, [r3, #20]
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_SPI_MspInit+0x94>)
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800301a:	0021      	movs	r1, r4
 800301c:	187b      	adds	r3, r7, r1
 800301e:	22e0      	movs	r2, #224	; 0xe0
 8003020:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	187b      	adds	r3, r7, r1
 8003024:	2202      	movs	r2, #2
 8003026:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	187b      	adds	r3, r7, r1
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800302e:	187b      	adds	r3, r7, r1
 8003030:	2203      	movs	r2, #3
 8003032:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003034:	187b      	adds	r3, r7, r1
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303a:	187a      	adds	r2, r7, r1
 800303c:	2390      	movs	r3, #144	; 0x90
 800303e:	05db      	lsls	r3, r3, #23
 8003040:	0011      	movs	r1, r2
 8003042:	0018      	movs	r0, r3
 8003044:	f001 fc22 	bl	800488c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b00b      	add	sp, #44	; 0x2c
 800304e:	bd90      	pop	{r4, r7, pc}
 8003050:	40013000 	.word	0x40013000
 8003054:	40021000 	.word	0x40021000

08003058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_MspInit+0x50>)
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_MspInit+0x50>)
 8003064:	2101      	movs	r1, #1
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_MspInit+0x50>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2201      	movs	r2, #1
 8003070:	4013      	ands	r3, r2
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_MspInit+0x50>)
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_MspInit+0x50>)
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0549      	lsls	r1, r1, #21
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_MspInit+0x50>)
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	055b      	lsls	r3, r3, #21
 800308c:	4013      	ands	r3, r2
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003092:	2302      	movs	r3, #2
 8003094:	425b      	negs	r3, r3
 8003096:	2200      	movs	r2, #0
 8003098:	2103      	movs	r1, #3
 800309a:	0018      	movs	r0, r3
 800309c:	f001 f93a 	bl	8004314 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000

080030ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <NMI_Handler+0x4>
	...

080030b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  while (1)
	  {
		  /* flash thee RED LED to show we hit a problem. The watchdog will reset us eventually. */
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HardFault_Handler+0x2c>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	2101      	movs	r1, #1
 80030be:	0018      	movs	r0, r3
 80030c0:	f001 fd79 	bl	8004bb6 <HAL_GPIO_WritePin>
		  HAL_Delay(50);
 80030c4:	2032      	movs	r0, #50	; 0x32
 80030c6:	f000 f9ab 	bl	8003420 <HAL_Delay>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HardFault_Handler+0x2c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	2101      	movs	r1, #1
 80030d0:	0018      	movs	r0, r3
 80030d2:	f001 fd70 	bl	8004bb6 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80030d6:	2064      	movs	r0, #100	; 0x64
 80030d8:	f000 f9a2 	bl	8003420 <HAL_Delay>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80030dc:	e7ec      	b.n	80030b8 <HardFault_Handler+0x4>
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	48000400 	.word	0x48000400

080030e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e8:	f000 f97e 	bl	80033e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80030ec:	f009 fa10 	bl	800c510 <xTaskGetSchedulerState>
 80030f0:	0003      	movs	r3, r0
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d001      	beq.n	80030fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80030f6:	f00a fa27 	bl	800d548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC_INT_Pin);
 8003104:	2008      	movs	r0, #8
 8003106:	f001 fd73 	bl	8004bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <USART1_IRQHandler+0x14>)
 8003116:	0018      	movs	r0, r3
 8003118:	f003 fc58 	bl	80069cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000638 	.word	0x20000638

08003128 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <CEC_CAN_IRQHandler+0x14>)
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fe2f 	bl	8003d92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	20000090 	.word	0x20000090

08003140 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	uint32_t BAUDRATE = 19200;
 8003152:	2396      	movs	r3, #150	; 0x96
 8003154:	01db      	lsls	r3, r3, #7
 8003156:	607b      	str	r3, [r7, #4]
	if (!HAL_GPIO_ReadPin(MODBUS9600_GPIO_Port, MODBUS9600_Pin)) {
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <MX_USART1_UART_Init+0x74>)
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	0018      	movs	r0, r3
 800315e:	f001 fd0d 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003162:	1e03      	subs	r3, r0, #0
 8003164:	d102      	bne.n	800316c <MX_USART1_UART_Init+0x20>
		BAUDRATE = 9600;
 8003166:	2396      	movs	r3, #150	; 0x96
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 800316e:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <MX_USART1_UART_Init+0x7c>)
 8003170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = BAUDRATE;
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 800318c:	220c      	movs	r2, #12
 800318e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 8003198:	2200      	movs	r2, #0
 800319a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 800319e:	2200      	movs	r2, #0
 80031a0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_USART1_UART_Init+0x78>)
 80031aa:	0018      	movs	r0, r3
 80031ac:	f003 fa2a 	bl	8006604 <HAL_UART_Init>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d001      	beq.n	80031b8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80031b4:	f7ff feac 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	48000400 	.word	0x48000400
 80031c4:	20000638 	.word	0x20000638
 80031c8:	40013800 	.word	0x40013800

080031cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b08b      	sub	sp, #44	; 0x2c
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	2414      	movs	r4, #20
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	0018      	movs	r0, r3
 80031da:	2314      	movs	r3, #20
 80031dc:	001a      	movs	r2, r3
 80031de:	2100      	movs	r1, #0
 80031e0:	f00a fc50 	bl	800da84 <memset>
  if(uartHandle->Instance==USART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a21      	ldr	r2, [pc, #132]	; (8003270 <HAL_UART_MspInit+0xa4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d13b      	bne.n	8003266 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_UART_MspInit+0xa8>)
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_UART_MspInit+0xa8>)
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	01c9      	lsls	r1, r1, #7
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_UART_MspInit+0xa8>)
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	01db      	lsls	r3, r3, #7
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <HAL_UART_MspInit+0xa8>)
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_UART_MspInit+0xa8>)
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	0289      	lsls	r1, r1, #10
 8003214:	430a      	orrs	r2, r1
 8003216:	615a      	str	r2, [r3, #20]
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_UART_MspInit+0xa8>)
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	029b      	lsls	r3, r3, #10
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8003226:	193b      	adds	r3, r7, r4
 8003228:	22c0      	movs	r2, #192	; 0xc0
 800322a:	00d2      	lsls	r2, r2, #3
 800322c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	0021      	movs	r1, r4
 8003230:	187b      	adds	r3, r7, r1
 8003232:	2202      	movs	r2, #2
 8003234:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800323c:	187b      	adds	r3, r7, r1
 800323e:	2203      	movs	r2, #3
 8003240:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2201      	movs	r2, #1
 8003246:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	187a      	adds	r2, r7, r1
 800324a:	2390      	movs	r3, #144	; 0x90
 800324c:	05db      	lsls	r3, r3, #23
 800324e:	0011      	movs	r1, r2
 8003250:	0018      	movs	r0, r3
 8003252:	f001 fb1b 	bl	800488c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2103      	movs	r1, #3
 800325a:	201b      	movs	r0, #27
 800325c:	f001 f85a 	bl	8004314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003260:	201b      	movs	r0, #27
 8003262:	f001 f86c 	bl	800433e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b00b      	add	sp, #44	; 0x2c
 800326c:	bd90      	pop	{r4, r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	40013800 	.word	0x40013800
 8003274:	40021000 	.word	0x40021000

08003278 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <MX_USB_PCD_Init+0x44>)
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <MX_USB_PCD_Init+0x48>)
 8003280:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <MX_USB_PCD_Init+0x44>)
 8003284:	2208      	movs	r2, #8
 8003286:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <MX_USB_PCD_Init+0x44>)
 800328a:	2202      	movs	r2, #2
 800328c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <MX_USB_PCD_Init+0x44>)
 8003290:	2202      	movs	r2, #2
 8003292:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <MX_USB_PCD_Init+0x44>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <MX_USB_PCD_Init+0x44>)
 800329c:	2200      	movs	r2, #0
 800329e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MX_USB_PCD_Init+0x44>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <MX_USB_PCD_Init+0x44>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f001 fd1f 	bl	8004cec <HAL_PCD_Init>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d001      	beq.n	80032b6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80032b2:	f7ff fe2d 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200006c0 	.word	0x200006c0
 80032c0:	40005c00 	.word	0x40005c00

080032c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_PCD_MspInit+0x38>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d10d      	bne.n	80032f2 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_PCD_MspInit+0x3c>)
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_PCD_MspInit+0x3c>)
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	0409      	lsls	r1, r1, #16
 80032e0:	430a      	orrs	r2, r1
 80032e2:	61da      	str	r2, [r3, #28]
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_PCD_MspInit+0x3c>)
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b004      	add	sp, #16
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	40005c00 	.word	0x40005c00
 8003300:	40021000 	.word	0x40021000

08003304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003304:	480d      	ldr	r0, [pc, #52]	; (800333c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003306:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003308:	f7ff ff1a 	bl	8003140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800330c:	480c      	ldr	r0, [pc, #48]	; (8003340 <LoopForever+0x6>)
  ldr r1, =_edata
 800330e:	490d      	ldr	r1, [pc, #52]	; (8003344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <LoopForever+0xe>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003314:	e002      	b.n	800331c <LoopCopyDataInit>

08003316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800331a:	3304      	adds	r3, #4

0800331c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800331c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800331e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003320:	d3f9      	bcc.n	8003316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003324:	4c0a      	ldr	r4, [pc, #40]	; (8003350 <LoopForever+0x16>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003328:	e001      	b.n	800332e <LoopFillZerobss>

0800332a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800332a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800332c:	3204      	adds	r2, #4

0800332e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800332e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003330:	d3fb      	bcc.n	800332a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003332:	f00a fc0d 	bl	800db50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003336:	f7ff fd23 	bl	8002d80 <main>

0800333a <LoopForever>:

LoopForever:
    b LoopForever
 800333a:	e7fe      	b.n	800333a <LoopForever>
  ldr   r0, =_estack
 800333c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003344:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003348:	0800df9c 	.word	0x0800df9c
  ldr r2, =_sbss
 800334c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003350:	20002518 	.word	0x20002518

08003354 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003354:	e7fe      	b.n	8003354 <ADC1_COMP_IRQHandler>
	...

08003358 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <HAL_Init+0x24>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_Init+0x24>)
 8003362:	2110      	movs	r1, #16
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003368:	2003      	movs	r0, #3
 800336a:	f000 f809 	bl	8003380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800336e:	f7ff fe73 	bl	8003058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	40022000 	.word	0x40022000

08003380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_InitTick+0x5c>)
 800338a:	681c      	ldr	r4, [r3, #0]
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_InitTick+0x60>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	0019      	movs	r1, r3
 8003392:	23fa      	movs	r3, #250	; 0xfa
 8003394:	0098      	lsls	r0, r3, #2
 8003396:	f7fc feb7 	bl	8000108 <__udivsi3>
 800339a:	0003      	movs	r3, r0
 800339c:	0019      	movs	r1, r3
 800339e:	0020      	movs	r0, r4
 80033a0:	f7fc feb2 	bl	8000108 <__udivsi3>
 80033a4:	0003      	movs	r3, r0
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 ffd9 	bl	800435e <HAL_SYSTICK_Config>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00f      	b.n	80033d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d80b      	bhi.n	80033d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	2301      	movs	r3, #1
 80033be:	425b      	negs	r3, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 ffa6 	bl	8004314 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_InitTick+0x64>)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b003      	add	sp, #12
 80033da:	bd90      	pop	{r4, r7, pc}
 80033dc:	20000004 	.word	0x20000004
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_IncTick+0x1c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	001a      	movs	r2, r3
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_IncTick+0x20>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	18d2      	adds	r2, r2, r3
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_IncTick+0x20>)
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	2000000c 	.word	0x2000000c
 8003408:	200009b4 	.word	0x200009b4

0800340c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  return uwTick;
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <HAL_GetTick+0x10>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	200009b4 	.word	0x200009b4

08003420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003428:	f7ff fff0 	bl	800340c <HAL_GetTick>
 800342c:	0003      	movs	r3, r0
 800342e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3301      	adds	r3, #1
 8003438:	d005      	beq.n	8003446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_Delay+0x44>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	001a      	movs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	189b      	adds	r3, r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	f7ff ffe0 	bl	800340c <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	d8f7      	bhi.n	8003448 <HAL_Delay+0x28>
  {
  }
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b004      	add	sp, #16
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	2000000c 	.word	0x2000000c

08003468 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0f0      	b.n	800365c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	5c9b      	ldrb	r3, [r3, r2]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f7fe ff1f 	bl	80022cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800349e:	f7ff ffb5 	bl	800340c <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034a6:	e013      	b.n	80034d0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034a8:	f7ff ffb0 	bl	800340c <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b0a      	cmp	r3, #10
 80034b4:	d90c      	bls.n	80034d0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	0292      	lsls	r2, r2, #10
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	2105      	movs	r1, #5
 80034ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0c5      	b.n	800365c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4013      	ands	r3, r2
 80034da:	d0e5      	beq.n	80034a8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2102      	movs	r1, #2
 80034e8:	438a      	bics	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ec:	f7ff ff8e 	bl	800340c <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034f4:	e013      	b.n	800351e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f6:	f7ff ff89 	bl	800340c <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b0a      	cmp	r3, #10
 8003502:	d90c      	bls.n	800351e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	0292      	lsls	r2, r2, #10
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	2105      	movs	r1, #5
 8003518:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e09e      	b.n	800365c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d1e5      	bne.n	80034f6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	7e1b      	ldrb	r3, [r3, #24]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d108      	bne.n	8003544 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e007      	b.n	8003554 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2180      	movs	r1, #128	; 0x80
 8003550:	438a      	bics	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7e5b      	ldrb	r3, [r3, #25]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d108      	bne.n	800356e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e007      	b.n	800357e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2140      	movs	r1, #64	; 0x40
 800357a:	438a      	bics	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7e9b      	ldrb	r3, [r3, #26]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d108      	bne.n	8003598 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2120      	movs	r1, #32
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e007      	b.n	80035a8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2120      	movs	r1, #32
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7edb      	ldrb	r3, [r3, #27]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2110      	movs	r1, #16
 80035bc:	438a      	bics	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e007      	b.n	80035d2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2110      	movs	r1, #16
 80035ce:	430a      	orrs	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7f1b      	ldrb	r3, [r3, #28]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d108      	bne.n	80035ec <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2108      	movs	r1, #8
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e007      	b.n	80035fc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2108      	movs	r1, #8
 80035f8:	438a      	bics	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7f5b      	ldrb	r3, [r3, #29]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2104      	movs	r1, #4
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e007      	b.n	8003626 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2104      	movs	r1, #4
 8003622:	438a      	bics	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	431a      	orrs	r2, r3
 800363c:	0011      	movs	r1, r2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	1e5a      	subs	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b004      	add	sp, #16
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003674:	2013      	movs	r0, #19
 8003676:	183b      	adds	r3, r7, r0
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	2120      	movs	r1, #32
 800367c:	5c52      	ldrb	r2, [r2, r1]
 800367e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003680:	0002      	movs	r2, r0
 8003682:	18bb      	adds	r3, r7, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d004      	beq.n	8003694 <HAL_CAN_ConfigFilter+0x30>
 800368a:	18bb      	adds	r3, r7, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d000      	beq.n	8003694 <HAL_CAN_ConfigFilter+0x30>
 8003692:	e0cd      	b.n	8003830 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	58d3      	ldr	r3, [r2, r3]
 800369c:	2201      	movs	r2, #1
 800369e:	431a      	orrs	r2, r3
 80036a0:	0011      	movs	r1, r2
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	221f      	movs	r2, #31
 80036b0:	4013      	ands	r3, r2
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	0013      	movs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	2387      	movs	r3, #135	; 0x87
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	58d3      	ldr	r3, [r2, r3]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	43d2      	mvns	r2, r2
 80036c6:	401a      	ands	r2, r3
 80036c8:	0011      	movs	r1, r2
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	2387      	movs	r3, #135	; 0x87
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d129      	bne.n	800372e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	2383      	movs	r3, #131	; 0x83
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	58d3      	ldr	r3, [r2, r3]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	43d2      	mvns	r2, r2
 80036e6:	401a      	ands	r2, r3
 80036e8:	0011      	movs	r1, r2
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	2383      	movs	r3, #131	; 0x83
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003704:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3248      	adds	r2, #72	; 0x48
 800370a:	00d2      	lsls	r2, r2, #3
 800370c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003720:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003722:	6979      	ldr	r1, [r7, #20]
 8003724:	3348      	adds	r3, #72	; 0x48
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	18cb      	adds	r3, r1, r3
 800372a:	3304      	adds	r3, #4
 800372c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d128      	bne.n	8003788 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	2383      	movs	r3, #131	; 0x83
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	58d2      	ldr	r2, [r2, r3]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	431a      	orrs	r2, r3
 8003742:	0011      	movs	r1, r2
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	2383      	movs	r3, #131	; 0x83
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800375e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3248      	adds	r2, #72	; 0x48
 8003764:	00d2      	lsls	r2, r2, #3
 8003766:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800377a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	3348      	adds	r3, #72	; 0x48
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	18cb      	adds	r3, r1, r3
 8003784:	3304      	adds	r3, #4
 8003786:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10c      	bne.n	80037aa <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	2381      	movs	r3, #129	; 0x81
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	58d3      	ldr	r3, [r2, r3]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	43d2      	mvns	r2, r2
 800379c:	401a      	ands	r2, r3
 800379e:	0011      	movs	r1, r2
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	2381      	movs	r3, #129	; 0x81
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	50d1      	str	r1, [r2, r3]
 80037a8:	e00a      	b.n	80037c0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	2381      	movs	r3, #129	; 0x81
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	58d2      	ldr	r2, [r2, r3]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	0011      	movs	r1, r2
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	2381      	movs	r3, #129	; 0x81
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10c      	bne.n	80037e2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	2385      	movs	r3, #133	; 0x85
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	58d3      	ldr	r3, [r2, r3]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	43d2      	mvns	r2, r2
 80037d4:	401a      	ands	r2, r3
 80037d6:	0011      	movs	r1, r2
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	2385      	movs	r3, #133	; 0x85
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	50d1      	str	r1, [r2, r3]
 80037e0:	e00a      	b.n	80037f8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	2385      	movs	r3, #133	; 0x85
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	58d2      	ldr	r2, [r2, r3]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	0011      	movs	r1, r2
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	2385      	movs	r3, #133	; 0x85
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10a      	bne.n	8003816 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	2387      	movs	r3, #135	; 0x87
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	58d2      	ldr	r2, [r2, r3]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	431a      	orrs	r2, r3
 800380c:	0011      	movs	r1, r2
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	2387      	movs	r3, #135	; 0x87
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	58d3      	ldr	r3, [r2, r3]
 800381e:	2201      	movs	r2, #1
 8003820:	4393      	bics	r3, r2
 8003822:	0019      	movs	r1, r3
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e007      	b.n	8003840 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	02d2      	lsls	r2, r2, #11
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
  }
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b006      	add	sp, #24
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	5c9b      	ldrb	r3, [r3, r2]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d12f      	bne.n	80038bc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	2102      	movs	r1, #2
 8003862:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2101      	movs	r1, #1
 8003870:	438a      	bics	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003874:	f7ff fdca 	bl	800340c <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800387c:	e013      	b.n	80038a6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800387e:	f7ff fdc5 	bl	800340c <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b0a      	cmp	r3, #10
 800388a:	d90c      	bls.n	80038a6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	0292      	lsls	r2, r2, #10
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	2105      	movs	r1, #5
 80038a0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e012      	b.n	80038cc <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	4013      	ands	r3, r2
 80038b0:	d1e5      	bne.n	800387e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e007      	b.n	80038cc <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	0312      	lsls	r2, r2, #12
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
  }
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038e2:	201f      	movs	r0, #31
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	2120      	movs	r1, #32
 80038ea:	5c52      	ldrb	r2, [r2, r1]
 80038ec:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d004      	beq.n	8003908 <HAL_CAN_AddTxMessage+0x34>
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d000      	beq.n	8003908 <HAL_CAN_AddTxMessage+0x34>
 8003906:	e0ab      	b.n	8003a60 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	04db      	lsls	r3, r3, #19
 800390e:	4013      	ands	r3, r2
 8003910:	d10a      	bne.n	8003928 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	051b      	lsls	r3, r3, #20
 8003918:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800391a:	d105      	bne.n	8003928 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	055b      	lsls	r3, r3, #21
 8003922:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003924:	d100      	bne.n	8003928 <HAL_CAN_AddTxMessage+0x54>
 8003926:	e092      	b.n	8003a4e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	0e1b      	lsrs	r3, r3, #24
 800392c:	2203      	movs	r2, #3
 800392e:	4013      	ands	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003932:	2201      	movs	r2, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	409a      	lsls	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10c      	bne.n	800395e <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4311      	orrs	r1, r2
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	3218      	adds	r2, #24
 8003958:	0112      	lsls	r2, r2, #4
 800395a:	50d1      	str	r1, [r2, r3]
 800395c:	e00f      	b.n	800397e <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003968:	431a      	orrs	r2, r3
 800396a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003974:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	3218      	adds	r2, #24
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3318      	adds	r3, #24
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	18cb      	adds	r3, r1, r3
 800398e:	3304      	adds	r3, #4
 8003990:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	7d1b      	ldrb	r3, [r3, #20]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d112      	bne.n	80039c0 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3318      	adds	r3, #24
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	3304      	adds	r3, #4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	431a      	orrs	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3318      	adds	r3, #24
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	18cb      	adds	r3, r1, r3
 80039bc:	3304      	adds	r3, #4
 80039be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3307      	adds	r3, #7
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	061a      	lsls	r2, r3, #24
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3306      	adds	r3, #6
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3305      	adds	r3, #5
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	0019      	movs	r1, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	6979      	ldr	r1, [r7, #20]
 80039ec:	23c6      	movs	r3, #198	; 0xc6
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	0109      	lsls	r1, r1, #4
 80039f2:	1841      	adds	r1, r0, r1
 80039f4:	18cb      	adds	r3, r1, r3
 80039f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3303      	adds	r3, #3
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	061a      	lsls	r2, r3, #24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3302      	adds	r3, #2
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	0019      	movs	r1, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	23c4      	movs	r3, #196	; 0xc4
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	0109      	lsls	r1, r1, #4
 8003a28:	1841      	adds	r1, r0, r1
 8003a2a:	18cb      	adds	r3, r1, r3
 8003a2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	3218      	adds	r2, #24
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	58d2      	ldr	r2, [r2, r3]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4311      	orrs	r1, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	3218      	adds	r2, #24
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e010      	b.n	8003a70 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	0392      	lsls	r2, r2, #14
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	02d2      	lsls	r2, r2, #11
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
  }
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b008      	add	sp, #32
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a84:	200b      	movs	r0, #11
 8003a86:	183b      	adds	r3, r7, r0
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	2120      	movs	r1, #32
 8003a8c:	5c52      	ldrb	r2, [r2, r1]
 8003a8e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a90:	0002      	movs	r2, r0
 8003a92:	18bb      	adds	r3, r7, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d003      	beq.n	8003aa2 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8003a9a:	18bb      	adds	r3, r7, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d11d      	bne.n	8003ade <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	04db      	lsls	r3, r3, #19
 8003aac:	4013      	ands	r3, r2
 8003aae:	d002      	beq.n	8003ab6 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	051b      	lsls	r3, r3, #20
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d002      	beq.n	8003aca <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	055b      	lsls	r3, r3, #21
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d002      	beq.n	8003ade <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003af6:	2017      	movs	r0, #23
 8003af8:	183b      	adds	r3, r7, r0
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	2120      	movs	r1, #32
 8003afe:	5c52      	ldrb	r2, [r2, r1]
 8003b00:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b02:	0002      	movs	r2, r0
 8003b04:	18bb      	adds	r3, r7, r2
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d004      	beq.n	8003b16 <HAL_CAN_GetRxMessage+0x2e>
 8003b0c:	18bb      	adds	r3, r7, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d000      	beq.n	8003b16 <HAL_CAN_GetRxMessage+0x2e>
 8003b14:	e107      	b.n	8003d26 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10e      	bne.n	8003b3a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	d117      	bne.n	8003b58 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	0392      	lsls	r2, r2, #14
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0fd      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2203      	movs	r2, #3
 8003b42:	4013      	ands	r3, r2
 8003b44:	d108      	bne.n	8003b58 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	0392      	lsls	r2, r2, #14
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0ee      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	321b      	adds	r2, #27
 8003b60:	0112      	lsls	r2, r2, #4
 8003b62:	58d3      	ldr	r3, [r2, r3]
 8003b64:	2204      	movs	r2, #4
 8003b66:	401a      	ands	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	321b      	adds	r2, #27
 8003b7c:	0112      	lsls	r2, r2, #4
 8003b7e:	58d3      	ldr	r3, [r2, r3]
 8003b80:	0d5b      	lsrs	r3, r3, #21
 8003b82:	055b      	lsls	r3, r3, #21
 8003b84:	0d5a      	lsrs	r2, r3, #21
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00a      	b.n	8003ba2 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	321b      	adds	r2, #27
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	58d3      	ldr	r3, [r2, r3]
 8003b98:	08db      	lsrs	r3, r3, #3
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	321b      	adds	r2, #27
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	58d3      	ldr	r3, [r2, r3]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	331b      	adds	r3, #27
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	18d3      	adds	r3, r2, r3
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2208      	movs	r2, #8
 8003bd0:	611a      	str	r2, [r3, #16]
 8003bd2:	e00b      	b.n	8003bec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	331b      	adds	r3, #27
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	18d3      	adds	r3, r2, r3
 8003be0:	3304      	adds	r3, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	220f      	movs	r2, #15
 8003be6:	401a      	ands	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	331b      	adds	r3, #27
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	18d3      	adds	r3, r2, r3
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	22ff      	movs	r2, #255	; 0xff
 8003c00:	401a      	ands	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	331b      	adds	r3, #27
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	18d3      	adds	r3, r2, r3
 8003c12:	3304      	adds	r3, #4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	0c1a      	lsrs	r2, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	23dc      	movs	r3, #220	; 0xdc
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	188a      	adds	r2, r1, r2
 8003c2e:	18d3      	adds	r3, r2, r3
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	23dc      	movs	r3, #220	; 0xdc
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	0112      	lsls	r2, r2, #4
 8003c44:	188a      	adds	r2, r1, r2
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0a1a      	lsrs	r2, r3, #8
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	23dc      	movs	r3, #220	; 0xdc
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	188a      	adds	r2, r1, r2
 8003c62:	18d3      	adds	r3, r2, r3
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	0c1a      	lsrs	r2, r3, #16
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6819      	ldr	r1, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	23dc      	movs	r3, #220	; 0xdc
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	188a      	adds	r2, r1, r2
 8003c7e:	18d3      	adds	r3, r2, r3
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	0e1a      	lsrs	r2, r3, #24
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	3303      	adds	r3, #3
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	23de      	movs	r3, #222	; 0xde
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	188a      	adds	r2, r1, r2
 8003c9a:	18d3      	adds	r3, r2, r3
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	23de      	movs	r3, #222	; 0xde
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	188a      	adds	r2, r1, r2
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0a1a      	lsrs	r2, r3, #8
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3305      	adds	r3, #5
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	23de      	movs	r3, #222	; 0xde
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	0112      	lsls	r2, r2, #4
 8003cce:	188a      	adds	r2, r1, r2
 8003cd0:	18d3      	adds	r3, r2, r3
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0c1a      	lsrs	r2, r3, #16
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3306      	adds	r3, #6
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	23de      	movs	r3, #222	; 0xde
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	0112      	lsls	r2, r2, #4
 8003cea:	188a      	adds	r2, r1, r2
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	0e1a      	lsrs	r2, r3, #24
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	3307      	adds	r3, #7
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d108      	bne.n	8003d12 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2120      	movs	r1, #32
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	e007      	b.n	8003d22 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e007      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	02d2      	lsls	r2, r2, #11
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
  }
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b006      	add	sp, #24
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d48:	200f      	movs	r0, #15
 8003d4a:	183b      	adds	r3, r7, r0
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	2120      	movs	r1, #32
 8003d50:	5c52      	ldrb	r2, [r2, r1]
 8003d52:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d54:	0002      	movs	r2, r0
 8003d56:	18bb      	adds	r3, r7, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d003      	beq.n	8003d66 <HAL_CAN_ActivateNotification+0x28>
 8003d5e:	18bb      	adds	r3, r7, r2
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d109      	bne.n	8003d7a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6959      	ldr	r1, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e007      	b.n	8003d8a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	02d2      	lsls	r2, r2, #11
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
  }
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b08a      	sub	sp, #40	; 0x28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d100      	bne.n	8003dd8 <HAL_CAN_IRQHandler+0x46>
 8003dd6:	e084      	b.n	8003ee2 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d024      	beq.n	8003e2a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2201      	movs	r2, #1
 8003de6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2202      	movs	r2, #2
 8003dec:	4013      	ands	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 f981 	bl	80040fa <HAL_CAN_TxMailbox0CompleteCallback>
 8003df8:	e017      	b.n	8003e2a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d005      	beq.n	8003e0e <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	0112      	lsls	r2, r2, #4
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0c:	e00d      	b.n	8003e2a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2208      	movs	r2, #8
 8003e12:	4013      	ands	r3, r2
 8003e14:	d005      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	0152      	lsls	r2, r2, #5
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	e003      	b.n	8003e2a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 f980 	bl	800412a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4013      	ands	r3, r2
 8003e32:	d028      	beq.n	8003e86 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0052      	lsls	r2, r2, #1
 8003e3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4013      	ands	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 f95d 	bl	800410a <HAL_CAN_TxMailbox1CompleteCallback>
 8003e50:	e019      	b.n	8003e86 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d005      	beq.n	8003e68 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	0192      	lsls	r2, r2, #6
 8003e62:	4313      	orrs	r3, r2
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	e00e      	b.n	8003e86 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d005      	beq.n	8003e7e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	01d2      	lsls	r2, r2, #7
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	e003      	b.n	8003e86 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f95a 	bl	800413a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	025b      	lsls	r3, r3, #9
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d028      	beq.n	8003ee2 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	0252      	lsls	r2, r2, #9
 8003e98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 f937 	bl	800411a <HAL_CAN_TxMailbox2CompleteCallback>
 8003eac:	e019      	b.n	8003ee2 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	02db      	lsls	r3, r3, #11
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d005      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	2280      	movs	r2, #128	; 0x80
 8003ebc:	0212      	lsls	r2, r2, #8
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e00e      	b.n	8003ee2 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d005      	beq.n	8003eda <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	0252      	lsls	r2, r2, #9
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed8:	e003      	b.n	8003ee2 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 f934 	bl	800414a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d00c      	beq.n	8003f04 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2210      	movs	r2, #16
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d008      	beq.n	8003f04 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2204      	movs	r2, #4
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2208      	movs	r2, #8
 8003f10:	4013      	ands	r3, r2
 8003f12:	d007      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 f91b 	bl	800415a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2202      	movs	r2, #2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2203      	movs	r2, #3
 8003f34:	4013      	ands	r3, r2
 8003f36:	d003      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7fe fa1c 	bl	8002378 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	4013      	ands	r3, r2
 8003f46:	d00c      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d008      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	00d2      	lsls	r2, r2, #3
 8003f56:	4313      	orrs	r3, r2
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2210      	movs	r2, #16
 8003f60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2220      	movs	r2, #32
 8003f66:	4013      	ands	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d007      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2208      	movs	r2, #8
 8003f78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 f8fc 	bl	800417a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2210      	movs	r2, #16
 8003f86:	4013      	ands	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2203      	movs	r2, #3
 8003f92:	4013      	ands	r3, r2
 8003f94:	d003      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 f8e6 	bl	800416a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2210      	movs	r2, #16
 8003fac:	4013      	ands	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f000 f8e5 	bl	800418a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 f8dc 	bl	800419a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d100      	bne.n	8003fee <HAL_CAN_IRQHandler+0x25c>
 8003fec:	e074      	b.n	80040d8 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d100      	bne.n	8003ff8 <HAL_CAN_IRQHandler+0x266>
 8003ff6:	e06b      	b.n	80040d0 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ff8:	6a3a      	ldr	r2, [r7, #32]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4013      	ands	r3, r2
 8004000:	d007      	beq.n	8004012 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004008:	d003      	beq.n	8004012 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	2201      	movs	r2, #1
 800400e:	4313      	orrs	r3, r2
 8004010:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004012:	6a3a      	ldr	r2, [r7, #32]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4013      	ands	r3, r2
 800401a:	d007      	beq.n	800402c <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2202      	movs	r2, #2
 8004020:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004022:	d003      	beq.n	800402c <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	2202      	movs	r2, #2
 8004028:	4313      	orrs	r3, r2
 800402a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4013      	ands	r3, r2
 8004034:	d007      	beq.n	8004046 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2204      	movs	r2, #4
 800403a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800403c:	d003      	beq.n	8004046 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2204      	movs	r2, #4
 8004042:	4313      	orrs	r3, r2
 8004044:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004046:	6a3a      	ldr	r2, [r7, #32]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	4013      	ands	r3, r2
 800404e:	d03f      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2270      	movs	r2, #112	; 0x70
 8004054:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004056:	d03b      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2270      	movs	r2, #112	; 0x70
 800405c:	4013      	ands	r3, r2
 800405e:	2b60      	cmp	r3, #96	; 0x60
 8004060:	d027      	beq.n	80040b2 <HAL_CAN_IRQHandler+0x320>
 8004062:	d82c      	bhi.n	80040be <HAL_CAN_IRQHandler+0x32c>
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d01f      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x316>
 8004068:	d829      	bhi.n	80040be <HAL_CAN_IRQHandler+0x32c>
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d017      	beq.n	800409e <HAL_CAN_IRQHandler+0x30c>
 800406e:	d826      	bhi.n	80040be <HAL_CAN_IRQHandler+0x32c>
 8004070:	2b30      	cmp	r3, #48	; 0x30
 8004072:	d00f      	beq.n	8004094 <HAL_CAN_IRQHandler+0x302>
 8004074:	d823      	bhi.n	80040be <HAL_CAN_IRQHandler+0x32c>
 8004076:	2b10      	cmp	r3, #16
 8004078:	d002      	beq.n	8004080 <HAL_CAN_IRQHandler+0x2ee>
 800407a:	2b20      	cmp	r3, #32
 800407c:	d005      	beq.n	800408a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800407e:	e01e      	b.n	80040be <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	2208      	movs	r2, #8
 8004084:	4313      	orrs	r3, r2
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004088:	e01a      	b.n	80040c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	2210      	movs	r2, #16
 800408e:	4313      	orrs	r3, r2
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004092:	e015      	b.n	80040c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	2220      	movs	r2, #32
 8004098:	4313      	orrs	r3, r2
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800409c:	e010      	b.n	80040c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	2240      	movs	r2, #64	; 0x40
 80040a2:	4313      	orrs	r3, r2
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a6:	e00b      	b.n	80040c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	4313      	orrs	r3, r2
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b0:	e006      	b.n	80040c0 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	2280      	movs	r2, #128	; 0x80
 80040b6:	0052      	lsls	r2, r2, #1
 80040b8:	4313      	orrs	r3, r2
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040bc:	e000      	b.n	80040c0 <HAL_CAN_IRQHandler+0x32e>
            break;
 80040be:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2170      	movs	r1, #112	; 0x70
 80040cc:	438a      	bics	r2, r1
 80040ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2204      	movs	r2, #4
 80040d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 f85c 	bl	80041aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b00a      	add	sp, #40	; 0x28
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	b002      	add	sp, #8
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	b002      	add	sp, #8
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b002      	add	sp, #8
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b002      	add	sp, #8
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b002      	add	sp, #8
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b002      	add	sp, #8
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b002      	add	sp, #8
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b002      	add	sp, #8
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b002      	add	sp, #8
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	0002      	movs	r2, r0
 80041c4:	1dfb      	adds	r3, r7, #7
 80041c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b7f      	cmp	r3, #127	; 0x7f
 80041ce:	d809      	bhi.n	80041e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d0:	1dfb      	adds	r3, r7, #7
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	001a      	movs	r2, r3
 80041d6:	231f      	movs	r3, #31
 80041d8:	401a      	ands	r2, r3
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <__NVIC_EnableIRQ+0x30>)
 80041dc:	2101      	movs	r1, #1
 80041de:	4091      	lsls	r1, r2
 80041e0:	000a      	movs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]
  }
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	e000e100 	.word	0xe000e100

080041f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	0002      	movs	r2, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041fe:	1dfb      	adds	r3, r7, #7
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b7f      	cmp	r3, #127	; 0x7f
 8004204:	d828      	bhi.n	8004258 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004206:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <__NVIC_SetPriority+0xd4>)
 8004208:	1dfb      	adds	r3, r7, #7
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b25b      	sxtb	r3, r3
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	33c0      	adds	r3, #192	; 0xc0
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	589b      	ldr	r3, [r3, r2]
 8004216:	1dfa      	adds	r2, r7, #7
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	0011      	movs	r1, r2
 800421c:	2203      	movs	r2, #3
 800421e:	400a      	ands	r2, r1
 8004220:	00d2      	lsls	r2, r2, #3
 8004222:	21ff      	movs	r1, #255	; 0xff
 8004224:	4091      	lsls	r1, r2
 8004226:	000a      	movs	r2, r1
 8004228:	43d2      	mvns	r2, r2
 800422a:	401a      	ands	r2, r3
 800422c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	401a      	ands	r2, r3
 8004236:	1dfb      	adds	r3, r7, #7
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	0018      	movs	r0, r3
 800423c:	2303      	movs	r3, #3
 800423e:	4003      	ands	r3, r0
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004244:	481f      	ldr	r0, [pc, #124]	; (80042c4 <__NVIC_SetPriority+0xd4>)
 8004246:	1dfb      	adds	r3, r7, #7
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b25b      	sxtb	r3, r3
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	430a      	orrs	r2, r1
 8004250:	33c0      	adds	r3, #192	; 0xc0
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004256:	e031      	b.n	80042bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <__NVIC_SetPriority+0xd8>)
 800425a:	1dfb      	adds	r3, r7, #7
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	0019      	movs	r1, r3
 8004260:	230f      	movs	r3, #15
 8004262:	400b      	ands	r3, r1
 8004264:	3b08      	subs	r3, #8
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3306      	adds	r3, #6
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	3304      	adds	r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	1dfa      	adds	r2, r7, #7
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	0011      	movs	r1, r2
 8004278:	2203      	movs	r2, #3
 800427a:	400a      	ands	r2, r1
 800427c:	00d2      	lsls	r2, r2, #3
 800427e:	21ff      	movs	r1, #255	; 0xff
 8004280:	4091      	lsls	r1, r2
 8004282:	000a      	movs	r2, r1
 8004284:	43d2      	mvns	r2, r2
 8004286:	401a      	ands	r2, r3
 8004288:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	22ff      	movs	r2, #255	; 0xff
 8004290:	401a      	ands	r2, r3
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	0018      	movs	r0, r3
 8004298:	2303      	movs	r3, #3
 800429a:	4003      	ands	r3, r0
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042a0:	4809      	ldr	r0, [pc, #36]	; (80042c8 <__NVIC_SetPriority+0xd8>)
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	001c      	movs	r4, r3
 80042a8:	230f      	movs	r3, #15
 80042aa:	4023      	ands	r3, r4
 80042ac:	3b08      	subs	r3, #8
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	430a      	orrs	r2, r1
 80042b2:	3306      	adds	r3, #6
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	18c3      	adds	r3, r0, r3
 80042b8:	3304      	adds	r3, #4
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b003      	add	sp, #12
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	e000e100 	.word	0xe000e100
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	045b      	lsls	r3, r3, #17
 80042dc:	429a      	cmp	r2, r3
 80042de:	d301      	bcc.n	80042e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042e0:	2301      	movs	r3, #1
 80042e2:	e010      	b.n	8004306 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <SysTick_Config+0x44>)
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	3a01      	subs	r2, #1
 80042ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ec:	2301      	movs	r3, #1
 80042ee:	425b      	negs	r3, r3
 80042f0:	2103      	movs	r1, #3
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff ff7c 	bl	80041f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <SysTick_Config+0x44>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042fe:	4b04      	ldr	r3, [pc, #16]	; (8004310 <SysTick_Config+0x44>)
 8004300:	2207      	movs	r2, #7
 8004302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004304:	2300      	movs	r3, #0
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b002      	add	sp, #8
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	e000e010 	.word	0xe000e010

08004314 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	210f      	movs	r1, #15
 8004320:	187b      	adds	r3, r7, r1
 8004322:	1c02      	adds	r2, r0, #0
 8004324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	187b      	adds	r3, r7, r1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b25b      	sxtb	r3, r3
 800432e:	0011      	movs	r1, r2
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff ff5d 	bl	80041f0 <__NVIC_SetPriority>
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	b004      	add	sp, #16
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	0002      	movs	r2, r0
 8004346:	1dfb      	adds	r3, r7, #7
 8004348:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434a:	1dfb      	adds	r3, r7, #7
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b25b      	sxtb	r3, r3
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff ff33 	bl	80041bc <__NVIC_EnableIRQ>
}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b002      	add	sp, #8
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff ffaf 	bl	80042cc <SysTick_Config>
 800436e:	0003      	movs	r3, r0
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2221      	movs	r2, #33	; 0x21
 8004384:	5c9b      	ldrb	r3, [r3, r2]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d008      	beq.n	800439e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2204      	movs	r2, #4
 8004390:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	2100      	movs	r1, #0
 8004398:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e020      	b.n	80043e0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	210e      	movs	r1, #14
 80043aa:	438a      	bics	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2101      	movs	r1, #1
 80043ba:	438a      	bics	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	2101      	movs	r1, #1
 80043c8:	4091      	lsls	r1, r2
 80043ca:	000a      	movs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2221      	movs	r2, #33	; 0x21
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f0:	210f      	movs	r1, #15
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2221      	movs	r2, #33	; 0x21
 80043fc:	5c9b      	ldrb	r3, [r3, r2]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d006      	beq.n	8004412 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800440a:	187b      	adds	r3, r7, r1
 800440c:	2201      	movs	r2, #1
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e028      	b.n	8004464 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	210e      	movs	r1, #14
 800441e:	438a      	bics	r2, r1
 8004420:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	438a      	bics	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	2101      	movs	r1, #1
 800443c:	4091      	lsls	r1, r2
 800443e:	000a      	movs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	2100      	movs	r1, #0
 8004450:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	0010      	movs	r0, r2
 8004462:	4798      	blx	r3
    }
  }
  return status;
 8004464:	230f      	movs	r3, #15
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	781b      	ldrb	r3, [r3, #0]
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b004      	add	sp, #16
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603a      	str	r2, [r7, #0]
 8004480:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004482:	2317      	movs	r3, #23
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800448a:	2316      	movs	r3, #22
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8004492:	2315      	movs	r3, #21
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <HAL_FLASH_Program+0x120>)
 800449c:	7e1b      	ldrb	r3, [r3, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_FLASH_Program+0x32>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e072      	b.n	800458c <HAL_FLASH_Program+0x118>
 80044a6:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_FLASH_Program+0x120>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044ac:	2317      	movs	r3, #23
 80044ae:	18fe      	adds	r6, r7, r3
 80044b0:	4b39      	ldr	r3, [pc, #228]	; (8004598 <HAL_FLASH_Program+0x124>)
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 f8ce 	bl	8004654 <FLASH_WaitForLastOperation>
 80044b8:	0003      	movs	r3, r0
 80044ba:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80044bc:	2317      	movs	r3, #23
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d15c      	bne.n	8004580 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d104      	bne.n	80044d6 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80044cc:	2315      	movs	r3, #21
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2201      	movs	r2, #1
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e00b      	b.n	80044ee <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d104      	bne.n	80044e6 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80044dc:	2315      	movs	r3, #21
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2202      	movs	r2, #2
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e003      	b.n	80044ee <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80044e6:	2315      	movs	r3, #21
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	2204      	movs	r2, #4
 80044ec:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80044ee:	2316      	movs	r3, #22
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e039      	b.n	800456c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80044f8:	2116      	movs	r1, #22
 80044fa:	187b      	adds	r3, r7, r1
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	005a      	lsls	r2, r3, #1
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	18d0      	adds	r0, r2, r3
 8004504:	187b      	adds	r3, r7, r1
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	001a      	movs	r2, r3
 800450c:	3a20      	subs	r2, #32
 800450e:	2a00      	cmp	r2, #0
 8004510:	db03      	blt.n	800451a <HAL_FLASH_Program+0xa6>
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	40d1      	lsrs	r1, r2
 8004516:	000c      	movs	r4, r1
 8004518:	e008      	b.n	800452c <HAL_FLASH_Program+0xb8>
 800451a:	2220      	movs	r2, #32
 800451c:	1ad2      	subs	r2, r2, r3
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4091      	lsls	r1, r2
 8004522:	000a      	movs	r2, r1
 8004524:	6839      	ldr	r1, [r7, #0]
 8004526:	40d9      	lsrs	r1, r3
 8004528:	000c      	movs	r4, r1
 800452a:	4314      	orrs	r4, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	40da      	lsrs	r2, r3
 8004530:	0015      	movs	r5, r2
 8004532:	b2a3      	uxth	r3, r4
 8004534:	0019      	movs	r1, r3
 8004536:	f000 f871 	bl	800461c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800453a:	2317      	movs	r3, #23
 800453c:	18fe      	adds	r6, r7, r3
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <HAL_FLASH_Program+0x124>)
 8004540:	0018      	movs	r0, r3
 8004542:	f000 f887 	bl	8004654 <FLASH_WaitForLastOperation>
 8004546:	0003      	movs	r3, r0
 8004548:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_FLASH_Program+0x128>)
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <HAL_FLASH_Program+0x128>)
 8004550:	2101      	movs	r1, #1
 8004552:	438a      	bics	r2, r1
 8004554:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004556:	2317      	movs	r3, #23
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10e      	bne.n	800457e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8004560:	2116      	movs	r1, #22
 8004562:	187b      	adds	r3, r7, r1
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	187b      	adds	r3, r7, r1
 8004568:	3201      	adds	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	2316      	movs	r3, #22
 800456e:	18fa      	adds	r2, r7, r3
 8004570:	2315      	movs	r3, #21
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d3bd      	bcc.n	80044f8 <HAL_FLASH_Program+0x84>
 800457c:	e000      	b.n	8004580 <HAL_FLASH_Program+0x10c>
      {
        break;
 800457e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <HAL_FLASH_Program+0x120>)
 8004582:	2200      	movs	r2, #0
 8004584:	761a      	strb	r2, [r3, #24]

  return status;
 8004586:	2317      	movs	r3, #23
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	b007      	add	sp, #28
 8004592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004594:	200009b8 	.word	0x200009b8
 8004598:	0000c350 	.word	0x0000c350
 800459c:	40022000 	.word	0x40022000

080045a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <HAL_FLASH_Unlock+0x40>)
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2280      	movs	r2, #128	; 0x80
 80045b2:	4013      	ands	r3, r2
 80045b4:	d00d      	beq.n	80045d2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_FLASH_Unlock+0x40>)
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_FLASH_Unlock+0x44>)
 80045ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <HAL_FLASH_Unlock+0x40>)
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <HAL_FLASH_Unlock+0x48>)
 80045c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <HAL_FLASH_Unlock+0x40>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2280      	movs	r2, #128	; 0x80
 80045c8:	4013      	ands	r3, r2
 80045ca:	d002      	beq.n	80045d2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80045cc:	1dfb      	adds	r3, r7, #7
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	781b      	ldrb	r3, [r3, #0]
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	40022000 	.word	0x40022000
 80045e4:	45670123 	.word	0x45670123
 80045e8:	cdef89ab 	.word	0xcdef89ab

080045ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_FLASH_Lock+0x18>)
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <HAL_FLASH_Lock+0x18>)
 80045f6:	2180      	movs	r1, #128	; 0x80
 80045f8:	430a      	orrs	r2, r1
 80045fa:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	0018      	movs	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40022000 	.word	0x40022000

08004608 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800460c:	4b02      	ldr	r3, [pc, #8]	; (8004618 <HAL_FLASH_GetError+0x10>)
 800460e:	69db      	ldr	r3, [r3, #28]
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200009b8 	.word	0x200009b8

0800461c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	000a      	movs	r2, r1
 8004626:	1cbb      	adds	r3, r7, #2
 8004628:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <FLASH_Program_HalfWord+0x30>)
 800462c:	2200      	movs	r2, #0
 800462e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <FLASH_Program_HalfWord+0x34>)
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <FLASH_Program_HalfWord+0x34>)
 8004636:	2101      	movs	r1, #1
 8004638:	430a      	orrs	r2, r1
 800463a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	1cba      	adds	r2, r7, #2
 8004640:	8812      	ldrh	r2, [r2, #0]
 8004642:	801a      	strh	r2, [r3, #0]
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b002      	add	sp, #8
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200009b8 	.word	0x200009b8
 8004650:	40022000 	.word	0x40022000

08004654 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800465c:	f7fe fed6 	bl	800340c <HAL_GetTick>
 8004660:	0003      	movs	r3, r0
 8004662:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004664:	e00f      	b.n	8004686 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3301      	adds	r3, #1
 800466a:	d00c      	beq.n	8004686 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <FLASH_WaitForLastOperation+0x2e>
 8004672:	f7fe fecb 	bl	800340c <HAL_GetTick>
 8004676:	0002      	movs	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d201      	bcs.n	8004686 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e01f      	b.n	80046c6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <FLASH_WaitForLastOperation+0x7c>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	4013      	ands	r3, r2
 800468e:	2b01      	cmp	r3, #1
 8004690:	d0e9      	beq.n	8004666 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004692:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <FLASH_WaitForLastOperation+0x7c>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	4013      	ands	r3, r2
 800469a:	2b20      	cmp	r3, #32
 800469c:	d102      	bne.n	80046a4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <FLASH_WaitForLastOperation+0x7c>)
 80046a0:	2220      	movs	r2, #32
 80046a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <FLASH_WaitForLastOperation+0x7c>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2210      	movs	r2, #16
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d005      	beq.n	80046bc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <FLASH_WaitForLastOperation+0x7c>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2204      	movs	r2, #4
 80046b6:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d103      	bne.n	80046c4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80046bc:	f000 f80a 	bl	80046d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	40022000 	.word	0x40022000

080046d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <FLASH_SetErrorCode+0x58>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2210      	movs	r2, #16
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d109      	bne.n	80046fe <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <FLASH_SetErrorCode+0x5c>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	2202      	movs	r2, #2
 80046f0:	431a      	orrs	r2, r3
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <FLASH_SetErrorCode+0x5c>)
 80046f4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2210      	movs	r2, #16
 80046fa:	4313      	orrs	r3, r2
 80046fc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <FLASH_SetErrorCode+0x58>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2204      	movs	r2, #4
 8004704:	4013      	ands	r3, r2
 8004706:	2b04      	cmp	r3, #4
 8004708:	d109      	bne.n	800471e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <FLASH_SetErrorCode+0x5c>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2201      	movs	r2, #1
 8004710:	431a      	orrs	r2, r3
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <FLASH_SetErrorCode+0x5c>)
 8004714:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2204      	movs	r2, #4
 800471a:	4313      	orrs	r3, r2
 800471c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800471e:	4b03      	ldr	r3, [pc, #12]	; (800472c <FLASH_SetErrorCode+0x58>)
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]
}  
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40022000 	.word	0x40022000
 8004730:	200009b8 	.word	0x200009b8

08004734 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004734:	b5b0      	push	{r4, r5, r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800473e:	230f      	movs	r3, #15
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800474a:	4b32      	ldr	r3, [pc, #200]	; (8004814 <HAL_FLASHEx_Erase+0xe0>)
 800474c:	7e1b      	ldrb	r3, [r3, #24]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_FLASHEx_Erase+0x22>
 8004752:	2302      	movs	r3, #2
 8004754:	e05a      	b.n	800480c <HAL_FLASHEx_Erase+0xd8>
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_FLASHEx_Erase+0xe0>)
 8004758:	2201      	movs	r2, #1
 800475a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d116      	bne.n	8004792 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004764:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_FLASHEx_Erase+0xe4>)
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff ff74 	bl	8004654 <FLASH_WaitForLastOperation>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d147      	bne.n	8004800 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004770:	f000 f856 	bl	8004820 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004774:	230f      	movs	r3, #15
 8004776:	18fc      	adds	r4, r7, r3
 8004778:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_FLASHEx_Erase+0xe4>)
 800477a:	0018      	movs	r0, r3
 800477c:	f7ff ff6a 	bl	8004654 <FLASH_WaitForLastOperation>
 8004780:	0003      	movs	r3, r0
 8004782:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_FLASHEx_Erase+0xe8>)
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	4b24      	ldr	r3, [pc, #144]	; (800481c <HAL_FLASHEx_Erase+0xe8>)
 800478a:	2104      	movs	r1, #4
 800478c:	438a      	bics	r2, r1
 800478e:	611a      	str	r2, [r3, #16]
 8004790:	e036      	b.n	8004800 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004792:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_FLASHEx_Erase+0xe4>)
 8004794:	0018      	movs	r0, r3
 8004796:	f7ff ff5d 	bl	8004654 <FLASH_WaitForLastOperation>
 800479a:	1e03      	subs	r3, r0, #0
 800479c:	d130      	bne.n	8004800 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	4252      	negs	r2, r2
 80047a4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	e01f      	b.n	80047ee <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f84d 	bl	8004850 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047b6:	250f      	movs	r5, #15
 80047b8:	197c      	adds	r4, r7, r5
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <HAL_FLASHEx_Erase+0xe4>)
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff ff49 	bl	8004654 <FLASH_WaitForLastOperation>
 80047c2:	0003      	movs	r3, r0
 80047c4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <HAL_FLASHEx_Erase+0xe8>)
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	4b14      	ldr	r3, [pc, #80]	; (800481c <HAL_FLASHEx_Erase+0xe8>)
 80047cc:	2102      	movs	r1, #2
 80047ce:	438a      	bics	r2, r1
 80047d0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80047d2:	197b      	adds	r3, r7, r5
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	601a      	str	r2, [r3, #0]
            break;
 80047e0:	e00e      	b.n	8004800 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	0112      	lsls	r2, r2, #4
 80047e8:	4694      	mov	ip, r2
 80047ea:	4463      	add	r3, ip
 80047ec:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	02da      	lsls	r2, r3, #11
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3d6      	bcc.n	80047ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_FLASHEx_Erase+0xe0>)
 8004802:	2200      	movs	r2, #0
 8004804:	761a      	strb	r2, [r3, #24]

  return status;
 8004806:	230f      	movs	r3, #15
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	781b      	ldrb	r3, [r3, #0]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b004      	add	sp, #16
 8004812:	bdb0      	pop	{r4, r5, r7, pc}
 8004814:	200009b8 	.word	0x200009b8
 8004818:	0000c350 	.word	0x0000c350
 800481c:	40022000 	.word	0x40022000

08004820 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <FLASH_MassErase+0x28>)
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <FLASH_MassErase+0x2c>)
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <FLASH_MassErase+0x2c>)
 8004830:	2104      	movs	r1, #4
 8004832:	430a      	orrs	r2, r1
 8004834:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <FLASH_MassErase+0x2c>)
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <FLASH_MassErase+0x2c>)
 800483c:	2140      	movs	r1, #64	; 0x40
 800483e:	430a      	orrs	r2, r1
 8004840:	611a      	str	r2, [r3, #16]
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	200009b8 	.word	0x200009b8
 800484c:	40022000 	.word	0x40022000

08004850 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <FLASH_PageErase+0x34>)
 800485a:	2200      	movs	r2, #0
 800485c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <FLASH_PageErase+0x38>)
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <FLASH_PageErase+0x38>)
 8004864:	2102      	movs	r1, #2
 8004866:	430a      	orrs	r2, r1
 8004868:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <FLASH_PageErase+0x38>)
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <FLASH_PageErase+0x38>)
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <FLASH_PageErase+0x38>)
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	430a      	orrs	r2, r1
 800487a:	611a      	str	r2, [r3, #16]
}
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	b002      	add	sp, #8
 8004882:	bd80      	pop	{r7, pc}
 8004884:	200009b8 	.word	0x200009b8
 8004888:	40022000 	.word	0x40022000

0800488c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800489a:	e155      	b.n	8004b48 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2101      	movs	r1, #1
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4091      	lsls	r1, r2
 80048a6:	000a      	movs	r2, r1
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d100      	bne.n	80048b4 <HAL_GPIO_Init+0x28>
 80048b2:	e146      	b.n	8004b42 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2203      	movs	r2, #3
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d005      	beq.n	80048cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2203      	movs	r2, #3
 80048c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d130      	bne.n	800492e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	2203      	movs	r2, #3
 80048d8:	409a      	lsls	r2, r3
 80048da:	0013      	movs	r3, r2
 80048dc:	43da      	mvns	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	409a      	lsls	r2, r3
 80048ee:	0013      	movs	r3, r2
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004902:	2201      	movs	r2, #1
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	409a      	lsls	r2, r3
 8004908:	0013      	movs	r3, r2
 800490a:	43da      	mvns	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	2201      	movs	r2, #1
 800491a:	401a      	ands	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	409a      	lsls	r2, r3
 8004920:	0013      	movs	r3, r2
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2203      	movs	r2, #3
 8004934:	4013      	ands	r3, r2
 8004936:	2b03      	cmp	r3, #3
 8004938:	d017      	beq.n	800496a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	409a      	lsls	r2, r3
 8004948:	0013      	movs	r3, r2
 800494a:	43da      	mvns	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	409a      	lsls	r2, r3
 800495c:	0013      	movs	r3, r2
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2203      	movs	r2, #3
 8004970:	4013      	ands	r3, r2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d123      	bne.n	80049be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	08da      	lsrs	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3208      	adds	r2, #8
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	58d3      	ldr	r3, [r2, r3]
 8004982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2207      	movs	r2, #7
 8004988:	4013      	ands	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	220f      	movs	r2, #15
 800498e:	409a      	lsls	r2, r3
 8004990:	0013      	movs	r3, r2
 8004992:	43da      	mvns	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2107      	movs	r1, #7
 80049a2:	400b      	ands	r3, r1
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	409a      	lsls	r2, r3
 80049a8:	0013      	movs	r3, r2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	08da      	lsrs	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3208      	adds	r2, #8
 80049b8:	0092      	lsls	r2, r2, #2
 80049ba:	6939      	ldr	r1, [r7, #16]
 80049bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	2203      	movs	r2, #3
 80049ca:	409a      	lsls	r2, r3
 80049cc:	0013      	movs	r3, r2
 80049ce:	43da      	mvns	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2203      	movs	r2, #3
 80049dc:	401a      	ands	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	409a      	lsls	r2, r3
 80049e4:	0013      	movs	r3, r2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	23c0      	movs	r3, #192	; 0xc0
 80049f8:	029b      	lsls	r3, r3, #10
 80049fa:	4013      	ands	r3, r2
 80049fc:	d100      	bne.n	8004a00 <HAL_GPIO_Init+0x174>
 80049fe:	e0a0      	b.n	8004b42 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a00:	4b57      	ldr	r3, [pc, #348]	; (8004b60 <HAL_GPIO_Init+0x2d4>)
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	4b56      	ldr	r3, [pc, #344]	; (8004b60 <HAL_GPIO_Init+0x2d4>)
 8004a06:	2101      	movs	r1, #1
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	619a      	str	r2, [r3, #24]
 8004a0c:	4b54      	ldr	r3, [pc, #336]	; (8004b60 <HAL_GPIO_Init+0x2d4>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2201      	movs	r2, #1
 8004a12:	4013      	ands	r3, r2
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a18:	4a52      	ldr	r2, [pc, #328]	; (8004b64 <HAL_GPIO_Init+0x2d8>)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	589b      	ldr	r3, [r3, r2]
 8004a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	220f      	movs	r2, #15
 8004a30:	409a      	lsls	r2, r3
 8004a32:	0013      	movs	r3, r2
 8004a34:	43da      	mvns	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	2390      	movs	r3, #144	; 0x90
 8004a40:	05db      	lsls	r3, r3, #23
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d019      	beq.n	8004a7a <HAL_GPIO_Init+0x1ee>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a47      	ldr	r2, [pc, #284]	; (8004b68 <HAL_GPIO_Init+0x2dc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_GPIO_Init+0x1ea>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a46      	ldr	r2, [pc, #280]	; (8004b6c <HAL_GPIO_Init+0x2e0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00d      	beq.n	8004a72 <HAL_GPIO_Init+0x1e6>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a45      	ldr	r2, [pc, #276]	; (8004b70 <HAL_GPIO_Init+0x2e4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <HAL_GPIO_Init+0x1e2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a44      	ldr	r2, [pc, #272]	; (8004b74 <HAL_GPIO_Init+0x2e8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <HAL_GPIO_Init+0x1de>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e008      	b.n	8004a7c <HAL_GPIO_Init+0x1f0>
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	e006      	b.n	8004a7c <HAL_GPIO_Init+0x1f0>
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e004      	b.n	8004a7c <HAL_GPIO_Init+0x1f0>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e002      	b.n	8004a7c <HAL_GPIO_Init+0x1f0>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_GPIO_Init+0x1f0>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	2103      	movs	r1, #3
 8004a80:	400a      	ands	r2, r1
 8004a82:	0092      	lsls	r2, r2, #2
 8004a84:	4093      	lsls	r3, r2
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a8c:	4935      	ldr	r1, [pc, #212]	; (8004b64 <HAL_GPIO_Init+0x2d8>)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	3302      	adds	r3, #2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a9a:	4b37      	ldr	r3, [pc, #220]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	035b      	lsls	r3, r3, #13
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d003      	beq.n	8004abe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004abe:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43da      	mvns	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	039b      	lsls	r3, r3, #14
 8004adc:	4013      	ands	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ae8:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004aee:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	43da      	mvns	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	029b      	lsls	r3, r3, #10
 8004b06:	4013      	ands	r3, r2
 8004b08:	d003      	beq.n	8004b12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004b18:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	43da      	mvns	r2, r3
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	025b      	lsls	r3, r3, #9
 8004b30:	4013      	ands	r3, r2
 8004b32:	d003      	beq.n	8004b3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3301      	adds	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	40da      	lsrs	r2, r3
 8004b50:	1e13      	subs	r3, r2, #0
 8004b52:	d000      	beq.n	8004b56 <HAL_GPIO_Init+0x2ca>
 8004b54:	e6a2      	b.n	800489c <HAL_GPIO_Init+0x10>
  } 
}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b006      	add	sp, #24
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40010000 	.word	0x40010000
 8004b68:	48000400 	.word	0x48000400
 8004b6c:	48000800 	.word	0x48000800
 8004b70:	48000c00 	.word	0x48000c00
 8004b74:	48001000 	.word	0x48001000
 8004b78:	40010400 	.word	0x40010400

08004b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	000a      	movs	r2, r1
 8004b86:	1cbb      	adds	r3, r7, #2
 8004b88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	1cba      	adds	r2, r7, #2
 8004b90:	8812      	ldrh	r2, [r2, #0]
 8004b92:	4013      	ands	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004b96:	230f      	movs	r3, #15
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e003      	b.n	8004ba8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ba0:	230f      	movs	r3, #15
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004ba8:	230f      	movs	r3, #15
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	781b      	ldrb	r3, [r3, #0]
  }
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b004      	add	sp, #16
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	0008      	movs	r0, r1
 8004bc0:	0011      	movs	r1, r2
 8004bc2:	1cbb      	adds	r3, r7, #2
 8004bc4:	1c02      	adds	r2, r0, #0
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	1c7b      	adds	r3, r7, #1
 8004bca:	1c0a      	adds	r2, r1, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bce:	1c7b      	adds	r3, r7, #1
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d004      	beq.n	8004be0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bd6:	1cbb      	adds	r3, r7, #2
 8004bd8:	881a      	ldrh	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bde:	e003      	b.n	8004be8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004be0:	1cbb      	adds	r3, r7, #2
 8004be2:	881a      	ldrh	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	1dbb      	adds	r3, r7, #6
 8004bfa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	1dba      	adds	r2, r7, #6
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	4013      	ands	r3, r2
 8004c06:	d008      	beq.n	8004c1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004c0a:	1dba      	adds	r2, r7, #6
 8004c0c:	8812      	ldrh	r2, [r2, #0]
 8004c0e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c10:	1dbb      	adds	r3, r7, #6
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fd faf9 	bl	800220c <HAL_GPIO_EXTI_Callback>
  }
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e03d      	b.n	8004cb6 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a20      	ldr	r2, [pc, #128]	; (8004cc0 <HAL_IWDG_Init+0x98>)
 8004c40:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <HAL_IWDG_Init+0x9c>)
 8004c48:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6852      	ldr	r2, [r2, #4]
 8004c52:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6892      	ldr	r2, [r2, #8]
 8004c5c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004c5e:	f7fe fbd5 	bl	800340c <HAL_GetTick>
 8004c62:	0003      	movs	r3, r0
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004c66:	e00e      	b.n	8004c86 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004c68:	f7fe fbd0 	bl	800340c <HAL_GetTick>
 8004c6c:	0002      	movs	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b27      	cmp	r3, #39	; 0x27
 8004c74:	d907      	bls.n	8004c86 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d001      	beq.n	8004c86 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e017      	b.n	8004cb6 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d1ea      	bne.n	8004c68 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d005      	beq.n	8004cac <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	68d2      	ldr	r2, [r2, #12]
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e003      	b.n	8004cb4 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <HAL_IWDG_Init+0xa0>)
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b004      	add	sp, #16
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	0000cccc 	.word	0x0000cccc
 8004cc4:	00005555 	.word	0x00005555
 8004cc8:	0000aaaa 	.word	0x0000aaaa

08004ccc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a03      	ldr	r2, [pc, #12]	; (8004ce8 <HAL_IWDG_Refresh+0x1c>)
 8004cda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b002      	add	sp, #8
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	0000aaaa 	.word	0x0000aaaa

08004cec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cee:	b08b      	sub	sp, #44	; 0x2c
 8004cf0:	af06      	add	r7, sp, #24
 8004cf2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0f0      	b.n	8004ee0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a79      	ldr	r2, [pc, #484]	; (8004ee8 <HAL_PCD_Init+0x1fc>)
 8004d02:	5c9b      	ldrb	r3, [r3, r2]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	23aa      	movs	r3, #170	; 0xaa
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	2100      	movs	r1, #0
 8004d12:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7fe fad4 	bl	80032c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a72      	ldr	r2, [pc, #456]	; (8004ee8 <HAL_PCD_Init+0x1fc>)
 8004d20:	2103      	movs	r1, #3
 8004d22:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f003 f959 	bl	8007fe0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2e:	230f      	movs	r3, #15
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e049      	b.n	8004dcc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d38:	200f      	movs	r0, #15
 8004d3a:	183b      	adds	r3, r7, r0
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	0013      	movs	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	18cb      	adds	r3, r1, r3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d52:	183b      	adds	r3, r7, r0
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	0013      	movs	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	183a      	adds	r2, r7, r0
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d68:	183b      	adds	r3, r7, r0
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	0013      	movs	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	189b      	adds	r3, r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	18cb      	adds	r3, r1, r3
 8004d7a:	3303      	adds	r3, #3
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d80:	183b      	adds	r3, r7, r0
 8004d82:	781a      	ldrb	r2, [r3, #0]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	0013      	movs	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	18cb      	adds	r3, r1, r3
 8004d90:	3338      	adds	r3, #56	; 0x38
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d96:	183b      	adds	r3, r7, r0
 8004d98:	781a      	ldrb	r2, [r3, #0]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	0013      	movs	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	18cb      	adds	r3, r1, r3
 8004da6:	333c      	adds	r3, #60	; 0x3c
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dac:	183b      	adds	r3, r7, r0
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	0013      	movs	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	189b      	adds	r3, r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	18cb      	adds	r3, r1, r3
 8004dbc:	3340      	adds	r3, #64	; 0x40
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc2:	183b      	adds	r3, r7, r0
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	183b      	adds	r3, r7, r0
 8004dc8:	3201      	adds	r2, #1
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	210f      	movs	r1, #15
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d3ae      	bcc.n	8004d38 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dda:	187b      	adds	r3, r7, r1
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e056      	b.n	8004e90 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004de2:	240f      	movs	r4, #15
 8004de4:	193b      	adds	r3, r7, r4
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	236a      	movs	r3, #106	; 0x6a
 8004dec:	33ff      	adds	r3, #255	; 0xff
 8004dee:	0019      	movs	r1, r3
 8004df0:	0013      	movs	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	189b      	adds	r3, r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	18c3      	adds	r3, r0, r3
 8004dfa:	185b      	adds	r3, r3, r1
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e00:	193b      	adds	r3, r7, r4
 8004e02:	781a      	ldrb	r2, [r3, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	23b4      	movs	r3, #180	; 0xb4
 8004e08:	0059      	lsls	r1, r3, #1
 8004e0a:	0013      	movs	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	18c3      	adds	r3, r0, r3
 8004e14:	185b      	adds	r3, r3, r1
 8004e16:	193a      	adds	r2, r7, r4
 8004e18:	7812      	ldrb	r2, [r2, #0]
 8004e1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e1c:	193b      	adds	r3, r7, r4
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	236c      	movs	r3, #108	; 0x6c
 8004e24:	33ff      	adds	r3, #255	; 0xff
 8004e26:	0019      	movs	r1, r3
 8004e28:	0013      	movs	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	189b      	adds	r3, r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	18c3      	adds	r3, r0, r3
 8004e32:	185b      	adds	r3, r3, r1
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	23bc      	movs	r3, #188	; 0xbc
 8004e40:	0059      	lsls	r1, r3, #1
 8004e42:	0013      	movs	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	18c3      	adds	r3, r0, r3
 8004e4c:	185b      	adds	r3, r3, r1
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e52:	193b      	adds	r3, r7, r4
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	23be      	movs	r3, #190	; 0xbe
 8004e5a:	0059      	lsls	r1, r3, #1
 8004e5c:	0013      	movs	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	189b      	adds	r3, r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	18c3      	adds	r3, r0, r3
 8004e66:	185b      	adds	r3, r3, r1
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e6c:	193b      	adds	r3, r7, r4
 8004e6e:	781a      	ldrb	r2, [r3, #0]
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	23c0      	movs	r3, #192	; 0xc0
 8004e74:	0059      	lsls	r1, r3, #1
 8004e76:	0013      	movs	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	18c3      	adds	r3, r0, r3
 8004e80:	185b      	adds	r3, r3, r1
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	193b      	adds	r3, r7, r4
 8004e8c:	3201      	adds	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	230f      	movs	r3, #15
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3a1      	bcc.n	8004de2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	466a      	mov	r2, sp
 8004ea6:	0011      	movs	r1, r2
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	3210      	adds	r2, #16
 8004eac:	ca70      	ldmia	r2!, {r4, r5, r6}
 8004eae:	c170      	stmia	r1!, {r4, r5, r6}
 8004eb0:	ca30      	ldmia	r2!, {r4, r5}
 8004eb2:	c130      	stmia	r1!, {r4, r5}
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 f8ab 	bl	8008014 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2224      	movs	r2, #36	; 0x24
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a07      	ldr	r2, [pc, #28]	; (8004ee8 <HAL_PCD_Init+0x1fc>)
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d103      	bne.n	8004ede <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 f807 	bl	8004eec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b005      	add	sp, #20
 8004ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee8:	000002a9 	.word	0x000002a9

08004eec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	23ba      	movs	r3, #186	; 0xba
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	2101      	movs	r1, #1
 8004f02:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	23b8      	movs	r3, #184	; 0xb8
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2254      	movs	r2, #84	; 0x54
 8004f12:	5a9b      	ldrh	r3, [r3, r2]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2201      	movs	r2, #1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	b299      	uxth	r1, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2254      	movs	r2, #84	; 0x54
 8004f20:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2254      	movs	r2, #84	; 0x54
 8004f26:	5a9b      	ldrh	r3, [r3, r2]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b299      	uxth	r1, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2254      	movs	r2, #84	; 0x54
 8004f34:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b004      	add	sp, #16
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f000 fb76 	bl	8005640 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <HAL_RCC_OscConfig+0x20>
 8004f5e:	e08e      	b.n	800507e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f60:	4bc5      	ldr	r3, [pc, #788]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	220c      	movs	r2, #12
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d00e      	beq.n	8004f8a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f6c:	4bc2      	ldr	r3, [pc, #776]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	220c      	movs	r2, #12
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d117      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x68>
 8004f78:	4bbf      	ldr	r3, [pc, #764]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	23c0      	movs	r3, #192	; 0xc0
 8004f7e:	025b      	lsls	r3, r3, #9
 8004f80:	401a      	ands	r2, r3
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d10e      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8a:	4bbb      	ldr	r3, [pc, #748]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	4013      	ands	r3, r2
 8004f94:	d100      	bne.n	8004f98 <HAL_RCC_OscConfig+0x58>
 8004f96:	e071      	b.n	800507c <HAL_RCC_OscConfig+0x13c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d000      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x62>
 8004fa0:	e06c      	b.n	800507c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f000 fb4c 	bl	8005640 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x80>
 8004fb0:	4bb1      	ldr	r3, [pc, #708]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4bb0      	ldr	r3, [pc, #704]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004fb6:	2180      	movs	r1, #128	; 0x80
 8004fb8:	0249      	lsls	r1, r1, #9
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e02f      	b.n	8005020 <HAL_RCC_OscConfig+0xe0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCC_OscConfig+0xa2>
 8004fc8:	4bab      	ldr	r3, [pc, #684]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4baa      	ldr	r3, [pc, #680]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004fce:	49ab      	ldr	r1, [pc, #684]	; (800527c <HAL_RCC_OscConfig+0x33c>)
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	4ba8      	ldr	r3, [pc, #672]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4ba7      	ldr	r3, [pc, #668]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004fda:	49a9      	ldr	r1, [pc, #676]	; (8005280 <HAL_RCC_OscConfig+0x340>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e01e      	b.n	8005020 <HAL_RCC_OscConfig+0xe0>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d10e      	bne.n	8005008 <HAL_RCC_OscConfig+0xc8>
 8004fea:	4ba3      	ldr	r3, [pc, #652]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4ba2      	ldr	r3, [pc, #648]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	02c9      	lsls	r1, r1, #11
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	4b9f      	ldr	r3, [pc, #636]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b9e      	ldr	r3, [pc, #632]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	0249      	lsls	r1, r1, #9
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e00b      	b.n	8005020 <HAL_RCC_OscConfig+0xe0>
 8005008:	4b9b      	ldr	r3, [pc, #620]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b9a      	ldr	r3, [pc, #616]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800500e:	499b      	ldr	r1, [pc, #620]	; (800527c <HAL_RCC_OscConfig+0x33c>)
 8005010:	400a      	ands	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	4b98      	ldr	r3, [pc, #608]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b97      	ldr	r3, [pc, #604]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800501a:	4999      	ldr	r1, [pc, #612]	; (8005280 <HAL_RCC_OscConfig+0x340>)
 800501c:	400a      	ands	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d014      	beq.n	8005052 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe f9f0 	bl	800340c <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005032:	f7fe f9eb 	bl	800340c <HAL_GetTick>
 8005036:	0002      	movs	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b64      	cmp	r3, #100	; 0x64
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e2fd      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005044:	4b8c      	ldr	r3, [pc, #560]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	029b      	lsls	r3, r3, #10
 800504c:	4013      	ands	r3, r2
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0xf2>
 8005050:	e015      	b.n	800507e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fe f9db 	bl	800340c <HAL_GetTick>
 8005056:	0003      	movs	r3, r0
 8005058:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800505c:	f7fe f9d6 	bl	800340c <HAL_GetTick>
 8005060:	0002      	movs	r2, r0
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e2e8      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	4b82      	ldr	r3, [pc, #520]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	4013      	ands	r3, r2
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x11c>
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2202      	movs	r2, #2
 8005084:	4013      	ands	r3, r2
 8005086:	d100      	bne.n	800508a <HAL_RCC_OscConfig+0x14a>
 8005088:	e06c      	b.n	8005164 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800508a:	4b7b      	ldr	r3, [pc, #492]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	220c      	movs	r2, #12
 8005090:	4013      	ands	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005094:	4b78      	ldr	r3, [pc, #480]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	220c      	movs	r2, #12
 800509a:	4013      	ands	r3, r2
 800509c:	2b08      	cmp	r3, #8
 800509e:	d11f      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1a0>
 80050a0:	4b75      	ldr	r3, [pc, #468]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	23c0      	movs	r3, #192	; 0xc0
 80050a6:	025b      	lsls	r3, r3, #9
 80050a8:	401a      	ands	r2, r3
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d116      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	4b71      	ldr	r3, [pc, #452]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2202      	movs	r2, #2
 80050b8:	4013      	ands	r3, r2
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_OscConfig+0x188>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e2bb      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b6b      	ldr	r3, [pc, #428]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	22f8      	movs	r2, #248	; 0xf8
 80050ce:	4393      	bics	r3, r2
 80050d0:	0019      	movs	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00da      	lsls	r2, r3, #3
 80050d8:	4b67      	ldr	r3, [pc, #412]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80050da:	430a      	orrs	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	e041      	b.n	8005164 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d024      	beq.n	8005132 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e8:	4b63      	ldr	r3, [pc, #396]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b62      	ldr	r3, [pc, #392]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80050ee:	2101      	movs	r1, #1
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fe f98a 	bl	800340c <HAL_GetTick>
 80050f8:	0003      	movs	r3, r0
 80050fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050fe:	f7fe f985 	bl	800340c <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e297      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	4b59      	ldr	r3, [pc, #356]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2202      	movs	r2, #2
 8005116:	4013      	ands	r3, r2
 8005118:	d0f1      	beq.n	80050fe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511a:	4b57      	ldr	r3, [pc, #348]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	22f8      	movs	r2, #248	; 0xf8
 8005120:	4393      	bics	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	00da      	lsls	r2, r3, #3
 800512a:	4b53      	ldr	r3, [pc, #332]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e018      	b.n	8005164 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005132:	4b51      	ldr	r3, [pc, #324]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b50      	ldr	r3, [pc, #320]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005138:	2101      	movs	r1, #1
 800513a:	438a      	bics	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513e:	f7fe f965 	bl	800340c <HAL_GetTick>
 8005142:	0003      	movs	r3, r0
 8005144:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005148:	f7fe f960 	bl	800340c <HAL_GetTick>
 800514c:	0002      	movs	r2, r0
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e272      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	4b47      	ldr	r3, [pc, #284]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2202      	movs	r2, #2
 8005160:	4013      	ands	r3, r2
 8005162:	d1f1      	bne.n	8005148 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2208      	movs	r2, #8
 800516a:	4013      	ands	r3, r2
 800516c:	d036      	beq.n	80051dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d019      	beq.n	80051aa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005176:	4b40      	ldr	r3, [pc, #256]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517a:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800517c:	2101      	movs	r1, #1
 800517e:	430a      	orrs	r2, r1
 8005180:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005182:	f7fe f943 	bl	800340c <HAL_GetTick>
 8005186:	0003      	movs	r3, r0
 8005188:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518c:	f7fe f93e 	bl	800340c <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e250      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	4b36      	ldr	r3, [pc, #216]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2202      	movs	r2, #2
 80051a4:	4013      	ands	r3, r2
 80051a6:	d0f1      	beq.n	800518c <HAL_RCC_OscConfig+0x24c>
 80051a8:	e018      	b.n	80051dc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051aa:	4b33      	ldr	r3, [pc, #204]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80051ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ae:	4b32      	ldr	r3, [pc, #200]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80051b0:	2101      	movs	r1, #1
 80051b2:	438a      	bics	r2, r1
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b6:	f7fe f929 	bl	800340c <HAL_GetTick>
 80051ba:	0003      	movs	r3, r0
 80051bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c0:	f7fe f924 	bl	800340c <HAL_GetTick>
 80051c4:	0002      	movs	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e236      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d2:	4b29      	ldr	r3, [pc, #164]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2202      	movs	r2, #2
 80051d8:	4013      	ands	r3, r2
 80051da:	d1f1      	bne.n	80051c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2204      	movs	r2, #4
 80051e2:	4013      	ands	r3, r2
 80051e4:	d100      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2a8>
 80051e6:	e0b5      	b.n	8005354 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e8:	201f      	movs	r0, #31
 80051ea:	183b      	adds	r3, r7, r0
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	055b      	lsls	r3, r3, #21
 80051f8:	4013      	ands	r3, r2
 80051fa:	d110      	bne.n	800521e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fc:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	0549      	lsls	r1, r1, #21
 8005206:	430a      	orrs	r2, r1
 8005208:	61da      	str	r2, [r3, #28]
 800520a:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800520c:	69da      	ldr	r2, [r3, #28]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	055b      	lsls	r3, r3, #21
 8005212:	4013      	ands	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005218:	183b      	adds	r3, r7, r0
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521e:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCC_OscConfig+0x344>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4013      	ands	r3, r2
 8005228:	d11a      	bne.n	8005260 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <HAL_RCC_OscConfig+0x344>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_RCC_OscConfig+0x344>)
 8005230:	2180      	movs	r1, #128	; 0x80
 8005232:	0049      	lsls	r1, r1, #1
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005238:	f7fe f8e8 	bl	800340c <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fe f8e3 	bl	800340c <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b64      	cmp	r3, #100	; 0x64
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1f5      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_OscConfig+0x344>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4013      	ands	r3, r2
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d10f      	bne.n	8005288 <HAL_RCC_OscConfig+0x348>
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	4b02      	ldr	r3, [pc, #8]	; (8005278 <HAL_RCC_OscConfig+0x338>)
 800526e:	2101      	movs	r1, #1
 8005270:	430a      	orrs	r2, r1
 8005272:	621a      	str	r2, [r3, #32]
 8005274:	e036      	b.n	80052e4 <HAL_RCC_OscConfig+0x3a4>
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	40021000 	.word	0x40021000
 800527c:	fffeffff 	.word	0xfffeffff
 8005280:	fffbffff 	.word	0xfffbffff
 8005284:	40007000 	.word	0x40007000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10c      	bne.n	80052aa <HAL_RCC_OscConfig+0x36a>
 8005290:	4bca      	ldr	r3, [pc, #808]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	4bc9      	ldr	r3, [pc, #804]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005296:	2101      	movs	r1, #1
 8005298:	438a      	bics	r2, r1
 800529a:	621a      	str	r2, [r3, #32]
 800529c:	4bc7      	ldr	r3, [pc, #796]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	4bc6      	ldr	r3, [pc, #792]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052a2:	2104      	movs	r1, #4
 80052a4:	438a      	bics	r2, r1
 80052a6:	621a      	str	r2, [r3, #32]
 80052a8:	e01c      	b.n	80052e4 <HAL_RCC_OscConfig+0x3a4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x38c>
 80052b2:	4bc2      	ldr	r3, [pc, #776]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	4bc1      	ldr	r3, [pc, #772]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052b8:	2104      	movs	r1, #4
 80052ba:	430a      	orrs	r2, r1
 80052bc:	621a      	str	r2, [r3, #32]
 80052be:	4bbf      	ldr	r3, [pc, #764]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052c0:	6a1a      	ldr	r2, [r3, #32]
 80052c2:	4bbe      	ldr	r3, [pc, #760]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052c4:	2101      	movs	r1, #1
 80052c6:	430a      	orrs	r2, r1
 80052c8:	621a      	str	r2, [r3, #32]
 80052ca:	e00b      	b.n	80052e4 <HAL_RCC_OscConfig+0x3a4>
 80052cc:	4bbb      	ldr	r3, [pc, #748]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	4bba      	ldr	r3, [pc, #744]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	621a      	str	r2, [r3, #32]
 80052d8:	4bb8      	ldr	r3, [pc, #736]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	4bb7      	ldr	r3, [pc, #732]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80052de:	2104      	movs	r1, #4
 80052e0:	438a      	bics	r2, r1
 80052e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d014      	beq.n	8005316 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ec:	f7fe f88e 	bl	800340c <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	e009      	b.n	800530a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fe f889 	bl	800340c <HAL_GetTick>
 80052fa:	0002      	movs	r2, r0
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	4aaf      	ldr	r2, [pc, #700]	; (80055c0 <HAL_RCC_OscConfig+0x680>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e19a      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530a:	4bac      	ldr	r3, [pc, #688]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	2202      	movs	r2, #2
 8005310:	4013      	ands	r3, r2
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCC_OscConfig+0x3b6>
 8005314:	e013      	b.n	800533e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005316:	f7fe f879 	bl	800340c <HAL_GetTick>
 800531a:	0003      	movs	r3, r0
 800531c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531e:	e009      	b.n	8005334 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fe f874 	bl	800340c <HAL_GetTick>
 8005324:	0002      	movs	r2, r0
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	4aa5      	ldr	r2, [pc, #660]	; (80055c0 <HAL_RCC_OscConfig+0x680>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e185      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005334:	4ba1      	ldr	r3, [pc, #644]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	2202      	movs	r2, #2
 800533a:	4013      	ands	r3, r2
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800533e:	231f      	movs	r3, #31
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d105      	bne.n	8005354 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005348:	4b9c      	ldr	r3, [pc, #624]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	4b9b      	ldr	r3, [pc, #620]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800534e:	499d      	ldr	r1, [pc, #628]	; (80055c4 <HAL_RCC_OscConfig+0x684>)
 8005350:	400a      	ands	r2, r1
 8005352:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2210      	movs	r2, #16
 800535a:	4013      	ands	r3, r2
 800535c:	d063      	beq.n	8005426 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d12a      	bne.n	80053bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005366:	4b95      	ldr	r3, [pc, #596]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536a:	4b94      	ldr	r3, [pc, #592]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800536c:	2104      	movs	r1, #4
 800536e:	430a      	orrs	r2, r1
 8005370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005372:	4b92      	ldr	r3, [pc, #584]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005376:	4b91      	ldr	r3, [pc, #580]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005378:	2101      	movs	r1, #1
 800537a:	430a      	orrs	r2, r1
 800537c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537e:	f7fe f845 	bl	800340c <HAL_GetTick>
 8005382:	0003      	movs	r3, r0
 8005384:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005388:	f7fe f840 	bl	800340c <HAL_GetTick>
 800538c:	0002      	movs	r2, r0
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e152      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800539a:	4b88      	ldr	r3, [pc, #544]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	2202      	movs	r2, #2
 80053a0:	4013      	ands	r3, r2
 80053a2:	d0f1      	beq.n	8005388 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80053a4:	4b85      	ldr	r3, [pc, #532]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	22f8      	movs	r2, #248	; 0xf8
 80053aa:	4393      	bics	r3, r2
 80053ac:	0019      	movs	r1, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	00da      	lsls	r2, r3, #3
 80053b4:	4b81      	ldr	r3, [pc, #516]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053b6:	430a      	orrs	r2, r1
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34
 80053ba:	e034      	b.n	8005426 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	3305      	adds	r3, #5
 80053c2:	d111      	bne.n	80053e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80053c4:	4b7d      	ldr	r3, [pc, #500]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c8:	4b7c      	ldr	r3, [pc, #496]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053ca:	2104      	movs	r1, #4
 80053cc:	438a      	bics	r2, r1
 80053ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80053d0:	4b7a      	ldr	r3, [pc, #488]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	22f8      	movs	r2, #248	; 0xf8
 80053d6:	4393      	bics	r3, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	00da      	lsls	r2, r3, #3
 80053e0:	4b76      	ldr	r3, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34
 80053e6:	e01e      	b.n	8005426 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80053e8:	4b74      	ldr	r3, [pc, #464]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ec:	4b73      	ldr	r3, [pc, #460]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053ee:	2104      	movs	r1, #4
 80053f0:	430a      	orrs	r2, r1
 80053f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80053f4:	4b71      	ldr	r3, [pc, #452]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f8:	4b70      	ldr	r3, [pc, #448]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80053fa:	2101      	movs	r1, #1
 80053fc:	438a      	bics	r2, r1
 80053fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005400:	f7fe f804 	bl	800340c <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800540a:	f7fd ffff 	bl	800340c <HAL_GetTick>
 800540e:	0002      	movs	r2, r0
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e111      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800541c:	4b67      	ldr	r3, [pc, #412]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	2202      	movs	r2, #2
 8005422:	4013      	ands	r3, r2
 8005424:	d1f1      	bne.n	800540a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2220      	movs	r2, #32
 800542c:	4013      	ands	r3, r2
 800542e:	d05c      	beq.n	80054ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005430:	4b62      	ldr	r3, [pc, #392]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	220c      	movs	r2, #12
 8005436:	4013      	ands	r3, r2
 8005438:	2b0c      	cmp	r3, #12
 800543a:	d00e      	beq.n	800545a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800543c:	4b5f      	ldr	r3, [pc, #380]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	220c      	movs	r2, #12
 8005442:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005444:	2b08      	cmp	r3, #8
 8005446:	d114      	bne.n	8005472 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005448:	4b5c      	ldr	r3, [pc, #368]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	23c0      	movs	r3, #192	; 0xc0
 800544e:	025b      	lsls	r3, r3, #9
 8005450:	401a      	ands	r2, r3
 8005452:	23c0      	movs	r3, #192	; 0xc0
 8005454:	025b      	lsls	r3, r3, #9
 8005456:	429a      	cmp	r2, r3
 8005458:	d10b      	bne.n	8005472 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800545a:	4b58      	ldr	r3, [pc, #352]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800545c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	029b      	lsls	r3, r3, #10
 8005462:	4013      	ands	r3, r2
 8005464:	d040      	beq.n	80054e8 <HAL_RCC_OscConfig+0x5a8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d03c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0e6      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01b      	beq.n	80054b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800547a:	4b50      	ldr	r3, [pc, #320]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800547c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547e:	4b4f      	ldr	r3, [pc, #316]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	0249      	lsls	r1, r1, #9
 8005484:	430a      	orrs	r2, r1
 8005486:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fd ffc0 	bl	800340c <HAL_GetTick>
 800548c:	0003      	movs	r3, r0
 800548e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005492:	f7fd ffbb 	bl	800340c <HAL_GetTick>
 8005496:	0002      	movs	r2, r0
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e0cd      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80054a4:	4b45      	ldr	r3, [pc, #276]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80054a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	029b      	lsls	r3, r3, #10
 80054ac:	4013      	ands	r3, r2
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x552>
 80054b0:	e01b      	b.n	80054ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80054b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b6:	4b41      	ldr	r3, [pc, #260]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80054b8:	4943      	ldr	r1, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x688>)
 80054ba:	400a      	ands	r2, r1
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054be:	f7fd ffa5 	bl	800340c <HAL_GetTick>
 80054c2:	0003      	movs	r3, r0
 80054c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c8:	f7fd ffa0 	bl	800340c <HAL_GetTick>
 80054cc:	0002      	movs	r2, r0
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0b2      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80054da:	4b38      	ldr	r3, [pc, #224]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80054dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	4013      	ands	r3, r2
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x588>
 80054e6:	e000      	b.n	80054ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80054e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d100      	bne.n	80054f4 <HAL_RCC_OscConfig+0x5b4>
 80054f2:	e0a4      	b.n	800563e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054f4:	4b31      	ldr	r3, [pc, #196]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	220c      	movs	r2, #12
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d100      	bne.n	8005502 <HAL_RCC_OscConfig+0x5c2>
 8005500:	e078      	b.n	80055f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b02      	cmp	r3, #2
 8005508:	d14c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550a:	4b2c      	ldr	r3, [pc, #176]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b2b      	ldr	r3, [pc, #172]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005510:	492e      	ldr	r1, [pc, #184]	; (80055cc <HAL_RCC_OscConfig+0x68c>)
 8005512:	400a      	ands	r2, r1
 8005514:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005516:	f7fd ff79 	bl	800340c <HAL_GetTick>
 800551a:	0003      	movs	r3, r0
 800551c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005520:	f7fd ff74 	bl	800340c <HAL_GetTick>
 8005524:	0002      	movs	r2, r0
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e086      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005532:	4b22      	ldr	r3, [pc, #136]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	049b      	lsls	r3, r3, #18
 800553a:	4013      	ands	r3, r2
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800553e:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	220f      	movs	r2, #15
 8005544:	4393      	bics	r3, r2
 8005546:	0019      	movs	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800554e:	430a      	orrs	r2, r1
 8005550:	62da      	str	r2, [r3, #44]	; 0x2c
 8005552:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <HAL_RCC_OscConfig+0x690>)
 8005558:	4013      	ands	r3, r2
 800555a:	0019      	movs	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	431a      	orrs	r2, r3
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b12      	ldr	r3, [pc, #72]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	0449      	lsls	r1, r1, #17
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557a:	f7fd ff47 	bl	800340c <HAL_GetTick>
 800557e:	0003      	movs	r3, r0
 8005580:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005584:	f7fd ff42 	bl	800340c <HAL_GetTick>
 8005588:	0002      	movs	r2, r0
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e054      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	049b      	lsls	r3, r3, #18
 800559e:	4013      	ands	r3, r2
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x644>
 80055a2:	e04c      	b.n	800563e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <HAL_RCC_OscConfig+0x67c>)
 80055aa:	4908      	ldr	r1, [pc, #32]	; (80055cc <HAL_RCC_OscConfig+0x68c>)
 80055ac:	400a      	ands	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fd ff2c 	bl	800340c <HAL_GetTick>
 80055b4:	0003      	movs	r3, r0
 80055b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b8:	e015      	b.n	80055e6 <HAL_RCC_OscConfig+0x6a6>
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	40021000 	.word	0x40021000
 80055c0:	00001388 	.word	0x00001388
 80055c4:	efffffff 	.word	0xefffffff
 80055c8:	fffeffff 	.word	0xfffeffff
 80055cc:	feffffff 	.word	0xfeffffff
 80055d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fd ff1a 	bl	800340c <HAL_GetTick>
 80055d8:	0002      	movs	r2, r0
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e02c      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055e6:	4b18      	ldr	r3, [pc, #96]	; (8005648 <HAL_RCC_OscConfig+0x708>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	049b      	lsls	r3, r3, #18
 80055ee:	4013      	ands	r3, r2
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x694>
 80055f2:	e024      	b.n	800563e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e01f      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <HAL_RCC_OscConfig+0x708>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <HAL_RCC_OscConfig+0x708>)
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	23c0      	movs	r3, #192	; 0xc0
 8005610:	025b      	lsls	r3, r3, #9
 8005612:	401a      	ands	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	429a      	cmp	r2, r3
 800561a:	d10e      	bne.n	800563a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	220f      	movs	r2, #15
 8005620:	401a      	ands	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d107      	bne.n	800563a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	23f0      	movs	r3, #240	; 0xf0
 800562e:	039b      	lsls	r3, r3, #14
 8005630:	401a      	ands	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005636:	429a      	cmp	r2, r3
 8005638:	d001      	beq.n	800563e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b008      	add	sp, #32
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000

0800564c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0bf      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005660:	4b61      	ldr	r3, [pc, #388]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	4013      	ands	r3, r2
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d911      	bls.n	8005692 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b5e      	ldr	r3, [pc, #376]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2201      	movs	r2, #1
 8005674:	4393      	bics	r3, r2
 8005676:	0019      	movs	r1, r3
 8005678:	4b5b      	ldr	r3, [pc, #364]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005680:	4b59      	ldr	r3, [pc, #356]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2201      	movs	r2, #1
 8005686:	4013      	ands	r3, r2
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d001      	beq.n	8005692 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0a6      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2202      	movs	r2, #2
 8005698:	4013      	ands	r3, r2
 800569a:	d015      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2204      	movs	r2, #4
 80056a2:	4013      	ands	r3, r2
 80056a4:	d006      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056a6:	4b51      	ldr	r3, [pc, #324]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	4b50      	ldr	r3, [pc, #320]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80056ac:	21e0      	movs	r1, #224	; 0xe0
 80056ae:	00c9      	lsls	r1, r1, #3
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b4:	4b4d      	ldr	r3, [pc, #308]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	22f0      	movs	r2, #240	; 0xf0
 80056ba:	4393      	bics	r3, r2
 80056bc:	0019      	movs	r1, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	4b4a      	ldr	r3, [pc, #296]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80056c4:	430a      	orrs	r2, r1
 80056c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	4013      	ands	r3, r2
 80056d0:	d04c      	beq.n	800576c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056da:	4b44      	ldr	r3, [pc, #272]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	029b      	lsls	r3, r3, #10
 80056e2:	4013      	ands	r3, r2
 80056e4:	d120      	bne.n	8005728 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e07a      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d107      	bne.n	8005702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f2:	4b3e      	ldr	r3, [pc, #248]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	2380      	movs	r3, #128	; 0x80
 80056f8:	049b      	lsls	r3, r3, #18
 80056fa:	4013      	ands	r3, r2
 80056fc:	d114      	bne.n	8005728 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e06e      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d107      	bne.n	800571a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800570a:	4b38      	ldr	r3, [pc, #224]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 800570c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	029b      	lsls	r3, r3, #10
 8005712:	4013      	ands	r3, r2
 8005714:	d108      	bne.n	8005728 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e062      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571a:	4b34      	ldr	r3, [pc, #208]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2202      	movs	r2, #2
 8005720:	4013      	ands	r3, r2
 8005722:	d101      	bne.n	8005728 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e05b      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005728:	4b30      	ldr	r3, [pc, #192]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2203      	movs	r2, #3
 800572e:	4393      	bics	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800573c:	f7fd fe66 	bl	800340c <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005744:	e009      	b.n	800575a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005746:	f7fd fe61 	bl	800340c <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_RCC_ClockConfig+0x1a4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e042      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	4b24      	ldr	r3, [pc, #144]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	220c      	movs	r2, #12
 8005760:	401a      	ands	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	429a      	cmp	r2, r3
 800576a:	d1ec      	bne.n	8005746 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	4013      	ands	r3, r2
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d211      	bcs.n	800579e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	4393      	bics	r3, r2
 8005782:	0019      	movs	r1, r3
 8005784:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578c:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <HAL_RCC_ClockConfig+0x19c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2201      	movs	r2, #1
 8005792:	4013      	ands	r3, r2
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d001      	beq.n	800579e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e020      	b.n	80057e0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2204      	movs	r2, #4
 80057a4:	4013      	ands	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057a8:	4b10      	ldr	r3, [pc, #64]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4a11      	ldr	r2, [pc, #68]	; (80057f4 <HAL_RCC_ClockConfig+0x1a8>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80057b8:	430a      	orrs	r2, r1
 80057ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057bc:	f000 f820 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 80057c0:	0001      	movs	r1, r0
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <HAL_RCC_ClockConfig+0x1a0>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	220f      	movs	r2, #15
 80057ca:	4013      	ands	r3, r2
 80057cc:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <HAL_RCC_ClockConfig+0x1ac>)
 80057ce:	5cd3      	ldrb	r3, [r2, r3]
 80057d0:	000a      	movs	r2, r1
 80057d2:	40da      	lsrs	r2, r3
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_RCC_ClockConfig+0x1b0>)
 80057d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80057d8:	2003      	movs	r0, #3
 80057da:	f7fd fdd1 	bl	8003380 <HAL_InitTick>
  
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b004      	add	sp, #16
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40022000 	.word	0x40022000
 80057ec:	40021000 	.word	0x40021000
 80057f0:	00001388 	.word	0x00001388
 80057f4:	fffff8ff 	.word	0xfffff8ff
 80057f8:	0800ddc8 	.word	0x0800ddc8
 80057fc:	20000004 	.word	0x20000004

08005800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800581a:	4b2d      	ldr	r3, [pc, #180]	; (80058d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	220c      	movs	r2, #12
 8005824:	4013      	ands	r3, r2
 8005826:	2b0c      	cmp	r3, #12
 8005828:	d046      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0xb8>
 800582a:	d848      	bhi.n	80058be <HAL_RCC_GetSysClockFreq+0xbe>
 800582c:	2b04      	cmp	r3, #4
 800582e:	d002      	beq.n	8005836 <HAL_RCC_GetSysClockFreq+0x36>
 8005830:	2b08      	cmp	r3, #8
 8005832:	d003      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0x3c>
 8005834:	e043      	b.n	80058be <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005836:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005838:	613b      	str	r3, [r7, #16]
      break;
 800583a:	e043      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	0c9b      	lsrs	r3, r3, #18
 8005840:	220f      	movs	r2, #15
 8005842:	4013      	ands	r3, r2
 8005844:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005846:	5cd3      	ldrb	r3, [r2, r3]
 8005848:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800584a:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	220f      	movs	r2, #15
 8005850:	4013      	ands	r3, r2
 8005852:	4a22      	ldr	r2, [pc, #136]	; (80058dc <HAL_RCC_GetSysClockFreq+0xdc>)
 8005854:	5cd3      	ldrb	r3, [r2, r3]
 8005856:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	23c0      	movs	r3, #192	; 0xc0
 800585c:	025b      	lsls	r3, r3, #9
 800585e:	401a      	ands	r2, r3
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	025b      	lsls	r3, r3, #9
 8005864:	429a      	cmp	r2, r3
 8005866:	d109      	bne.n	800587c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	481a      	ldr	r0, [pc, #104]	; (80058d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800586c:	f7fa fc4c 	bl	8000108 <__udivsi3>
 8005870:	0003      	movs	r3, r0
 8005872:	001a      	movs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4353      	muls	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e01a      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	23c0      	movs	r3, #192	; 0xc0
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	401a      	ands	r2, r3
 8005884:	23c0      	movs	r3, #192	; 0xc0
 8005886:	025b      	lsls	r3, r3, #9
 8005888:	429a      	cmp	r2, r3
 800588a:	d109      	bne.n	80058a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	4814      	ldr	r0, [pc, #80]	; (80058e0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005890:	f7fa fc3a 	bl	8000108 <__udivsi3>
 8005894:	0003      	movs	r3, r0
 8005896:	001a      	movs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4353      	muls	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e008      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4810      	ldr	r0, [pc, #64]	; (80058e4 <HAL_RCC_GetSysClockFreq+0xe4>)
 80058a4:	f7fa fc30 	bl	8000108 <__udivsi3>
 80058a8:	0003      	movs	r3, r0
 80058aa:	001a      	movs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4353      	muls	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	613b      	str	r3, [r7, #16]
      break;
 80058b6:	e005      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80058b8:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80058ba:	613b      	str	r3, [r7, #16]
      break;
 80058bc:	e002      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <HAL_RCC_GetSysClockFreq+0xe4>)
 80058c0:	613b      	str	r3, [r7, #16]
      break;
 80058c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80058c4:	693b      	ldr	r3, [r7, #16]
}
 80058c6:	0018      	movs	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b006      	add	sp, #24
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	40021000 	.word	0x40021000
 80058d4:	01e84800 	.word	0x01e84800
 80058d8:	0800dde0 	.word	0x0800dde0
 80058dc:	0800ddf0 	.word	0x0800ddf0
 80058e0:	02dc6c00 	.word	0x02dc6c00
 80058e4:	007a1200 	.word	0x007a1200

080058e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	20000004 	.word	0x20000004

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005900:	f7ff fff2 	bl	80058e8 <HAL_RCC_GetHCLKFreq>
 8005904:	0001      	movs	r1, r0
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	2207      	movs	r2, #7
 800590e:	4013      	ands	r3, r2
 8005910:	4a04      	ldr	r2, [pc, #16]	; (8005924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005912:	5cd3      	ldrb	r3, [r2, r3]
 8005914:	40d9      	lsrs	r1, r3
 8005916:	000b      	movs	r3, r1
}    
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	40021000 	.word	0x40021000
 8005924:	0800ddd8 	.word	0x0800ddd8

08005928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	025b      	lsls	r3, r3, #9
 8005940:	4013      	ands	r3, r2
 8005942:	d100      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005944:	e08e      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005946:	2017      	movs	r0, #23
 8005948:	183b      	adds	r3, r7, r0
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594e:	4b6e      	ldr	r3, [pc, #440]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	055b      	lsls	r3, r3, #21
 8005956:	4013      	ands	r3, r2
 8005958:	d110      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	4b6b      	ldr	r3, [pc, #428]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	4b6a      	ldr	r3, [pc, #424]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005960:	2180      	movs	r1, #128	; 0x80
 8005962:	0549      	lsls	r1, r1, #21
 8005964:	430a      	orrs	r2, r1
 8005966:	61da      	str	r2, [r3, #28]
 8005968:	4b67      	ldr	r3, [pc, #412]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	055b      	lsls	r3, r3, #21
 8005970:	4013      	ands	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005976:	183b      	adds	r3, r7, r0
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b63      	ldr	r3, [pc, #396]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4013      	ands	r3, r2
 8005986:	d11a      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005988:	4b60      	ldr	r3, [pc, #384]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	4b5f      	ldr	r3, [pc, #380]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	0049      	lsls	r1, r1, #1
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005996:	f7fd fd39 	bl	800340c <HAL_GetTick>
 800599a:	0003      	movs	r3, r0
 800599c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599e:	e008      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a0:	f7fd fd34 	bl	800340c <HAL_GetTick>
 80059a4:	0002      	movs	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0a6      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b2:	4b56      	ldr	r3, [pc, #344]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4013      	ands	r3, r2
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059be:	4b52      	ldr	r3, [pc, #328]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059c0:	6a1a      	ldr	r2, [r3, #32]
 80059c2:	23c0      	movs	r3, #192	; 0xc0
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4013      	ands	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d034      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	23c0      	movs	r3, #192	; 0xc0
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4013      	ands	r3, r2
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d02c      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059e0:	4b49      	ldr	r3, [pc, #292]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	4a4a      	ldr	r2, [pc, #296]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	4b46      	ldr	r3, [pc, #280]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	0249      	lsls	r1, r1, #9
 80059f4:	430a      	orrs	r2, r1
 80059f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059f8:	4b43      	ldr	r3, [pc, #268]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80059fe:	4945      	ldr	r1, [pc, #276]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005a00:	400a      	ands	r2, r1
 8005a02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a04:	4b40      	ldr	r3, [pc, #256]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a12:	f7fd fcfb 	bl	800340c <HAL_GetTick>
 8005a16:	0003      	movs	r3, r0
 8005a18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1a:	e009      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1c:	f7fd fcf6 	bl	800340c <HAL_GetTick>
 8005a20:	0002      	movs	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	4a3c      	ldr	r2, [pc, #240]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e067      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	2202      	movs	r2, #2
 8005a36:	4013      	ands	r3, r2
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a3a:	4b33      	ldr	r3, [pc, #204]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	4a34      	ldr	r2, [pc, #208]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	0019      	movs	r1, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a4e:	2317      	movs	r3, #23
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a58:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a5e:	492f      	ldr	r1, [pc, #188]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005a60:	400a      	ands	r2, r1
 8005a62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a6e:	4b26      	ldr	r3, [pc, #152]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	2203      	movs	r2, #3
 8005a74:	4393      	bics	r3, r2
 8005a76:	0019      	movs	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	4b22      	ldr	r3, [pc, #136]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2202      	movs	r2, #2
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	4a23      	ldr	r2, [pc, #140]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	0019      	movs	r1, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aaa:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	2210      	movs	r2, #16
 8005ab0:	4393      	bics	r3, r2
 8005ab2:	0019      	movs	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005aba:	430a      	orrs	r2, r1
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	029b      	lsls	r3, r3, #10
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	4393      	bics	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ada:	430a      	orrs	r2, r1
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	4393      	bics	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	4b03      	ldr	r3, [pc, #12]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005afa:	430a      	orrs	r2, r1
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b006      	add	sp, #24
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40007000 	.word	0x40007000
 8005b10:	fffffcff 	.word	0xfffffcff
 8005b14:	fffeffff 	.word	0xfffeffff
 8005b18:	00001388 	.word	0x00001388
 8005b1c:	efffffff 	.word	0xefffffff
 8005b20:	fffcffff 	.word	0xfffcffff

08005b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e0a8      	b.n	8005c88 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	2382      	movs	r3, #130	; 0x82
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d009      	beq.n	8005b5e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	61da      	str	r2, [r3, #28]
 8005b50:	e005      	b.n	8005b5e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	225d      	movs	r2, #93	; 0x5d
 8005b68:	5c9b      	ldrb	r3, [r3, r2]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d107      	bne.n	8005b80 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	225c      	movs	r2, #92	; 0x5c
 8005b74:	2100      	movs	r1, #0
 8005b76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f7fd fa20 	bl	8002fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	225d      	movs	r2, #93	; 0x5d
 8005b84:	2102      	movs	r1, #2
 8005b86:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2140      	movs	r1, #64	; 0x40
 8005b94:	438a      	bics	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	23e0      	movs	r3, #224	; 0xe0
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d902      	bls.n	8005baa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e002      	b.n	8005bb0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	015b      	lsls	r3, r3, #5
 8005bae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	23f0      	movs	r3, #240	; 0xf0
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d008      	beq.n	8005bce <HAL_SPI_Init+0xaa>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	23e0      	movs	r3, #224	; 0xe0
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d002      	beq.n	8005bce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	2382      	movs	r3, #130	; 0x82
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6899      	ldr	r1, [r3, #8]
 8005bdc:	2384      	movs	r3, #132	; 0x84
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	400b      	ands	r3, r1
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2102      	movs	r1, #2
 8005bea:	400b      	ands	r3, r1
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	400b      	ands	r3, r1
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6999      	ldr	r1, [r3, #24]
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	400b      	ands	r3, r1
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	2138      	movs	r1, #56	; 0x38
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	400b      	ands	r3, r1
 8005c16:	431a      	orrs	r2, r3
 8005c18:	0011      	movs	r1, r2
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	019b      	lsls	r3, r3, #6
 8005c22:	401a      	ands	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	2204      	movs	r2, #4
 8005c34:	401a      	ands	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	400b      	ands	r3, r1
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c44:	2108      	movs	r1, #8
 8005c46:	400b      	ands	r3, r1
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68d9      	ldr	r1, [r3, #12]
 8005c4e:	23f0      	movs	r3, #240	; 0xf0
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	400b      	ands	r3, r1
 8005c54:	431a      	orrs	r2, r3
 8005c56:	0011      	movs	r1, r2
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	015b      	lsls	r3, r3, #5
 8005c5e:	401a      	ands	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69da      	ldr	r2, [r3, #28]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4907      	ldr	r1, [pc, #28]	; (8005c90 <HAL_SPI_Init+0x16c>)
 8005c74:	400a      	ands	r2, r1
 8005c76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	225d      	movs	r2, #93	; 0x5d
 8005c82:	2101      	movs	r1, #1
 8005c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b004      	add	sp, #16
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	fffff7ff 	.word	0xfffff7ff

08005c94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	1dbb      	adds	r3, r7, #6
 8005ca2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ca4:	231f      	movs	r3, #31
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	225c      	movs	r2, #92	; 0x5c
 8005cb0:	5c9b      	ldrb	r3, [r3, r2]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_SPI_Transmit+0x26>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e147      	b.n	8005f4a <HAL_SPI_Transmit+0x2b6>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	225c      	movs	r2, #92	; 0x5c
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cc2:	f7fd fba3 	bl	800340c <HAL_GetTick>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005cca:	2316      	movs	r3, #22
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	1dba      	adds	r2, r7, #6
 8005cd0:	8812      	ldrh	r2, [r2, #0]
 8005cd2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	225d      	movs	r2, #93	; 0x5d
 8005cd8:	5c9b      	ldrb	r3, [r3, r2]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d004      	beq.n	8005cea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005ce0:	231f      	movs	r3, #31
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ce8:	e128      	b.n	8005f3c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_SPI_Transmit+0x64>
 8005cf0:	1dbb      	adds	r3, r7, #6
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005cf8:	231f      	movs	r3, #31
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d00:	e11c      	b.n	8005f3c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	225d      	movs	r2, #93	; 0x5d
 8005d06:	2103      	movs	r1, #3
 8005d08:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1dba      	adds	r2, r7, #6
 8005d1a:	8812      	ldrh	r2, [r2, #0]
 8005d1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1dba      	adds	r2, r7, #6
 8005d22:	8812      	ldrh	r2, [r2, #0]
 8005d24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2244      	movs	r2, #68	; 0x44
 8005d30:	2100      	movs	r1, #0
 8005d32:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2246      	movs	r2, #70	; 0x46
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d110      	bne.n	8005d76 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2140      	movs	r1, #64	; 0x40
 8005d60:	438a      	bics	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	01c9      	lsls	r1, r1, #7
 8005d72:	430a      	orrs	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2240      	movs	r2, #64	; 0x40
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d007      	beq.n	8005d94 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2140      	movs	r1, #64	; 0x40
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	23e0      	movs	r3, #224	; 0xe0
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d952      	bls.n	8005e46 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_SPI_Transmit+0x11e>
 8005da8:	2316      	movs	r3, #22
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d143      	bne.n	8005e3a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	881a      	ldrh	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	1c9a      	adds	r2, r3, #2
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dd6:	e030      	b.n	8005e3a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2202      	movs	r2, #2
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d112      	bne.n	8005e0c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	881a      	ldrh	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	1c9a      	adds	r2, r3, #2
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e0a:	e016      	b.n	8005e3a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e0c:	f7fd fafe 	bl	800340c <HAL_GetTick>
 8005e10:	0002      	movs	r2, r0
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d802      	bhi.n	8005e22 <HAL_SPI_Transmit+0x18e>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	d102      	bne.n	8005e28 <HAL_SPI_Transmit+0x194>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005e28:	231f      	movs	r3, #31
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	225d      	movs	r2, #93	; 0x5d
 8005e34:	2101      	movs	r1, #1
 8005e36:	5499      	strb	r1, [r3, r2]
          goto error;
 8005e38:	e080      	b.n	8005f3c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1c9      	bne.n	8005dd8 <HAL_SPI_Transmit+0x144>
 8005e44:	e053      	b.n	8005eee <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <HAL_SPI_Transmit+0x1c4>
 8005e4e:	2316      	movs	r3, #22
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d145      	bne.n	8005ee4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005e7e:	e031      	b.n	8005ee4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2202      	movs	r2, #2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d113      	bne.n	8005eb6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005eb4:	e016      	b.n	8005ee4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb6:	f7fd faa9 	bl	800340c <HAL_GetTick>
 8005eba:	0002      	movs	r2, r0
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d802      	bhi.n	8005ecc <HAL_SPI_Transmit+0x238>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	d102      	bne.n	8005ed2 <HAL_SPI_Transmit+0x23e>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005ed2:	231f      	movs	r3, #31
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	225d      	movs	r2, #93	; 0x5d
 8005ede:	2101      	movs	r1, #1
 8005ee0:	5499      	strb	r1, [r3, r2]
          goto error;
 8005ee2:	e02b      	b.n	8005f3c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1c8      	bne.n	8005e80 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f000 fb3f 	bl	8006578 <SPI_EndRxTxTransaction>
 8005efa:	1e03      	subs	r3, r0, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005f2a:	231f      	movs	r3, #31
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	2201      	movs	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e003      	b.n	8005f3c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	225d      	movs	r2, #93	; 0x5d
 8005f38:	2101      	movs	r1, #1
 8005f3a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	225c      	movs	r2, #92	; 0x5c
 8005f40:	2100      	movs	r1, #0
 8005f42:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f44:	231f      	movs	r3, #31
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	781b      	ldrb	r3, [r3, #0]
}
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b008      	add	sp, #32
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	001a      	movs	r2, r3
 8005f62:	1cbb      	adds	r3, r7, #2
 8005f64:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f66:	2301      	movs	r3, #1
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f6a:	2323      	movs	r3, #35	; 0x23
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	225c      	movs	r2, #92	; 0x5c
 8005f76:	5c9b      	ldrb	r3, [r3, r2]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x2c>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e1c4      	b.n	800630a <HAL_SPI_TransmitReceive+0x3b6>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	225c      	movs	r2, #92	; 0x5c
 8005f84:	2101      	movs	r1, #1
 8005f86:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f88:	f7fd fa40 	bl	800340c <HAL_GetTick>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f90:	201b      	movs	r0, #27
 8005f92:	183b      	adds	r3, r7, r0
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	215d      	movs	r1, #93	; 0x5d
 8005f98:	5c52      	ldrb	r2, [r2, r1]
 8005f9a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fa2:	2312      	movs	r3, #18
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	1cba      	adds	r2, r7, #2
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fac:	183b      	adds	r3, r7, r0
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d011      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x84>
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	2382      	movs	r3, #130	; 0x82
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d107      	bne.n	8005fce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <HAL_SPI_TransmitReceive+0x7a>
 8005fc6:	183b      	adds	r3, r7, r0
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d004      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005fce:	2323      	movs	r3, #35	; 0x23
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fd6:	e191      	b.n	80062fc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <HAL_SPI_TransmitReceive+0x98>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_SPI_TransmitReceive+0x98>
 8005fe4:	1cbb      	adds	r3, r7, #2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005fec:	2323      	movs	r3, #35	; 0x23
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ff4:	e182      	b.n	80062fc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	225d      	movs	r2, #93	; 0x5d
 8005ffa:	5c9b      	ldrb	r3, [r3, r2]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d003      	beq.n	800600a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	225d      	movs	r2, #93	; 0x5d
 8006006:	2105      	movs	r1, #5
 8006008:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1cba      	adds	r2, r7, #2
 800601a:	2146      	movs	r1, #70	; 0x46
 800601c:	8812      	ldrh	r2, [r2, #0]
 800601e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1cba      	adds	r2, r7, #2
 8006024:	2144      	movs	r1, #68	; 0x44
 8006026:	8812      	ldrh	r2, [r2, #0]
 8006028:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1cba      	adds	r2, r7, #2
 8006034:	8812      	ldrh	r2, [r2, #0]
 8006036:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1cba      	adds	r2, r7, #2
 800603c:	8812      	ldrh	r2, [r2, #0]
 800603e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	23e0      	movs	r3, #224	; 0xe0
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	429a      	cmp	r2, r3
 8006056:	d908      	bls.n	800606a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	49ac      	ldr	r1, [pc, #688]	; (8006314 <HAL_SPI_TransmitReceive+0x3c0>)
 8006064:	400a      	ands	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
 8006068:	e008      	b.n	800607c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	0149      	lsls	r1, r1, #5
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2240      	movs	r2, #64	; 0x40
 8006084:	4013      	ands	r3, r2
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d007      	beq.n	800609a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2140      	movs	r1, #64	; 0x40
 8006096:	430a      	orrs	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	23e0      	movs	r3, #224	; 0xe0
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d800      	bhi.n	80060a8 <HAL_SPI_TransmitReceive+0x154>
 80060a6:	e083      	b.n	80061b0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_SPI_TransmitReceive+0x168>
 80060b0:	2312      	movs	r3, #18
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d000      	beq.n	80060bc <HAL_SPI_TransmitReceive+0x168>
 80060ba:	e06d      	b.n	8006198 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e0:	e05a      	b.n	8006198 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2202      	movs	r2, #2
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d11b      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x1d4>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d016      	beq.n	8006128 <HAL_SPI_TransmitReceive+0x1d4>
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d113      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	881a      	ldrh	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	1c9a      	adds	r2, r3, #2
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2201      	movs	r2, #1
 8006130:	4013      	ands	r3, r2
 8006132:	2b01      	cmp	r3, #1
 8006134:	d11c      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x21c>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2246      	movs	r2, #70	; 0x46
 800613a:	5a9b      	ldrh	r3, [r3, r2]
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d016      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	b292      	uxth	r2, r2
 800614e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	1c9a      	adds	r2, r3, #2
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2246      	movs	r2, #70	; 0x46
 800615e:	5a9b      	ldrh	r3, [r3, r2]
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b299      	uxth	r1, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2246      	movs	r2, #70	; 0x46
 800616a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800616c:	2301      	movs	r3, #1
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006170:	f7fd f94c 	bl	800340c <HAL_GetTick>
 8006174:	0002      	movs	r2, r0
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617c:	429a      	cmp	r2, r3
 800617e:	d80b      	bhi.n	8006198 <HAL_SPI_TransmitReceive+0x244>
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	3301      	adds	r3, #1
 8006184:	d008      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8006186:	2323      	movs	r3, #35	; 0x23
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	2203      	movs	r2, #3
 800618c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	225d      	movs	r2, #93	; 0x5d
 8006192:	2101      	movs	r1, #1
 8006194:	5499      	strb	r1, [r3, r2]
        goto error;
 8006196:	e0b1      	b.n	80062fc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d19f      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x18e>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2246      	movs	r2, #70	; 0x46
 80061a6:	5a9b      	ldrh	r3, [r3, r2]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d199      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x18e>
 80061ae:	e089      	b.n	80062c4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0x270>
 80061b8:	2312      	movs	r3, #18
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d000      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0x270>
 80061c2:	e074      	b.n	80062ae <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ea:	e060      	b.n	80062ae <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2202      	movs	r2, #2
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d11c      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x2e0>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x2e0>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	2b01      	cmp	r3, #1
 8006208:	d114      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2201      	movs	r2, #1
 800623c:	4013      	ands	r3, r2
 800623e:	2b01      	cmp	r3, #1
 8006240:	d11e      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x32c>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2246      	movs	r2, #70	; 0x46
 8006246:	5a9b      	ldrh	r3, [r3, r2]
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d018      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	330c      	adds	r3, #12
 8006254:	001a      	movs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	7812      	ldrb	r2, [r2, #0]
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2246      	movs	r2, #70	; 0x46
 800626e:	5a9b      	ldrh	r3, [r3, r2]
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b299      	uxth	r1, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2246      	movs	r2, #70	; 0x46
 800627a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800627c:	2301      	movs	r3, #1
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006280:	f7fd f8c4 	bl	800340c <HAL_GetTick>
 8006284:	0002      	movs	r2, r0
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628c:	429a      	cmp	r2, r3
 800628e:	d802      	bhi.n	8006296 <HAL_SPI_TransmitReceive+0x342>
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	3301      	adds	r3, #1
 8006294:	d102      	bne.n	800629c <HAL_SPI_TransmitReceive+0x348>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	2b00      	cmp	r3, #0
 800629a:	d108      	bne.n	80062ae <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800629c:	2323      	movs	r3, #35	; 0x23
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	2203      	movs	r2, #3
 80062a2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	225d      	movs	r2, #93	; 0x5d
 80062a8:	2101      	movs	r1, #1
 80062aa:	5499      	strb	r1, [r3, r2]
        goto error;
 80062ac:	e026      	b.n	80062fc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d199      	bne.n	80061ec <HAL_SPI_TransmitReceive+0x298>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2246      	movs	r2, #70	; 0x46
 80062bc:	5a9b      	ldrh	r3, [r3, r2]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d193      	bne.n	80061ec <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	0018      	movs	r0, r3
 80062cc:	f000 f954 	bl	8006578 <SPI_EndRxTxTransaction>
 80062d0:	1e03      	subs	r3, r0, #0
 80062d2:	d006      	beq.n	80062e2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80062d4:	2323      	movs	r3, #35	; 0x23
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80062ea:	2323      	movs	r3, #35	; 0x23
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	e003      	b.n	80062fc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	225d      	movs	r2, #93	; 0x5d
 80062f8:	2101      	movs	r1, #1
 80062fa:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	225c      	movs	r2, #92	; 0x5c
 8006300:	2100      	movs	r1, #0
 8006302:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006304:	2323      	movs	r3, #35	; 0x23
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	781b      	ldrb	r3, [r3, #0]
}
 800630a:	0018      	movs	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	b00a      	add	sp, #40	; 0x28
 8006310:	bd80      	pop	{r7, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	ffffefff 	.word	0xffffefff

08006318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	1dfb      	adds	r3, r7, #7
 8006326:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006328:	f7fd f870 	bl	800340c <HAL_GetTick>
 800632c:	0002      	movs	r2, r0
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	18d3      	adds	r3, r2, r3
 8006336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006338:	f7fd f868 	bl	800340c <HAL_GetTick>
 800633c:	0003      	movs	r3, r0
 800633e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006340:	4b3a      	ldr	r3, [pc, #232]	; (800642c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	015b      	lsls	r3, r3, #5
 8006346:	0d1b      	lsrs	r3, r3, #20
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	4353      	muls	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800634e:	e058      	b.n	8006402 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	d055      	beq.n	8006402 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006356:	f7fd f859 	bl	800340c <HAL_GetTick>
 800635a:	0002      	movs	r2, r0
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	429a      	cmp	r2, r3
 8006364:	d902      	bls.n	800636c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d142      	bne.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	21e0      	movs	r1, #224	; 0xe0
 8006378:	438a      	bics	r2, r1
 800637a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	2382      	movs	r3, #130	; 0x82
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	429a      	cmp	r2, r3
 8006386:	d113      	bne.n	80063b0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	429a      	cmp	r2, r3
 8006392:	d005      	beq.n	80063a0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	429a      	cmp	r2, r3
 800639e:	d107      	bne.n	80063b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2140      	movs	r1, #64	; 0x40
 80063ac:	438a      	bics	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	019b      	lsls	r3, r3, #6
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d110      	bne.n	80063de <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	491a      	ldr	r1, [pc, #104]	; (8006430 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80063c8:	400a      	ands	r2, r1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	0189      	lsls	r1, r1, #6
 80063da:	430a      	orrs	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	225d      	movs	r2, #93	; 0x5d
 80063e2:	2101      	movs	r1, #1
 80063e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	225c      	movs	r2, #92	; 0x5c
 80063ea:	2100      	movs	r1, #0
 80063ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e017      	b.n	8006422 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	3b01      	subs	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	4013      	ands	r3, r2
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	425a      	negs	r2, r3
 8006412:	4153      	adcs	r3, r2
 8006414:	b2db      	uxtb	r3, r3
 8006416:	001a      	movs	r2, r3
 8006418:	1dfb      	adds	r3, r7, #7
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d197      	bne.n	8006350 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	0018      	movs	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	b008      	add	sp, #32
 8006428:	bd80      	pop	{r7, pc}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	20000004 	.word	0x20000004
 8006430:	ffffdfff 	.word	0xffffdfff

08006434 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006442:	2317      	movs	r3, #23
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	2200      	movs	r2, #0
 8006448:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800644a:	f7fc ffdf 	bl	800340c <HAL_GetTick>
 800644e:	0002      	movs	r2, r0
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800645a:	f7fc ffd7 	bl	800340c <HAL_GetTick>
 800645e:	0003      	movs	r3, r0
 8006460:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800646a:	4b41      	ldr	r3, [pc, #260]	; (8006570 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	0013      	movs	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	189b      	adds	r3, r3, r2
 8006474:	00da      	lsls	r2, r3, #3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	0d1b      	lsrs	r3, r3, #20
 800647a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647c:	4353      	muls	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006480:	e068      	b.n	8006554 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	23c0      	movs	r3, #192	; 0xc0
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	429a      	cmp	r2, r3
 800648a:	d10a      	bne.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	2117      	movs	r1, #23
 800649a:	187b      	adds	r3, r7, r1
 800649c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800649e:	187b      	adds	r3, r7, r1
 80064a0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	d055      	beq.n	8006554 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064a8:	f7fc ffb0 	bl	800340c <HAL_GetTick>
 80064ac:	0002      	movs	r2, r0
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d902      	bls.n	80064be <SPI_WaitFifoStateUntilTimeout+0x8a>
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d142      	bne.n	8006544 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	21e0      	movs	r1, #224	; 0xe0
 80064ca:	438a      	bics	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	2382      	movs	r3, #130	; 0x82
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d113      	bne.n	8006502 <SPI_WaitFifoStateUntilTimeout+0xce>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	2380      	movs	r3, #128	; 0x80
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d005      	beq.n	80064f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d107      	bne.n	8006502 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2140      	movs	r1, #64	; 0x40
 80064fe:	438a      	bics	r2, r1
 8006500:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	019b      	lsls	r3, r3, #6
 800650a:	429a      	cmp	r2, r3
 800650c:	d110      	bne.n	8006530 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4916      	ldr	r1, [pc, #88]	; (8006574 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800651a:	400a      	ands	r2, r1
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2180      	movs	r1, #128	; 0x80
 800652a:	0189      	lsls	r1, r1, #6
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	225d      	movs	r2, #93	; 0x5d
 8006534:	2101      	movs	r1, #1
 8006536:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	225c      	movs	r2, #92	; 0x5c
 800653c:	2100      	movs	r1, #0
 800653e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e010      	b.n	8006566 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	3b01      	subs	r3, #1
 8006552:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d18e      	bne.n	8006482 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b00a      	add	sp, #40	; 0x28
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	20000004 	.word	0x20000004
 8006574:	ffffdfff 	.word	0xffffdfff

08006578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	23c0      	movs	r3, #192	; 0xc0
 8006588:	0159      	lsls	r1, r3, #5
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	0013      	movs	r3, r2
 8006592:	2200      	movs	r2, #0
 8006594:	f7ff ff4e 	bl	8006434 <SPI_WaitFifoStateUntilTimeout>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d007      	beq.n	80065ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a0:	2220      	movs	r2, #32
 80065a2:	431a      	orrs	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e027      	b.n	80065fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	0013      	movs	r3, r2
 80065b6:	2200      	movs	r2, #0
 80065b8:	2180      	movs	r1, #128	; 0x80
 80065ba:	f7ff fead 	bl	8006318 <SPI_WaitFlagStateUntilTimeout>
 80065be:	1e03      	subs	r3, r0, #0
 80065c0:	d007      	beq.n	80065d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c6:	2220      	movs	r2, #32
 80065c8:	431a      	orrs	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e014      	b.n	80065fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	23c0      	movs	r3, #192	; 0xc0
 80065d6:	00d9      	lsls	r1, r3, #3
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	0013      	movs	r3, r2
 80065e0:	2200      	movs	r2, #0
 80065e2:	f7ff ff27 	bl	8006434 <SPI_WaitFifoStateUntilTimeout>
 80065e6:	1e03      	subs	r3, r0, #0
 80065e8:	d007      	beq.n	80065fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ee:	2220      	movs	r2, #32
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e000      	b.n	80065fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	0018      	movs	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	b004      	add	sp, #16
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e044      	b.n	80066a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d107      	bne.n	800662e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2278      	movs	r2, #120	; 0x78
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	0018      	movs	r0, r3
 800662a:	f7fc fdcf 	bl	80031cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2224      	movs	r2, #36	; 0x24
 8006632:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2101      	movs	r1, #1
 8006640:	438a      	bics	r2, r1
 8006642:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0018      	movs	r0, r3
 8006648:	f000 fd6e 	bl	8007128 <UART_SetConfig>
 800664c:	0003      	movs	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e024      	b.n	80066a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	0018      	movs	r0, r3
 8006662:	f000 fee9 	bl	8007438 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	490d      	ldr	r1, [pc, #52]	; (80066a8 <HAL_UART_Init+0xa4>)
 8006672:	400a      	ands	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	212a      	movs	r1, #42	; 0x2a
 8006682:	438a      	bics	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2101      	movs	r1, #1
 8006692:	430a      	orrs	r2, r1
 8006694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0018      	movs	r0, r3
 800669a:	f000 ff81 	bl	80075a0 <UART_CheckIdleState>
 800669e:	0003      	movs	r3, r0
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	ffffb7ff 	.word	0xffffb7ff

080066ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	1dbb      	adds	r3, r7, #6
 80066b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d15b      	bne.n	800677a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_UART_Transmit_IT+0x24>
 80066c8:	1dbb      	adds	r3, r7, #6
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e053      	b.n	800677c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	015b      	lsls	r3, r3, #5
 80066dc:	429a      	cmp	r2, r3
 80066de:	d109      	bne.n	80066f4 <HAL_UART_Transmit_IT+0x48>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2201      	movs	r2, #1
 80066ec:	4013      	ands	r3, r2
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e043      	b.n	800677c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1dba      	adds	r2, r7, #6
 80066fe:	2150      	movs	r1, #80	; 0x50
 8006700:	8812      	ldrh	r2, [r2, #0]
 8006702:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	1dba      	adds	r2, r7, #6
 8006708:	2152      	movs	r1, #82	; 0x52
 800670a:	8812      	ldrh	r2, [r2, #0]
 800670c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2284      	movs	r2, #132	; 0x84
 8006718:	2100      	movs	r1, #0
 800671a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2221      	movs	r2, #33	; 0x21
 8006720:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	015b      	lsls	r3, r3, #5
 800672a:	429a      	cmp	r2, r3
 800672c:	d107      	bne.n	800673e <HAL_UART_Transmit_IT+0x92>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a12      	ldr	r2, [pc, #72]	; (8006784 <HAL_UART_Transmit_IT+0xd8>)
 800673a:	66da      	str	r2, [r3, #108]	; 0x6c
 800673c:	e002      	b.n	8006744 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a11      	ldr	r2, [pc, #68]	; (8006788 <HAL_UART_Transmit_IT+0xdc>)
 8006742:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006744:	f3ef 8310 	mrs	r3, PRIMASK
 8006748:	613b      	str	r3, [r7, #16]
  return(result);
 800674a:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	2301      	movs	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f383 8810 	msr	PRIMASK, r3
}
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	430a      	orrs	r2, r1
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f383 8810 	msr	PRIMASK, r3
}
 8006774:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	e000      	b.n	800677c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
  }
}
 800677c:	0018      	movs	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	b008      	add	sp, #32
 8006782:	bd80      	pop	{r7, pc}
 8006784:	08007b4f 	.word	0x08007b4f
 8006788:	08007a9b 	.word	0x08007a9b

0800678c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	1dbb      	adds	r3, r7, #6
 8006798:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2280      	movs	r2, #128	; 0x80
 800679e:	589b      	ldr	r3, [r3, r2]
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d145      	bne.n	8006830 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_Receive_IT+0x26>
 80067aa:	1dbb      	adds	r3, r7, #6
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e03d      	b.n	8006832 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	015b      	lsls	r3, r3, #5
 80067be:	429a      	cmp	r2, r3
 80067c0:	d109      	bne.n	80067d6 <HAL_UART_Receive_IT+0x4a>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2201      	movs	r2, #1
 80067ce:	4013      	ands	r3, r2
 80067d0:	d001      	beq.n	80067d6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e02d      	b.n	8006832 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	041b      	lsls	r3, r3, #16
 80067e6:	4013      	ands	r3, r2
 80067e8:	d019      	beq.n	800681e <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ea:	f3ef 8310 	mrs	r3, PRIMASK
 80067ee:	613b      	str	r3, [r7, #16]
  return(result);
 80067f0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	2301      	movs	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f383 8810 	msr	PRIMASK, r3
}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	04c9      	lsls	r1, r1, #19
 800680e:	430a      	orrs	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f383 8810 	msr	PRIMASK, r3
}
 800681c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800681e:	1dbb      	adds	r3, r7, #6
 8006820:	881a      	ldrh	r2, [r3, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	0018      	movs	r0, r3
 8006828:	f000 ffcc 	bl	80077c4 <UART_Start_Receive_IT>
 800682c:	0003      	movs	r3, r0
 800682e:	e000      	b.n	8006832 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b008      	add	sp, #32
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b092      	sub	sp, #72	; 0x48
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006844:	f3ef 8310 	mrs	r3, PRIMASK
 8006848:	623b      	str	r3, [r7, #32]
  return(result);
 800684a:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800684c:	647b      	str	r3, [r7, #68]	; 0x44
 800684e:	2301      	movs	r3, #1
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	f383 8810 	msr	PRIMASK, r3
}
 8006858:	46c0      	nop			; (mov r8, r8)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4957      	ldr	r1, [pc, #348]	; (80069c4 <HAL_UART_AbortReceive_IT+0x188>)
 8006866:	400a      	ands	r2, r1
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	f383 8810 	msr	PRIMASK, r3
}
 8006874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006876:	f3ef 8310 	mrs	r3, PRIMASK
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687e:	643b      	str	r3, [r7, #64]	; 0x40
 8006880:	2301      	movs	r3, #1
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	f383 8810 	msr	PRIMASK, r3
}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2101      	movs	r1, #1
 8006898:	438a      	bics	r2, r1
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	f383 8810 	msr	PRIMASK, r3
}
 80068a6:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d118      	bne.n	80068e2 <HAL_UART_AbortReceive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b0:	f3ef 8310 	mrs	r3, PRIMASK
 80068b4:	617b      	str	r3, [r7, #20]
  return(result);
 80068b6:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ba:	2301      	movs	r3, #1
 80068bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f383 8810 	msr	PRIMASK, r3
}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2110      	movs	r1, #16
 80068d2:	438a      	bics	r2, r1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f383 8810 	msr	PRIMASK, r3
}
 80068e0:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2240      	movs	r2, #64	; 0x40
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d14e      	bne.n	800698e <HAL_UART_AbortReceive_IT+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f0:	f3ef 8310 	mrs	r3, PRIMASK
 80068f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80068f6:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068fa:	2301      	movs	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f383 8810 	msr	PRIMASK, r3
}
 8006904:	46c0      	nop			; (mov r8, r8)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2140      	movs	r1, #64	; 0x40
 8006912:	438a      	bics	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f383 8810 	msr	PRIMASK, r3
}
 8006920:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	2b00      	cmp	r3, #0
 8006928:	d012      	beq.n	8006950 <HAL_UART_AbortReceive_IT+0x114>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692e:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <HAL_UART_AbortReceive_IT+0x18c>)
 8006930:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	0018      	movs	r0, r3
 8006938:	f7fd fd56 	bl	80043e8 <HAL_DMA_Abort_IT>
 800693c:	1e03      	subs	r3, r0, #0
 800693e:	d03c      	beq.n	80069ba <HAL_UART_AbortReceive_IT+0x17e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694a:	0018      	movs	r0, r3
 800694c:	4790      	blx	r2
 800694e:	e034      	b.n	80069ba <HAL_UART_AbortReceive_IT+0x17e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	225a      	movs	r2, #90	; 0x5a
 8006954:	2100      	movs	r1, #0
 8006956:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	220f      	movs	r2, #15
 8006964:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2108      	movs	r1, #8
 8006972:	430a      	orrs	r2, r1
 8006974:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2280      	movs	r2, #128	; 0x80
 800697a:	2120      	movs	r1, #32
 800697c:	5099      	str	r1, [r3, r2]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0018      	movs	r0, r3
 8006988:	f000 fb08 	bl	8006f9c <HAL_UART_AbortReceiveCpltCallback>
 800698c:	e015      	b.n	80069ba <HAL_UART_AbortReceive_IT+0x17e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	225a      	movs	r2, #90	; 0x5a
 8006992:	2100      	movs	r1, #0
 8006994:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	220f      	movs	r2, #15
 80069a2:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	2120      	movs	r1, #32
 80069aa:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 faf1 	bl	8006f9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	b012      	add	sp, #72	; 0x48
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	fffffedf 	.word	0xfffffedf
 80069c8:	08007a4f 	.word	0x08007a4f

080069cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b0ab      	sub	sp, #172	; 0xac
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	22a4      	movs	r2, #164	; 0xa4
 80069dc:	18b9      	adds	r1, r7, r2
 80069de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	20a0      	movs	r0, #160	; 0xa0
 80069e8:	1839      	adds	r1, r7, r0
 80069ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	219c      	movs	r1, #156	; 0x9c
 80069f4:	1879      	adds	r1, r7, r1
 80069f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069f8:	0011      	movs	r1, r2
 80069fa:	18bb      	adds	r3, r7, r2
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a99      	ldr	r2, [pc, #612]	; (8006c64 <HAL_UART_IRQHandler+0x298>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	2298      	movs	r2, #152	; 0x98
 8006a04:	18bc      	adds	r4, r7, r2
 8006a06:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006a08:	18bb      	adds	r3, r7, r2
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d114      	bne.n	8006a3a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a10:	187b      	adds	r3, r7, r1
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2220      	movs	r2, #32
 8006a16:	4013      	ands	r3, r2
 8006a18:	d00f      	beq.n	8006a3a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a1a:	183b      	adds	r3, r7, r0
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	4013      	ands	r3, r2
 8006a22:	d00a      	beq.n	8006a3a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d100      	bne.n	8006a2e <HAL_UART_IRQHandler+0x62>
 8006a2c:	e29e      	b.n	8006f6c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	0010      	movs	r0, r2
 8006a36:	4798      	blx	r3
      }
      return;
 8006a38:	e298      	b.n	8006f6c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a3a:	2398      	movs	r3, #152	; 0x98
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d100      	bne.n	8006a46 <HAL_UART_IRQHandler+0x7a>
 8006a44:	e114      	b.n	8006c70 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a46:	239c      	movs	r3, #156	; 0x9c
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d106      	bne.n	8006a60 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a52:	23a0      	movs	r3, #160	; 0xa0
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a83      	ldr	r2, [pc, #524]	; (8006c68 <HAL_UART_IRQHandler+0x29c>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	d100      	bne.n	8006a60 <HAL_UART_IRQHandler+0x94>
 8006a5e:	e107      	b.n	8006c70 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a60:	23a4      	movs	r3, #164	; 0xa4
 8006a62:	18fb      	adds	r3, r7, r3
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2201      	movs	r2, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d012      	beq.n	8006a92 <HAL_UART_IRQHandler+0xc6>
 8006a6c:	23a0      	movs	r3, #160	; 0xa0
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	4013      	ands	r3, r2
 8006a78:	d00b      	beq.n	8006a92 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2284      	movs	r2, #132	; 0x84
 8006a86:	589b      	ldr	r3, [r3, r2]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2184      	movs	r1, #132	; 0x84
 8006a90:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a92:	23a4      	movs	r3, #164	; 0xa4
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d011      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xf6>
 8006a9e:	239c      	movs	r3, #156	; 0x9c
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2284      	movs	r2, #132	; 0x84
 8006ab6:	589b      	ldr	r3, [r3, r2]
 8006ab8:	2204      	movs	r2, #4
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2184      	movs	r1, #132	; 0x84
 8006ac0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac2:	23a4      	movs	r3, #164	; 0xa4
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2204      	movs	r2, #4
 8006aca:	4013      	ands	r3, r2
 8006acc:	d011      	beq.n	8006af2 <HAL_UART_IRQHandler+0x126>
 8006ace:	239c      	movs	r3, #156	; 0x9c
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2284      	movs	r2, #132	; 0x84
 8006ae6:	589b      	ldr	r3, [r3, r2]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2184      	movs	r1, #132	; 0x84
 8006af0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006af2:	23a4      	movs	r3, #164	; 0xa4
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2208      	movs	r2, #8
 8006afa:	4013      	ands	r3, r2
 8006afc:	d017      	beq.n	8006b2e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006afe:	23a0      	movs	r3, #160	; 0xa0
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2220      	movs	r2, #32
 8006b06:	4013      	ands	r3, r2
 8006b08:	d105      	bne.n	8006b16 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b0a:	239c      	movs	r3, #156	; 0x9c
 8006b0c:	18fb      	adds	r3, r7, r3
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2201      	movs	r2, #1
 8006b12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b14:	d00b      	beq.n	8006b2e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2284      	movs	r2, #132	; 0x84
 8006b22:	589b      	ldr	r3, [r3, r2]
 8006b24:	2208      	movs	r2, #8
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2184      	movs	r1, #132	; 0x84
 8006b2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b2e:	23a4      	movs	r3, #164	; 0xa4
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	2380      	movs	r3, #128	; 0x80
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <HAL_UART_IRQHandler+0x198>
 8006b3c:	23a0      	movs	r3, #160	; 0xa0
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	2380      	movs	r3, #128	; 0x80
 8006b44:	04db      	lsls	r3, r3, #19
 8006b46:	4013      	ands	r3, r2
 8006b48:	d00c      	beq.n	8006b64 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2280      	movs	r2, #128	; 0x80
 8006b50:	0112      	lsls	r2, r2, #4
 8006b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2284      	movs	r2, #132	; 0x84
 8006b58:	589b      	ldr	r3, [r3, r2]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2184      	movs	r1, #132	; 0x84
 8006b62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2284      	movs	r2, #132	; 0x84
 8006b68:	589b      	ldr	r3, [r3, r2]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d100      	bne.n	8006b70 <HAL_UART_IRQHandler+0x1a4>
 8006b6e:	e1ff      	b.n	8006f70 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b70:	23a4      	movs	r3, #164	; 0xa4
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2220      	movs	r2, #32
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b7c:	23a0      	movs	r3, #160	; 0xa0
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2220      	movs	r2, #32
 8006b84:	4013      	ands	r3, r2
 8006b86:	d008      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	0010      	movs	r0, r2
 8006b98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2284      	movs	r2, #132	; 0x84
 8006b9e:	589b      	ldr	r3, [r3, r2]
 8006ba0:	2194      	movs	r1, #148	; 0x94
 8006ba2:	187a      	adds	r2, r7, r1
 8006ba4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2240      	movs	r2, #64	; 0x40
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d004      	beq.n	8006bbe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bb4:	187b      	adds	r3, r7, r1
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2228      	movs	r2, #40	; 0x28
 8006bba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bbc:	d047      	beq.n	8006c4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 fec9 	bl	8007958 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2240      	movs	r2, #64	; 0x40
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d137      	bne.n	8006c44 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bdc:	2090      	movs	r0, #144	; 0x90
 8006bde:	183a      	adds	r2, r7, r0
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	2301      	movs	r3, #1
 8006be4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be8:	f383 8810 	msr	PRIMASK, r3
}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2140      	movs	r1, #64	; 0x40
 8006bfa:	438a      	bics	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]
 8006bfe:	183b      	adds	r3, r7, r0
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c06:	f383 8810 	msr	PRIMASK, r3
}
 8006c0a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d012      	beq.n	8006c3a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c18:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <HAL_UART_IRQHandler+0x2a0>)
 8006c1a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c20:	0018      	movs	r0, r3
 8006c22:	f7fd fbe1 	bl	80043e8 <HAL_DMA_Abort_IT>
 8006c26:	1e03      	subs	r3, r0, #0
 8006c28:	d01a      	beq.n	8006c60 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c34:	0018      	movs	r0, r3
 8006c36:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	e012      	b.n	8006c60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f000 f9a5 	bl	8006f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c42:	e00d      	b.n	8006c60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f000 f9a0 	bl	8006f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4c:	e008      	b.n	8006c60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	0018      	movs	r0, r3
 8006c52:	f000 f99b 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2284      	movs	r2, #132	; 0x84
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006c5e:	e187      	b.n	8006f70 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	46c0      	nop			; (mov r8, r8)
    return;
 8006c62:	e185      	b.n	8006f70 <HAL_UART_IRQHandler+0x5a4>
 8006c64:	0000080f 	.word	0x0000080f
 8006c68:	04000120 	.word	0x04000120
 8006c6c:	08007a21 	.word	0x08007a21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d000      	beq.n	8006c7a <HAL_UART_IRQHandler+0x2ae>
 8006c78:	e139      	b.n	8006eee <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c7a:	23a4      	movs	r3, #164	; 0xa4
 8006c7c:	18fb      	adds	r3, r7, r3
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2210      	movs	r2, #16
 8006c82:	4013      	ands	r3, r2
 8006c84:	d100      	bne.n	8006c88 <HAL_UART_IRQHandler+0x2bc>
 8006c86:	e132      	b.n	8006eee <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c88:	23a0      	movs	r3, #160	; 0xa0
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2210      	movs	r2, #16
 8006c90:	4013      	ands	r3, r2
 8006c92:	d100      	bne.n	8006c96 <HAL_UART_IRQHandler+0x2ca>
 8006c94:	e12b      	b.n	8006eee <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d000      	beq.n	8006cae <HAL_UART_IRQHandler+0x2e2>
 8006cac:	e09f      	b.n	8006dee <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	217e      	movs	r1, #126	; 0x7e
 8006cb8:	187b      	adds	r3, r7, r1
 8006cba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006cbc:	187b      	adds	r3, r7, r1
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d100      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x2fa>
 8006cc4:	e156      	b.n	8006f74 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2258      	movs	r2, #88	; 0x58
 8006cca:	5a9b      	ldrh	r3, [r3, r2]
 8006ccc:	187a      	adds	r2, r7, r1
 8006cce:	8812      	ldrh	r2, [r2, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d300      	bcc.n	8006cd6 <HAL_UART_IRQHandler+0x30a>
 8006cd4:	e14e      	b.n	8006f74 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	187a      	adds	r2, r7, r1
 8006cda:	215a      	movs	r1, #90	; 0x5a
 8006cdc:	8812      	ldrh	r2, [r2, #0]
 8006cde:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d06f      	beq.n	8006dca <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cea:	f3ef 8310 	mrs	r3, PRIMASK
 8006cee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cf2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	f383 8810 	msr	PRIMASK, r3
}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	499e      	ldr	r1, [pc, #632]	; (8006f84 <HAL_UART_IRQHandler+0x5b8>)
 8006d0c:	400a      	ands	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	f383 8810 	msr	PRIMASK, r3
}
 8006d1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d24:	677b      	str	r3, [r7, #116]	; 0x74
 8006d26:	2301      	movs	r3, #1
 8006d28:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2c:	f383 8810 	msr	PRIMASK, r3
}
 8006d30:	46c0      	nop			; (mov r8, r8)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	438a      	bics	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]
 8006d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d44:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d48:	f383 8810 	msr	PRIMASK, r3
}
 8006d4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d52:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d56:	673b      	str	r3, [r7, #112]	; 0x70
 8006d58:	2301      	movs	r3, #1
 8006d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5e:	f383 8810 	msr	PRIMASK, r3
}
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2140      	movs	r1, #64	; 0x40
 8006d70:	438a      	bics	r2, r1
 8006d72:	609a      	str	r2, [r3, #8]
 8006d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d76:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d7a:	f383 8810 	msr	PRIMASK, r3
}
 8006d7e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	2120      	movs	r1, #32
 8006d86:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d92:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d98:	2301      	movs	r3, #1
 8006d9a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d9e:	f383 8810 	msr	PRIMASK, r3
}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2110      	movs	r1, #16
 8006db0:	438a      	bics	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dba:	f383 8810 	msr	PRIMASK, r3
}
 8006dbe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7fd fad7 	bl	8004378 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2258      	movs	r2, #88	; 0x58
 8006dd4:	5a9a      	ldrh	r2, [r3, r2]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	215a      	movs	r1, #90	; 0x5a
 8006dda:	5a5b      	ldrh	r3, [r3, r1]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	0011      	movs	r1, r2
 8006de6:	0018      	movs	r0, r3
 8006de8:	f000 f8e0 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dec:	e0c2      	b.n	8006f74 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2258      	movs	r2, #88	; 0x58
 8006df2:	5a99      	ldrh	r1, [r3, r2]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	225a      	movs	r2, #90	; 0x5a
 8006df8:	5a9b      	ldrh	r3, [r3, r2]
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	208e      	movs	r0, #142	; 0x8e
 8006dfe:	183b      	adds	r3, r7, r0
 8006e00:	1a8a      	subs	r2, r1, r2
 8006e02:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	225a      	movs	r2, #90	; 0x5a
 8006e08:	5a9b      	ldrh	r3, [r3, r2]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d100      	bne.n	8006e12 <HAL_UART_IRQHandler+0x446>
 8006e10:	e0b2      	b.n	8006f78 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8006e12:	183b      	adds	r3, r7, r0
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d100      	bne.n	8006e1c <HAL_UART_IRQHandler+0x450>
 8006e1a:	e0ad      	b.n	8006f78 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e22:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e24:	2488      	movs	r4, #136	; 0x88
 8006e26:	193a      	adds	r2, r7, r4
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f383 8810 	msr	PRIMASK, r3
}
 8006e34:	46c0      	nop			; (mov r8, r8)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4951      	ldr	r1, [pc, #324]	; (8006f88 <HAL_UART_IRQHandler+0x5bc>)
 8006e42:	400a      	ands	r2, r1
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	193b      	adds	r3, r7, r4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f383 8810 	msr	PRIMASK, r3
}
 8006e52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e54:	f3ef 8310 	mrs	r3, PRIMASK
 8006e58:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e5a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5c:	2484      	movs	r4, #132	; 0x84
 8006e5e:	193a      	adds	r2, r7, r4
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	2301      	movs	r3, #1
 8006e64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f383 8810 	msr	PRIMASK, r3
}
 8006e6c:	46c0      	nop			; (mov r8, r8)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2101      	movs	r1, #1
 8006e7a:	438a      	bics	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]
 8006e7e:	193b      	adds	r3, r7, r4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	f383 8810 	msr	PRIMASK, r3
}
 8006e8a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2280      	movs	r2, #128	; 0x80
 8006e90:	2120      	movs	r1, #32
 8006e92:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea8:	2480      	movs	r4, #128	; 0x80
 8006eaa:	193a      	adds	r2, r7, r4
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	2301      	movs	r3, #1
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	f383 8810 	msr	PRIMASK, r3
}
 8006eb8:	46c0      	nop			; (mov r8, r8)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2110      	movs	r1, #16
 8006ec6:	438a      	bics	r2, r1
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	193b      	adds	r3, r7, r4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	f383 8810 	msr	PRIMASK, r3
}
 8006ed6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ede:	183b      	adds	r3, r7, r0
 8006ee0:	881a      	ldrh	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	0011      	movs	r1, r2
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f000 f860 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006eec:	e044      	b.n	8006f78 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006eee:	23a4      	movs	r3, #164	; 0xa4
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	035b      	lsls	r3, r3, #13
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d010      	beq.n	8006f1e <HAL_UART_IRQHandler+0x552>
 8006efc:	239c      	movs	r3, #156	; 0x9c
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	03db      	lsls	r3, r3, #15
 8006f06:	4013      	ands	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2280      	movs	r2, #128	; 0x80
 8006f10:	0352      	lsls	r2, r2, #13
 8006f12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	0018      	movs	r0, r3
 8006f18:	f001 f85a 	bl	8007fd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f1c:	e02f      	b.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f1e:	23a4      	movs	r3, #164	; 0xa4
 8006f20:	18fb      	adds	r3, r7, r3
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2280      	movs	r2, #128	; 0x80
 8006f26:	4013      	ands	r3, r2
 8006f28:	d00f      	beq.n	8006f4a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f2a:	23a0      	movs	r3, #160	; 0xa0
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2280      	movs	r2, #128	; 0x80
 8006f32:	4013      	ands	r3, r2
 8006f34:	d009      	beq.n	8006f4a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01e      	beq.n	8006f7c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	0010      	movs	r0, r2
 8006f46:	4798      	blx	r3
    }
    return;
 8006f48:	e018      	b.n	8006f7c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f4a:	23a4      	movs	r3, #164	; 0xa4
 8006f4c:	18fb      	adds	r3, r7, r3
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2240      	movs	r2, #64	; 0x40
 8006f52:	4013      	ands	r3, r2
 8006f54:	d013      	beq.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
 8006f56:	23a0      	movs	r3, #160	; 0xa0
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2240      	movs	r2, #64	; 0x40
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d00d      	beq.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	0018      	movs	r0, r3
 8006f66:	f000 fe50 	bl	8007c0a <UART_EndTransmit_IT>
    return;
 8006f6a:	e008      	b.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
      return;
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	e006      	b.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
    return;
 8006f70:	46c0      	nop			; (mov r8, r8)
 8006f72:	e004      	b.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
      return;
 8006f74:	46c0      	nop			; (mov r8, r8)
 8006f76:	e002      	b.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
      return;
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	e000      	b.n	8006f7e <HAL_UART_IRQHandler+0x5b2>
    return;
 8006f7c:	46c0      	nop			; (mov r8, r8)
  }

}
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b02b      	add	sp, #172	; 0xac
 8006f82:	bd90      	pop	{r4, r7, pc}
 8006f84:	fffffeff 	.word	0xfffffeff
 8006f88:	fffffedf 	.word	0xfffffedf

08006f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	46bd      	mov	sp, r7
 8006f98:	b002      	add	sp, #8
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006fa4:	46c0      	nop			; (mov r8, r8)
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b002      	add	sp, #8
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	000a      	movs	r2, r1
 8006fb6:	1cbb      	adds	r3, r7, #2
 8006fb8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b002      	add	sp, #8
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b08a      	sub	sp, #40	; 0x28
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2278      	movs	r2, #120	; 0x78
 8006fce:	5c9b      	ldrb	r3, [r3, r2]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e040      	b.n	800705a <HAL_HalfDuplex_EnableTransmitter+0x98>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2278      	movs	r2, #120	; 0x78
 8006fdc:	2101      	movs	r1, #1
 8006fde:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2224      	movs	r2, #36	; 0x24
 8006fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fea:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f383 8810 	msr	PRIMASK, r3
}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	210c      	movs	r1, #12
 8007008:	438a      	bics	r2, r1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007018:	f3ef 8310 	mrs	r3, PRIMASK
 800701c:	617b      	str	r3, [r7, #20]
  return(result);
 800701e:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007020:	623b      	str	r3, [r7, #32]
 8007022:	2301      	movs	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f383 8810 	msr	PRIMASK, r3
}
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2108      	movs	r1, #8
 800703a:	430a      	orrs	r2, r1
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f383 8810 	msr	PRIMASK, r3
}
 8007048:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UNLOCK(huart);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2278      	movs	r2, #120	; 0x78
 8007054:	2100      	movs	r1, #0
 8007056:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b00a      	add	sp, #40	; 0x28
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b08a      	sub	sp, #40	; 0x28
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2278      	movs	r2, #120	; 0x78
 800706e:	5c9b      	ldrb	r3, [r3, r2]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_HalfDuplex_EnableReceiver+0x16>
 8007074:	2302      	movs	r3, #2
 8007076:	e040      	b.n	80070fa <HAL_HalfDuplex_EnableReceiver+0x98>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2278      	movs	r2, #120	; 0x78
 800707c:	2101      	movs	r1, #1
 800707e:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2224      	movs	r2, #36	; 0x24
 8007084:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007086:	f3ef 8310 	mrs	r3, PRIMASK
 800708a:	60bb      	str	r3, [r7, #8]
  return(result);
 800708c:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
 8007090:	2301      	movs	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f383 8810 	msr	PRIMASK, r3
}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	210c      	movs	r1, #12
 80070a8:	438a      	bics	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f383 8810 	msr	PRIMASK, r3
}
 80070b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b8:	f3ef 8310 	mrs	r3, PRIMASK
 80070bc:	617b      	str	r3, [r7, #20]
  return(result);
 80070be:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80070c0:	623b      	str	r3, [r7, #32]
 80070c2:	2301      	movs	r3, #1
 80070c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	f383 8810 	msr	PRIMASK, r3
}
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2104      	movs	r1, #4
 80070da:	430a      	orrs	r2, r1
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f383 8810 	msr	PRIMASK, r3
}
 80070e8:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UNLOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2278      	movs	r2, #120	; 0x78
 80070f4:	2100      	movs	r1, #0
 80070f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	0018      	movs	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b00a      	add	sp, #40	; 0x28
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800710e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2280      	movs	r2, #128	; 0x80
 8007114:	589b      	ldr	r3, [r3, r2]
 8007116:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4313      	orrs	r3, r2
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b004      	add	sp, #16
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007130:	231e      	movs	r3, #30
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4aaf      	ldr	r2, [pc, #700]	; (8007414 <UART_SetConfig+0x2ec>)
 8007158:	4013      	ands	r3, r2
 800715a:	0019      	movs	r1, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	430a      	orrs	r2, r1
 8007164:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4aaa      	ldr	r2, [pc, #680]	; (8007418 <UART_SetConfig+0x2f0>)
 800716e:	4013      	ands	r3, r2
 8007170:	0019      	movs	r1, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4aa1      	ldr	r2, [pc, #644]	; (800741c <UART_SetConfig+0x2f4>)
 8007196:	4013      	ands	r3, r2
 8007198:	0019      	movs	r1, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a9d      	ldr	r2, [pc, #628]	; (8007420 <UART_SetConfig+0x2f8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d127      	bne.n	80071fe <UART_SetConfig+0xd6>
 80071ae:	4b9d      	ldr	r3, [pc, #628]	; (8007424 <UART_SetConfig+0x2fc>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	2203      	movs	r2, #3
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d00d      	beq.n	80071d6 <UART_SetConfig+0xae>
 80071ba:	d81b      	bhi.n	80071f4 <UART_SetConfig+0xcc>
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d014      	beq.n	80071ea <UART_SetConfig+0xc2>
 80071c0:	d818      	bhi.n	80071f4 <UART_SetConfig+0xcc>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <UART_SetConfig+0xa4>
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d00a      	beq.n	80071e0 <UART_SetConfig+0xb8>
 80071ca:	e013      	b.n	80071f4 <UART_SetConfig+0xcc>
 80071cc:	231f      	movs	r3, #31
 80071ce:	18fb      	adds	r3, r7, r3
 80071d0:	2200      	movs	r2, #0
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	e065      	b.n	80072a2 <UART_SetConfig+0x17a>
 80071d6:	231f      	movs	r3, #31
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	2202      	movs	r2, #2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e060      	b.n	80072a2 <UART_SetConfig+0x17a>
 80071e0:	231f      	movs	r3, #31
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	2204      	movs	r2, #4
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	e05b      	b.n	80072a2 <UART_SetConfig+0x17a>
 80071ea:	231f      	movs	r3, #31
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	2208      	movs	r2, #8
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	e056      	b.n	80072a2 <UART_SetConfig+0x17a>
 80071f4:	231f      	movs	r3, #31
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	2210      	movs	r2, #16
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	e051      	b.n	80072a2 <UART_SetConfig+0x17a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a89      	ldr	r2, [pc, #548]	; (8007428 <UART_SetConfig+0x300>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d134      	bne.n	8007272 <UART_SetConfig+0x14a>
 8007208:	4b86      	ldr	r3, [pc, #536]	; (8007424 <UART_SetConfig+0x2fc>)
 800720a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800720c:	23c0      	movs	r3, #192	; 0xc0
 800720e:	029b      	lsls	r3, r3, #10
 8007210:	4013      	ands	r3, r2
 8007212:	22c0      	movs	r2, #192	; 0xc0
 8007214:	0292      	lsls	r2, r2, #10
 8007216:	4293      	cmp	r3, r2
 8007218:	d017      	beq.n	800724a <UART_SetConfig+0x122>
 800721a:	22c0      	movs	r2, #192	; 0xc0
 800721c:	0292      	lsls	r2, r2, #10
 800721e:	4293      	cmp	r3, r2
 8007220:	d822      	bhi.n	8007268 <UART_SetConfig+0x140>
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	0292      	lsls	r2, r2, #10
 8007226:	4293      	cmp	r3, r2
 8007228:	d019      	beq.n	800725e <UART_SetConfig+0x136>
 800722a:	2280      	movs	r2, #128	; 0x80
 800722c:	0292      	lsls	r2, r2, #10
 800722e:	4293      	cmp	r3, r2
 8007230:	d81a      	bhi.n	8007268 <UART_SetConfig+0x140>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d004      	beq.n	8007240 <UART_SetConfig+0x118>
 8007236:	2280      	movs	r2, #128	; 0x80
 8007238:	0252      	lsls	r2, r2, #9
 800723a:	4293      	cmp	r3, r2
 800723c:	d00a      	beq.n	8007254 <UART_SetConfig+0x12c>
 800723e:	e013      	b.n	8007268 <UART_SetConfig+0x140>
 8007240:	231f      	movs	r3, #31
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	e02b      	b.n	80072a2 <UART_SetConfig+0x17a>
 800724a:	231f      	movs	r3, #31
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	2202      	movs	r2, #2
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	e026      	b.n	80072a2 <UART_SetConfig+0x17a>
 8007254:	231f      	movs	r3, #31
 8007256:	18fb      	adds	r3, r7, r3
 8007258:	2204      	movs	r2, #4
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e021      	b.n	80072a2 <UART_SetConfig+0x17a>
 800725e:	231f      	movs	r3, #31
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	2208      	movs	r2, #8
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e01c      	b.n	80072a2 <UART_SetConfig+0x17a>
 8007268:	231f      	movs	r3, #31
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	2210      	movs	r2, #16
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	e017      	b.n	80072a2 <UART_SetConfig+0x17a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a6d      	ldr	r2, [pc, #436]	; (800742c <UART_SetConfig+0x304>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d104      	bne.n	8007286 <UART_SetConfig+0x15e>
 800727c:	231f      	movs	r3, #31
 800727e:	18fb      	adds	r3, r7, r3
 8007280:	2200      	movs	r2, #0
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	e00d      	b.n	80072a2 <UART_SetConfig+0x17a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a69      	ldr	r2, [pc, #420]	; (8007430 <UART_SetConfig+0x308>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d104      	bne.n	800729a <UART_SetConfig+0x172>
 8007290:	231f      	movs	r3, #31
 8007292:	18fb      	adds	r3, r7, r3
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	e003      	b.n	80072a2 <UART_SetConfig+0x17a>
 800729a:	231f      	movs	r3, #31
 800729c:	18fb      	adds	r3, r7, r3
 800729e:	2210      	movs	r2, #16
 80072a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69da      	ldr	r2, [r3, #28]
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d15c      	bne.n	8007368 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80072ae:	231f      	movs	r3, #31
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d015      	beq.n	80072e4 <UART_SetConfig+0x1bc>
 80072b8:	dc18      	bgt.n	80072ec <UART_SetConfig+0x1c4>
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d00d      	beq.n	80072da <UART_SetConfig+0x1b2>
 80072be:	dc15      	bgt.n	80072ec <UART_SetConfig+0x1c4>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <UART_SetConfig+0x1a2>
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d005      	beq.n	80072d4 <UART_SetConfig+0x1ac>
 80072c8:	e010      	b.n	80072ec <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ca:	f7fe fb17 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 80072ce:	0003      	movs	r3, r0
 80072d0:	61bb      	str	r3, [r7, #24]
        break;
 80072d2:	e012      	b.n	80072fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d4:	4b57      	ldr	r3, [pc, #348]	; (8007434 <UART_SetConfig+0x30c>)
 80072d6:	61bb      	str	r3, [r7, #24]
        break;
 80072d8:	e00f      	b.n	80072fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072da:	f7fe fa91 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 80072de:	0003      	movs	r3, r0
 80072e0:	61bb      	str	r3, [r7, #24]
        break;
 80072e2:	e00a      	b.n	80072fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	61bb      	str	r3, [r7, #24]
        break;
 80072ea:	e006      	b.n	80072fa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072f0:	231e      	movs	r3, #30
 80072f2:	18fb      	adds	r3, r7, r3
 80072f4:	2201      	movs	r2, #1
 80072f6:	701a      	strb	r2, [r3, #0]
        break;
 80072f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d100      	bne.n	8007302 <UART_SetConfig+0x1da>
 8007300:	e07a      	b.n	80073f8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	005a      	lsls	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	085b      	lsrs	r3, r3, #1
 800730c:	18d2      	adds	r2, r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	0019      	movs	r1, r3
 8007314:	0010      	movs	r0, r2
 8007316:	f7f8 fef7 	bl	8000108 <__udivsi3>
 800731a:	0003      	movs	r3, r0
 800731c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b0f      	cmp	r3, #15
 8007322:	d91c      	bls.n	800735e <UART_SetConfig+0x236>
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	025b      	lsls	r3, r3, #9
 800732a:	429a      	cmp	r2, r3
 800732c:	d217      	bcs.n	800735e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	b29a      	uxth	r2, r3
 8007332:	200e      	movs	r0, #14
 8007334:	183b      	adds	r3, r7, r0
 8007336:	210f      	movs	r1, #15
 8007338:	438a      	bics	r2, r1
 800733a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	2207      	movs	r2, #7
 8007344:	4013      	ands	r3, r2
 8007346:	b299      	uxth	r1, r3
 8007348:	183b      	adds	r3, r7, r0
 800734a:	183a      	adds	r2, r7, r0
 800734c:	8812      	ldrh	r2, [r2, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	183a      	adds	r2, r7, r0
 8007358:	8812      	ldrh	r2, [r2, #0]
 800735a:	60da      	str	r2, [r3, #12]
 800735c:	e04c      	b.n	80073f8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800735e:	231e      	movs	r3, #30
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	2201      	movs	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	e047      	b.n	80073f8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007368:	231f      	movs	r3, #31
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b08      	cmp	r3, #8
 8007370:	d015      	beq.n	800739e <UART_SetConfig+0x276>
 8007372:	dc18      	bgt.n	80073a6 <UART_SetConfig+0x27e>
 8007374:	2b04      	cmp	r3, #4
 8007376:	d00d      	beq.n	8007394 <UART_SetConfig+0x26c>
 8007378:	dc15      	bgt.n	80073a6 <UART_SetConfig+0x27e>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <UART_SetConfig+0x25c>
 800737e:	2b02      	cmp	r3, #2
 8007380:	d005      	beq.n	800738e <UART_SetConfig+0x266>
 8007382:	e010      	b.n	80073a6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fe faba 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 8007388:	0003      	movs	r3, r0
 800738a:	61bb      	str	r3, [r7, #24]
        break;
 800738c:	e012      	b.n	80073b4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800738e:	4b29      	ldr	r3, [pc, #164]	; (8007434 <UART_SetConfig+0x30c>)
 8007390:	61bb      	str	r3, [r7, #24]
        break;
 8007392:	e00f      	b.n	80073b4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007394:	f7fe fa34 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 8007398:	0003      	movs	r3, r0
 800739a:	61bb      	str	r3, [r7, #24]
        break;
 800739c:	e00a      	b.n	80073b4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739e:	2380      	movs	r3, #128	; 0x80
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	61bb      	str	r3, [r7, #24]
        break;
 80073a4:	e006      	b.n	80073b4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073aa:	231e      	movs	r3, #30
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	2201      	movs	r2, #1
 80073b0:	701a      	strb	r2, [r3, #0]
        break;
 80073b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d01e      	beq.n	80073f8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	085a      	lsrs	r2, r3, #1
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	18d2      	adds	r2, r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	0019      	movs	r1, r3
 80073ca:	0010      	movs	r0, r2
 80073cc:	f7f8 fe9c 	bl	8000108 <__udivsi3>
 80073d0:	0003      	movs	r3, r0
 80073d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	d90a      	bls.n	80073f0 <UART_SetConfig+0x2c8>
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	2380      	movs	r3, #128	; 0x80
 80073de:	025b      	lsls	r3, r3, #9
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d205      	bcs.n	80073f0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	e003      	b.n	80073f8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80073f0:	231e      	movs	r3, #30
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007404:	231e      	movs	r3, #30
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	781b      	ldrb	r3, [r3, #0]
}
 800740a:	0018      	movs	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	b008      	add	sp, #32
 8007410:	bd80      	pop	{r7, pc}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	efff69f3 	.word	0xefff69f3
 8007418:	ffffcfff 	.word	0xffffcfff
 800741c:	fffff4ff 	.word	0xfffff4ff
 8007420:	40013800 	.word	0x40013800
 8007424:	40021000 	.word	0x40021000
 8007428:	40004400 	.word	0x40004400
 800742c:	40004800 	.word	0x40004800
 8007430:	40004c00 	.word	0x40004c00
 8007434:	007a1200 	.word	0x007a1200

08007438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	2201      	movs	r2, #1
 8007446:	4013      	ands	r3, r2
 8007448:	d00b      	beq.n	8007462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4a4a      	ldr	r2, [pc, #296]	; (800757c <UART_AdvFeatureConfig+0x144>)
 8007452:	4013      	ands	r3, r2
 8007454:	0019      	movs	r1, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2202      	movs	r2, #2
 8007468:	4013      	ands	r3, r2
 800746a:	d00b      	beq.n	8007484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	4a43      	ldr	r2, [pc, #268]	; (8007580 <UART_AdvFeatureConfig+0x148>)
 8007474:	4013      	ands	r3, r2
 8007476:	0019      	movs	r1, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2204      	movs	r2, #4
 800748a:	4013      	ands	r3, r2
 800748c:	d00b      	beq.n	80074a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	4a3b      	ldr	r2, [pc, #236]	; (8007584 <UART_AdvFeatureConfig+0x14c>)
 8007496:	4013      	ands	r3, r2
 8007498:	0019      	movs	r1, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	2208      	movs	r2, #8
 80074ac:	4013      	ands	r3, r2
 80074ae:	d00b      	beq.n	80074c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	4a34      	ldr	r2, [pc, #208]	; (8007588 <UART_AdvFeatureConfig+0x150>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	0019      	movs	r1, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2210      	movs	r2, #16
 80074ce:	4013      	ands	r3, r2
 80074d0:	d00b      	beq.n	80074ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	4a2c      	ldr	r2, [pc, #176]	; (800758c <UART_AdvFeatureConfig+0x154>)
 80074da:	4013      	ands	r3, r2
 80074dc:	0019      	movs	r1, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	2220      	movs	r2, #32
 80074f0:	4013      	ands	r3, r2
 80074f2:	d00b      	beq.n	800750c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	4a25      	ldr	r2, [pc, #148]	; (8007590 <UART_AdvFeatureConfig+0x158>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	0019      	movs	r1, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	2240      	movs	r2, #64	; 0x40
 8007512:	4013      	ands	r3, r2
 8007514:	d01d      	beq.n	8007552 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	4a1d      	ldr	r2, [pc, #116]	; (8007594 <UART_AdvFeatureConfig+0x15c>)
 800751e:	4013      	ands	r3, r2
 8007520:	0019      	movs	r1, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007532:	2380      	movs	r3, #128	; 0x80
 8007534:	035b      	lsls	r3, r3, #13
 8007536:	429a      	cmp	r2, r3
 8007538:	d10b      	bne.n	8007552 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	4a15      	ldr	r2, [pc, #84]	; (8007598 <UART_AdvFeatureConfig+0x160>)
 8007542:	4013      	ands	r3, r2
 8007544:	0019      	movs	r1, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2280      	movs	r2, #128	; 0x80
 8007558:	4013      	ands	r3, r2
 800755a:	d00b      	beq.n	8007574 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	4a0e      	ldr	r2, [pc, #56]	; (800759c <UART_AdvFeatureConfig+0x164>)
 8007564:	4013      	ands	r3, r2
 8007566:	0019      	movs	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }
}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	46bd      	mov	sp, r7
 8007578:	b002      	add	sp, #8
 800757a:	bd80      	pop	{r7, pc}
 800757c:	fffdffff 	.word	0xfffdffff
 8007580:	fffeffff 	.word	0xfffeffff
 8007584:	fffbffff 	.word	0xfffbffff
 8007588:	ffff7fff 	.word	0xffff7fff
 800758c:	ffffefff 	.word	0xffffefff
 8007590:	ffffdfff 	.word	0xffffdfff
 8007594:	ffefffff 	.word	0xffefffff
 8007598:	ff9fffff 	.word	0xff9fffff
 800759c:	fff7ffff 	.word	0xfff7ffff

080075a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b092      	sub	sp, #72	; 0x48
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2284      	movs	r2, #132	; 0x84
 80075ac:	2100      	movs	r1, #0
 80075ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075b0:	f7fb ff2c 	bl	800340c <HAL_GetTick>
 80075b4:	0003      	movs	r3, r0
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2208      	movs	r2, #8
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d12c      	bne.n	8007620 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c8:	2280      	movs	r2, #128	; 0x80
 80075ca:	0391      	lsls	r1, r2, #14
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4a46      	ldr	r2, [pc, #280]	; (80076e8 <UART_CheckIdleState+0x148>)
 80075d0:	9200      	str	r2, [sp, #0]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f000 f88c 	bl	80076f0 <UART_WaitOnFlagUntilTimeout>
 80075d8:	1e03      	subs	r3, r0, #0
 80075da:	d021      	beq.n	8007620 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075dc:	f3ef 8310 	mrs	r3, PRIMASK
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075e6:	2301      	movs	r3, #1
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	f383 8810 	msr	PRIMASK, r3
}
 80075f0:	46c0      	nop			; (mov r8, r8)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2180      	movs	r1, #128	; 0x80
 80075fe:	438a      	bics	r2, r1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	f383 8810 	msr	PRIMASK, r3
}
 800760c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2278      	movs	r2, #120	; 0x78
 8007618:	2100      	movs	r1, #0
 800761a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e05f      	b.n	80076e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2204      	movs	r2, #4
 8007628:	4013      	ands	r3, r2
 800762a:	2b04      	cmp	r3, #4
 800762c:	d146      	bne.n	80076bc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800762e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007630:	2280      	movs	r2, #128	; 0x80
 8007632:	03d1      	lsls	r1, r2, #15
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4a2c      	ldr	r2, [pc, #176]	; (80076e8 <UART_CheckIdleState+0x148>)
 8007638:	9200      	str	r2, [sp, #0]
 800763a:	2200      	movs	r2, #0
 800763c:	f000 f858 	bl	80076f0 <UART_WaitOnFlagUntilTimeout>
 8007640:	1e03      	subs	r3, r0, #0
 8007642:	d03b      	beq.n	80076bc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007644:	f3ef 8310 	mrs	r3, PRIMASK
 8007648:	60fb      	str	r3, [r7, #12]
  return(result);
 800764a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
 800764e:	2301      	movs	r3, #1
 8007650:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f383 8810 	msr	PRIMASK, r3
}
 8007658:	46c0      	nop			; (mov r8, r8)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4921      	ldr	r1, [pc, #132]	; (80076ec <UART_CheckIdleState+0x14c>)
 8007666:	400a      	ands	r2, r1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f383 8810 	msr	PRIMASK, r3
}
 8007674:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007676:	f3ef 8310 	mrs	r3, PRIMASK
 800767a:	61bb      	str	r3, [r7, #24]
  return(result);
 800767c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
 8007680:	2301      	movs	r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f383 8810 	msr	PRIMASK, r3
}
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2101      	movs	r1, #1
 8007698:	438a      	bics	r2, r1
 800769a:	609a      	str	r2, [r3, #8]
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	f383 8810 	msr	PRIMASK, r3
}
 80076a6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2280      	movs	r2, #128	; 0x80
 80076ac:	2120      	movs	r1, #32
 80076ae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2278      	movs	r2, #120	; 0x78
 80076b4:	2100      	movs	r1, #0
 80076b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e011      	b.n	80076e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2280      	movs	r2, #128	; 0x80
 80076c6:	2120      	movs	r1, #32
 80076c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2278      	movs	r2, #120	; 0x78
 80076da:	2100      	movs	r1, #0
 80076dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	0018      	movs	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b010      	add	sp, #64	; 0x40
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	01ffffff 	.word	0x01ffffff
 80076ec:	fffffedf 	.word	0xfffffedf

080076f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	1dfb      	adds	r3, r7, #7
 80076fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007700:	e04b      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	3301      	adds	r3, #1
 8007706:	d048      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007708:	f7fb fe80 	bl	800340c <HAL_GetTick>
 800770c:	0002      	movs	r2, r0
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	429a      	cmp	r2, r3
 8007716:	d302      	bcc.n	800771e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e04b      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2204      	movs	r2, #4
 800772a:	4013      	ands	r3, r2
 800772c:	d035      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	2208      	movs	r2, #8
 8007736:	4013      	ands	r3, r2
 8007738:	2b08      	cmp	r3, #8
 800773a:	d111      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2208      	movs	r2, #8
 8007742:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	0018      	movs	r0, r3
 8007748:	f000 f906 	bl	8007958 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2284      	movs	r2, #132	; 0x84
 8007750:	2108      	movs	r1, #8
 8007752:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2278      	movs	r2, #120	; 0x78
 8007758:	2100      	movs	r1, #0
 800775a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e02c      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	2380      	movs	r3, #128	; 0x80
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	401a      	ands	r2, r3
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	429a      	cmp	r2, r3
 8007772:	d112      	bne.n	800779a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2280      	movs	r2, #128	; 0x80
 800777a:	0112      	lsls	r2, r2, #4
 800777c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	0018      	movs	r0, r3
 8007782:	f000 f8e9 	bl	8007958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2284      	movs	r2, #132	; 0x84
 800778a:	2120      	movs	r1, #32
 800778c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2278      	movs	r2, #120	; 0x78
 8007792:	2100      	movs	r1, #0
 8007794:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e00f      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	4013      	ands	r3, r2
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	425a      	negs	r2, r3
 80077aa:	4153      	adcs	r3, r2
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	001a      	movs	r2, r3
 80077b0:	1dfb      	adds	r3, r7, #7
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d0a4      	beq.n	8007702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	0018      	movs	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	b004      	add	sp, #16
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b090      	sub	sp, #64	; 0x40
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	1dbb      	adds	r3, r7, #6
 80077d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	1dba      	adds	r2, r7, #6
 80077dc:	2158      	movs	r1, #88	; 0x58
 80077de:	8812      	ldrh	r2, [r2, #0]
 80077e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1dba      	adds	r2, r7, #6
 80077e6:	215a      	movs	r1, #90	; 0x5a
 80077e8:	8812      	ldrh	r2, [r2, #0]
 80077ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	015b      	lsls	r3, r3, #5
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d10d      	bne.n	800781a <UART_Start_Receive_IT+0x56>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <UART_Start_Receive_IT+0x4c>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	225c      	movs	r2, #92	; 0x5c
 800780a:	4950      	ldr	r1, [pc, #320]	; (800794c <UART_Start_Receive_IT+0x188>)
 800780c:	5299      	strh	r1, [r3, r2]
 800780e:	e02e      	b.n	800786e <UART_Start_Receive_IT+0xaa>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	225c      	movs	r2, #92	; 0x5c
 8007814:	21ff      	movs	r1, #255	; 0xff
 8007816:	5299      	strh	r1, [r3, r2]
 8007818:	e029      	b.n	800786e <UART_Start_Receive_IT+0xaa>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10d      	bne.n	800783e <UART_Start_Receive_IT+0x7a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <UART_Start_Receive_IT+0x70>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	225c      	movs	r2, #92	; 0x5c
 800782e:	21ff      	movs	r1, #255	; 0xff
 8007830:	5299      	strh	r1, [r3, r2]
 8007832:	e01c      	b.n	800786e <UART_Start_Receive_IT+0xaa>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	225c      	movs	r2, #92	; 0x5c
 8007838:	217f      	movs	r1, #127	; 0x7f
 800783a:	5299      	strh	r1, [r3, r2]
 800783c:	e017      	b.n	800786e <UART_Start_Receive_IT+0xaa>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	2380      	movs	r3, #128	; 0x80
 8007844:	055b      	lsls	r3, r3, #21
 8007846:	429a      	cmp	r2, r3
 8007848:	d10d      	bne.n	8007866 <UART_Start_Receive_IT+0xa2>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <UART_Start_Receive_IT+0x98>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	225c      	movs	r2, #92	; 0x5c
 8007856:	217f      	movs	r1, #127	; 0x7f
 8007858:	5299      	strh	r1, [r3, r2]
 800785a:	e008      	b.n	800786e <UART_Start_Receive_IT+0xaa>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	225c      	movs	r2, #92	; 0x5c
 8007860:	213f      	movs	r1, #63	; 0x3f
 8007862:	5299      	strh	r1, [r3, r2]
 8007864:	e003      	b.n	800786e <UART_Start_Receive_IT+0xaa>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	225c      	movs	r2, #92	; 0x5c
 800786a:	2100      	movs	r1, #0
 800786c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2284      	movs	r2, #132	; 0x84
 8007872:	2100      	movs	r1, #0
 8007874:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2280      	movs	r2, #128	; 0x80
 800787a:	2122      	movs	r1, #34	; 0x22
 800787c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800787e:	f3ef 8310 	mrs	r3, PRIMASK
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007888:	2301      	movs	r3, #1
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	f383 8810 	msr	PRIMASK, r3
}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2101      	movs	r1, #1
 80078a0:	430a      	orrs	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	f383 8810 	msr	PRIMASK, r3
}
 80078ae:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	015b      	lsls	r3, r3, #5
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d107      	bne.n	80078cc <UART_Start_Receive_IT+0x108>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d103      	bne.n	80078cc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a22      	ldr	r2, [pc, #136]	; (8007950 <UART_Start_Receive_IT+0x18c>)
 80078c8:	669a      	str	r2, [r3, #104]	; 0x68
 80078ca:	e002      	b.n	80078d2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a21      	ldr	r2, [pc, #132]	; (8007954 <UART_Start_Receive_IT+0x190>)
 80078d0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d019      	beq.n	800790e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078da:	f3ef 8310 	mrs	r3, PRIMASK
 80078de:	61fb      	str	r3, [r7, #28]
  return(result);
 80078e0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
 80078e4:	2301      	movs	r3, #1
 80078e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	f383 8810 	msr	PRIMASK, r3
}
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2190      	movs	r1, #144	; 0x90
 80078fc:	0049      	lsls	r1, r1, #1
 80078fe:	430a      	orrs	r2, r1
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	f383 8810 	msr	PRIMASK, r3
}
 800790c:	e018      	b.n	8007940 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790e:	f3ef 8310 	mrs	r3, PRIMASK
 8007912:	613b      	str	r3, [r7, #16]
  return(result);
 8007914:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007916:	63bb      	str	r3, [r7, #56]	; 0x38
 8007918:	2301      	movs	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f383 8810 	msr	PRIMASK, r3
}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2120      	movs	r1, #32
 8007930:	430a      	orrs	r2, r1
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f383 8810 	msr	PRIMASK, r3
}
 800793e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	0018      	movs	r0, r3
 8007944:	46bd      	mov	sp, r7
 8007946:	b010      	add	sp, #64	; 0x40
 8007948:	bd80      	pop	{r7, pc}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	000001ff 	.word	0x000001ff
 8007950:	08007e19 	.word	0x08007e19
 8007954:	08007c61 	.word	0x08007c61

08007958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08e      	sub	sp, #56	; 0x38
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007960:	f3ef 8310 	mrs	r3, PRIMASK
 8007964:	617b      	str	r3, [r7, #20]
  return(result);
 8007966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
 800796a:	2301      	movs	r3, #1
 800796c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f383 8810 	msr	PRIMASK, r3
}
 8007974:	46c0      	nop			; (mov r8, r8)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4926      	ldr	r1, [pc, #152]	; (8007a1c <UART_EndRxTransfer+0xc4>)
 8007982:	400a      	ands	r2, r1
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f383 8810 	msr	PRIMASK, r3
}
 8007990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007992:	f3ef 8310 	mrs	r3, PRIMASK
 8007996:	623b      	str	r3, [r7, #32]
  return(result);
 8007998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799a:	633b      	str	r3, [r7, #48]	; 0x30
 800799c:	2301      	movs	r3, #1
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	f383 8810 	msr	PRIMASK, r3
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2101      	movs	r1, #1
 80079b4:	438a      	bics	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	f383 8810 	msr	PRIMASK, r3
}
 80079c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d118      	bne.n	80079fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079cc:	f3ef 8310 	mrs	r3, PRIMASK
 80079d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80079d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079d6:	2301      	movs	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f383 8810 	msr	PRIMASK, r3
}
 80079e0:	46c0      	nop			; (mov r8, r8)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2110      	movs	r1, #16
 80079ee:	438a      	bics	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f383 8810 	msr	PRIMASK, r3
}
 80079fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	2120      	movs	r1, #32
 8007a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b00e      	add	sp, #56	; 0x38
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	fffffedf 	.word	0xfffffedf

08007a20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	225a      	movs	r2, #90	; 0x5a
 8007a32:	2100      	movs	r1, #0
 8007a34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2252      	movs	r2, #82	; 0x52
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f7ff faa3 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b004      	add	sp, #16
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	225a      	movs	r2, #90	; 0x5a
 8007a60:	2100      	movs	r1, #0
 8007a62:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	220f      	movs	r2, #15
 8007a6a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2108      	movs	r1, #8
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2280      	movs	r2, #128	; 0x80
 8007a80:	2120      	movs	r1, #32
 8007a82:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	f7ff fa85 	bl	8006f9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b004      	add	sp, #16
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b08a      	sub	sp, #40	; 0x28
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa6:	2b21      	cmp	r3, #33	; 0x21
 8007aa8:	d14d      	bne.n	8007b46 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2252      	movs	r2, #82	; 0x52
 8007aae:	5a9b      	ldrh	r3, [r3, r2]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d132      	bne.n	8007b1c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aba:	60bb      	str	r3, [r7, #8]
  return(result);
 8007abc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f383 8810 	msr	PRIMASK, r3
}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2180      	movs	r1, #128	; 0x80
 8007ad8:	438a      	bics	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f383 8810 	msr	PRIMASK, r3
}
 8007ae6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aec:	617b      	str	r3, [r7, #20]
  return(result);
 8007aee:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007af0:	623b      	str	r3, [r7, #32]
 8007af2:	2301      	movs	r3, #1
 8007af4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f383 8810 	msr	PRIMASK, r3
}
 8007afc:	46c0      	nop			; (mov r8, r8)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2140      	movs	r1, #64	; 0x40
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	f383 8810 	msr	PRIMASK, r3
}
 8007b18:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007b1a:	e014      	b.n	8007b46 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	b292      	uxth	r2, r2
 8007b28:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2252      	movs	r2, #82	; 0x52
 8007b38:	5a9b      	ldrh	r3, [r3, r2]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b299      	uxth	r1, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2252      	movs	r2, #82	; 0x52
 8007b44:	5299      	strh	r1, [r3, r2]
}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	b00a      	add	sp, #40	; 0x28
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08c      	sub	sp, #48	; 0x30
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5a:	2b21      	cmp	r3, #33	; 0x21
 8007b5c:	d151      	bne.n	8007c02 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2252      	movs	r2, #82	; 0x52
 8007b62:	5a9b      	ldrh	r3, [r3, r2]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d132      	bne.n	8007bd0 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b70:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b74:	2301      	movs	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f383 8810 	msr	PRIMASK, r3
}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2180      	movs	r1, #128	; 0x80
 8007b8c:	438a      	bics	r2, r1
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f383 8810 	msr	PRIMASK, r3
}
 8007b9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ba2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	f383 8810 	msr	PRIMASK, r3
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2140      	movs	r1, #64	; 0x40
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f383 8810 	msr	PRIMASK, r3
}
 8007bcc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007bce:	e018      	b.n	8007c02 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	881a      	ldrh	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	05d2      	lsls	r2, r2, #23
 8007be0:	0dd2      	lsrs	r2, r2, #23
 8007be2:	b292      	uxth	r2, r2
 8007be4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bea:	1c9a      	adds	r2, r3, #2
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2252      	movs	r2, #82	; 0x52
 8007bf4:	5a9b      	ldrh	r3, [r3, r2]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b299      	uxth	r1, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2252      	movs	r2, #82	; 0x52
 8007c00:	5299      	strh	r1, [r3, r2]
}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	46bd      	mov	sp, r7
 8007c06:	b00c      	add	sp, #48	; 0x30
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b086      	sub	sp, #24
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c12:	f3ef 8310 	mrs	r3, PRIMASK
 8007c16:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c18:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f383 8810 	msr	PRIMASK, r3
}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2140      	movs	r1, #64	; 0x40
 8007c34:	438a      	bics	r2, r1
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f383 8810 	msr	PRIMASK, r3
}
 8007c42:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	0018      	movs	r0, r3
 8007c54:	f002 fc48 	bl	800a4e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c58:	46c0      	nop			; (mov r8, r8)
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b006      	add	sp, #24
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b094      	sub	sp, #80	; 0x50
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c68:	204e      	movs	r0, #78	; 0x4e
 8007c6a:	183b      	adds	r3, r7, r0
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	215c      	movs	r1, #92	; 0x5c
 8007c70:	5a52      	ldrh	r2, [r2, r1]
 8007c72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2280      	movs	r2, #128	; 0x80
 8007c78:	589b      	ldr	r3, [r3, r2]
 8007c7a:	2b22      	cmp	r3, #34	; 0x22
 8007c7c:	d000      	beq.n	8007c80 <UART_RxISR_8BIT+0x20>
 8007c7e:	e0ba      	b.n	8007df6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	214c      	movs	r1, #76	; 0x4c
 8007c86:	187b      	adds	r3, r7, r1
 8007c88:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007c8a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c8c:	187b      	adds	r3, r7, r1
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	183b      	adds	r3, r7, r0
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b2d9      	uxtb	r1, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	400a      	ands	r2, r1
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	225a      	movs	r2, #90	; 0x5a
 8007cb0:	5a9b      	ldrh	r3, [r3, r2]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b299      	uxth	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	225a      	movs	r2, #90	; 0x5a
 8007cbc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	225a      	movs	r2, #90	; 0x5a
 8007cc2:	5a9b      	ldrh	r3, [r3, r2]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d000      	beq.n	8007ccc <UART_RxISR_8BIT+0x6c>
 8007cca:	e09c      	b.n	8007e06 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	f383 8810 	msr	PRIMASK, r3
}
 8007ce0:	46c0      	nop			; (mov r8, r8)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4948      	ldr	r1, [pc, #288]	; (8007e10 <UART_RxISR_8BIT+0x1b0>)
 8007cee:	400a      	ands	r2, r1
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	f383 8810 	msr	PRIMASK, r3
}
 8007cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8007d02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
 8007d08:	2301      	movs	r3, #1
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0e:	f383 8810 	msr	PRIMASK, r3
}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2101      	movs	r1, #1
 8007d20:	438a      	bics	r2, r1
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	f383 8810 	msr	PRIMASK, r3
}
 8007d2e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	2120      	movs	r1, #32
 8007d36:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	2380      	movs	r3, #128	; 0x80
 8007d4c:	041b      	lsls	r3, r3, #16
 8007d4e:	4013      	ands	r3, r2
 8007d50:	d018      	beq.n	8007d84 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d52:	f3ef 8310 	mrs	r3, PRIMASK
 8007d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d58:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f383 8810 	msr	PRIMASK, r3
}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4928      	ldr	r1, [pc, #160]	; (8007e14 <UART_RxISR_8BIT+0x1b4>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	f383 8810 	msr	PRIMASK, r3
}
 8007d82:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d12f      	bne.n	8007dec <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d92:	f3ef 8310 	mrs	r3, PRIMASK
 8007d96:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d98:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f383 8810 	msr	PRIMASK, r3
}
 8007da6:	46c0      	nop			; (mov r8, r8)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2110      	movs	r1, #16
 8007db4:	438a      	bics	r2, r1
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f383 8810 	msr	PRIMASK, r3
}
 8007dc2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	2210      	movs	r2, #16
 8007dcc:	4013      	ands	r3, r2
 8007dce:	2b10      	cmp	r3, #16
 8007dd0:	d103      	bne.n	8007dda <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2210      	movs	r2, #16
 8007dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2258      	movs	r2, #88	; 0x58
 8007dde:	5a9a      	ldrh	r2, [r3, r2]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	0011      	movs	r1, r2
 8007de4:	0018      	movs	r0, r3
 8007de6:	f7ff f8e1 	bl	8006fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dea:	e00c      	b.n	8007e06 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f002 fbb4 	bl	800a55c <HAL_UART_RxCpltCallback>
}
 8007df4:	e007      	b.n	8007e06 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2108      	movs	r1, #8
 8007e02:	430a      	orrs	r2, r1
 8007e04:	619a      	str	r2, [r3, #24]
}
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	b014      	add	sp, #80	; 0x50
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	fffffedf 	.word	0xfffffedf
 8007e14:	fbffffff 	.word	0xfbffffff

08007e18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b094      	sub	sp, #80	; 0x50
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e20:	204e      	movs	r0, #78	; 0x4e
 8007e22:	183b      	adds	r3, r7, r0
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	215c      	movs	r1, #92	; 0x5c
 8007e28:	5a52      	ldrh	r2, [r2, r1]
 8007e2a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2280      	movs	r2, #128	; 0x80
 8007e30:	589b      	ldr	r3, [r3, r2]
 8007e32:	2b22      	cmp	r3, #34	; 0x22
 8007e34:	d000      	beq.n	8007e38 <UART_RxISR_16BIT+0x20>
 8007e36:	e0ba      	b.n	8007fae <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	214c      	movs	r1, #76	; 0x4c
 8007e3e:	187b      	adds	r3, r7, r1
 8007e40:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007e42:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e48:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e4a:	187b      	adds	r3, r7, r1
 8007e4c:	183a      	adds	r2, r7, r0
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	8812      	ldrh	r2, [r2, #0]
 8007e52:	4013      	ands	r3, r2
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5e:	1c9a      	adds	r2, r3, #2
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	225a      	movs	r2, #90	; 0x5a
 8007e68:	5a9b      	ldrh	r3, [r3, r2]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	225a      	movs	r2, #90	; 0x5a
 8007e74:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	225a      	movs	r2, #90	; 0x5a
 8007e7a:	5a9b      	ldrh	r3, [r3, r2]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d000      	beq.n	8007e84 <UART_RxISR_16BIT+0x6c>
 8007e82:	e09c      	b.n	8007fbe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e84:	f3ef 8310 	mrs	r3, PRIMASK
 8007e88:	623b      	str	r3, [r7, #32]
  return(result);
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e8e:	2301      	movs	r3, #1
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	f383 8810 	msr	PRIMASK, r3
}
 8007e98:	46c0      	nop			; (mov r8, r8)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4948      	ldr	r1, [pc, #288]	; (8007fc8 <UART_RxISR_16BIT+0x1b0>)
 8007ea6:	400a      	ands	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	f383 8810 	msr	PRIMASK, r3
}
 8007eb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	f383 8810 	msr	PRIMASK, r3
}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	438a      	bics	r2, r1
 8007eda:	609a      	str	r2, [r3, #8]
 8007edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee2:	f383 8810 	msr	PRIMASK, r3
}
 8007ee6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2280      	movs	r2, #128	; 0x80
 8007eec:	2120      	movs	r1, #32
 8007eee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	2380      	movs	r3, #128	; 0x80
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	4013      	ands	r3, r2
 8007f08:	d018      	beq.n	8007f3c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f0e:	617b      	str	r3, [r7, #20]
  return(result);
 8007f10:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f14:	2301      	movs	r3, #1
 8007f16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	f383 8810 	msr	PRIMASK, r3
}
 8007f1e:	46c0      	nop			; (mov r8, r8)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4928      	ldr	r1, [pc, #160]	; (8007fcc <UART_RxISR_16BIT+0x1b4>)
 8007f2c:	400a      	ands	r2, r1
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f383 8810 	msr	PRIMASK, r3
}
 8007f3a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d12f      	bne.n	8007fa4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f50:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f54:	2301      	movs	r3, #1
 8007f56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f383 8810 	msr	PRIMASK, r3
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2110      	movs	r1, #16
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f383 8810 	msr	PRIMASK, r3
}
 8007f7a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	2210      	movs	r2, #16
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d103      	bne.n	8007f92 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2210      	movs	r2, #16
 8007f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2258      	movs	r2, #88	; 0x58
 8007f96:	5a9a      	ldrh	r2, [r3, r2]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	0011      	movs	r1, r2
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f7ff f805 	bl	8006fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fa2:	e00c      	b.n	8007fbe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f002 fad8 	bl	800a55c <HAL_UART_RxCpltCallback>
}
 8007fac:	e007      	b.n	8007fbe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2108      	movs	r1, #8
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	619a      	str	r2, [r3, #24]
}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b014      	add	sp, #80	; 0x50
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	fffffedf 	.word	0xfffffedf
 8007fcc:	fbffffff 	.word	0xfbffffff

08007fd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b002      	add	sp, #8
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fe8:	4b09      	ldr	r3, [pc, #36]	; (8008010 <USB_DisableGlobalInt+0x30>)
 8007fea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2240      	movs	r2, #64	; 0x40
 8007ff0:	5a9b      	ldrh	r3, [r3, r2]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	43d2      	mvns	r2, r2
 8007ffa:	b292      	uxth	r2, r2
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	b299      	uxth	r1, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2240      	movs	r2, #64	; 0x40
 8008004:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	0018      	movs	r0, r3
 800800a:	46bd      	mov	sp, r7
 800800c:	b004      	add	sp, #16
 800800e:	bd80      	pop	{r7, pc}
 8008010:	0000bf80 	.word	0x0000bf80

08008014 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008014:	b084      	sub	sp, #16
 8008016:	b590      	push	{r4, r7, lr}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	2004      	movs	r0, #4
 8008020:	2410      	movs	r4, #16
 8008022:	1900      	adds	r0, r0, r4
 8008024:	2408      	movs	r4, #8
 8008026:	46a4      	mov	ip, r4
 8008028:	44bc      	add	ip, r7
 800802a:	4460      	add	r0, ip
 800802c:	6001      	str	r1, [r0, #0]
 800802e:	6042      	str	r2, [r0, #4]
 8008030:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2240      	movs	r2, #64	; 0x40
 8008036:	2101      	movs	r1, #1
 8008038:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2240      	movs	r2, #64	; 0x40
 800803e:	2100      	movs	r1, #0
 8008040:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2244      	movs	r2, #68	; 0x44
 8008046:	2100      	movs	r1, #0
 8008048:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2250      	movs	r2, #80	; 0x50
 800804e:	2100      	movs	r1, #0
 8008050:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	0018      	movs	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	b003      	add	sp, #12
 800805a:	bc90      	pop	{r4, r7}
 800805c:	bc08      	pop	{r3}
 800805e:	b004      	add	sp, #16
 8008060:	4718      	bx	r3
	...

08008064 <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	000a      	movs	r2, r1
 800806e:	1cfb      	adds	r3, r7, #3
 8008070:	701a      	strb	r2, [r3, #0]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2281      	movs	r2, #129	; 0x81
 8008076:	5c9b      	ldrb	r3, [r3, r2]
 8008078:	0019      	movs	r1, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	1cfa      	adds	r2, r7, #3
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2281      	movs	r2, #129	; 0x81
 8008086:	5c9b      	ldrb	r3, [r3, r2]
 8008088:	3301      	adds	r3, #1
 800808a:	4a1b      	ldr	r2, [pc, #108]	; (80080f8 <RingAdd+0x94>)
 800808c:	4013      	ands	r3, r2
 800808e:	d504      	bpl.n	800809a <RingAdd+0x36>
 8008090:	3b01      	subs	r3, #1
 8008092:	2280      	movs	r2, #128	; 0x80
 8008094:	4252      	negs	r2, r2
 8008096:	4313      	orrs	r3, r2
 8008098:	3301      	adds	r3, #1
 800809a:	b2d9      	uxtb	r1, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2281      	movs	r2, #129	; 0x81
 80080a0:	5499      	strb	r1, [r3, r2]
	if (xRingBuffer->u8available == MAX_BUFFER)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2282      	movs	r2, #130	; 0x82
 80080a6:	5c9b      	ldrb	r3, [r3, r2]
 80080a8:	2b80      	cmp	r3, #128	; 0x80
 80080aa:	d114      	bne.n	80080d6 <RingAdd+0x72>
	{
		xRingBuffer->overflow = true;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2283      	movs	r2, #131	; 0x83
 80080b0:	2101      	movs	r1, #1
 80080b2:	5499      	strb	r1, [r3, r2]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2280      	movs	r2, #128	; 0x80
 80080b8:	5c9b      	ldrb	r3, [r3, r2]
 80080ba:	3301      	adds	r3, #1
 80080bc:	4a0e      	ldr	r2, [pc, #56]	; (80080f8 <RingAdd+0x94>)
 80080be:	4013      	ands	r3, r2
 80080c0:	d504      	bpl.n	80080cc <RingAdd+0x68>
 80080c2:	3b01      	subs	r3, #1
 80080c4:	2280      	movs	r2, #128	; 0x80
 80080c6:	4252      	negs	r2, r2
 80080c8:	4313      	orrs	r3, r2
 80080ca:	3301      	adds	r3, #1
 80080cc:	b2d9      	uxtb	r1, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2280      	movs	r2, #128	; 0x80
 80080d2:	5499      	strb	r1, [r3, r2]
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 80080d4:	e00b      	b.n	80080ee <RingAdd+0x8a>
		xRingBuffer->overflow = false;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2283      	movs	r2, #131	; 0x83
 80080da:	2100      	movs	r1, #0
 80080dc:	5499      	strb	r1, [r3, r2]
		xRingBuffer->u8available++;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2282      	movs	r2, #130	; 0x82
 80080e2:	5c9b      	ldrb	r3, [r3, r2]
 80080e4:	3301      	adds	r3, #1
 80080e6:	b2d9      	uxtb	r1, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2282      	movs	r2, #130	; 0x82
 80080ec:	5499      	strb	r1, [r3, r2]
}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b002      	add	sp, #8
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	8000007f 	.word	0x8000007f

080080fc <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2282      	movs	r2, #130	; 0x82
 800810a:	5c9a      	ldrb	r2, [r3, r2]
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	0018      	movs	r0, r3
 8008112:	f000 f805 	bl	8008120 <RingGetNBytes>
 8008116:	0003      	movs	r3, r0
}
 8008118:	0018      	movs	r0, r3
 800811a:	46bd      	mov	sp, r7
 800811c:	b002      	add	sp, #8
 800811e:	bd80      	pop	{r7, pc}

08008120 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8008120:	b590      	push	{r4, r7, lr}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	1dfb      	adds	r3, r7, #7
 800812c:	701a      	strb	r2, [r3, #0]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2282      	movs	r2, #130	; 0x82
 8008132:	5c9b      	ldrb	r3, [r3, r2]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <RingGetNBytes+0x20>
 8008138:	1dfb      	adds	r3, r7, #7
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <RingGetNBytes+0x24>
 8008140:	2300      	movs	r3, #0
 8008142:	e04f      	b.n	80081e4 <RingGetNBytes+0xc4>
	if(uNumber > MAX_BUFFER) return 0;
 8008144:	1dfb      	adds	r3, r7, #7
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d901      	bls.n	8008150 <RingGetNBytes+0x30>
 800814c:	2300      	movs	r3, #0
 800814e:	e049      	b.n	80081e4 <RingGetNBytes+0xc4>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8008150:	2317      	movs	r3, #23
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	2200      	movs	r2, #0
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e021      	b.n	800819e <RingGetNBytes+0x7e>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2280      	movs	r2, #128	; 0x80
 800815e:	5c9b      	ldrb	r3, [r3, r2]
 8008160:	0019      	movs	r1, r3
 8008162:	2317      	movs	r3, #23
 8008164:	18fb      	adds	r3, r7, r3
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	18d3      	adds	r3, r2, r3
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	5c52      	ldrb	r2, [r2, r1]
 8008170:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2280      	movs	r2, #128	; 0x80
 8008176:	5c9b      	ldrb	r3, [r3, r2]
 8008178:	3301      	adds	r3, #1
 800817a:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <RingGetNBytes+0xcc>)
 800817c:	4013      	ands	r3, r2
 800817e:	d504      	bpl.n	800818a <RingGetNBytes+0x6a>
 8008180:	3b01      	subs	r3, #1
 8008182:	2280      	movs	r2, #128	; 0x80
 8008184:	4252      	negs	r2, r2
 8008186:	4313      	orrs	r3, r2
 8008188:	3301      	adds	r3, #1
 800818a:	b2d9      	uxtb	r1, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2280      	movs	r2, #128	; 0x80
 8008190:	5499      	strb	r1, [r3, r2]
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8008192:	2117      	movs	r1, #23
 8008194:	187b      	adds	r3, r7, r1
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	187b      	adds	r3, r7, r1
 800819a:	3201      	adds	r2, #1
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	2117      	movs	r1, #23
 80081a0:	187a      	adds	r2, r7, r1
 80081a2:	1dfb      	adds	r3, r7, #7
 80081a4:	7812      	ldrb	r2, [r2, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d206      	bcs.n	80081ba <RingGetNBytes+0x9a>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2282      	movs	r2, #130	; 0x82
 80081b0:	5c9b      	ldrb	r3, [r3, r2]
 80081b2:	187a      	adds	r2, r7, r1
 80081b4:	7812      	ldrb	r2, [r2, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d3cf      	bcc.n	800815a <RingGetNBytes+0x3a>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2282      	movs	r2, #130	; 0x82
 80081be:	5c9a      	ldrb	r2, [r3, r2]
 80081c0:	2417      	movs	r4, #23
 80081c2:	193b      	adds	r3, r7, r4
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	b2d9      	uxtb	r1, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2282      	movs	r2, #130	; 0x82
 80081ce:	5499      	strb	r1, [r3, r2]
	xRingBuffer->overflow = false;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2283      	movs	r2, #131	; 0x83
 80081d4:	2100      	movs	r1, #0
 80081d6:	5499      	strb	r1, [r3, r2]
	RingClear(xRingBuffer);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	0018      	movs	r0, r3
 80081dc:	f000 f808 	bl	80081f0 <RingClear>

	return uCounter;
 80081e0:	193b      	adds	r3, r7, r4
 80081e2:	781b      	ldrb	r3, [r3, #0]
}
 80081e4:	0018      	movs	r0, r3
 80081e6:	46bd      	mov	sp, r7
 80081e8:	b007      	add	sp, #28
 80081ea:	bd90      	pop	{r4, r7, pc}
 80081ec:	8000007f 	.word	0x8000007f

080081f0 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2280      	movs	r2, #128	; 0x80
 80081fc:	2100      	movs	r1, #0
 80081fe:	5499      	strb	r1, [r3, r2]
xRingBuffer->u8end = 0;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2281      	movs	r2, #129	; 0x81
 8008204:	2100      	movs	r1, #0
 8008206:	5499      	strb	r1, [r3, r2]
xRingBuffer->u8available = 0;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2282      	movs	r2, #130	; 0x82
 800820c:	2100      	movs	r1, #0
 800820e:	5499      	strb	r1, [r3, r2]
xRingBuffer->overflow = false;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2283      	movs	r2, #131	; 0x83
 8008214:	2100      	movs	r1, #0
 8008216:	5499      	strb	r1, [r3, r2]
}
 8008218:	46c0      	nop			; (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	b002      	add	sp, #8
 800821e:	bd80      	pop	{r7, pc}

08008220 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af02      	add	r7, sp, #8
 8008226:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8008228:	4b46      	ldr	r3, [pc, #280]	; (8008344 <ModbusInit+0x124>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d900      	bls.n	8008232 <ModbusInit+0x12>
 8008230:	e083      	b.n	800833a <ModbusInit+0x11a>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	33bc      	adds	r3, #188	; 0xbc
 8008236:	0018      	movs	r0, r3
 8008238:	f7ff ffda 	bl	80081f0 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b03      	cmp	r3, #3
 8008242:	d10a      	bne.n	800825a <ModbusInit+0x3a>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8008244:	4a40      	ldr	r2, [pc, #256]	; (8008348 <ModbusInit+0x128>)
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	4b40      	ldr	r3, [pc, #256]	; (800834c <ModbusInit+0x12c>)
 800824a:	0018      	movs	r0, r3
 800824c:	f002 fa46 	bl	800a6dc <osThreadNew>
 8008250:	0002      	movs	r2, r0
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	21ac      	movs	r1, #172	; 0xac
 8008256:	505a      	str	r2, [r3, r1]
 8008258:	e036      	b.n	80082c8 <ModbusInit+0xa8>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b04      	cmp	r3, #4
 8008260:	d131      	bne.n	80082c6 <ModbusInit+0xa6>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8008262:	4a3b      	ldr	r2, [pc, #236]	; (8008350 <ModbusInit+0x130>)
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	4b3b      	ldr	r3, [pc, #236]	; (8008354 <ModbusInit+0x134>)
 8008268:	0018      	movs	r0, r3
 800826a:	f002 fa37 	bl	800a6dc <osThreadNew>
 800826e:	0002      	movs	r2, r0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	21ac      	movs	r1, #172	; 0xac
 8008274:	505a      	str	r2, [r3, r1]
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	22a2      	movs	r2, #162	; 0xa2
 800827a:	5a9b      	ldrh	r3, [r3, r2]
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800827c:	0019      	movs	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	22b4      	movs	r2, #180	; 0xb4
 8008282:	589a      	ldr	r2, [r3, r2]
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8008284:	4834      	ldr	r0, [pc, #208]	; (8008358 <ModbusInit+0x138>)
 8008286:	4b35      	ldr	r3, [pc, #212]	; (800835c <ModbusInit+0x13c>)
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	0013      	movs	r3, r2
 800828c:	2200      	movs	r2, #0
 800828e:	f004 fd41 	bl	800cd14 <xTimerCreate>
 8008292:	0002      	movs	r2, r0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	21b4      	movs	r1, #180	; 0xb4
 8008298:	505a      	str	r2, [r3, r1]
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	22b4      	movs	r2, #180	; 0xb4
 800829e:	589b      	ldr	r3, [r3, r2]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d100      	bne.n	80082a6 <ModbusInit+0x86>
		  {
			  while(1); //error creating timer, check heap and stack size
 80082a4:	e7fe      	b.n	80082a4 <ModbusInit+0x84>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80082a6:	4b2e      	ldr	r3, [pc, #184]	; (8008360 <ModbusInit+0x140>)
 80082a8:	001a      	movs	r2, r3
 80082aa:	2110      	movs	r1, #16
 80082ac:	2002      	movs	r0, #2
 80082ae:	f002 fc39 	bl	800ab24 <osMessageQueueNew>
 80082b2:	0002      	movs	r2, r0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	21a8      	movs	r1, #168	; 0xa8
 80082b8:	505a      	str	r2, [r3, r1]

		  if(modH->QueueTelegramHandle == NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	22a8      	movs	r2, #168	; 0xa8
 80082be:	589b      	ldr	r3, [r3, r2]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <ModbusInit+0xa8>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 80082c4:	e7fe      	b.n	80082c4 <ModbusInit+0xa4>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 80082c6:	e7fe      	b.n	80082c6 <ModbusInit+0xa6>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	22ac      	movs	r2, #172	; 0xac
 80082cc:	589b      	ldr	r3, [r3, r2]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d100      	bne.n	80082d4 <ModbusInit+0xb4>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 80082d2:	e7fe      	b.n	80082d2 <ModbusInit+0xb2>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	22b0      	movs	r2, #176	; 0xb0
 80082d8:	589a      	ldr	r2, [r3, r2]
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 80082da:	4822      	ldr	r0, [pc, #136]	; (8008364 <ModbusInit+0x144>)
 80082dc:	4b22      	ldr	r3, [pc, #136]	; (8008368 <ModbusInit+0x148>)
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	0013      	movs	r3, r2
 80082e2:	2200      	movs	r2, #0
 80082e4:	2105      	movs	r1, #5
 80082e6:	f004 fd15 	bl	800cd14 <xTimerCreate>
 80082ea:	0002      	movs	r2, r0
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	21b0      	movs	r1, #176	; 0xb0
 80082f0:	505a      	str	r2, [r3, r1]
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	22b0      	movs	r2, #176	; 0xb0
 80082f6:	589b      	ldr	r3, [r3, r2]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d100      	bne.n	80082fe <ModbusInit+0xde>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 80082fc:	e7fe      	b.n	80082fc <ModbusInit+0xdc>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80082fe:	4b1b      	ldr	r3, [pc, #108]	; (800836c <ModbusInit+0x14c>)
 8008300:	001a      	movs	r2, r3
 8008302:	2101      	movs	r1, #1
 8008304:	2001      	movs	r0, #1
 8008306:	f002 fb6b 	bl	800a9e0 <osSemaphoreNew>
 800830a:	0002      	movs	r2, r0
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	21b8      	movs	r1, #184	; 0xb8
 8008310:	505a      	str	r2, [r3, r1]

	  if(modH->ModBusSphrHandle == NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	22b8      	movs	r2, #184	; 0xb8
 8008316:	589b      	ldr	r3, [r3, r2]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d100      	bne.n	800831e <ModbusInit+0xfe>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800831c:	e7fe      	b.n	800831c <ModbusInit+0xfc>
	  }

	  mHandlers[numberHandlers] = modH;
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <ModbusInit+0x124>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	001a      	movs	r2, r3
 8008324:	4b12      	ldr	r3, [pc, #72]	; (8008370 <ModbusInit+0x150>)
 8008326:	0092      	lsls	r2, r2, #2
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	50d1      	str	r1, [r2, r3]
	  numberHandlers++;
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <ModbusInit+0x124>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	4b03      	ldr	r3, [pc, #12]	; (8008344 <ModbusInit+0x124>)
 8008336:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8008338:	e000      	b.n	800833c <ModbusInit+0x11c>
	  while(1); //error no more Modbus handlers supported
 800833a:	e7fe      	b.n	800833a <ModbusInit+0x11a>
}
 800833c:	46bd      	mov	sp, r7
 800833e:	b002      	add	sp, #8
 8008340:	bd80      	pop	{r7, pc}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	200009e0 	.word	0x200009e0
 8008348:	0800de18 	.word	0x0800de18
 800834c:	08008569 	.word	0x08008569
 8008350:	0800de3c 	.word	0x0800de3c
 8008354:	08008b9d 	.word	0x08008b9d
 8008358:	0800dd00 	.word	0x0800dd00
 800835c:	0800850d 	.word	0x0800850d
 8008360:	0800de00 	.word	0x0800de00
 8008364:	0800dd10 	.word	0x0800dd10
 8008368:	08008489 	.word	0x08008489
 800836c:	0800de60 	.word	0x0800de60
 8008370:	200009d8 	.word	0x200009d8

08008374 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	23a0      	movs	r3, #160	; 0xa0
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	5cd3      	ldrb	r3, [r2, r3]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d012      	beq.n	80083ae <ModbusStart+0x3a>
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	23a0      	movs	r3, #160	; 0xa0
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	5cd3      	ldrb	r3, [r2, r3]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d00c      	beq.n	80083ae <ModbusStart+0x3a>
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	23a0      	movs	r3, #160	; 0xa0
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	5cd3      	ldrb	r3, [r2, r3]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d006      	beq.n	80083ae <ModbusStart+0x3a>
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	23a0      	movs	r3, #160	; 0xa0
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	5cd3      	ldrb	r3, [r2, r3]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d000      	beq.n	80083ae <ModbusStart+0x3a>
	{

		while(1); //ERROR select the type of hardware
 80083ac:	e7fe      	b.n	80083ac <ModbusStart+0x38>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	23a0      	movs	r3, #160	; 0xa0
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	5cd3      	ldrb	r3, [r2, r3]
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d100      	bne.n	80083bc <ModbusStart+0x48>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 80083ba:	e7fe      	b.n	80083ba <ModbusStart+0x46>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	23a0      	movs	r3, #160	; 0xa0
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	5cd3      	ldrb	r3, [r2, r3]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d005      	beq.n	80083d4 <ModbusStart+0x60>
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	23a0      	movs	r3, #160	; 0xa0
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	5cd3      	ldrb	r3, [r2, r3]
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d13b      	bne.n	800844c <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <ModbusStart+0x78>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68d8      	ldr	r0, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	8a1b      	ldrh	r3, [r3, #16]
 80083e4:	2200      	movs	r2, #0
 80083e6:	0019      	movs	r1, r3
 80083e8:	f7fc fbe5 	bl	8004bb6 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d105      	bne.n	8008400 <ModbusStart+0x8c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2298      	movs	r2, #152	; 0x98
 80083f8:	589b      	ldr	r3, [r3, r2]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d100      	bne.n	8008400 <ModbusStart+0x8c>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 80083fe:	e7fe      	b.n	80083fe <ModbusStart+0x8a>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	0018      	movs	r0, r3
 8008408:	f7fe fe7b 	bl	8007102 <HAL_UART_GetState>
 800840c:	0003      	movs	r3, r0
 800840e:	2b20      	cmp	r3, #32
 8008410:	d1f7      	bne.n	8008402 <ModbusStart+0x8e>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6858      	ldr	r0, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	33a6      	adds	r3, #166	; 0xa6
 800841a:	2201      	movs	r2, #1
 800841c:	0019      	movs	r1, r3
 800841e:	f7fe f9b5 	bl	800678c <HAL_UART_Receive_IT>
 8008422:	1e03      	subs	r3, r0, #0
 8008424:	d000      	beq.n	8008428 <ModbusStart+0xb4>
          {
                while(1)
 8008426:	e7fe      	b.n	8008426 <ModbusStart+0xb2>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7a1b      	ldrb	r3, [r3, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <ModbusStart+0xc6>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b04      	cmp	r3, #4
 8008436:	d100      	bne.n	800843a <ModbusStart+0xc6>
          {
        	  while(1)
 8008438:	e7fe      	b.n	8008438 <ModbusStart+0xc4>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	7a1b      	ldrb	r3, [r3, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <ModbusStart+0xd8>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b03      	cmp	r3, #3
 8008448:	d100      	bne.n	800844c <ModbusStart+0xd8>
          {
             	  while(1)
 800844a:	e7fe      	b.n	800844a <ModbusStart+0xd6>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2293      	movs	r2, #147	; 0x93
 8008450:	2100      	movs	r1, #0
 8008452:	5499      	strb	r1, [r3, r2]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2293      	movs	r2, #147	; 0x93
 8008458:	5c99      	ldrb	r1, [r3, r2]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2294      	movs	r2, #148	; 0x94
 800845e:	5499      	strb	r1, [r3, r2]
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	22a0      	movs	r2, #160	; 0xa0
 8008464:	2100      	movs	r1, #0
 8008466:	5299      	strh	r1, [r3, r2]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	22a0      	movs	r2, #160	; 0xa0
 800846c:	5a99      	ldrh	r1, [r3, r2]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	229e      	movs	r2, #158	; 0x9e
 8008472:	5299      	strh	r1, [r3, r2]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	229e      	movs	r2, #158	; 0x9e
 8008478:	5a99      	ldrh	r1, [r3, r2]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	229c      	movs	r2, #156	; 0x9c
 800847e:	5299      	strh	r1, [r3, r2]

}
 8008480:	46c0      	nop			; (mov r8, r8)
 8008482:	46bd      	mov	sp, r7
 8008484:	b002      	add	sp, #8
 8008486:	bd80      	pop	{r7, pc}

08008488 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e02a      	b.n	80084ec <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <vTimerCallbackT35+0x7c>)
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	58d3      	ldr	r3, [r2, r3]
 800849e:	22b0      	movs	r2, #176	; 0xb0
 80084a0:	589b      	ldr	r3, [r3, r2]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d11e      	bne.n	80084e6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 80084a8:	4b16      	ldr	r3, [pc, #88]	; (8008504 <vTimerCallbackT35+0x7c>)
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	0092      	lsls	r2, r2, #2
 80084ae:	58d3      	ldr	r3, [r2, r3]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d10c      	bne.n	80084d0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80084b6:	4b13      	ldr	r3, [pc, #76]	; (8008504 <vTimerCallbackT35+0x7c>)
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	0092      	lsls	r2, r2, #2
 80084bc:	58d3      	ldr	r3, [r2, r3]
 80084be:	22b4      	movs	r2, #180	; 0xb4
 80084c0:	5898      	ldr	r0, [r3, r2]
 80084c2:	2300      	movs	r3, #0
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	2300      	movs	r3, #0
 80084c8:	2200      	movs	r2, #0
 80084ca:	2103      	movs	r1, #3
 80084cc:	f004 fc9a 	bl	800ce04 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80084d0:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <vTimerCallbackT35+0x7c>)
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	0092      	lsls	r2, r2, #2
 80084d6:	58d3      	ldr	r3, [r2, r3]
 80084d8:	22ac      	movs	r2, #172	; 0xac
 80084da:	5898      	ldr	r0, [r3, r2]
 80084dc:	2300      	movs	r3, #0
 80084de:	2203      	movs	r2, #3
 80084e0:	2100      	movs	r1, #0
 80084e2:	f004 f9c7 	bl	800c874 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3301      	adds	r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <vTimerCallbackT35+0x80>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	001a      	movs	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	dbce      	blt.n	8008496 <vTimerCallbackT35+0xe>
		}

	}
}
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	46bd      	mov	sp, r7
 80084fe:	b004      	add	sp, #16
 8008500:	bd80      	pop	{r7, pc}
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	200009d8 	.word	0x200009d8
 8008508:	200009e0 	.word	0x200009e0

0800850c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e017      	b.n	800854a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800851a:	4b11      	ldr	r3, [pc, #68]	; (8008560 <vTimerCallbackTimeout+0x54>)
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	0092      	lsls	r2, r2, #2
 8008520:	58d3      	ldr	r3, [r2, r3]
 8008522:	22b4      	movs	r2, #180	; 0xb4
 8008524:	589b      	ldr	r3, [r3, r2]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	429a      	cmp	r2, r3
 800852a:	d10b      	bne.n	8008544 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <vTimerCallbackTimeout+0x54>)
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	0092      	lsls	r2, r2, #2
 8008532:	58d3      	ldr	r3, [r2, r3]
 8008534:	22ac      	movs	r2, #172	; 0xac
 8008536:	5898      	ldr	r0, [r3, r2]
 8008538:	2308      	movs	r3, #8
 800853a:	4259      	negs	r1, r3
 800853c:	2300      	movs	r3, #0
 800853e:	2203      	movs	r2, #3
 8008540:	f004 f998 	bl	800c874 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	4b06      	ldr	r3, [pc, #24]	; (8008564 <vTimerCallbackTimeout+0x58>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	001a      	movs	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4293      	cmp	r3, r2
 8008554:	dbe1      	blt.n	800851a <vTimerCallbackTimeout+0xe>
		}

	}

}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b004      	add	sp, #16
 800855e:	bd80      	pop	{r7, pc}
 8008560:	200009d8 	.word	0x200009d8
 8008564:	200009e0 	.word	0x200009e0

08008568 <StartTaskModbusSlave>:
}

#endif

void StartTaskModbusSlave(void *argument)
{
 8008568:	b5b0      	push	{r4, r5, r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af02      	add	r7, sp, #8
 800856e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	23a0      	movs	r3, #160	; 0xa0
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	5cd3      	ldrb	r3, [r2, r3]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d005      	beq.n	8008592 <StartTaskModbusSlave+0x2a>
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	23a0      	movs	r3, #160	; 0xa0
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	5cd3      	ldrb	r3, [r2, r3]
 800858e:	2b04      	cmp	r3, #4
 8008590:	d118      	bne.n	80085c4 <StartTaskModbusSlave+0x5c>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8008592:	2301      	movs	r3, #1
 8008594:	425b      	negs	r3, r3
 8008596:	0019      	movs	r1, r3
 8008598:	2001      	movs	r0, #1
 800859a:	f004 f925 	bl	800c7e8 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	0018      	movs	r0, r3
 80085a2:	f000 fd03 	bl	8008fac <getRxBuffer>
 80085a6:	0003      	movs	r3, r0
 80085a8:	3303      	adds	r3, #3
 80085aa:	d10b      	bne.n	80085c4 <StartTaskModbusSlave+0x5c>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	22fd      	movs	r2, #253	; 0xfd
 80085b0:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	22a0      	movs	r2, #160	; 0xa0
 80085b6:	5a9b      	ldrh	r3, [r3, r2]
 80085b8:	3301      	adds	r3, #1
 80085ba:	b299      	uxth	r1, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	22a0      	movs	r2, #160	; 0xa0
 80085c0:	5299      	strh	r1, [r3, r2]
		  continue;
 80085c2:	e0bb      	b.n	800873c <StartTaskModbusSlave+0x1d4>
	  }

   }

   if (modH->u8BufferSize < 7)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2293      	movs	r2, #147	; 0x93
 80085c8:	5c9b      	ldrb	r3, [r3, r2]
 80085ca:	2b06      	cmp	r3, #6
 80085cc:	d80b      	bhi.n	80085e6 <StartTaskModbusSlave+0x7e>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	22fa      	movs	r2, #250	; 0xfa
 80085d2:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	22a0      	movs	r2, #160	; 0xa0
 80085d8:	5a9b      	ldrh	r3, [r3, r2]
 80085da:	3301      	adds	r3, #1
 80085dc:	b299      	uxth	r1, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	22a0      	movs	r2, #160	; 0xa0
 80085e2:	5299      	strh	r1, [r3, r2]

	  continue;
 80085e4:	e0aa      	b.n	800873c <StartTaskModbusSlave+0x1d4>
    }

   // check slave id or single slave configuration address
    if ((modH->u8Buffer[ID] !=  modH->u8id) && (modH->u8Buffer[ID] != 0xF8))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	7cda      	ldrb	r2, [r3, #19]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	7a1b      	ldrb	r3, [r3, #8]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d004      	beq.n	80085fc <StartTaskModbusSlave+0x94>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	7cdb      	ldrb	r3, [r3, #19]
 80085f6:	2bf8      	cmp	r3, #248	; 0xf8
 80085f8:	d000      	beq.n	80085fc <StartTaskModbusSlave+0x94>
 80085fa:	e09e      	b.n	800873a <StartTaskModbusSlave+0x1d2>
	 } else {
//			xTaskNotifyGive(defaultTaskHandle);
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 80085fc:	250b      	movs	r5, #11
 80085fe:	197c      	adds	r4, r7, r5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	0018      	movs	r0, r3
 8008604:	f000 fd24 	bl	8009050 <validateRequest>
 8008608:	0003      	movs	r3, r0
 800860a:	7023      	strb	r3, [r4, #0]
	if (u8exception > 0)
 800860c:	197b      	adds	r3, r7, r5
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d023      	beq.n	800865c <StartTaskModbusSlave+0xf4>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	197b      	adds	r3, r7, r5
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	0011      	movs	r1, r2
 800861c:	0018      	movs	r0, r3
 800861e:	f000 fef9 	bl	8009414 <buildException>
			sendTxBuffer(modH);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	0018      	movs	r0, r3
 8008626:	f000 ff17 	bl	8009458 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800862a:	197b      	adds	r3, r7, r5
 800862c:	2200      	movs	r2, #0
 800862e:	569a      	ldrsb	r2, [r3, r2]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	749a      	strb	r2, [r3, #18]
		  // Flash the red LED every time we get an error.
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8008634:	4b42      	ldr	r3, [pc, #264]	; (8008740 <StartTaskModbusSlave+0x1d8>)
 8008636:	2201      	movs	r2, #1
 8008638:	2101      	movs	r1, #1
 800863a:	0018      	movs	r0, r3
 800863c:	f7fc fabb 	bl	8004bb6 <HAL_GPIO_WritePin>
		  xTimerStart(RedLedOffTimerHandle, 500);
 8008640:	4b40      	ldr	r3, [pc, #256]	; (8008744 <StartTaskModbusSlave+0x1dc>)
 8008642:	681c      	ldr	r4, [r3, #0]
 8008644:	f003 fc56 	bl	800bef4 <xTaskGetTickCount>
 8008648:	0002      	movs	r2, r0
 800864a:	23fa      	movs	r3, #250	; 0xfa
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	2101      	movs	r1, #1
 8008654:	0020      	movs	r0, r4
 8008656:	f004 fbd5 	bl	800ce04 <xTimerGenericCommand>

		//return u8exception

		continue;
 800865a:	e06f      	b.n	800873c <StartTaskModbusSlave+0x1d4>
	 }

	  // Flash the green LED every time we get a Modbus packet.
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, true);
 800865c:	4b38      	ldr	r3, [pc, #224]	; (8008740 <StartTaskModbusSlave+0x1d8>)
 800865e:	2201      	movs	r2, #1
 8008660:	2102      	movs	r1, #2
 8008662:	0018      	movs	r0, r3
 8008664:	f7fc faa7 	bl	8004bb6 <HAL_GPIO_WritePin>
	  xTimerStart(GreenLedOffTimerHandle, 200);
 8008668:	4b37      	ldr	r3, [pc, #220]	; (8008748 <StartTaskModbusSlave+0x1e0>)
 800866a:	681c      	ldr	r4, [r3, #0]
 800866c:	f003 fc42 	bl	800bef4 <xTaskGetTickCount>
 8008670:	0002      	movs	r2, r0
 8008672:	23c8      	movs	r3, #200	; 0xc8
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	2300      	movs	r3, #0
 8008678:	2101      	movs	r1, #1
 800867a:	0020      	movs	r0, r4
 800867c:	f004 fbc2 	bl	800ce04 <xTimerGenericCommand>
	 modH->i8lastError = 0;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	749a      	strb	r2, [r3, #18]

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	7d1b      	ldrb	r3, [r3, #20]
 800868a:	2b10      	cmp	r3, #16
 800868c:	d853      	bhi.n	8008736 <StartTaskModbusSlave+0x1ce>
 800868e:	009a      	lsls	r2, r3, #2
 8008690:	4b2e      	ldr	r3, [pc, #184]	; (800874c <StartTaskModbusSlave+0x1e4>)
 8008692:	18d3      	adds	r3, r2, r3
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	469f      	mov	pc, r3
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	0018      	movs	r0, r3
 800869c:	f000 ff70 	bl	8009580 <process_FC1>
 80086a0:	0003      	movs	r3, r0
 80086a2:	0019      	movs	r1, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	22a7      	movs	r2, #167	; 0xa7
 80086a8:	5499      	strb	r1, [r3, r2]
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC2(modH);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	0018      	movs	r0, r3
 80086ae:	f001 f862 	bl	8009776 <process_FC2>
 80086b2:	0003      	movs	r3, r0
 80086b4:	0019      	movs	r1, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	22a7      	movs	r2, #167	; 0xa7
 80086ba:	5499      	strb	r1, [r3, r2]
				break;
 80086bc:	e03c      	b.n	8008738 <StartTaskModbusSlave+0x1d0>
			case MB_FC_READ_HOLDING_REGISTER :
				modH->i8state = process_FC3(modH);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	0018      	movs	r0, r3
 80086c2:	f001 f954 	bl	800996e <process_FC3>
 80086c6:	0003      	movs	r3, r0
 80086c8:	0019      	movs	r1, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	22a7      	movs	r2, #167	; 0xa7
 80086ce:	5499      	strb	r1, [r3, r2]
				break;
 80086d0:	e032      	b.n	8008738 <StartTaskModbusSlave+0x1d0>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC4(modH);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	0018      	movs	r0, r3
 80086d6:	f001 f9e0 	bl	8009a9a <process_FC4>
 80086da:	0003      	movs	r3, r0
 80086dc:	0019      	movs	r1, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	22a7      	movs	r2, #167	; 0xa7
 80086e2:	5499      	strb	r1, [r3, r2]
				break;
 80086e4:	e028      	b.n	8008738 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	0018      	movs	r0, r3
 80086ea:	f001 fa6c 	bl	8009bc6 <process_FC5>
 80086ee:	0003      	movs	r3, r0
 80086f0:	0019      	movs	r1, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	22a7      	movs	r2, #167	; 0xa7
 80086f6:	5499      	strb	r1, [r3, r2]
				break;
 80086f8:	e01e      	b.n	8008738 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_HOLDING_REGISTER :
				modH->i8state = process_FC6(modH);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	0018      	movs	r0, r3
 80086fe:	f001 fae0 	bl	8009cc2 <process_FC6>
 8008702:	0003      	movs	r3, r0
 8008704:	0019      	movs	r1, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	22a7      	movs	r2, #167	; 0xa7
 800870a:	5499      	strb	r1, [r3, r2]
				break;
 800870c:	e014      	b.n	8008738 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	0018      	movs	r0, r3
 8008712:	f001 fb45 	bl	8009da0 <process_FC15>
 8008716:	0003      	movs	r3, r0
 8008718:	0019      	movs	r1, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	22a7      	movs	r2, #167	; 0xa7
 800871e:	5499      	strb	r1, [r3, r2]
				break;
 8008720:	e00a      	b.n	8008738 <StartTaskModbusSlave+0x1d0>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	0018      	movs	r0, r3
 8008726:	f001 fc11 	bl	8009f4c <process_FC16>
 800872a:	0003      	movs	r3, r0
 800872c:	0019      	movs	r1, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	22a7      	movs	r2, #167	; 0xa7
 8008732:	5499      	strb	r1, [r3, r2]
				break;
 8008734:	e000      	b.n	8008738 <StartTaskModbusSlave+0x1d0>
			default:
				break;
 8008736:	46c0      	nop			; (mov r8, r8)
	 }

	 continue;
 8008738:	e000      	b.n	800873c <StartTaskModbusSlave+0x1d4>
    	continue; // continue this is not for us
 800873a:	46c0      	nop			; (mov r8, r8)
  {
 800873c:	e71a      	b.n	8008574 <StartTaskModbusSlave+0xc>
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	48000400 	.word	0x48000400
 8008744:	200000ec 	.word	0x200000ec
 8008748:	200000e8 	.word	0x200000e8
 800874c:	0800de78 	.word	0x0800de78

08008750 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8008750:	b084      	sub	sp, #16
 8008752:	b5b0      	push	{r4, r5, r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	2004      	movs	r0, #4
 800875c:	2418      	movs	r4, #24
 800875e:	1900      	adds	r0, r0, r4
 8008760:	2408      	movs	r4, #8
 8008762:	46a4      	mov	ip, r4
 8008764:	44bc      	add	ip, r7
 8008766:	4460      	add	r0, ip
 8008768:	6001      	str	r1, [r0, #0]
 800876a:	6042      	str	r2, [r0, #4]
 800876c:	6083      	str	r3, [r0, #8]


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800876e:	240e      	movs	r4, #14
 8008770:	193b      	adds	r3, r7, r4
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	22b8      	movs	r2, #184	; 0xb8
 800877a:	589b      	ldr	r3, [r3, r2]
 800877c:	2201      	movs	r2, #1
 800877e:	4252      	negs	r2, r2
 8008780:	0011      	movs	r1, r2
 8008782:	0018      	movs	r0, r3
 8008784:	f002 fe5c 	bl	800b440 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	7a1b      	ldrb	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <SendQuery+0x46>
 8008790:	193b      	adds	r3, r7, r4
 8008792:	22ff      	movs	r2, #255	; 0xff
 8008794:	701a      	strb	r2, [r3, #0]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	22a7      	movs	r2, #167	; 0xa7
 800879a:	569b      	ldrsb	r3, [r3, r2]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <SendQuery+0x58>
 80087a0:	230e      	movs	r3, #14
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	22fe      	movs	r2, #254	; 0xfe
 80087a6:	701a      	strb	r2, [r3, #0]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80087a8:	2304      	movs	r3, #4
 80087aa:	2218      	movs	r2, #24
 80087ac:	189b      	adds	r3, r3, r2
 80087ae:	2108      	movs	r1, #8
 80087b0:	468c      	mov	ip, r1
 80087b2:	44bc      	add	ip, r7
 80087b4:	4463      	add	r3, ip
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d008      	beq.n	80087ce <SendQuery+0x7e>
 80087bc:	2304      	movs	r3, #4
 80087be:	189b      	adds	r3, r3, r2
 80087c0:	2208      	movs	r2, #8
 80087c2:	4694      	mov	ip, r2
 80087c4:	44bc      	add	ip, r7
 80087c6:	4463      	add	r3, ip
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2bf7      	cmp	r3, #247	; 0xf7
 80087cc:	d903      	bls.n	80087d6 <SendQuery+0x86>
 80087ce:	230e      	movs	r3, #14
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	22f7      	movs	r2, #247	; 0xf7
 80087d4:	701a      	strb	r2, [r3, #0]


	if(error)
 80087d6:	240e      	movs	r4, #14
 80087d8:	193b      	adds	r3, r7, r4
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d010      	beq.n	8008802 <SendQuery+0xb2>
	{
		 modH->i8lastError = error;
 80087e0:	193b      	adds	r3, r7, r4
 80087e2:	2200      	movs	r2, #0
 80087e4:	569a      	ldrsb	r2, [r3, r2]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	22b8      	movs	r2, #184	; 0xb8
 80087ee:	5898      	ldr	r0, [r3, r2]
 80087f0:	2300      	movs	r3, #0
 80087f2:	2200      	movs	r2, #0
 80087f4:	2100      	movs	r1, #0
 80087f6:	f002 fc39 	bl	800b06c <xQueueGenericSend>
		 return error;
 80087fa:	193b      	adds	r3, r7, r4
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	b25b      	sxtb	r3, r3
 8008800:	e1c3      	b.n	8008b8a <SendQuery+0x43a>
	}


	modH->u16regs = telegram.u16reg;
 8008802:	2304      	movs	r3, #4
 8008804:	2018      	movs	r0, #24
 8008806:	181b      	adds	r3, r3, r0
 8008808:	2208      	movs	r2, #8
 800880a:	4694      	mov	ip, r2
 800880c:	44bc      	add	ip, r7
 800880e:	4463      	add	r3, ip
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2198      	movs	r1, #152	; 0x98
 8008816:	505a      	str	r2, [r3, r1]

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8008818:	2304      	movs	r3, #4
 800881a:	0001      	movs	r1, r0
 800881c:	185b      	adds	r3, r3, r1
 800881e:	2208      	movs	r2, #8
 8008820:	4694      	mov	ip, r2
 8008822:	44bc      	add	ip, r7
 8008824:	4463      	add	r3, ip
 8008826:	781a      	ldrb	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800882c:	2304      	movs	r3, #4
 800882e:	185b      	adds	r3, r3, r1
 8008830:	2208      	movs	r2, #8
 8008832:	4694      	mov	ip, r2
 8008834:	44bc      	add	ip, r7
 8008836:	4463      	add	r3, ip
 8008838:	785a      	ldrb	r2, [r3, #1]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800883e:	2304      	movs	r3, #4
 8008840:	185b      	adds	r3, r3, r1
 8008842:	2208      	movs	r2, #8
 8008844:	4694      	mov	ip, r2
 8008846:	44bc      	add	ip, r7
 8008848:	4463      	add	r3, ip
 800884a:	885b      	ldrh	r3, [r3, #2]
 800884c:	0a1b      	lsrs	r3, r3, #8
 800884e:	b29b      	uxth	r3, r3
 8008850:	b2da      	uxtb	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8008856:	2304      	movs	r3, #4
 8008858:	185b      	adds	r3, r3, r1
 800885a:	2208      	movs	r2, #8
 800885c:	4694      	mov	ip, r2
 800885e:	44bc      	add	ip, r7
 8008860:	4463      	add	r3, ip
 8008862:	885b      	ldrh	r3, [r3, #2]
 8008864:	b2da      	uxtb	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800886a:	2304      	movs	r3, #4
 800886c:	185b      	adds	r3, r3, r1
 800886e:	2208      	movs	r2, #8
 8008870:	4694      	mov	ip, r2
 8008872:	44bc      	add	ip, r7
 8008874:	4463      	add	r3, ip
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	2b10      	cmp	r3, #16
 800887a:	d900      	bls.n	800887e <SendQuery+0x12e>
 800887c:	e171      	b.n	8008b62 <SendQuery+0x412>
 800887e:	009a      	lsls	r2, r3, #2
 8008880:	4bc5      	ldr	r3, [pc, #788]	; (8008b98 <SendQuery+0x448>)
 8008882:	18d3      	adds	r3, r2, r3
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	469f      	mov	pc, r3
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_HOLDING_REGISTER:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8008888:	2304      	movs	r3, #4
 800888a:	2118      	movs	r1, #24
 800888c:	185b      	adds	r3, r3, r1
 800888e:	2208      	movs	r2, #8
 8008890:	4694      	mov	ip, r2
 8008892:	44bc      	add	ip, r7
 8008894:	4463      	add	r3, ip
 8008896:	889b      	ldrh	r3, [r3, #4]
 8008898:	0a1b      	lsrs	r3, r3, #8
 800889a:	b29b      	uxth	r3, r3
 800889c:	b2da      	uxtb	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80088a2:	2304      	movs	r3, #4
 80088a4:	185b      	adds	r3, r3, r1
 80088a6:	2208      	movs	r2, #8
 80088a8:	4694      	mov	ip, r2
 80088aa:	44bc      	add	ip, r7
 80088ac:	4463      	add	r3, ip
 80088ae:	889b      	ldrh	r3, [r3, #4]
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2293      	movs	r2, #147	; 0x93
 80088ba:	2106      	movs	r1, #6
 80088bc:	5499      	strb	r1, [r3, r2]
	    break;
 80088be:	e150      	b.n	8008b62 <SendQuery+0x412>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80088c0:	2304      	movs	r3, #4
 80088c2:	2218      	movs	r2, #24
 80088c4:	189b      	adds	r3, r3, r2
 80088c6:	2208      	movs	r2, #8
 80088c8:	4694      	mov	ip, r2
 80088ca:	44bc      	add	ip, r7
 80088cc:	4463      	add	r3, ip
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <SendQuery+0x18a>
 80088d6:	22ff      	movs	r2, #255	; 0xff
 80088d8:	e000      	b.n	80088dc <SendQuery+0x18c>
 80088da:	2200      	movs	r2, #0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2293      	movs	r2, #147	; 0x93
 80088ea:	2106      	movs	r1, #6
 80088ec:	5499      	strb	r1, [r3, r2]
	    break;
 80088ee:	e138      	b.n	8008b62 <SendQuery+0x412>
	case MB_FC_WRITE_HOLDING_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80088f0:	2304      	movs	r3, #4
 80088f2:	2118      	movs	r1, #24
 80088f4:	185b      	adds	r3, r3, r1
 80088f6:	2208      	movs	r2, #8
 80088f8:	4694      	mov	ip, r2
 80088fa:	44bc      	add	ip, r7
 80088fc:	4463      	add	r3, ip
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	b29b      	uxth	r3, r3
 8008906:	b2da      	uxtb	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800890c:	2304      	movs	r3, #4
 800890e:	185b      	adds	r3, r3, r1
 8008910:	2208      	movs	r2, #8
 8008912:	4694      	mov	ip, r2
 8008914:	44bc      	add	ip, r7
 8008916:	4463      	add	r3, ip
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b2da      	uxtb	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2293      	movs	r2, #147	; 0x93
 8008926:	2106      	movs	r1, #6
 8008928:	5499      	strb	r1, [r3, r2]
	    break;
 800892a:	e11a      	b.n	8008b62 <SendQuery+0x412>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800892c:	2304      	movs	r3, #4
 800892e:	2418      	movs	r4, #24
 8008930:	191b      	adds	r3, r3, r4
 8008932:	2208      	movs	r2, #8
 8008934:	4694      	mov	ip, r2
 8008936:	44bc      	add	ip, r7
 8008938:	4463      	add	r3, ip
 800893a:	889b      	ldrh	r3, [r3, #4]
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	b29a      	uxth	r2, r3
 8008940:	2109      	movs	r1, #9
 8008942:	187b      	adds	r3, r7, r1
 8008944:	701a      	strb	r2, [r3, #0]
	    u8bytesno = u8regsno * 2;
 8008946:	200f      	movs	r0, #15
 8008948:	183a      	adds	r2, r7, r0
 800894a:	187b      	adds	r3, r7, r1
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	18db      	adds	r3, r3, r3
 8008950:	7013      	strb	r3, [r2, #0]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8008952:	2304      	movs	r3, #4
 8008954:	191b      	adds	r3, r3, r4
 8008956:	2208      	movs	r2, #8
 8008958:	4694      	mov	ip, r2
 800895a:	44bc      	add	ip, r7
 800895c:	4463      	add	r3, ip
 800895e:	889b      	ldrh	r3, [r3, #4]
 8008960:	220f      	movs	r2, #15
 8008962:	4013      	ands	r3, r2
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <SendQuery+0x22e>
	    {
	        u8bytesno++;
 800896a:	183b      	adds	r3, r7, r0
 800896c:	781a      	ldrb	r2, [r3, #0]
 800896e:	183b      	adds	r3, r7, r0
 8008970:	3201      	adds	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
	        u8regsno++;
 8008974:	187b      	adds	r3, r7, r1
 8008976:	781a      	ldrb	r2, [r3, #0]
 8008978:	187b      	adds	r3, r7, r1
 800897a:	3201      	adds	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800897e:	2304      	movs	r3, #4
 8008980:	2118      	movs	r1, #24
 8008982:	185b      	adds	r3, r3, r1
 8008984:	2208      	movs	r2, #8
 8008986:	4694      	mov	ip, r2
 8008988:	44bc      	add	ip, r7
 800898a:	4463      	add	r3, ip
 800898c:	889b      	ldrh	r3, [r3, #4]
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	b29b      	uxth	r3, r3
 8008992:	b2da      	uxtb	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8008998:	2304      	movs	r3, #4
 800899a:	185b      	adds	r3, r3, r1
 800899c:	2208      	movs	r2, #8
 800899e:	4694      	mov	ip, r2
 80089a0:	44bc      	add	ip, r7
 80089a2:	4463      	add	r3, ip
 80089a4:	889b      	ldrh	r3, [r3, #4]
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	220f      	movs	r2, #15
 80089b0:	18ba      	adds	r2, r7, r2
 80089b2:	7812      	ldrb	r2, [r2, #0]
 80089b4:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2293      	movs	r2, #147	; 0x93
 80089ba:	2107      	movs	r1, #7
 80089bc:	5499      	strb	r1, [r3, r2]

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80089be:	230c      	movs	r3, #12
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	2200      	movs	r2, #0
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	e047      	b.n	8008a58 <SendQuery+0x308>
	    {
	        if(i%2)
 80089c8:	210c      	movs	r1, #12
 80089ca:	187b      	adds	r3, r7, r1
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	2201      	movs	r2, #1
 80089d0:	4013      	ands	r3, r2
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d017      	beq.n	8008a08 <SendQuery+0x2b8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80089d8:	2304      	movs	r3, #4
 80089da:	2218      	movs	r2, #24
 80089dc:	189b      	adds	r3, r3, r2
 80089de:	2208      	movs	r2, #8
 80089e0:	4694      	mov	ip, r2
 80089e2:	44bc      	add	ip, r7
 80089e4:	4463      	add	r3, ip
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	187b      	adds	r3, r7, r1
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	18d3      	adds	r3, r2, r3
 80089f4:	8818      	ldrh	r0, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2293      	movs	r2, #147	; 0x93
 80089fa:	5c9b      	ldrb	r3, [r3, r2]
 80089fc:	0019      	movs	r1, r3
 80089fe:	b2c2      	uxtb	r2, r0
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	185b      	adds	r3, r3, r1
 8008a04:	74da      	strb	r2, [r3, #19]
 8008a06:	e019      	b.n	8008a3c <SendQuery+0x2ec>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8008a08:	2304      	movs	r3, #4
 8008a0a:	2218      	movs	r2, #24
 8008a0c:	189b      	adds	r3, r3, r2
 8008a0e:	2208      	movs	r2, #8
 8008a10:	4694      	mov	ip, r2
 8008a12:	44bc      	add	ip, r7
 8008a14:	4463      	add	r3, ip
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	230c      	movs	r3, #12
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	18d3      	adds	r3, r2, r3
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	0a1b      	lsrs	r3, r3, #8
 8008a2a:	b298      	uxth	r0, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2293      	movs	r2, #147	; 0x93
 8008a30:	5c9b      	ldrb	r3, [r3, r2]
 8008a32:	0019      	movs	r1, r3
 8008a34:	b2c2      	uxtb	r2, r0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	185b      	adds	r3, r3, r1
 8008a3a:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2293      	movs	r2, #147	; 0x93
 8008a40:	5c9b      	ldrb	r3, [r3, r2]
 8008a42:	3301      	adds	r3, #1
 8008a44:	b2d9      	uxtb	r1, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2293      	movs	r2, #147	; 0x93
 8008a4a:	5499      	strb	r1, [r3, r2]
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8008a4c:	210c      	movs	r1, #12
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	881a      	ldrh	r2, [r3, #0]
 8008a52:	187b      	adds	r3, r7, r1
 8008a54:	3201      	adds	r2, #1
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	230f      	movs	r3, #15
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	220c      	movs	r2, #12
 8008a62:	18ba      	adds	r2, r7, r2
 8008a64:	8812      	ldrh	r2, [r2, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d3ae      	bcc.n	80089c8 <SendQuery+0x278>
	    }
	    break;
 8008a6a:	e07a      	b.n	8008b62 <SendQuery+0x412>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	2118      	movs	r1, #24
 8008a70:	185b      	adds	r3, r3, r1
 8008a72:	2208      	movs	r2, #8
 8008a74:	4694      	mov	ip, r2
 8008a76:	44bc      	add	ip, r7
 8008a78:	4463      	add	r3, ip
 8008a7a:	889b      	ldrh	r3, [r3, #4]
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8008a86:	2304      	movs	r3, #4
 8008a88:	185b      	adds	r3, r3, r1
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	4694      	mov	ip, r2
 8008a8e:	44bc      	add	ip, r7
 8008a90:	4463      	add	r3, ip
 8008a92:	889b      	ldrh	r3, [r3, #4]
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8008a9a:	2304      	movs	r3, #4
 8008a9c:	185b      	adds	r3, r3, r1
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	4694      	mov	ip, r2
 8008aa2:	44bc      	add	ip, r7
 8008aa4:	4463      	add	r3, ip
 8008aa6:	889b      	ldrh	r3, [r3, #4]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	18db      	adds	r3, r3, r3
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2293      	movs	r2, #147	; 0x93
 8008ab6:	2107      	movs	r1, #7
 8008ab8:	5499      	strb	r1, [r3, r2]

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8008aba:	230a      	movs	r3, #10
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	2200      	movs	r2, #0
 8008ac0:	801a      	strh	r2, [r3, #0]
 8008ac2:	e040      	b.n	8008b46 <SendQuery+0x3f6>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	2518      	movs	r5, #24
 8008ac8:	195b      	adds	r3, r3, r5
 8008aca:	2208      	movs	r2, #8
 8008acc:	4694      	mov	ip, r2
 8008ace:	44bc      	add	ip, r7
 8008ad0:	4463      	add	r3, ip
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	240a      	movs	r4, #10
 8008ad6:	193b      	adds	r3, r7, r4
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	18d3      	adds	r3, r2, r3
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	0a1b      	lsrs	r3, r3, #8
 8008ae2:	b298      	uxth	r0, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2293      	movs	r2, #147	; 0x93
 8008ae8:	5c9b      	ldrb	r3, [r3, r2]
 8008aea:	0019      	movs	r1, r3
 8008aec:	b2c2      	uxtb	r2, r0
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	185b      	adds	r3, r3, r1
 8008af2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2293      	movs	r2, #147	; 0x93
 8008af8:	5c9b      	ldrb	r3, [r3, r2]
 8008afa:	3301      	adds	r3, #1
 8008afc:	b2d9      	uxtb	r1, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2293      	movs	r2, #147	; 0x93
 8008b02:	5499      	strb	r1, [r3, r2]
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8008b04:	2304      	movs	r3, #4
 8008b06:	195b      	adds	r3, r3, r5
 8008b08:	2208      	movs	r2, #8
 8008b0a:	4694      	mov	ip, r2
 8008b0c:	44bc      	add	ip, r7
 8008b0e:	4463      	add	r3, ip
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	193b      	adds	r3, r7, r4
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	18d3      	adds	r3, r2, r3
 8008b1a:	8818      	ldrh	r0, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2293      	movs	r2, #147	; 0x93
 8008b20:	5c9b      	ldrb	r3, [r3, r2]
 8008b22:	0019      	movs	r1, r3
 8008b24:	b2c2      	uxtb	r2, r0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	185b      	adds	r3, r3, r1
 8008b2a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2293      	movs	r2, #147	; 0x93
 8008b30:	5c9b      	ldrb	r3, [r3, r2]
 8008b32:	3301      	adds	r3, #1
 8008b34:	b2d9      	uxtb	r1, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2293      	movs	r2, #147	; 0x93
 8008b3a:	5499      	strb	r1, [r3, r2]
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8008b3c:	193b      	adds	r3, r7, r4
 8008b3e:	881a      	ldrh	r2, [r3, #0]
 8008b40:	193b      	adds	r3, r7, r4
 8008b42:	3201      	adds	r2, #1
 8008b44:	801a      	strh	r2, [r3, #0]
 8008b46:	2304      	movs	r3, #4
 8008b48:	2218      	movs	r2, #24
 8008b4a:	189b      	adds	r3, r3, r2
 8008b4c:	2208      	movs	r2, #8
 8008b4e:	4694      	mov	ip, r2
 8008b50:	44bc      	add	ip, r7
 8008b52:	4463      	add	r3, ip
 8008b54:	889b      	ldrh	r3, [r3, #4]
 8008b56:	220a      	movs	r2, #10
 8008b58:	18ba      	adds	r2, r7, r2
 8008b5a:	8812      	ldrh	r2, [r2, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3b1      	bcc.n	8008ac4 <SendQuery+0x374>
	    }
	    break;
 8008b60:	46c0      	nop			; (mov r8, r8)
	}


	sendTxBuffer(modH);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	0018      	movs	r0, r3
 8008b66:	f000 fc77 	bl	8009458 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	22b8      	movs	r2, #184	; 0xb8
 8008b6e:	5898      	ldr	r0, [r3, r2]
 8008b70:	2300      	movs	r3, #0
 8008b72:	2200      	movs	r2, #0
 8008b74:	2100      	movs	r1, #0
 8008b76:	f002 fa79 	bl	800b06c <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	22a7      	movs	r2, #167	; 0xa7
 8008b7e:	2101      	movs	r1, #1
 8008b80:	5499      	strb	r1, [r3, r2]
	modH->i8lastError = 0;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	749a      	strb	r2, [r3, #18]
	return 0;
 8008b88:	2300      	movs	r3, #0


}
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	b004      	add	sp, #16
 8008b90:	bcb0      	pop	{r4, r5, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	b004      	add	sp, #16
 8008b96:	4718      	bx	r3
 8008b98:	0800debc 	.word	0x0800debc

08008b9c <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b08d      	sub	sp, #52	; 0x34
 8008ba0:	af02      	add	r7, sp, #8
 8008ba2:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	22a8      	movs	r2, #168	; 0xa8
 8008bac:	589b      	ldr	r3, [r3, r2]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4252      	negs	r2, r2
 8008bb2:	240c      	movs	r4, #12
 8008bb4:	1939      	adds	r1, r7, r4
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f002 fb8d 	bl	800b2d6 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8008bbc:	193b      	adds	r3, r7, r4
 8008bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bc0:	466a      	mov	r2, sp
 8008bc2:	68d9      	ldr	r1, [r3, #12]
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	6819      	ldr	r1, [r3, #0]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f7ff fdc0 	bl	8008750 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	425b      	negs	r3, r3
 8008bd4:	0019      	movs	r1, r3
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	f003 fe06 	bl	800c7e8 <ulTaskNotifyTake>
 8008bdc:	0003      	movs	r3, r0
 8008bde:	623b      	str	r3, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	2200      	movs	r2, #0
 8008be4:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d019      	beq.n	8008c20 <StartTaskModbusMaster+0x84>
      {
    	  modH->i8state = COM_IDLE;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	22a7      	movs	r2, #167	; 0xa7
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	5499      	strb	r1, [r3, r2]
    	  modH->i8lastError = ERR_TIME_OUT;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	22f8      	movs	r2, #248	; 0xf8
 8008bf8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	22a0      	movs	r2, #160	; 0xa0
 8008bfe:	5a9b      	ldrh	r3, [r3, r2]
 8008c00:	3301      	adds	r3, #1
 8008c02:	b299      	uxth	r1, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	22a0      	movs	r2, #160	; 0xa0
 8008c08:	5299      	strh	r1, [r3, r2]
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8008c0a:	193b      	adds	r3, r7, r4
 8008c0c:	68d8      	ldr	r0, [r3, #12]
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	7c9b      	ldrb	r3, [r3, #18]
 8008c12:	b25b      	sxtb	r3, r3
 8008c14:	0019      	movs	r1, r3
 8008c16:	2300      	movs	r3, #0
 8008c18:	2203      	movs	r2, #3
 8008c1a:	f003 fe2b 	bl	800c874 <xTaskGenericNotify>
    	  continue;
 8008c1e:	e098      	b.n	8008d52 <StartTaskModbusMaster+0x1b6>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	0018      	movs	r0, r3
 8008c24:	f000 f9c2 	bl	8008fac <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	2293      	movs	r2, #147	; 0x93
 8008c2c:	5c9b      	ldrb	r3, [r3, r2]
 8008c2e:	2b05      	cmp	r3, #5
 8008c30:	d81a      	bhi.n	8008c68 <StartTaskModbusMaster+0xcc>

		  modH->i8state = COM_IDLE;
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	22a7      	movs	r2, #167	; 0xa7
 8008c36:	2100      	movs	r1, #0
 8008c38:	5499      	strb	r1, [r3, r2]
		  modH->i8lastError = ERR_BAD_SIZE;
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	22fa      	movs	r2, #250	; 0xfa
 8008c3e:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	22a0      	movs	r2, #160	; 0xa0
 8008c44:	5a9b      	ldrh	r3, [r3, r2]
 8008c46:	3301      	adds	r3, #1
 8008c48:	b299      	uxth	r1, r3
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	22a0      	movs	r2, #160	; 0xa0
 8008c4e:	5299      	strh	r1, [r3, r2]
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8008c50:	230c      	movs	r3, #12
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	68d8      	ldr	r0, [r3, #12]
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	7c9b      	ldrb	r3, [r3, #18]
 8008c5a:	b25b      	sxtb	r3, r3
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2203      	movs	r2, #3
 8008c62:	f003 fe07 	bl	800c874 <xTaskGenericNotify>
		  continue;
 8008c66:	e074      	b.n	8008d52 <StartTaskModbusMaster+0x1b6>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	22b4      	movs	r2, #180	; 0xb4
 8008c6c:	5898      	ldr	r0, [r3, r2]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	2300      	movs	r3, #0
 8008c74:	2200      	movs	r2, #0
 8008c76:	2103      	movs	r1, #3
 8008c78:	f004 f8c4 	bl	800ce04 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f000 f914 	bl	8008eac <validateAnswer>
 8008c84:	0003      	movs	r3, r0
 8008c86:	001a      	movs	r2, r3
 8008c88:	201f      	movs	r0, #31
 8008c8a:	183b      	adds	r3, r7, r0
 8008c8c:	701a      	strb	r2, [r3, #0]
	  if (u8exception != 0)
 8008c8e:	183b      	adds	r3, r7, r0
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	b25b      	sxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d013      	beq.n	8008cc0 <StartTaskModbusMaster+0x124>
	  {
		 modH->i8state = COM_IDLE;
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	22a7      	movs	r2, #167	; 0xa7
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	5499      	strb	r1, [r3, r2]
         modH->i8lastError = u8exception;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	183a      	adds	r2, r7, r0
 8008ca4:	7812      	ldrb	r2, [r2, #0]
 8008ca6:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8008ca8:	230c      	movs	r3, #12
 8008caa:	18fb      	adds	r3, r7, r3
 8008cac:	68d8      	ldr	r0, [r3, #12]
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	7c9b      	ldrb	r3, [r3, #18]
 8008cb2:	b25b      	sxtb	r3, r3
 8008cb4:	0019      	movs	r1, r3
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2203      	movs	r2, #3
 8008cba:	f003 fddb 	bl	800c874 <xTaskGenericNotify>
	     continue;
 8008cbe:	e048      	b.n	8008d52 <StartTaskModbusMaster+0x1b6>
	  }

	  modH->i8lastError = u8exception;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	221f      	movs	r2, #31
 8008cc4:	18ba      	adds	r2, r7, r2
 8008cc6:	7812      	ldrb	r2, [r2, #0]
 8008cc8:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	22b8      	movs	r2, #184	; 0xb8
 8008cce:	589b      	ldr	r3, [r3, r2]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4252      	negs	r2, r2
 8008cd4:	0011      	movs	r1, r2
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f002 fbb2 	bl	800b440 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	7d1b      	ldrb	r3, [r3, #20]
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	dc18      	bgt.n	8008d16 <StartTaskModbusMaster+0x17a>
 8008ce4:	2b0f      	cmp	r3, #15
 8008ce6:	da18      	bge.n	8008d1a <StartTaskModbusMaster+0x17e>
 8008ce8:	2b06      	cmp	r3, #6
 8008cea:	dc14      	bgt.n	8008d16 <StartTaskModbusMaster+0x17a>
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	da14      	bge.n	8008d1a <StartTaskModbusMaster+0x17e>
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	dc02      	bgt.n	8008cfa <StartTaskModbusMaster+0x15e>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dc04      	bgt.n	8008d02 <StartTaskModbusMaster+0x166>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8008cf8:	e00d      	b.n	8008d16 <StartTaskModbusMaster+0x17a>
 8008cfa:	3b03      	subs	r3, #3
	  switch( modH->u8Buffer[ FUNC ] )
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d80a      	bhi.n	8008d16 <StartTaskModbusMaster+0x17a>
 8008d00:	e004      	b.n	8008d0c <StartTaskModbusMaster+0x170>
	      get_FC1(modH);
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	0018      	movs	r0, r3
 8008d06:	f000 f825 	bl	8008d54 <get_FC1>
	      break;
 8008d0a:	e007      	b.n	8008d1c <StartTaskModbusMaster+0x180>
	      get_FC3(modH);
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f000 f88e 	bl	8008e30 <get_FC3>
	      break;
 8008d14:	e002      	b.n	8008d1c <StartTaskModbusMaster+0x180>
	      break;
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	e000      	b.n	8008d1c <StartTaskModbusMaster+0x180>
	      break;
 8008d1a:	46c0      	nop			; (mov r8, r8)
	  }
	  modH->i8state = COM_IDLE;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	22a7      	movs	r2, #167	; 0xa7
 8008d20:	2100      	movs	r1, #0
 8008d22:	5499      	strb	r1, [r3, r2]

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	7c9b      	ldrb	r3, [r3, #18]
 8008d28:	b25b      	sxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d110      	bne.n	8008d50 <StartTaskModbusMaster+0x1b4>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	22b8      	movs	r2, #184	; 0xb8
 8008d32:	5898      	ldr	r0, [r3, r2]
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	2100      	movs	r1, #0
 8008d3a:	f002 f997 	bl	800b06c <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8008d3e:	230c      	movs	r3, #12
 8008d40:	18fb      	adds	r3, r7, r3
 8008d42:	68d8      	ldr	r0, [r3, #12]
 8008d44:	230b      	movs	r3, #11
 8008d46:	4259      	negs	r1, r3
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	f003 fd92 	bl	800c874 <xTaskGenericNotify>
	  }


	  continue;
 8008d50:	46c0      	nop			; (mov r8, r8)
  {
 8008d52:	e729      	b.n	8008ba8 <StartTaskModbusMaster+0xc>

08008d54 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8008d5c:	230e      	movs	r3, #14
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	2203      	movs	r2, #3
 8008d62:	701a      	strb	r2, [r3, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8008d64:	230f      	movs	r3, #15
 8008d66:	18fb      	adds	r3, r7, r3
 8008d68:	2200      	movs	r2, #0
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	e054      	b.n	8008e18 <get_FC1+0xc4>

        if(i%2)
 8008d6e:	240f      	movs	r4, #15
 8008d70:	193b      	adds	r3, r7, r4
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2201      	movs	r2, #1
 8008d76:	4013      	ands	r3, r2
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d021      	beq.n	8008dc2 <get_FC1+0x6e>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8008d7e:	193b      	adds	r3, r7, r4
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	230e      	movs	r3, #14
 8008d84:	18fb      	adds	r3, r7, r3
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	18d3      	adds	r3, r2, r3
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	18d3      	adds	r3, r2, r3
 8008d8e:	7cd8      	ldrb	r0, [r3, #19]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2298      	movs	r2, #152	; 0x98
 8008d94:	589a      	ldr	r2, [r3, r2]
 8008d96:	193b      	adds	r3, r7, r4
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	18d3      	adds	r3, r2, r3
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b2d9      	uxtb	r1, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2298      	movs	r2, #152	; 0x98
 8008daa:	589a      	ldr	r2, [r3, r2]
 8008dac:	193b      	adds	r3, r7, r4
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	085b      	lsrs	r3, r3, #1
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	18d4      	adds	r4, r2, r3
 8008db8:	f000 faba 	bl	8009330 <word>
 8008dbc:	0003      	movs	r3, r0
 8008dbe:	8023      	strh	r3, [r4, #0]
 8008dc0:	e024      	b.n	8008e0c <get_FC1+0xb8>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2298      	movs	r2, #152	; 0x98
 8008dc6:	589a      	ldr	r2, [r3, r2]
 8008dc8:	210f      	movs	r1, #15
 8008dca:	187b      	adds	r3, r7, r1
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	18d3      	adds	r3, r2, r3
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	0a1b      	lsrs	r3, r3, #8
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	b2d8      	uxtb	r0, r3
 8008dde:	000c      	movs	r4, r1
 8008de0:	187b      	adds	r3, r7, r1
 8008de2:	781a      	ldrb	r2, [r3, #0]
 8008de4:	230e      	movs	r3, #14
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	18d3      	adds	r3, r2, r3
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	18d3      	adds	r3, r2, r3
 8008df0:	7cd9      	ldrb	r1, [r3, #19]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2298      	movs	r2, #152	; 0x98
 8008df6:	589a      	ldr	r2, [r3, r2]
 8008df8:	193b      	adds	r3, r7, r4
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	085b      	lsrs	r3, r3, #1
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	18d4      	adds	r4, r2, r3
 8008e04:	f000 fa94 	bl	8009330 <word>
 8008e08:	0003      	movs	r3, r0
 8008e0a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8008e0c:	210f      	movs	r1, #15
 8008e0e:	187b      	adds	r3, r7, r1
 8008e10:	781a      	ldrb	r2, [r3, #0]
 8008e12:	187b      	adds	r3, r7, r1
 8008e14:	3201      	adds	r2, #1
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7d5b      	ldrb	r3, [r3, #21]
 8008e1c:	220f      	movs	r2, #15
 8008e1e:	18ba      	adds	r2, r7, r2
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d3a3      	bcc.n	8008d6e <get_FC1+0x1a>
        }

     }
}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	46c0      	nop			; (mov r8, r8)
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b005      	add	sp, #20
 8008e2e:	bd90      	pop	{r4, r7, pc}

08008e30 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8008e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8008e38:	230f      	movs	r3, #15
 8008e3a:	18fb      	adds	r3, r7, r3
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	701a      	strb	r2, [r3, #0]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8008e40:	230e      	movs	r3, #14
 8008e42:	18fb      	adds	r3, r7, r3
 8008e44:	2200      	movs	r2, #0
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e021      	b.n	8008e8e <get_FC3+0x5e>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8008e4a:	250f      	movs	r5, #15
 8008e4c:	197b      	adds	r3, r7, r5
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	18d3      	adds	r3, r2, r3
 8008e54:	7cd8      	ldrb	r0, [r3, #19]
 8008e56:	197b      	adds	r3, r7, r5
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	18d3      	adds	r3, r2, r3
 8008e60:	7cd9      	ldrb	r1, [r3, #19]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2298      	movs	r2, #152	; 0x98
 8008e66:	589a      	ldr	r2, [r3, r2]
 8008e68:	260e      	movs	r6, #14
 8008e6a:	19bb      	adds	r3, r7, r6
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	18d4      	adds	r4, r2, r3
 8008e72:	f000 fa5d 	bl	8009330 <word>
 8008e76:	0003      	movs	r3, r0
 8008e78:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8008e7a:	197b      	adds	r3, r7, r5
 8008e7c:	197a      	adds	r2, r7, r5
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	3202      	adds	r2, #2
 8008e82:	701a      	strb	r2, [r3, #0]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8008e84:	19bb      	adds	r3, r7, r6
 8008e86:	781a      	ldrb	r2, [r3, #0]
 8008e88:	19bb      	adds	r3, r7, r6
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7d5b      	ldrb	r3, [r3, #21]
 8008e92:	085b      	lsrs	r3, r3, #1
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	220e      	movs	r2, #14
 8008e98:	18ba      	adds	r2, r7, r2
 8008e9a:	7812      	ldrb	r2, [r2, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d3d4      	bcc.n	8008e4a <get_FC3+0x1a>
    }
}
 8008ea0:	46c0      	nop			; (mov r8, r8)
 8008ea2:	46c0      	nop			; (mov r8, r8)
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b005      	add	sp, #20
 8008ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008eac <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2293      	movs	r2, #147	; 0x93
 8008eb8:	5c9b      	ldrb	r3, [r3, r2]
 8008eba:	3b02      	subs	r3, #2
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	18d3      	adds	r3, r2, r3
 8008ec0:	7cdb      	ldrb	r3, [r3, #19]
 8008ec2:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8008ec4:	b21a      	sxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2193      	movs	r1, #147	; 0x93
 8008eca:	5c5b      	ldrb	r3, [r3, r1]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	18cb      	adds	r3, r1, r3
 8008ed2:	7cdb      	ldrb	r3, [r3, #19]
 8008ed4:	b21b      	sxth	r3, r3
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	b21a      	sxth	r2, r3
	uint16_t u16MsgCRC =
 8008eda:	240c      	movs	r4, #12
 8008edc:	193b      	adds	r3, r7, r4
 8008ede:	801a      	strh	r2, [r3, #0]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3313      	adds	r3, #19
 8008ee4:	001a      	movs	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2193      	movs	r1, #147	; 0x93
 8008eea:	5c5b      	ldrb	r3, [r3, r1]
 8008eec:	3b02      	subs	r3, #2
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	0019      	movs	r1, r3
 8008ef2:	0010      	movs	r0, r2
 8008ef4:	f000 fa34 	bl	8009360 <calcCRC>
 8008ef8:	0003      	movs	r3, r0
 8008efa:	001a      	movs	r2, r3
 8008efc:	193b      	adds	r3, r7, r4
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d009      	beq.n	8008f18 <validateAnswer+0x6c>
    {
    	modH->u16errCnt ++;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	22a0      	movs	r2, #160	; 0xa0
 8008f08:	5a9b      	ldrh	r3, [r3, r2]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b299      	uxth	r1, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	22a0      	movs	r2, #160	; 0xa0
 8008f12:	5299      	strh	r1, [r3, r2]
        return ERR_BAD_CRC;
 8008f14:	23fc      	movs	r3, #252	; 0xfc
 8008f16:	e043      	b.n	8008fa0 <validateAnswer+0xf4>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
 8008f1c:	b25b      	sxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	da09      	bge.n	8008f36 <validateAnswer+0x8a>
    {
    	modH->u16errCnt ++;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	22a0      	movs	r2, #160	; 0xa0
 8008f26:	5a9b      	ldrh	r3, [r3, r2]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	b299      	uxth	r1, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	22a0      	movs	r2, #160	; 0xa0
 8008f30:	5299      	strh	r1, [r3, r2]
        return ERR_EXCEPTION;
 8008f32:	23fb      	movs	r3, #251	; 0xfb
 8008f34:	e034      	b.n	8008fa0 <validateAnswer+0xf4>
    }

    // check fct code
    bool isSupported = false;
 8008f36:	230f      	movs	r3, #15
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8008f3e:	230e      	movs	r3, #14
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	e013      	b.n	8008f70 <validateAnswer+0xc4>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8008f48:	230e      	movs	r3, #14
 8008f4a:	18fb      	adds	r3, r7, r3
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	4a16      	ldr	r2, [pc, #88]	; (8008fa8 <validateAnswer+0xfc>)
 8008f50:	5cd2      	ldrb	r2, [r2, r3]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7d1b      	ldrb	r3, [r3, #20]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d104      	bne.n	8008f64 <validateAnswer+0xb8>
        {
            isSupported = 1;
 8008f5a:	230f      	movs	r3, #15
 8008f5c:	18fb      	adds	r3, r7, r3
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
            break;
 8008f62:	e00a      	b.n	8008f7a <validateAnswer+0xce>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8008f64:	210e      	movs	r1, #14
 8008f66:	187b      	adds	r3, r7, r1
 8008f68:	781a      	ldrb	r2, [r3, #0]
 8008f6a:	187b      	adds	r3, r7, r1
 8008f6c:	3201      	adds	r2, #1
 8008f6e:	701a      	strb	r2, [r3, #0]
 8008f70:	230e      	movs	r3, #14
 8008f72:	18fb      	adds	r3, r7, r3
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b07      	cmp	r3, #7
 8008f78:	d9e6      	bls.n	8008f48 <validateAnswer+0x9c>
        }
    }
    if (!isSupported)
 8008f7a:	230f      	movs	r3, #15
 8008f7c:	18fb      	adds	r3, r7, r3
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2201      	movs	r2, #1
 8008f82:	4053      	eors	r3, r2
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <validateAnswer+0xf2>
    {
    	modH->u16errCnt ++;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	22a0      	movs	r2, #160	; 0xa0
 8008f8e:	5a9b      	ldrh	r3, [r3, r2]
 8008f90:	3301      	adds	r3, #1
 8008f92:	b299      	uxth	r1, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	22a0      	movs	r2, #160	; 0xa0
 8008f98:	5299      	strh	r1, [r3, r2]
        return EXC_FUNC_CODE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <validateAnswer+0xf4>
    }

    return 0; // OK, no exception code thrown
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	b005      	add	sp, #20
 8008fa6:	bd90      	pop	{r4, r7, pc}
 8008fa8:	0800de70 	.word	0x0800de70

08008fac <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	23a0      	movs	r3, #160	; 0xa0
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	5cd3      	ldrb	r3, [r2, r3]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d104      	bne.n	8008fca <getRxBuffer+0x1e>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f7fd fc39 	bl	800683c <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	33ff      	adds	r3, #255	; 0xff
 8008fd0:	5cd3      	ldrb	r3, [r2, r3]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <getRxBuffer+0x40>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	33bc      	adds	r3, #188	; 0xbc
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f7ff f908 	bl	80081f0 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8008fe0:	230e      	movs	r3, #14
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	4252      	negs	r2, r2
 8008fe8:	801a      	strh	r2, [r3, #0]
 8008fea:	e01b      	b.n	8009024 <getRxBuffer+0x78>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	33bc      	adds	r3, #188	; 0xbc
 8008ff0:	001a      	movs	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3313      	adds	r3, #19
 8008ff6:	0019      	movs	r1, r3
 8008ff8:	0010      	movs	r0, r2
 8008ffa:	f7ff f87f 	bl	80080fc <RingGetAllBytes>
 8008ffe:	0003      	movs	r3, r0
 8009000:	0019      	movs	r1, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2293      	movs	r2, #147	; 0x93
 8009006:	5499      	strb	r1, [r3, r2]
		modH->u16InCnt++;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	229c      	movs	r2, #156	; 0x9c
 800900c:	5a9b      	ldrh	r3, [r3, r2]
 800900e:	3301      	adds	r3, #1
 8009010:	b299      	uxth	r1, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	229c      	movs	r2, #156	; 0x9c
 8009016:	5299      	strh	r1, [r3, r2]
		i16result = modH->u8BufferSize;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2293      	movs	r2, #147	; 0x93
 800901c:	5c9a      	ldrb	r2, [r3, r2]
 800901e:	230e      	movs	r3, #14
 8009020:	18fb      	adds	r3, r7, r3
 8009022:	801a      	strh	r2, [r3, #0]
	}

	if(modH->xTypeHW == USART_HW)
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	23a0      	movs	r3, #160	; 0xa0
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	5cd3      	ldrb	r3, [r2, r3]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d107      	bne.n	8009040 <getRxBuffer+0x94>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6858      	ldr	r0, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	33a6      	adds	r3, #166	; 0xa6
 8009038:	2201      	movs	r2, #1
 800903a:	0019      	movs	r1, r3
 800903c:	f7fd fba6 	bl	800678c <HAL_UART_Receive_IT>
	}

    return i16result;
 8009040:	230e      	movs	r3, #14
 8009042:	18fb      	adds	r3, r7, r3
 8009044:	2200      	movs	r2, #0
 8009046:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009048:	0018      	movs	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	b004      	add	sp, #16
 800904e:	bd80      	pop	{r7, pc}

08009050 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8009050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2293      	movs	r2, #147	; 0x93
 800905c:	5c9b      	ldrb	r3, [r3, r2]
 800905e:	3b02      	subs	r3, #2
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	18d3      	adds	r3, r2, r3
 8009064:	7cdb      	ldrb	r3, [r3, #19]
 8009066:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8009068:	b21a      	sxth	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2193      	movs	r1, #147	; 0x93
 800906e:	5c5b      	ldrb	r3, [r3, r1]
 8009070:	3b01      	subs	r3, #1
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	18cb      	adds	r3, r1, r3
 8009076:	7cdb      	ldrb	r3, [r3, #19]
 8009078:	b21b      	sxth	r3, r3
 800907a:	4313      	orrs	r3, r2
 800907c:	b21a      	sxth	r2, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800907e:	2408      	movs	r4, #8
 8009080:	193b      	adds	r3, r7, r4
 8009082:	801a      	strh	r2, [r3, #0]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3313      	adds	r3, #19
 8009088:	001a      	movs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2193      	movs	r1, #147	; 0x93
 800908e:	5c5b      	ldrb	r3, [r3, r1]
 8009090:	3b02      	subs	r3, #2
 8009092:	b2db      	uxtb	r3, r3
 8009094:	0019      	movs	r1, r3
 8009096:	0010      	movs	r0, r2
 8009098:	f000 f962 	bl	8009360 <calcCRC>
 800909c:	0003      	movs	r3, r0
 800909e:	001a      	movs	r2, r3
 80090a0:	193b      	adds	r3, r7, r4
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d009      	beq.n	80090bc <validateRequest+0x6c>
	    {
	       		modH->u16errCnt ++;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	22a0      	movs	r2, #160	; 0xa0
 80090ac:	5a9b      	ldrh	r3, [r3, r2]
 80090ae:	3301      	adds	r3, #1
 80090b0:	b299      	uxth	r1, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	22a0      	movs	r2, #160	; 0xa0
 80090b6:	5299      	strh	r1, [r3, r2]
	       		return ERR_BAD_CRC;
 80090b8:	23fc      	movs	r3, #252	; 0xfc
 80090ba:	e131      	b.n	8009320 <validateRequest+0x2d0>


#endif

	    // check fct code
	    bool isSupported = false;
 80090bc:	230f      	movs	r3, #15
 80090be:	18fb      	adds	r3, r7, r3
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80090c4:	230e      	movs	r3, #14
 80090c6:	18fb      	adds	r3, r7, r3
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]
 80090cc:	e013      	b.n	80090f6 <validateRequest+0xa6>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80090ce:	230e      	movs	r3, #14
 80090d0:	18fb      	adds	r3, r7, r3
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	4a94      	ldr	r2, [pc, #592]	; (8009328 <validateRequest+0x2d8>)
 80090d6:	5cd2      	ldrb	r2, [r2, r3]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	7d1b      	ldrb	r3, [r3, #20]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d104      	bne.n	80090ea <validateRequest+0x9a>
	        {
	            isSupported = 1;
 80090e0:	230f      	movs	r3, #15
 80090e2:	18fb      	adds	r3, r7, r3
 80090e4:	2201      	movs	r2, #1
 80090e6:	701a      	strb	r2, [r3, #0]
	            break;
 80090e8:	e00a      	b.n	8009100 <validateRequest+0xb0>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80090ea:	210e      	movs	r1, #14
 80090ec:	187b      	adds	r3, r7, r1
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	187b      	adds	r3, r7, r1
 80090f2:	3201      	adds	r2, #1
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	230e      	movs	r3, #14
 80090f8:	18fb      	adds	r3, r7, r3
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b07      	cmp	r3, #7
 80090fe:	d9e6      	bls.n	80090ce <validateRequest+0x7e>
	        }
	    }
	    if (!isSupported)
 8009100:	230f      	movs	r3, #15
 8009102:	18fb      	adds	r3, r7, r3
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2201      	movs	r2, #1
 8009108:	4053      	eors	r3, r2
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <validateRequest+0xd4>
	    {
	    	modH->u16errCnt ++;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	22a0      	movs	r2, #160	; 0xa0
 8009114:	5a9b      	ldrh	r3, [r3, r2]
 8009116:	3301      	adds	r3, #1
 8009118:	b299      	uxth	r1, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	22a0      	movs	r2, #160	; 0xa0
 800911e:	5299      	strh	r1, [r3, r2]
	        return EXC_FUNC_CODE;
 8009120:	2301      	movs	r3, #1
 8009122:	e0fd      	b.n	8009320 <validateRequest+0x2d0>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8009124:	230c      	movs	r3, #12
 8009126:	18fb      	adds	r3, r7, r3
 8009128:	2200      	movs	r2, #0
 800912a:	801a      	strh	r2, [r3, #0]
	    uint16_t u16NRegs = 0;
 800912c:	230a      	movs	r3, #10
 800912e:	18fb      	adds	r3, r7, r3
 8009130:	2200      	movs	r2, #0
 8009132:	801a      	strh	r2, [r3, #0]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7d1b      	ldrb	r3, [r3, #20]
 8009138:	2b10      	cmp	r3, #16
 800913a:	d900      	bls.n	800913e <validateRequest+0xee>
 800913c:	e0ef      	b.n	800931e <validateRequest+0x2ce>
 800913e:	009a      	lsls	r2, r3, #2
 8009140:	4b7a      	ldr	r3, [pc, #488]	; (800932c <validateRequest+0x2dc>)
 8009142:	18d3      	adds	r3, r2, r3
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	469f      	mov	pc, r3
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	7d5a      	ldrb	r2, [r3, #21]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7d9b      	ldrb	r3, [r3, #22]
 8009150:	0019      	movs	r1, r3
 8009152:	0010      	movs	r0, r2
 8009154:	f000 f8ec 	bl	8009330 <word>
 8009158:	0003      	movs	r3, r0
 800915a:	001a      	movs	r2, r3
 800915c:	230c      	movs	r3, #12
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	0912      	lsrs	r2, r2, #4
 8009162:	801a      	strh	r2, [r3, #0]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	7dda      	ldrb	r2, [r3, #23]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7e1b      	ldrb	r3, [r3, #24]
 800916c:	0019      	movs	r1, r3
 800916e:	0010      	movs	r0, r2
 8009170:	f000 f8de 	bl	8009330 <word>
 8009174:	0003      	movs	r3, r0
 8009176:	001a      	movs	r2, r3
 8009178:	240a      	movs	r4, #10
 800917a:	193b      	adds	r3, r7, r4
 800917c:	0912      	lsrs	r2, r2, #4
 800917e:	801a      	strh	r2, [r3, #0]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7dda      	ldrb	r2, [r3, #23]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7e1b      	ldrb	r3, [r3, #24]
 8009188:	0019      	movs	r1, r3
 800918a:	0010      	movs	r0, r2
 800918c:	f000 f8d0 	bl	8009330 <word>
 8009190:	0003      	movs	r3, r0
 8009192:	001a      	movs	r2, r3
 8009194:	230f      	movs	r3, #15
 8009196:	4013      	ands	r3, r2
 8009198:	b29b      	uxth	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <validateRequest+0x158>
 800919e:	193b      	adds	r3, r7, r4
 80091a0:	881a      	ldrh	r2, [r3, #0]
 80091a2:	193b      	adds	r3, r7, r4
 80091a4:	3201      	adds	r2, #1
 80091a6:	801a      	strh	r2, [r3, #0]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 80091a8:	230c      	movs	r3, #12
 80091aa:	18fb      	adds	r3, r7, r3
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	230a      	movs	r3, #10
 80091b0:	18fb      	adds	r3, r7, r3
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	18d3      	adds	r3, r2, r3
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	21a4      	movs	r1, #164	; 0xa4
 80091ba:	5a52      	ldrh	r2, [r2, r1]
 80091bc:	4293      	cmp	r3, r2
 80091be:	dd01      	ble.n	80091c4 <validateRequest+0x174>
 80091c0:	2302      	movs	r3, #2
 80091c2:	e0ad      	b.n	8009320 <validateRequest+0x2d0>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7dda      	ldrb	r2, [r3, #23]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	7e1b      	ldrb	r3, [r3, #24]
 80091cc:	0019      	movs	r1, r3
 80091ce:	0010      	movs	r0, r2
 80091d0:	f000 f8ae 	bl	8009330 <word>
 80091d4:	0003      	movs	r3, r0
 80091d6:	001a      	movs	r2, r3
 80091d8:	240a      	movs	r4, #10
 80091da:	193b      	adds	r3, r7, r4
 80091dc:	08d2      	lsrs	r2, r2, #3
 80091de:	801a      	strh	r2, [r3, #0]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	7dda      	ldrb	r2, [r3, #23]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7e1b      	ldrb	r3, [r3, #24]
 80091e8:	0019      	movs	r1, r3
 80091ea:	0010      	movs	r0, r2
 80091ec:	f000 f8a0 	bl	8009330 <word>
 80091f0:	0003      	movs	r3, r0
 80091f2:	001a      	movs	r2, r3
 80091f4:	2307      	movs	r3, #7
 80091f6:	4013      	ands	r3, r2
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <validateRequest+0x1b8>
 80091fe:	193b      	adds	r3, r7, r4
 8009200:	881a      	ldrh	r2, [r3, #0]
 8009202:	193b      	adds	r3, r7, r4
 8009204:	3201      	adds	r2, #1
 8009206:	801a      	strh	r2, [r3, #0]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8009208:	210a      	movs	r1, #10
 800920a:	187b      	adds	r3, r7, r1
 800920c:	187a      	adds	r2, r7, r1
 800920e:	8812      	ldrh	r2, [r2, #0]
 8009210:	3205      	adds	r2, #5
 8009212:	801a      	strh	r2, [r3, #0]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8009214:	187b      	adds	r3, r7, r1
 8009216:	881a      	ldrh	r2, [r3, #0]
 8009218:	2380      	movs	r3, #128	; 0x80
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	429a      	cmp	r2, r3
 800921e:	d800      	bhi.n	8009222 <validateRequest+0x1d2>
 8009220:	e076      	b.n	8009310 <validateRequest+0x2c0>
 8009222:	2303      	movs	r3, #3
 8009224:	e07c      	b.n	8009320 <validateRequest+0x2d0>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	7d5a      	ldrb	r2, [r3, #21]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7d9b      	ldrb	r3, [r3, #22]
 800922e:	0019      	movs	r1, r3
 8009230:	0010      	movs	r0, r2
 8009232:	f000 f87d 	bl	8009330 <word>
 8009236:	0003      	movs	r3, r0
 8009238:	001a      	movs	r2, r3
 800923a:	240c      	movs	r4, #12
 800923c:	193b      	adds	r3, r7, r4
 800923e:	0912      	lsrs	r2, r2, #4
 8009240:	801a      	strh	r2, [r3, #0]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	7d5a      	ldrb	r2, [r3, #21]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	7d9b      	ldrb	r3, [r3, #22]
 800924a:	0019      	movs	r1, r3
 800924c:	0010      	movs	r0, r2
 800924e:	f000 f86f 	bl	8009330 <word>
 8009252:	0003      	movs	r3, r0
 8009254:	001a      	movs	r2, r3
 8009256:	230f      	movs	r3, #15
 8009258:	4013      	ands	r3, r2
 800925a:	b29b      	uxth	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <validateRequest+0x21a>
 8009260:	193b      	adds	r3, r7, r4
 8009262:	881a      	ldrh	r2, [r3, #0]
 8009264:	193b      	adds	r3, r7, r4
 8009266:	3201      	adds	r2, #1
 8009268:	801a      	strh	r2, [r3, #0]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	22a4      	movs	r2, #164	; 0xa4
 800926e:	5a9b      	ldrh	r3, [r3, r2]
 8009270:	220c      	movs	r2, #12
 8009272:	18ba      	adds	r2, r7, r2
 8009274:	8812      	ldrh	r2, [r2, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d94c      	bls.n	8009314 <validateRequest+0x2c4>
 800927a:	2302      	movs	r3, #2
 800927c:	e050      	b.n	8009320 <validateRequest+0x2d0>
	        break;
	    case MB_FC_WRITE_HOLDING_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7d5a      	ldrb	r2, [r3, #21]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7d9b      	ldrb	r3, [r3, #22]
 8009286:	250c      	movs	r5, #12
 8009288:	197c      	adds	r4, r7, r5
 800928a:	0019      	movs	r1, r3
 800928c:	0010      	movs	r0, r2
 800928e:	f000 f84f 	bl	8009330 <word>
 8009292:	0003      	movs	r3, r0
 8009294:	8023      	strh	r3, [r4, #0]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	22a4      	movs	r2, #164	; 0xa4
 800929a:	5a9b      	ldrh	r3, [r3, r2]
 800929c:	197a      	adds	r2, r7, r5
 800929e:	8812      	ldrh	r2, [r2, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d939      	bls.n	8009318 <validateRequest+0x2c8>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e03b      	b.n	8009320 <validateRequest+0x2d0>
	        break;
	    case MB_FC_READ_HOLDING_REGISTER :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	7d5a      	ldrb	r2, [r3, #21]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7d9b      	ldrb	r3, [r3, #22]
 80092b0:	250c      	movs	r5, #12
 80092b2:	197c      	adds	r4, r7, r5
 80092b4:	0019      	movs	r1, r3
 80092b6:	0010      	movs	r0, r2
 80092b8:	f000 f83a 	bl	8009330 <word>
 80092bc:	0003      	movs	r3, r0
 80092be:	8023      	strh	r3, [r4, #0]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	7dda      	ldrb	r2, [r3, #23]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7e1b      	ldrb	r3, [r3, #24]
 80092c8:	260a      	movs	r6, #10
 80092ca:	19bc      	adds	r4, r7, r6
 80092cc:	0019      	movs	r1, r3
 80092ce:	0010      	movs	r0, r2
 80092d0:	f000 f82e 	bl	8009330 <word>
 80092d4:	0003      	movs	r3, r0
 80092d6:	8023      	strh	r3, [r4, #0]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 80092d8:	197b      	adds	r3, r7, r5
 80092da:	881a      	ldrh	r2, [r3, #0]
 80092dc:	19bb      	adds	r3, r7, r6
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	18d3      	adds	r3, r2, r3
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	21a4      	movs	r1, #164	; 0xa4
 80092e6:	5a52      	ldrh	r2, [r2, r1]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	dd01      	ble.n	80092f0 <validateRequest+0x2a0>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e017      	b.n	8009320 <validateRequest+0x2d0>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 80092f0:	210a      	movs	r1, #10
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	18db      	adds	r3, r3, r3
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	187b      	adds	r3, r7, r1
 80092fc:	3205      	adds	r2, #5
 80092fe:	801a      	strh	r2, [r3, #0]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8009300:	187b      	adds	r3, r7, r1
 8009302:	881a      	ldrh	r2, [r3, #0]
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	429a      	cmp	r2, r3
 800930a:	d907      	bls.n	800931c <validateRequest+0x2cc>
 800930c:	2303      	movs	r3, #3
 800930e:	e007      	b.n	8009320 <validateRequest+0x2d0>
	        break;
 8009310:	46c0      	nop			; (mov r8, r8)
 8009312:	e004      	b.n	800931e <validateRequest+0x2ce>
	        break;
 8009314:	46c0      	nop			; (mov r8, r8)
 8009316:	e002      	b.n	800931e <validateRequest+0x2ce>
	        break;
 8009318:	46c0      	nop			; (mov r8, r8)
 800931a:	e000      	b.n	800931e <validateRequest+0x2ce>
	        break;
 800931c:	46c0      	nop			; (mov r8, r8)
	    }
	    return 0; // OK, no exception code thrown
 800931e:	2300      	movs	r3, #0

}
 8009320:	0018      	movs	r0, r3
 8009322:	46bd      	mov	sp, r7
 8009324:	b005      	add	sp, #20
 8009326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009328:	0800de70 	.word	0x0800de70
 800932c:	0800df00 	.word	0x0800df00

08009330 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	0002      	movs	r2, r0
 8009338:	1dfb      	adds	r3, r7, #7
 800933a:	701a      	strb	r2, [r3, #0]
 800933c:	1dbb      	adds	r3, r7, #6
 800933e:	1c0a      	adds	r2, r1, #0
 8009340:	701a      	strb	r2, [r3, #0]
	bytesFields W;
	W.u8[0] = L;
 8009342:	210c      	movs	r1, #12
 8009344:	187b      	adds	r3, r7, r1
 8009346:	1dba      	adds	r2, r7, #6
 8009348:	7812      	ldrb	r2, [r2, #0]
 800934a:	701a      	strb	r2, [r3, #0]
	W.u8[1] = H;
 800934c:	187b      	adds	r3, r7, r1
 800934e:	1dfa      	adds	r2, r7, #7
 8009350:	7812      	ldrb	r2, [r2, #0]
 8009352:	705a      	strb	r2, [r3, #1]

	return W.u16[0];
 8009354:	187b      	adds	r3, r7, r1
 8009356:	881b      	ldrh	r3, [r3, #0]
}
 8009358:	0018      	movs	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	b004      	add	sp, #16
 800935e:	bd80      	pop	{r7, pc}

08009360 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	000a      	movs	r2, r1
 800936a:	1cfb      	adds	r3, r7, #3
 800936c:	701a      	strb	r2, [r3, #0]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800936e:	4b27      	ldr	r3, [pc, #156]	; (800940c <calcCRC+0xac>)
 8009370:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8009372:	2313      	movs	r3, #19
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	e02d      	b.n	80093d8 <calcCRC+0x78>
    {
        temp = temp ^ Buffer[i];
 800937c:	2313      	movs	r3, #19
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	18d3      	adds	r3, r2, r3
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	001a      	movs	r2, r3
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	4053      	eors	r3, r2
 800938e:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8009390:	2312      	movs	r3, #18
 8009392:	18fb      	adds	r3, r7, r3
 8009394:	2201      	movs	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	e013      	b.n	80093c2 <calcCRC+0x62>
        {
            flag = temp & 0x0001;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2201      	movs	r2, #1
 800939e:	4013      	ands	r3, r2
 80093a0:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
            if (flag)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <calcCRC+0x56>
                temp ^= 0xA001;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	4a17      	ldr	r2, [pc, #92]	; (8009410 <calcCRC+0xb0>)
 80093b2:	4053      	eors	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80093b6:	2112      	movs	r1, #18
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	781a      	ldrb	r2, [r3, #0]
 80093bc:	187b      	adds	r3, r7, r1
 80093be:	3201      	adds	r2, #1
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	2312      	movs	r3, #18
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d9e6      	bls.n	800939a <calcCRC+0x3a>
    for (unsigned char i = 0; i < u8length; i++)
 80093cc:	2113      	movs	r1, #19
 80093ce:	187b      	adds	r3, r7, r1
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	187b      	adds	r3, r7, r1
 80093d4:	3201      	adds	r2, #1
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	2313      	movs	r3, #19
 80093da:	18fa      	adds	r2, r7, r3
 80093dc:	1cfb      	adds	r3, r7, #3
 80093de:	7812      	ldrb	r2, [r2, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d3ca      	bcc.n	800937c <calcCRC+0x1c>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	041b      	lsls	r3, r3, #16
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	b29b      	uxth	r3, r3

}
 8009402:	0018      	movs	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	b006      	add	sp, #24
 8009408:	bd80      	pop	{r7, pc}
 800940a:	46c0      	nop			; (mov r8, r8)
 800940c:	0000ffff 	.word	0x0000ffff
 8009410:	0000a001 	.word	0x0000a001

08009414 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	0002      	movs	r2, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	1dfb      	adds	r3, r7, #7
 8009420:	701a      	strb	r2, [r3, #0]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8009422:	210f      	movs	r1, #15
 8009424:	187b      	adds	r3, r7, r1
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	7d12      	ldrb	r2, [r2, #20]
 800942a:	701a      	strb	r2, [r3, #0]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	7a1a      	ldrb	r2, [r3, #8]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8009434:	187b      	adds	r3, r7, r1
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	3b80      	subs	r3, #128	; 0x80
 800943a:	b2da      	uxtb	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	1dfa      	adds	r2, r7, #7
 8009444:	7812      	ldrb	r2, [r2, #0]
 8009446:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2293      	movs	r2, #147	; 0x93
 800944c:	2103      	movs	r1, #3
 800944e:	5499      	strb	r1, [r3, r2]
}
 8009450:	46c0      	nop			; (mov r8, r8)
 8009452:	46bd      	mov	sp, r7
 8009454:	b004      	add	sp, #16
 8009456:	bd80      	pop	{r7, pc}

08009458 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8009458:	b5b0      	push	{r4, r5, r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af02      	add	r7, sp, #8
 800945e:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3313      	adds	r3, #19
 8009464:	001a      	movs	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2193      	movs	r1, #147	; 0x93
 800946a:	5c5b      	ldrb	r3, [r3, r1]
 800946c:	250e      	movs	r5, #14
 800946e:	197c      	adds	r4, r7, r5
 8009470:	0019      	movs	r1, r3
 8009472:	0010      	movs	r0, r2
 8009474:	f7ff ff74 	bl	8009360 <calcCRC>
 8009478:	0003      	movs	r3, r0
 800947a:	8023      	strh	r3, [r4, #0]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800947c:	002c      	movs	r4, r5
 800947e:	193b      	adds	r3, r7, r4
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	0a1b      	lsrs	r3, r3, #8
 8009484:	b298      	uxth	r0, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2293      	movs	r2, #147	; 0x93
 800948a:	5c9b      	ldrb	r3, [r3, r2]
 800948c:	0019      	movs	r1, r3
 800948e:	b2c2      	uxtb	r2, r0
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	185b      	adds	r3, r3, r1
 8009494:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2293      	movs	r2, #147	; 0x93
 800949a:	5c9b      	ldrb	r3, [r3, r2]
 800949c:	3301      	adds	r3, #1
 800949e:	b2d9      	uxtb	r1, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2293      	movs	r2, #147	; 0x93
 80094a4:	5499      	strb	r1, [r3, r2]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2293      	movs	r2, #147	; 0x93
 80094aa:	5c9b      	ldrb	r3, [r3, r2]
 80094ac:	0019      	movs	r1, r3
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	185b      	adds	r3, r3, r1
 80094b8:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2293      	movs	r2, #147	; 0x93
 80094be:	5c9b      	ldrb	r3, [r3, r2]
 80094c0:	3301      	adds	r3, #1
 80094c2:	b2d9      	uxtb	r1, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2293      	movs	r2, #147	; 0x93
 80094c8:	5499      	strb	r1, [r3, r2]
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00c      	beq.n	80094ec <sendTxBuffer+0x94>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	0018      	movs	r0, r3
 80094d8:	f7fd fd73 	bl	8006fc2 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68d8      	ldr	r0, [r3, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	8a1b      	ldrh	r3, [r3, #16]
 80094e4:	2201      	movs	r2, #1
 80094e6:	0019      	movs	r1, r3
 80094e8:	f7fb fb65 	bl	8004bb6 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6858      	ldr	r0, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3313      	adds	r3, #19
 80094f4:	0019      	movs	r1, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2293      	movs	r2, #147	; 0x93
 80094fa:	5c9b      	ldrb	r3, [r3, r2]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	001a      	movs	r2, r3
 8009500:	f7fd f8d4 	bl	80066ac <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8009504:	21fa      	movs	r1, #250	; 0xfa
 8009506:	2001      	movs	r0, #1
 8009508:	f003 f96e 	bl	800c7e8 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  || defined(STM32F0)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800950c:	46c0      	nop			; (mov r8, r8)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	2240      	movs	r2, #64	; 0x40
 8009518:	4013      	ands	r3, r2
 800951a:	d0f8      	beq.n	800950e <sendTxBuffer+0xb6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00c      	beq.n	800953e <sendTxBuffer+0xe6>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68d8      	ldr	r0, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	8a1b      	ldrh	r3, [r3, #16]
 800952c:	2200      	movs	r2, #0
 800952e:	0019      	movs	r1, r3
 8009530:	f7fb fb41 	bl	8004bb6 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	0018      	movs	r0, r3
 800953a:	f7fd fd92 	bl	8007062 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	2b04      	cmp	r3, #4
 8009544:	d10c      	bne.n	8009560 <sendTxBuffer+0x108>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	22b4      	movs	r2, #180	; 0xb4
 800954a:	589c      	ldr	r4, [r3, r2]
 800954c:	f002 fcd2 	bl	800bef4 <xTaskGetTickCount>
 8009550:	0002      	movs	r2, r0
 8009552:	2300      	movs	r3, #0
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2300      	movs	r3, #0
 8009558:	2102      	movs	r1, #2
 800955a:	0020      	movs	r0, r4
 800955c:	f003 fc52 	bl	800ce04 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2293      	movs	r2, #147	; 0x93
 8009564:	2100      	movs	r1, #0
 8009566:	5499      	strb	r1, [r3, r2]
     // increase message counter
     modH->u16OutCnt++;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	229e      	movs	r2, #158	; 0x9e
 800956c:	5a9b      	ldrh	r3, [r3, r2]
 800956e:	3301      	adds	r3, #1
 8009570:	b299      	uxth	r1, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	229e      	movs	r2, #158	; 0x9e
 8009576:	5299      	strh	r1, [r3, r2]


}
 8009578:	46c0      	nop			; (mov r8, r8)
 800957a:	46bd      	mov	sp, r7
 800957c:	b004      	add	sp, #16
 800957e:	bdb0      	pop	{r4, r5, r7, pc}

08009580 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8009580:	b5b0      	push	{r4, r5, r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7d5a      	ldrb	r2, [r3, #21]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	7d9b      	ldrb	r3, [r3, #22]
 8009590:	2112      	movs	r1, #18
 8009592:	187c      	adds	r4, r7, r1
 8009594:	0019      	movs	r1, r3
 8009596:	0010      	movs	r0, r2
 8009598:	f7ff feca 	bl	8009330 <word>
 800959c:	0003      	movs	r3, r0
 800959e:	8023      	strh	r3, [r4, #0]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	7dda      	ldrb	r2, [r3, #23]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7e1b      	ldrb	r3, [r3, #24]
 80095a8:	2510      	movs	r5, #16
 80095aa:	197c      	adds	r4, r7, r5
 80095ac:	0019      	movs	r1, r3
 80095ae:	0010      	movs	r0, r2
 80095b0:	f7ff febe 	bl	8009330 <word>
 80095b4:	0003      	movs	r3, r0
 80095b6:	8023      	strh	r3, [r4, #0]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80095b8:	0029      	movs	r1, r5
 80095ba:	187b      	adds	r3, r7, r1
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	08db      	lsrs	r3, r3, #3
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	2017      	movs	r0, #23
 80095c4:	183b      	adds	r3, r7, r0
 80095c6:	701a      	strb	r2, [r3, #0]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80095c8:	187b      	adds	r3, r7, r1
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	2207      	movs	r2, #7
 80095ce:	4013      	ands	r3, r2
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <process_FC1+0x60>
 80095d6:	183b      	adds	r3, r7, r0
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	183b      	adds	r3, r7, r0
 80095dc:	3201      	adds	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2017      	movs	r0, #23
 80095e4:	183a      	adds	r2, r7, r0
 80095e6:	7812      	ldrb	r2, [r2, #0]
 80095e8:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2293      	movs	r2, #147	; 0x93
 80095ee:	2103      	movs	r1, #3
 80095f0:	5499      	strb	r1, [r3, r2]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2293      	movs	r2, #147	; 0x93
 80095f6:	5c9b      	ldrb	r3, [r3, r2]
 80095f8:	001a      	movs	r2, r3
 80095fa:	183b      	adds	r3, r7, r0
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	18d3      	adds	r3, r2, r3
 8009600:	3b01      	subs	r3, #1
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	18d3      	adds	r3, r2, r3
 8009606:	2200      	movs	r2, #0
 8009608:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800960a:	2316      	movs	r3, #22
 800960c:	18fb      	adds	r3, r7, r3
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	22b8      	movs	r2, #184	; 0xb8
 8009616:	589b      	ldr	r3, [r3, r2]
 8009618:	2201      	movs	r2, #1
 800961a:	4252      	negs	r2, r2
 800961c:	0011      	movs	r1, r2
 800961e:	0018      	movs	r0, r3
 8009620:	f001 ff0e 	bl	800b440 <xQueueSemaphoreTake>
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8009624:	2314      	movs	r3, #20
 8009626:	18fb      	adds	r3, r7, r3
 8009628:	2200      	movs	r2, #0
 800962a:	801a      	strh	r2, [r3, #0]
 800962c:	e071      	b.n	8009712 <process_FC1+0x192>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800962e:	200c      	movs	r0, #12
 8009630:	183b      	adds	r3, r7, r0
 8009632:	2212      	movs	r2, #18
 8009634:	18b9      	adds	r1, r7, r2
 8009636:	2214      	movs	r2, #20
 8009638:	18ba      	adds	r2, r7, r2
 800963a:	8809      	ldrh	r1, [r1, #0]
 800963c:	8812      	ldrh	r2, [r2, #0]
 800963e:	188a      	adds	r2, r1, r2
 8009640:	801a      	strh	r2, [r3, #0]
        u16currentRegister =  (u16coil / 16);
 8009642:	240a      	movs	r4, #10
 8009644:	193b      	adds	r3, r7, r4
 8009646:	183a      	adds	r2, r7, r0
 8009648:	8812      	ldrh	r2, [r2, #0]
 800964a:	0912      	lsrs	r2, r2, #4
 800964c:	801a      	strh	r2, [r3, #0]
        u8currentBit = (uint8_t) (u16coil % 16);
 800964e:	183b      	adds	r3, r7, r0
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b2da      	uxtb	r2, r3
 8009654:	2009      	movs	r0, #9
 8009656:	183b      	adds	r3, r7, r0
 8009658:	210f      	movs	r1, #15
 800965a:	400a      	ands	r2, r1
 800965c:	701a      	strb	r2, [r3, #0]

        bitWrite(
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2298      	movs	r2, #152	; 0x98
 8009662:	589a      	ldr	r2, [r3, r2]
 8009664:	193b      	adds	r3, r7, r4
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	18d3      	adds	r3, r2, r3
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	001a      	movs	r2, r3
 8009670:	183b      	adds	r3, r7, r0
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	411a      	asrs	r2, r3
 8009676:	0013      	movs	r3, r2
 8009678:	2201      	movs	r2, #1
 800967a:	4013      	ands	r3, r2
 800967c:	d016      	beq.n	80096ac <process_FC1+0x12c>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2293      	movs	r2, #147	; 0x93
 8009682:	5c9b      	ldrb	r3, [r3, r2]
 8009684:	001a      	movs	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	189b      	adds	r3, r3, r2
 800968a:	7cda      	ldrb	r2, [r3, #19]
 800968c:	2316      	movs	r3, #22
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2101      	movs	r1, #1
 8009694:	4099      	lsls	r1, r3
 8009696:	000b      	movs	r3, r1
 8009698:	b2db      	uxtb	r3, r3
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	2093      	movs	r0, #147	; 0x93
 800969e:	5c09      	ldrb	r1, [r1, r0]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	185b      	adds	r3, r3, r1
 80096a8:	74da      	strb	r2, [r3, #19]
 80096aa:	e017      	b.n	80096dc <process_FC1+0x15c>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2293      	movs	r2, #147	; 0x93
 80096b0:	5c9b      	ldrb	r3, [r3, r2]
 80096b2:	001a      	movs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	7cdb      	ldrb	r3, [r3, #19]
 80096ba:	2216      	movs	r2, #22
 80096bc:	18ba      	adds	r2, r7, r2
 80096be:	7812      	ldrb	r2, [r2, #0]
 80096c0:	2101      	movs	r1, #1
 80096c2:	4091      	lsls	r1, r2
 80096c4:	000a      	movs	r2, r1
 80096c6:	b2d2      	uxtb	r2, r2
 80096c8:	43d2      	mvns	r2, r2
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	2093      	movs	r0, #147	; 0x93
 80096d0:	5c09      	ldrb	r1, [r1, r0]
 80096d2:	4013      	ands	r3, r2
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	185b      	adds	r3, r3, r1
 80096da:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister], u8currentBit ) );
        u8bitsno ++;
 80096dc:	2116      	movs	r1, #22
 80096de:	187b      	adds	r3, r7, r1
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	187b      	adds	r3, r7, r1
 80096e4:	3201      	adds	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]

        if (u8bitsno > 7)
 80096e8:	187b      	adds	r3, r7, r1
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b07      	cmp	r3, #7
 80096ee:	d90a      	bls.n	8009706 <process_FC1+0x186>
        {
            u8bitsno = 0;
 80096f0:	187b      	adds	r3, r7, r1
 80096f2:	2200      	movs	r2, #0
 80096f4:	701a      	strb	r2, [r3, #0]
            modH->u8BufferSize++;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2293      	movs	r2, #147	; 0x93
 80096fa:	5c9b      	ldrb	r3, [r3, r2]
 80096fc:	3301      	adds	r3, #1
 80096fe:	b2d9      	uxtb	r1, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2293      	movs	r2, #147	; 0x93
 8009704:	5499      	strb	r1, [r3, r2]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8009706:	2114      	movs	r1, #20
 8009708:	187b      	adds	r3, r7, r1
 800970a:	881a      	ldrh	r2, [r3, #0]
 800970c:	187b      	adds	r3, r7, r1
 800970e:	3201      	adds	r2, #1
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	2314      	movs	r3, #20
 8009714:	18fa      	adds	r2, r7, r3
 8009716:	2410      	movs	r4, #16
 8009718:	193b      	adds	r3, r7, r4
 800971a:	8812      	ldrh	r2, [r2, #0]
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d200      	bcs.n	8009724 <process_FC1+0x1a4>
 8009722:	e784      	b.n	800962e <process_FC1+0xae>
        }
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	22b8      	movs	r2, #184	; 0xb8
 8009728:	5898      	ldr	r0, [r3, r2]
 800972a:	2300      	movs	r3, #0
 800972c:	2200      	movs	r2, #0
 800972e:	2100      	movs	r1, #0
 8009730:	f001 fc9c 	bl	800b06c <xQueueGenericSend>

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8009734:	193b      	adds	r3, r7, r4
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	2207      	movs	r2, #7
 800973a:	4013      	ands	r3, r2
 800973c:	b29b      	uxth	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <process_FC1+0x1d2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2293      	movs	r2, #147	; 0x93
 8009746:	5c9b      	ldrb	r3, [r3, r2]
 8009748:	3301      	adds	r3, #1
 800974a:	b2d9      	uxtb	r1, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2293      	movs	r2, #147	; 0x93
 8009750:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize = modH->u8BufferSize +2;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2293      	movs	r2, #147	; 0x93
 8009756:	5c9a      	ldrb	r2, [r3, r2]
 8009758:	240f      	movs	r4, #15
 800975a:	193b      	adds	r3, r7, r4
 800975c:	3202      	adds	r2, #2
 800975e:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	0018      	movs	r0, r3
 8009764:	f7ff fe78 	bl	8009458 <sendTxBuffer>
    return u8CopyBufferSize;
 8009768:	193b      	adds	r3, r7, r4
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b25b      	sxtb	r3, r3
}
 800976e:	0018      	movs	r0, r3
 8009770:	46bd      	mov	sp, r7
 8009772:	b006      	add	sp, #24
 8009774:	bdb0      	pop	{r4, r5, r7, pc}

08009776 <process_FC2>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC2(modbusHandler_t *modH )
{
 8009776:	b5b0      	push	{r4, r5, r7, lr}
 8009778:	b086      	sub	sp, #24
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7d5a      	ldrb	r2, [r3, #21]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7d9b      	ldrb	r3, [r3, #22]
 8009786:	2112      	movs	r1, #18
 8009788:	187c      	adds	r4, r7, r1
 800978a:	0019      	movs	r1, r3
 800978c:	0010      	movs	r0, r2
 800978e:	f7ff fdcf 	bl	8009330 <word>
 8009792:	0003      	movs	r3, r0
 8009794:	8023      	strh	r3, [r4, #0]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	7dda      	ldrb	r2, [r3, #23]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7e1b      	ldrb	r3, [r3, #24]
 800979e:	2510      	movs	r5, #16
 80097a0:	197c      	adds	r4, r7, r5
 80097a2:	0019      	movs	r1, r3
 80097a4:	0010      	movs	r0, r2
 80097a6:	f7ff fdc3 	bl	8009330 <word>
 80097aa:	0003      	movs	r3, r0
 80097ac:	8023      	strh	r3, [r4, #0]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80097ae:	0029      	movs	r1, r5
 80097b0:	187b      	adds	r3, r7, r1
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	08db      	lsrs	r3, r3, #3
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	2017      	movs	r0, #23
 80097ba:	183b      	adds	r3, r7, r0
 80097bc:	701a      	strb	r2, [r3, #0]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80097be:	187b      	adds	r3, r7, r1
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	2207      	movs	r2, #7
 80097c4:	4013      	ands	r3, r2
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <process_FC2+0x60>
 80097cc:	183b      	adds	r3, r7, r0
 80097ce:	781a      	ldrb	r2, [r3, #0]
 80097d0:	183b      	adds	r3, r7, r0
 80097d2:	3201      	adds	r2, #1
 80097d4:	701a      	strb	r2, [r3, #0]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2017      	movs	r0, #23
 80097da:	183a      	adds	r2, r7, r0
 80097dc:	7812      	ldrb	r2, [r2, #0]
 80097de:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2293      	movs	r2, #147	; 0x93
 80097e4:	2103      	movs	r1, #3
 80097e6:	5499      	strb	r1, [r3, r2]
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2293      	movs	r2, #147	; 0x93
 80097ec:	5c9b      	ldrb	r3, [r3, r2]
 80097ee:	001a      	movs	r2, r3
 80097f0:	183b      	adds	r3, r7, r0
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	18d3      	adds	r3, r2, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	18d3      	adds	r3, r2, r3
 80097fc:	2200      	movs	r2, #0
 80097fe:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8009800:	2316      	movs	r3, #22
 8009802:	18fb      	adds	r3, r7, r3
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]


	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	22b8      	movs	r2, #184	; 0xb8
 800980c:	589b      	ldr	r3, [r3, r2]
 800980e:	2201      	movs	r2, #1
 8009810:	4252      	negs	r2, r2
 8009812:	0011      	movs	r1, r2
 8009814:	0018      	movs	r0, r3
 8009816:	f001 fe13 	bl	800b440 <xQueueSemaphoreTake>
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800981a:	2314      	movs	r3, #20
 800981c:	18fb      	adds	r3, r7, r3
 800981e:	2200      	movs	r2, #0
 8009820:	801a      	strh	r2, [r3, #0]
 8009822:	e072      	b.n	800990a <process_FC2+0x194>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8009824:	200c      	movs	r0, #12
 8009826:	183b      	adds	r3, r7, r0
 8009828:	2212      	movs	r2, #18
 800982a:	18b9      	adds	r1, r7, r2
 800982c:	2214      	movs	r2, #20
 800982e:	18ba      	adds	r2, r7, r2
 8009830:	8809      	ldrh	r1, [r1, #0]
 8009832:	8812      	ldrh	r2, [r2, #0]
 8009834:	188a      	adds	r2, r1, r2
 8009836:	801a      	strh	r2, [r3, #0]
        u16currentRegister =  (u16coil / 16);
 8009838:	240a      	movs	r4, #10
 800983a:	193b      	adds	r3, r7, r4
 800983c:	183a      	adds	r2, r7, r0
 800983e:	8812      	ldrh	r2, [r2, #0]
 8009840:	0912      	lsrs	r2, r2, #4
 8009842:	801a      	strh	r2, [r3, #0]
        u8currentBit = (uint8_t) (u16coil % 16);
 8009844:	183b      	adds	r3, r7, r0
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	2009      	movs	r0, #9
 800984c:	183b      	adds	r3, r7, r0
 800984e:	210f      	movs	r1, #15
 8009850:	400a      	ands	r2, r1
 8009852:	701a      	strb	r2, [r3, #0]

        bitWrite(
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2298      	movs	r2, #152	; 0x98
 8009858:	589a      	ldr	r2, [r3, r2]
 800985a:	193b      	adds	r3, r7, r4
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	3301      	adds	r3, #1
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	18d3      	adds	r3, r2, r3
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	001a      	movs	r2, r3
 8009868:	183b      	adds	r3, r7, r0
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	411a      	asrs	r2, r3
 800986e:	0013      	movs	r3, r2
 8009870:	2201      	movs	r2, #1
 8009872:	4013      	ands	r3, r2
 8009874:	d016      	beq.n	80098a4 <process_FC2+0x12e>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2293      	movs	r2, #147	; 0x93
 800987a:	5c9b      	ldrb	r3, [r3, r2]
 800987c:	001a      	movs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	189b      	adds	r3, r3, r2
 8009882:	7cda      	ldrb	r2, [r3, #19]
 8009884:	2316      	movs	r3, #22
 8009886:	18fb      	adds	r3, r7, r3
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2101      	movs	r1, #1
 800988c:	4099      	lsls	r1, r3
 800988e:	000b      	movs	r3, r1
 8009890:	b2db      	uxtb	r3, r3
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	2093      	movs	r0, #147	; 0x93
 8009896:	5c09      	ldrb	r1, [r1, r0]
 8009898:	4313      	orrs	r3, r2
 800989a:	b2da      	uxtb	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	185b      	adds	r3, r3, r1
 80098a0:	74da      	strb	r2, [r3, #19]
 80098a2:	e017      	b.n	80098d4 <process_FC2+0x15e>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2293      	movs	r2, #147	; 0x93
 80098a8:	5c9b      	ldrb	r3, [r3, r2]
 80098aa:	001a      	movs	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	189b      	adds	r3, r3, r2
 80098b0:	7cdb      	ldrb	r3, [r3, #19]
 80098b2:	2216      	movs	r2, #22
 80098b4:	18ba      	adds	r2, r7, r2
 80098b6:	7812      	ldrb	r2, [r2, #0]
 80098b8:	2101      	movs	r1, #1
 80098ba:	4091      	lsls	r1, r2
 80098bc:	000a      	movs	r2, r1
 80098be:	b2d2      	uxtb	r2, r2
 80098c0:	43d2      	mvns	r2, r2
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	6879      	ldr	r1, [r7, #4]
 80098c6:	2093      	movs	r0, #147	; 0x93
 80098c8:	5c09      	ldrb	r1, [r1, r0]
 80098ca:	4013      	ands	r3, r2
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	185b      	adds	r3, r3, r1
 80098d2:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister + DiscreteStart], u8currentBit ) );
        u8bitsno ++;
 80098d4:	2116      	movs	r1, #22
 80098d6:	187b      	adds	r3, r7, r1
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	187b      	adds	r3, r7, r1
 80098dc:	3201      	adds	r2, #1
 80098de:	701a      	strb	r2, [r3, #0]

        if (u8bitsno > 7)
 80098e0:	187b      	adds	r3, r7, r1
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b07      	cmp	r3, #7
 80098e6:	d90a      	bls.n	80098fe <process_FC2+0x188>
        {
            u8bitsno = 0;
 80098e8:	187b      	adds	r3, r7, r1
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
            modH->u8BufferSize++;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2293      	movs	r2, #147	; 0x93
 80098f2:	5c9b      	ldrb	r3, [r3, r2]
 80098f4:	3301      	adds	r3, #1
 80098f6:	b2d9      	uxtb	r1, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2293      	movs	r2, #147	; 0x93
 80098fc:	5499      	strb	r1, [r3, r2]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80098fe:	2114      	movs	r1, #20
 8009900:	187b      	adds	r3, r7, r1
 8009902:	881a      	ldrh	r2, [r3, #0]
 8009904:	187b      	adds	r3, r7, r1
 8009906:	3201      	adds	r2, #1
 8009908:	801a      	strh	r2, [r3, #0]
 800990a:	2314      	movs	r3, #20
 800990c:	18fa      	adds	r2, r7, r3
 800990e:	2410      	movs	r4, #16
 8009910:	193b      	adds	r3, r7, r4
 8009912:	8812      	ldrh	r2, [r2, #0]
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d200      	bcs.n	800991c <process_FC2+0x1a6>
 800991a:	e783      	b.n	8009824 <process_FC2+0xae>
        }
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	22b8      	movs	r2, #184	; 0xb8
 8009920:	5898      	ldr	r0, [r3, r2]
 8009922:	2300      	movs	r3, #0
 8009924:	2200      	movs	r2, #0
 8009926:	2100      	movs	r1, #0
 8009928:	f001 fba0 	bl	800b06c <xQueueGenericSend>

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800992c:	193b      	adds	r3, r7, r4
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	2207      	movs	r2, #7
 8009932:	4013      	ands	r3, r2
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d007      	beq.n	800994a <process_FC2+0x1d4>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2293      	movs	r2, #147	; 0x93
 800993e:	5c9b      	ldrb	r3, [r3, r2]
 8009940:	3301      	adds	r3, #1
 8009942:	b2d9      	uxtb	r1, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2293      	movs	r2, #147	; 0x93
 8009948:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize = modH->u8BufferSize +2;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2293      	movs	r2, #147	; 0x93
 800994e:	5c9a      	ldrb	r2, [r3, r2]
 8009950:	240f      	movs	r4, #15
 8009952:	193b      	adds	r3, r7, r4
 8009954:	3202      	adds	r2, #2
 8009956:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	0018      	movs	r0, r3
 800995c:	f7ff fd7c 	bl	8009458 <sendTxBuffer>
    return u8CopyBufferSize;
 8009960:	193b      	adds	r3, r7, r4
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b25b      	sxtb	r3, r3
}
 8009966:	0018      	movs	r0, r3
 8009968:	46bd      	mov	sp, r7
 800996a:	b006      	add	sp, #24
 800996c:	bdb0      	pop	{r4, r5, r7, pc}

0800996e <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800996e:	b5b0      	push	{r4, r5, r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7d5a      	ldrb	r2, [r3, #21]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	7d9b      	ldrb	r3, [r3, #22]
 800997e:	250c      	movs	r5, #12
 8009980:	197c      	adds	r4, r7, r5
 8009982:	0019      	movs	r1, r3
 8009984:	0010      	movs	r0, r2
 8009986:	f7ff fcd3 	bl	8009330 <word>
 800998a:	0003      	movs	r3, r0
 800998c:	8023      	strh	r3, [r4, #0]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	7dda      	ldrb	r2, [r3, #23]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	7e1b      	ldrb	r3, [r3, #24]
 8009996:	0019      	movs	r1, r3
 8009998:	0010      	movs	r0, r2
 800999a:	f7ff fcc9 	bl	8009330 <word>
 800999e:	0003      	movs	r3, r0
 80099a0:	001a      	movs	r2, r3
 80099a2:	210b      	movs	r1, #11
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	701a      	strb	r2, [r3, #0]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	18db      	adds	r3, r3, r3
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2293      	movs	r2, #147	; 0x93
 80099b8:	2103      	movs	r1, #3
 80099ba:	5499      	strb	r1, [r3, r2]


	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	22b8      	movs	r2, #184	; 0xb8
 80099c0:	589b      	ldr	r3, [r3, r2]
 80099c2:	2201      	movs	r2, #1
 80099c4:	4252      	negs	r2, r2
 80099c6:	0011      	movs	r1, r2
 80099c8:	0018      	movs	r0, r3
 80099ca:	f001 fd39 	bl	800b440 <xQueueSemaphoreTake>
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80099ce:	230e      	movs	r3, #14
 80099d0:	18fb      	adds	r3, r7, r3
 80099d2:	197a      	adds	r2, r7, r5
 80099d4:	8812      	ldrh	r2, [r2, #0]
 80099d6:	801a      	strh	r2, [r3, #0]
 80099d8:	e039      	b.n	8009a4e <process_FC3+0xe0>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i + HoldingRegistersStart]);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2298      	movs	r2, #152	; 0x98
 80099de:	589a      	ldr	r2, [r3, r2]
 80099e0:	240e      	movs	r4, #14
 80099e2:	193b      	adds	r3, r7, r4
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	3316      	adds	r3, #22
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	18d3      	adds	r3, r2, r3
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	0a1b      	lsrs	r3, r3, #8
 80099f0:	b298      	uxth	r0, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2293      	movs	r2, #147	; 0x93
 80099f6:	5c9b      	ldrb	r3, [r3, r2]
 80099f8:	0019      	movs	r1, r3
 80099fa:	b2c2      	uxtb	r2, r0
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	185b      	adds	r3, r3, r1
 8009a00:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2293      	movs	r2, #147	; 0x93
 8009a06:	5c9b      	ldrb	r3, [r3, r2]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	b2d9      	uxtb	r1, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2293      	movs	r2, #147	; 0x93
 8009a10:	5499      	strb	r1, [r3, r2]
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i + HoldingRegistersStart]);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2298      	movs	r2, #152	; 0x98
 8009a16:	589a      	ldr	r2, [r3, r2]
 8009a18:	193b      	adds	r3, r7, r4
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	3316      	adds	r3, #22
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	18d3      	adds	r3, r2, r3
 8009a22:	8818      	ldrh	r0, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2293      	movs	r2, #147	; 0x93
 8009a28:	5c9b      	ldrb	r3, [r3, r2]
 8009a2a:	0019      	movs	r1, r3
 8009a2c:	b2c2      	uxtb	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	185b      	adds	r3, r3, r1
 8009a32:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2293      	movs	r2, #147	; 0x93
 8009a38:	5c9b      	ldrb	r3, [r3, r2]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	b2d9      	uxtb	r1, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2293      	movs	r2, #147	; 0x93
 8009a42:	5499      	strb	r1, [r3, r2]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8009a44:	193b      	adds	r3, r7, r4
 8009a46:	881a      	ldrh	r2, [r3, #0]
 8009a48:	193b      	adds	r3, r7, r4
 8009a4a:	3201      	adds	r2, #1
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	230e      	movs	r3, #14
 8009a50:	18fb      	adds	r3, r7, r3
 8009a52:	881a      	ldrh	r2, [r3, #0]
 8009a54:	230c      	movs	r3, #12
 8009a56:	18fb      	adds	r3, r7, r3
 8009a58:	8819      	ldrh	r1, [r3, #0]
 8009a5a:	230b      	movs	r3, #11
 8009a5c:	18fb      	adds	r3, r7, r3
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	18cb      	adds	r3, r1, r3
 8009a62:	429a      	cmp	r2, r3
 8009a64:	dbb9      	blt.n	80099da <process_FC3+0x6c>
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	22b8      	movs	r2, #184	; 0xb8
 8009a6a:	5898      	ldr	r0, [r3, r2]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	f001 fafb 	bl	800b06c <xQueueGenericSend>

    u8CopyBufferSize = modH->u8BufferSize +2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2293      	movs	r2, #147	; 0x93
 8009a7a:	5c9a      	ldrb	r2, [r3, r2]
 8009a7c:	240a      	movs	r4, #10
 8009a7e:	193b      	adds	r3, r7, r4
 8009a80:	3202      	adds	r2, #2
 8009a82:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	0018      	movs	r0, r3
 8009a88:	f7ff fce6 	bl	8009458 <sendTxBuffer>

    return u8CopyBufferSize;
 8009a8c:	193b      	adds	r3, r7, r4
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	b25b      	sxtb	r3, r3
}
 8009a92:	0018      	movs	r0, r3
 8009a94:	46bd      	mov	sp, r7
 8009a96:	b004      	add	sp, #16
 8009a98:	bdb0      	pop	{r4, r5, r7, pc}

08009a9a <process_FC4>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC4(modbusHandler_t *modH)
{
 8009a9a:	b5b0      	push	{r4, r5, r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7d5a      	ldrb	r2, [r3, #21]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7d9b      	ldrb	r3, [r3, #22]
 8009aaa:	250c      	movs	r5, #12
 8009aac:	197c      	adds	r4, r7, r5
 8009aae:	0019      	movs	r1, r3
 8009ab0:	0010      	movs	r0, r2
 8009ab2:	f7ff fc3d 	bl	8009330 <word>
 8009ab6:	0003      	movs	r3, r0
 8009ab8:	8023      	strh	r3, [r4, #0]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7dda      	ldrb	r2, [r3, #23]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	7e1b      	ldrb	r3, [r3, #24]
 8009ac2:	0019      	movs	r1, r3
 8009ac4:	0010      	movs	r0, r2
 8009ac6:	f7ff fc33 	bl	8009330 <word>
 8009aca:	0003      	movs	r3, r0
 8009acc:	001a      	movs	r2, r3
 8009ace:	210b      	movs	r1, #11
 8009ad0:	187b      	adds	r3, r7, r1
 8009ad2:	701a      	strb	r2, [r3, #0]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8009ad4:	187b      	adds	r3, r7, r1
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	18db      	adds	r3, r3, r3
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2293      	movs	r2, #147	; 0x93
 8009ae4:	2103      	movs	r1, #3
 8009ae6:	5499      	strb	r1, [r3, r2]

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	22b8      	movs	r2, #184	; 0xb8
 8009aec:	589b      	ldr	r3, [r3, r2]
 8009aee:	2201      	movs	r2, #1
 8009af0:	4252      	negs	r2, r2
 8009af2:	0011      	movs	r1, r2
 8009af4:	0018      	movs	r0, r3
 8009af6:	f001 fca3 	bl	800b440 <xQueueSemaphoreTake>
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8009afa:	230e      	movs	r3, #14
 8009afc:	18fb      	adds	r3, r7, r3
 8009afe:	197a      	adds	r2, r7, r5
 8009b00:	8812      	ldrh	r2, [r2, #0]
 8009b02:	801a      	strh	r2, [r3, #0]
 8009b04:	e039      	b.n	8009b7a <process_FC4+0xe0>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i + InputRegistersStart]);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2298      	movs	r2, #152	; 0x98
 8009b0a:	589a      	ldr	r2, [r3, r2]
 8009b0c:	240e      	movs	r4, #14
 8009b0e:	193b      	adds	r3, r7, r4
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	3302      	adds	r3, #2
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	18d3      	adds	r3, r2, r3
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	b298      	uxth	r0, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2293      	movs	r2, #147	; 0x93
 8009b22:	5c9b      	ldrb	r3, [r3, r2]
 8009b24:	0019      	movs	r1, r3
 8009b26:	b2c2      	uxtb	r2, r0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	185b      	adds	r3, r3, r1
 8009b2c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2293      	movs	r2, #147	; 0x93
 8009b32:	5c9b      	ldrb	r3, [r3, r2]
 8009b34:	3301      	adds	r3, #1
 8009b36:	b2d9      	uxtb	r1, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2293      	movs	r2, #147	; 0x93
 8009b3c:	5499      	strb	r1, [r3, r2]
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i + InputRegistersStart]);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2298      	movs	r2, #152	; 0x98
 8009b42:	589a      	ldr	r2, [r3, r2]
 8009b44:	193b      	adds	r3, r7, r4
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	3302      	adds	r3, #2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	18d3      	adds	r3, r2, r3
 8009b4e:	8818      	ldrh	r0, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2293      	movs	r2, #147	; 0x93
 8009b54:	5c9b      	ldrb	r3, [r3, r2]
 8009b56:	0019      	movs	r1, r3
 8009b58:	b2c2      	uxtb	r2, r0
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	185b      	adds	r3, r3, r1
 8009b5e:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2293      	movs	r2, #147	; 0x93
 8009b64:	5c9b      	ldrb	r3, [r3, r2]
 8009b66:	3301      	adds	r3, #1
 8009b68:	b2d9      	uxtb	r1, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2293      	movs	r2, #147	; 0x93
 8009b6e:	5499      	strb	r1, [r3, r2]
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8009b70:	193b      	adds	r3, r7, r4
 8009b72:	881a      	ldrh	r2, [r3, #0]
 8009b74:	193b      	adds	r3, r7, r4
 8009b76:	3201      	adds	r2, #1
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	230e      	movs	r3, #14
 8009b7c:	18fb      	adds	r3, r7, r3
 8009b7e:	881a      	ldrh	r2, [r3, #0]
 8009b80:	230c      	movs	r3, #12
 8009b82:	18fb      	adds	r3, r7, r3
 8009b84:	8819      	ldrh	r1, [r3, #0]
 8009b86:	230b      	movs	r3, #11
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	18cb      	adds	r3, r1, r3
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	dbb9      	blt.n	8009b06 <process_FC4+0x6c>
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	22b8      	movs	r2, #184	; 0xb8
 8009b96:	5898      	ldr	r0, [r3, r2]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	f001 fa65 	bl	800b06c <xQueueGenericSend>

    u8CopyBufferSize = modH->u8BufferSize +2;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2293      	movs	r2, #147	; 0x93
 8009ba6:	5c9a      	ldrb	r2, [r3, r2]
 8009ba8:	240a      	movs	r4, #10
 8009baa:	193b      	adds	r3, r7, r4
 8009bac:	3202      	adds	r2, #2
 8009bae:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f7ff fc50 	bl	8009458 <sendTxBuffer>

    return u8CopyBufferSize;
 8009bb8:	193b      	adds	r3, r7, r4
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b25b      	sxtb	r3, r3
}
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	b004      	add	sp, #16
 8009bc4:	bdb0      	pop	{r4, r5, r7, pc}

08009bc6 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8009bc6:	b5b0      	push	{r4, r5, r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7d5a      	ldrb	r2, [r3, #21]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	7d9b      	ldrb	r3, [r3, #22]
 8009bd6:	250e      	movs	r5, #14
 8009bd8:	197c      	adds	r4, r7, r5
 8009bda:	0019      	movs	r1, r3
 8009bdc:	0010      	movs	r0, r2
 8009bde:	f7ff fba7 	bl	8009330 <word>
 8009be2:	0003      	movs	r3, r0
 8009be4:	8023      	strh	r3, [r4, #0]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8009be6:	240c      	movs	r4, #12
 8009be8:	193b      	adds	r3, r7, r4
 8009bea:	197a      	adds	r2, r7, r5
 8009bec:	8812      	ldrh	r2, [r2, #0]
 8009bee:	0912      	lsrs	r2, r2, #4
 8009bf0:	801a      	strh	r2, [r3, #0]
    u8currentBit = (uint8_t) (u16coil % 16);
 8009bf2:	197b      	adds	r3, r7, r5
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	250b      	movs	r5, #11
 8009bfa:	197b      	adds	r3, r7, r5
 8009bfc:	210f      	movs	r1, #15
 8009bfe:	400a      	ands	r2, r1
 8009c00:	701a      	strb	r2, [r3, #0]

    // write to coil

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	22b8      	movs	r2, #184	; 0xb8
 8009c06:	589b      	ldr	r3, [r3, r2]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	4252      	negs	r2, r2
 8009c0c:	0011      	movs	r1, r2
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f001 fc16 	bl	800b440 <xQueueSemaphoreTake>
    bitWrite(
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	7ddb      	ldrb	r3, [r3, #23]
 8009c18:	2bff      	cmp	r3, #255	; 0xff
 8009c1a:	d118      	bne.n	8009c4e <process_FC5+0x88>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2298      	movs	r2, #152	; 0x98
 8009c20:	589a      	ldr	r2, [r3, r2]
 8009c22:	193b      	adds	r3, r7, r4
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	18d3      	adds	r3, r2, r3
 8009c2a:	8819      	ldrh	r1, [r3, #0]
 8009c2c:	197b      	adds	r3, r7, r5
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2201      	movs	r2, #1
 8009c32:	409a      	lsls	r2, r3
 8009c34:	0013      	movs	r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2098      	movs	r0, #152	; 0x98
 8009c3c:	5818      	ldr	r0, [r3, r0]
 8009c3e:	193b      	adds	r3, r7, r4
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	18c3      	adds	r3, r0, r3
 8009c46:	430a      	orrs	r2, r1
 8009c48:	b292      	uxth	r2, r2
 8009c4a:	801a      	strh	r2, [r3, #0]
 8009c4c:	e01b      	b.n	8009c86 <process_FC5+0xc0>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2298      	movs	r2, #152	; 0x98
 8009c52:	589a      	ldr	r2, [r3, r2]
 8009c54:	240c      	movs	r4, #12
 8009c56:	193b      	adds	r3, r7, r4
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	18d3      	adds	r3, r2, r3
 8009c5e:	881a      	ldrh	r2, [r3, #0]
 8009c60:	230b      	movs	r3, #11
 8009c62:	18fb      	adds	r3, r7, r3
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2101      	movs	r1, #1
 8009c68:	4099      	lsls	r1, r3
 8009c6a:	000b      	movs	r3, r1
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	43db      	mvns	r3, r3
 8009c70:	b299      	uxth	r1, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2098      	movs	r0, #152	; 0x98
 8009c76:	5818      	ldr	r0, [r3, r0]
 8009c78:	193b      	adds	r3, r7, r4
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	18c3      	adds	r3, r0, r3
 8009c80:	400a      	ands	r2, r1
 8009c82:	b292      	uxth	r2, r2
 8009c84:	801a      	strh	r2, [r3, #0]
    	modH->u16regs[ u16currentRegister ],
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	22b8      	movs	r2, #184	; 0xb8
 8009c8a:	5898      	ldr	r0, [r3, r2]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2100      	movs	r1, #0
 8009c92:	f001 f9eb 	bl	800b06c <xQueueGenericSend>

    // send answer to master
    modH->u8BufferSize = 6;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2293      	movs	r2, #147	; 0x93
 8009c9a:	2106      	movs	r1, #6
 8009c9c:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2293      	movs	r2, #147	; 0x93
 8009ca2:	5c9a      	ldrb	r2, [r3, r2]
 8009ca4:	240a      	movs	r4, #10
 8009ca6:	193b      	adds	r3, r7, r4
 8009ca8:	3202      	adds	r2, #2
 8009caa:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f7ff fbd2 	bl	8009458 <sendTxBuffer>

    return u8CopyBufferSize;
 8009cb4:	193b      	adds	r3, r7, r4
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	b25b      	sxtb	r3, r3
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b004      	add	sp, #16
 8009cc0:	bdb0      	pop	{r4, r5, r7, pc}

08009cc2 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8009cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc4:	b085      	sub	sp, #20
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7d5a      	ldrb	r2, [r3, #21]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	7d9b      	ldrb	r3, [r3, #22]
 8009cd2:	250e      	movs	r5, #14
 8009cd4:	197c      	adds	r4, r7, r5
 8009cd6:	0019      	movs	r1, r3
 8009cd8:	0010      	movs	r0, r2
 8009cda:	f7ff fb29 	bl	8009330 <word>
 8009cde:	0003      	movs	r3, r0
 8009ce0:	8023      	strh	r3, [r4, #0]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	7dda      	ldrb	r2, [r3, #23]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7e1b      	ldrb	r3, [r3, #24]
 8009cea:	260c      	movs	r6, #12
 8009cec:	19bc      	adds	r4, r7, r6
 8009cee:	0019      	movs	r1, r3
 8009cf0:	0010      	movs	r0, r2
 8009cf2:	f7ff fb1d 	bl	8009330 <word>
 8009cf6:	0003      	movs	r3, r0
 8009cf8:	8023      	strh	r3, [r4, #0]

	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	22b8      	movs	r2, #184	; 0xb8
 8009cfe:	589b      	ldr	r3, [r3, r2]
 8009d00:	2201      	movs	r2, #1
 8009d02:	4252      	negs	r2, r2
 8009d04:	0011      	movs	r1, r2
 8009d06:	0018      	movs	r0, r3
 8009d08:	f001 fb9a 	bl	800b440 <xQueueSemaphoreTake>
    modH->u16regs[ u16add  + HoldingRegistersStart] = u16val;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2298      	movs	r2, #152	; 0x98
 8009d10:	589a      	ldr	r2, [r3, r2]
 8009d12:	002c      	movs	r4, r5
 8009d14:	193b      	adds	r3, r7, r4
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	3316      	adds	r3, #22
 8009d1a:	005b      	lsls	r3, r3, #1
 8009d1c:	18d3      	adds	r3, r2, r3
 8009d1e:	19ba      	adds	r2, r7, r6
 8009d20:	8812      	ldrh	r2, [r2, #0]
 8009d22:	801a      	strh	r2, [r3, #0]
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	22b8      	movs	r2, #184	; 0xb8
 8009d28:	5898      	ldr	r0, [r3, r2]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2100      	movs	r1, #0
 8009d30:	f001 f99c 	bl	800b06c <xQueueGenericSend>

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2293      	movs	r2, #147	; 0x93
 8009d38:	2106      	movs	r1, #6
 8009d3a:	5499      	strb	r1, [r3, r2]

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2293      	movs	r2, #147	; 0x93
 8009d40:	5c9a      	ldrb	r2, [r3, r2]
 8009d42:	230b      	movs	r3, #11
 8009d44:	18fb      	adds	r3, r7, r3
 8009d46:	3202      	adds	r2, #2
 8009d48:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7ff fb83 	bl	8009458 <sendTxBuffer>

    switch (u16add) {
 8009d52:	193b      	adds	r3, r7, r4
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d002      	beq.n	8009d60 <process_FC6+0x9e>
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	d00c      	beq.n	8009d78 <process_FC6+0xb6>
 8009d5e:	e017      	b.n	8009d90 <process_FC6+0xce>
    case 3 : // Write the Low Voltage value to the calibration data
    	SetLowVoltageCalibration((uint16_t)CalculateAverageVoltage(), u16val);
 8009d60:	f7f8 fc76 	bl	8002650 <CalculateAverageVoltage>
 8009d64:	0003      	movs	r3, r0
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	230c      	movs	r3, #12
 8009d6a:	18fb      	adds	r3, r7, r3
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	0019      	movs	r1, r3
 8009d70:	0010      	movs	r0, r2
 8009d72:	f000 f997 	bl	800a0a4 <SetLowVoltageCalibration>
    	break;
 8009d76:	e00b      	b.n	8009d90 <process_FC6+0xce>
    case 4: // Write the High Voltage value to the calibration data
    	SetHighVoltageCalibration((uint16_t)CalculateAverageVoltage(), u16val);
 8009d78:	f7f8 fc6a 	bl	8002650 <CalculateAverageVoltage>
 8009d7c:	0003      	movs	r3, r0
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	230c      	movs	r3, #12
 8009d82:	18fb      	adds	r3, r7, r3
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	0019      	movs	r1, r3
 8009d88:	0010      	movs	r0, r2
 8009d8a:	f000 f9a7 	bl	800a0dc <SetHighVoltageCalibration>
    	break;
 8009d8e:	46c0      	nop			; (mov r8, r8)
    }

    return u8CopyBufferSize;
 8009d90:	230b      	movs	r3, #11
 8009d92:	18fb      	adds	r3, r7, r3
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b25b      	sxtb	r3, r3
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	b005      	add	sp, #20
 8009d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009da0 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8009da0:	b5b0      	push	{r4, r5, r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	7d5a      	ldrb	r2, [r3, #21]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	7d9b      	ldrb	r3, [r3, #22]
 8009db0:	2112      	movs	r1, #18
 8009db2:	187c      	adds	r4, r7, r1
 8009db4:	0019      	movs	r1, r3
 8009db6:	0010      	movs	r0, r2
 8009db8:	f7ff faba 	bl	8009330 <word>
 8009dbc:	0003      	movs	r3, r0
 8009dbe:	8023      	strh	r3, [r4, #0]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	7dda      	ldrb	r2, [r3, #23]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7e1b      	ldrb	r3, [r3, #24]
 8009dc8:	2110      	movs	r1, #16
 8009dca:	187c      	adds	r4, r7, r1
 8009dcc:	0019      	movs	r1, r3
 8009dce:	0010      	movs	r0, r2
 8009dd0:	f7ff faae 	bl	8009330 <word>
 8009dd4:	0003      	movs	r3, r0
 8009dd6:	8023      	strh	r3, [r4, #0]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8009dd8:	2316      	movs	r3, #22
 8009dda:	18fb      	adds	r3, r7, r3
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]
    u8frameByte = 7;
 8009de0:	2317      	movs	r3, #23
 8009de2:	18fb      	adds	r3, r7, r3
 8009de4:	2207      	movs	r2, #7
 8009de6:	701a      	strb	r2, [r3, #0]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	22b8      	movs	r2, #184	; 0xb8
 8009dec:	589b      	ldr	r3, [r3, r2]
 8009dee:	2201      	movs	r2, #1
 8009df0:	4252      	negs	r2, r2
 8009df2:	0011      	movs	r1, r2
 8009df4:	0018      	movs	r0, r3
 8009df6:	f001 fb23 	bl	800b440 <xQueueSemaphoreTake>
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8009dfa:	2314      	movs	r3, #20
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	2200      	movs	r2, #0
 8009e00:	801a      	strh	r2, [r3, #0]
 8009e02:	e07c      	b.n	8009efe <process_FC15+0x15e>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8009e04:	200c      	movs	r0, #12
 8009e06:	183b      	adds	r3, r7, r0
 8009e08:	2212      	movs	r2, #18
 8009e0a:	18b9      	adds	r1, r7, r2
 8009e0c:	2214      	movs	r2, #20
 8009e0e:	18ba      	adds	r2, r7, r2
 8009e10:	8809      	ldrh	r1, [r1, #0]
 8009e12:	8812      	ldrh	r2, [r2, #0]
 8009e14:	188a      	adds	r2, r1, r2
 8009e16:	801a      	strh	r2, [r3, #0]
        u16currentRegister = (u16coil / 16);
 8009e18:	240a      	movs	r4, #10
 8009e1a:	193b      	adds	r3, r7, r4
 8009e1c:	183a      	adds	r2, r7, r0
 8009e1e:	8812      	ldrh	r2, [r2, #0]
 8009e20:	0912      	lsrs	r2, r2, #4
 8009e22:	801a      	strh	r2, [r3, #0]
        u8currentBit = (uint8_t) (u16coil % 16);
 8009e24:	183b      	adds	r3, r7, r0
 8009e26:	881b      	ldrh	r3, [r3, #0]
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	2009      	movs	r0, #9
 8009e2c:	183b      	adds	r3, r7, r0
 8009e2e:	210f      	movs	r1, #15
 8009e30:	400a      	ands	r2, r1
 8009e32:	701a      	strb	r2, [r3, #0]

        bTemp = bitRead(
 8009e34:	2317      	movs	r3, #23
 8009e36:	18fb      	adds	r3, r7, r3
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	18d3      	adds	r3, r2, r3
 8009e3e:	7cdb      	ldrb	r3, [r3, #19]
 8009e40:	001a      	movs	r2, r3
 8009e42:	2316      	movs	r3, #22
 8009e44:	18fb      	adds	r3, r7, r3
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	411a      	asrs	r2, r3
 8009e4a:	0013      	movs	r3, r2
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	401a      	ands	r2, r3
 8009e50:	2508      	movs	r5, #8
 8009e52:	197b      	adds	r3, r7, r5
 8009e54:	1e51      	subs	r1, r2, #1
 8009e56:	418a      	sbcs	r2, r1
 8009e58:	701a      	strb	r2, [r3, #0]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8009e5a:	197b      	adds	r3, r7, r5
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d018      	beq.n	8009e94 <process_FC15+0xf4>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2298      	movs	r2, #152	; 0x98
 8009e66:	589a      	ldr	r2, [r3, r2]
 8009e68:	193b      	adds	r3, r7, r4
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	005b      	lsls	r3, r3, #1
 8009e6e:	18d3      	adds	r3, r2, r3
 8009e70:	8819      	ldrh	r1, [r3, #0]
 8009e72:	183b      	adds	r3, r7, r0
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2201      	movs	r2, #1
 8009e78:	409a      	lsls	r2, r3
 8009e7a:	0013      	movs	r3, r2
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2098      	movs	r0, #152	; 0x98
 8009e82:	5818      	ldr	r0, [r3, r0]
 8009e84:	193b      	adds	r3, r7, r4
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	18c3      	adds	r3, r0, r3
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	b292      	uxth	r2, r2
 8009e90:	801a      	strh	r2, [r3, #0]
 8009e92:	e01b      	b.n	8009ecc <process_FC15+0x12c>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2298      	movs	r2, #152	; 0x98
 8009e98:	589a      	ldr	r2, [r3, r2]
 8009e9a:	240a      	movs	r4, #10
 8009e9c:	193b      	adds	r3, r7, r4
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	18d3      	adds	r3, r2, r3
 8009ea4:	881a      	ldrh	r2, [r3, #0]
 8009ea6:	2309      	movs	r3, #9
 8009ea8:	18fb      	adds	r3, r7, r3
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2101      	movs	r1, #1
 8009eae:	4099      	lsls	r1, r3
 8009eb0:	000b      	movs	r3, r1
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	43db      	mvns	r3, r3
 8009eb6:	b299      	uxth	r1, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2098      	movs	r0, #152	; 0x98
 8009ebc:	5818      	ldr	r0, [r3, r0]
 8009ebe:	193b      	adds	r3, r7, r4
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	18c3      	adds	r3, r0, r3
 8009ec6:	400a      	ands	r2, r1
 8009ec8:	b292      	uxth	r2, r2
 8009eca:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8009ecc:	2116      	movs	r1, #22
 8009ece:	187b      	adds	r3, r7, r1
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	187b      	adds	r3, r7, r1
 8009ed4:	3201      	adds	r2, #1
 8009ed6:	701a      	strb	r2, [r3, #0]

        if (u8bitsno > 7)
 8009ed8:	187b      	adds	r3, r7, r1
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b07      	cmp	r3, #7
 8009ede:	d908      	bls.n	8009ef2 <process_FC15+0x152>
        {
            u8bitsno = 0;
 8009ee0:	187b      	adds	r3, r7, r1
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
            u8frameByte++;
 8009ee6:	2117      	movs	r1, #23
 8009ee8:	187b      	adds	r3, r7, r1
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	187b      	adds	r3, r7, r1
 8009eee:	3201      	adds	r2, #1
 8009ef0:	701a      	strb	r2, [r3, #0]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8009ef2:	2114      	movs	r1, #20
 8009ef4:	187b      	adds	r3, r7, r1
 8009ef6:	881a      	ldrh	r2, [r3, #0]
 8009ef8:	187b      	adds	r3, r7, r1
 8009efa:	3201      	adds	r2, #1
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	2314      	movs	r3, #20
 8009f00:	18fa      	adds	r2, r7, r3
 8009f02:	2310      	movs	r3, #16
 8009f04:	18fb      	adds	r3, r7, r3
 8009f06:	8812      	ldrh	r2, [r2, #0]
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d200      	bcs.n	8009f10 <process_FC15+0x170>
 8009f0e:	e779      	b.n	8009e04 <process_FC15+0x64>
        }
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	22b8      	movs	r2, #184	; 0xb8
 8009f14:	5898      	ldr	r0, [r3, r2]
 8009f16:	2300      	movs	r3, #0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	f001 f8a6 	bl	800b06c <xQueueGenericSend>

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2293      	movs	r2, #147	; 0x93
 8009f24:	2106      	movs	r1, #6
 8009f26:	5499      	strb	r1, [r3, r2]
    u8CopyBufferSize = modH->u8BufferSize +2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2293      	movs	r2, #147	; 0x93
 8009f2c:	5c9a      	ldrb	r2, [r3, r2]
 8009f2e:	240f      	movs	r4, #15
 8009f30:	193b      	adds	r3, r7, r4
 8009f32:	3202      	adds	r2, #2
 8009f34:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f7ff fa8d 	bl	8009458 <sendTxBuffer>
    return u8CopyBufferSize;
 8009f3e:	193b      	adds	r3, r7, r4
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	b25b      	sxtb	r3, r3
}
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b006      	add	sp, #24
 8009f4a:	bdb0      	pop	{r4, r5, r7, pc}

08009f4c <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8009f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	7d5b      	ldrb	r3, [r3, #21]
 8009f58:	021b      	lsls	r3, r3, #8
 8009f5a:	b21a      	sxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	7d9b      	ldrb	r3, [r3, #22]
 8009f60:	b21b      	sxth	r3, r3
 8009f62:	4313      	orrs	r3, r2
 8009f64:	b21a      	sxth	r2, r3
 8009f66:	2314      	movs	r3, #20
 8009f68:	18fb      	adds	r3, r7, r3
 8009f6a:	801a      	strh	r2, [r3, #0]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	7ddb      	ldrb	r3, [r3, #23]
 8009f70:	021b      	lsls	r3, r3, #8
 8009f72:	b21a      	sxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7e1b      	ldrb	r3, [r3, #24]
 8009f78:	b21b      	sxth	r3, r3
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	b21a      	sxth	r2, r3
 8009f7e:	2112      	movs	r1, #18
 8009f80:	187b      	adds	r3, r7, r1
 8009f82:	801a      	strh	r2, [r3, #0]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8009f8a:	187b      	adds	r3, r7, r1
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2293      	movs	r2, #147	; 0x93
 8009f98:	2106      	movs	r1, #6
 8009f9a:	5499      	strb	r1, [r3, r2]

    // write registers
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	22b8      	movs	r2, #184	; 0xb8
 8009fa0:	589b      	ldr	r3, [r3, r2]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	4252      	negs	r2, r2
 8009fa6:	0011      	movs	r1, r2
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f001 fa49 	bl	800b440 <xQueueSemaphoreTake>
    for (i = 0; i < u16regsno; i++)
 8009fae:	2316      	movs	r3, #22
 8009fb0:	18fb      	adds	r3, r7, r3
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e029      	b.n	800a00c <process_FC16+0xc0>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8009fb8:	2516      	movs	r5, #22
 8009fba:	197b      	adds	r3, r7, r5
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	3307      	adds	r3, #7
        temp = word(
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	18d3      	adds	r3, r2, r3
 8009fc6:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8009fc8:	197b      	adds	r3, r7, r5
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	3304      	adds	r3, #4
 8009fce:	005b      	lsls	r3, r3, #1
        temp = word(
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	18d3      	adds	r3, r2, r3
 8009fd4:	7cdb      	ldrb	r3, [r3, #19]
 8009fd6:	260e      	movs	r6, #14
 8009fd8:	19bc      	adds	r4, r7, r6
 8009fda:	0019      	movs	r1, r3
 8009fdc:	f7ff f9a8 	bl	8009330 <word>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	8023      	strh	r3, [r4, #0]

        modH->u16regs[ u16StartAdd + i  + HoldingRegistersStart] = temp;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2298      	movs	r2, #152	; 0x98
 8009fe8:	589a      	ldr	r2, [r3, r2]
 8009fea:	2314      	movs	r3, #20
 8009fec:	18fb      	adds	r3, r7, r3
 8009fee:	8819      	ldrh	r1, [r3, #0]
 8009ff0:	197b      	adds	r3, r7, r5
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	18cb      	adds	r3, r1, r3
 8009ff6:	3316      	adds	r3, #22
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	18d3      	adds	r3, r2, r3
 8009ffc:	19ba      	adds	r2, r7, r6
 8009ffe:	8812      	ldrh	r2, [r2, #0]
 800a000:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800a002:	197b      	adds	r3, r7, r5
 800a004:	881a      	ldrh	r2, [r3, #0]
 800a006:	197b      	adds	r3, r7, r5
 800a008:	3201      	adds	r2, #1
 800a00a:	801a      	strh	r2, [r3, #0]
 800a00c:	2316      	movs	r3, #22
 800a00e:	18fa      	adds	r2, r7, r3
 800a010:	2312      	movs	r3, #18
 800a012:	18fb      	adds	r3, r7, r3
 800a014:	8812      	ldrh	r2, [r2, #0]
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d3cd      	bcc.n	8009fb8 <process_FC16+0x6c>
    }
    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	22b8      	movs	r2, #184	; 0xb8
 800a020:	5898      	ldr	r0, [r3, r2]
 800a022:	2300      	movs	r3, #0
 800a024:	2200      	movs	r2, #0
 800a026:	2100      	movs	r1, #0
 800a028:	f001 f820 	bl	800b06c <xQueueGenericSend>
    u8CopyBufferSize = modH->u8BufferSize +2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2293      	movs	r2, #147	; 0x93
 800a030:	5c9a      	ldrb	r2, [r3, r2]
 800a032:	2311      	movs	r3, #17
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	3202      	adds	r2, #2
 800a038:	701a      	strb	r2, [r3, #0]
    sendTxBuffer(modH);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	0018      	movs	r0, r3
 800a03e:	f7ff fa0b 	bl	8009458 <sendTxBuffer>

	switch (u16StartAdd) {
 800a042:	2314      	movs	r3, #20
 800a044:	18fb      	adds	r3, r7, r3
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	2b05      	cmp	r3, #5
 800a04a:	d002      	beq.n	800a052 <process_FC16+0x106>
 800a04c:	2b07      	cmp	r3, #7
 800a04e:	d010      	beq.n	800a072 <process_FC16+0x126>
 800a050:	e01f      	b.n	800a092 <process_FC16+0x146>
		case 5: // Write the Low Current value to the calibration data
			SetLowCurrentCalibration(CalculateAverageCurrent(), modH->u16regs[HoldingRegistersStart + 5], modH->u16regs[HoldingRegistersStart + 6] );
 800a052:	f7f8 fb49 	bl	80026e8 <CalculateAverageCurrent>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2298      	movs	r2, #152	; 0x98
 800a05a:	589b      	ldr	r3, [r3, r2]
 800a05c:	3336      	adds	r3, #54	; 0x36
 800a05e:	8819      	ldrh	r1, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2298      	movs	r2, #152	; 0x98
 800a064:	589b      	ldr	r3, [r3, r2]
 800a066:	3338      	adds	r3, #56	; 0x38
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	001a      	movs	r2, r3
 800a06c:	f000 f852 	bl	800a114 <SetLowCurrentCalibration>
		break;
 800a070:	e00f      	b.n	800a092 <process_FC16+0x146>
		case 7: // Write the High Current value to the calibration data
			SetHighCurrentCalibration(CalculateAverageCurrent(), modH->u16regs[HoldingRegistersStart + 7], modH->u16regs[HoldingRegistersStart + 8]  );
 800a072:	f7f8 fb39 	bl	80026e8 <CalculateAverageCurrent>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2298      	movs	r2, #152	; 0x98
 800a07a:	589b      	ldr	r3, [r3, r2]
 800a07c:	333a      	adds	r3, #58	; 0x3a
 800a07e:	8819      	ldrh	r1, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2298      	movs	r2, #152	; 0x98
 800a084:	589b      	ldr	r3, [r3, r2]
 800a086:	333c      	adds	r3, #60	; 0x3c
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	001a      	movs	r2, r3
 800a08c:	f000 f864 	bl	800a158 <SetHighCurrentCalibration>
		break;
 800a090:	46c0      	nop			; (mov r8, r8)
	}



    return u8CopyBufferSize;
 800a092:	2311      	movs	r3, #17
 800a094:	18fb      	adds	r3, r7, r3
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	b25b      	sxtb	r3, r3
}
 800a09a:	0018      	movs	r0, r3
 800a09c:	46bd      	mov	sp, r7
 800a09e:	b007      	add	sp, #28
 800a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a0a4 <SetLowVoltageCalibration>:
CalibrationData calibrationData;

/**
 * SetLowVoltageCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetLowVoltageCalibration(uint16_t VoltageReading, uint16_t VoltageActual){
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	0002      	movs	r2, r0
 800a0ac:	1dbb      	adds	r3, r7, #6
 800a0ae:	801a      	strh	r2, [r3, #0]
 800a0b0:	1d3b      	adds	r3, r7, #4
 800a0b2:	1c0a      	adds	r2, r1, #0
 800a0b4:	801a      	strh	r2, [r3, #0]
	calibrationData.values.LowVoltage.Actual = VoltageActual;
 800a0b6:	1d3b      	adds	r3, r7, #4
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	5e9a      	ldrsh	r2, [r3, r2]
 800a0bc:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <SetLowVoltageCalibration+0x34>)
 800a0be:	805a      	strh	r2, [r3, #2]
	calibrationData.values.LowVoltage.Reading = VoltageReading;
 800a0c0:	1dbb      	adds	r3, r7, #6
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	5e9a      	ldrsh	r2, [r3, r2]
 800a0c6:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <SetLowVoltageCalibration+0x34>)
 800a0c8:	801a      	strh	r2, [r3, #0]
	StoreCalibrationData();
 800a0ca:	f000 f865 	bl	800a198 <StoreCalibrationData>
}
 800a0ce:	46c0      	nop			; (mov r8, r8)
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b002      	add	sp, #8
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	200009e4 	.word	0x200009e4

0800a0dc <SetHighVoltageCalibration>:
/**
 * SetHighVoltageCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetHighVoltageCalibration(uint16_t VoltageReading, uint16_t VoltageActual){
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	0002      	movs	r2, r0
 800a0e4:	1dbb      	adds	r3, r7, #6
 800a0e6:	801a      	strh	r2, [r3, #0]
 800a0e8:	1d3b      	adds	r3, r7, #4
 800a0ea:	1c0a      	adds	r2, r1, #0
 800a0ec:	801a      	strh	r2, [r3, #0]
	calibrationData.values.HighVoltage.Actual = VoltageActual;
 800a0ee:	1d3b      	adds	r3, r7, #4
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	5e9a      	ldrsh	r2, [r3, r2]
 800a0f4:	4b06      	ldr	r3, [pc, #24]	; (800a110 <SetHighVoltageCalibration+0x34>)
 800a0f6:	80da      	strh	r2, [r3, #6]
	calibrationData.values.HighVoltage.Reading = VoltageReading;
 800a0f8:	1dbb      	adds	r3, r7, #6
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	5e9a      	ldrsh	r2, [r3, r2]
 800a0fe:	4b04      	ldr	r3, [pc, #16]	; (800a110 <SetHighVoltageCalibration+0x34>)
 800a100:	809a      	strh	r2, [r3, #4]
	StoreCalibrationData();
 800a102:	f000 f849 	bl	800a198 <StoreCalibrationData>
}
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	46bd      	mov	sp, r7
 800a10a:	b002      	add	sp, #8
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	200009e4 	.word	0x200009e4

0800a114 <SetLowCurrentCalibration>:
/**
 * SetLowCurrentCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetLowCurrentCalibration(int32_t CurrentReading, uint16_t CurrentActualLowWord, uint16_t CurrentActualHighWord) {
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	0008      	movs	r0, r1
 800a11e:	0011      	movs	r1, r2
 800a120:	1cbb      	adds	r3, r7, #2
 800a122:	1c02      	adds	r2, r0, #0
 800a124:	801a      	strh	r2, [r3, #0]
 800a126:	003b      	movs	r3, r7
 800a128:	1c0a      	adds	r2, r1, #0
 800a12a:	801a      	strh	r2, [r3, #0]
	calibrationData.values.LowCurrent.Reading = CurrentReading;
 800a12c:	4b09      	ldr	r3, [pc, #36]	; (800a154 <SetLowCurrentCalibration+0x40>)
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	609a      	str	r2, [r3, #8]
	uint32_t actual = CurrentActualLowWord + (CurrentActualHighWord << 16);
 800a132:	1cbb      	adds	r3, r7, #2
 800a134:	881a      	ldrh	r2, [r3, #0]
 800a136:	003b      	movs	r3, r7
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	041b      	lsls	r3, r3, #16
 800a13c:	18d3      	adds	r3, r2, r3
 800a13e:	60fb      	str	r3, [r7, #12]
	calibrationData.values.LowCurrent.Actual = (int32_t)(actual);
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4b04      	ldr	r3, [pc, #16]	; (800a154 <SetLowCurrentCalibration+0x40>)
 800a144:	60da      	str	r2, [r3, #12]
	StoreCalibrationData();
 800a146:	f000 f827 	bl	800a198 <StoreCalibrationData>
}
 800a14a:	46c0      	nop			; (mov r8, r8)
 800a14c:	46bd      	mov	sp, r7
 800a14e:	b004      	add	sp, #16
 800a150:	bd80      	pop	{r7, pc}
 800a152:	46c0      	nop			; (mov r8, r8)
 800a154:	200009e4 	.word	0x200009e4

0800a158 <SetHighCurrentCalibration>:
/**
 * SetHighCurrentCalibration sets the calibration data in the structure to be placed in Flash memory
 */
void SetHighCurrentCalibration(int32_t CurrentReading, uint16_t CurrentActualLowWord, uint16_t CurrentActualHighWord) {
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	0008      	movs	r0, r1
 800a162:	0011      	movs	r1, r2
 800a164:	1cbb      	adds	r3, r7, #2
 800a166:	1c02      	adds	r2, r0, #0
 800a168:	801a      	strh	r2, [r3, #0]
 800a16a:	003b      	movs	r3, r7
 800a16c:	1c0a      	adds	r2, r1, #0
 800a16e:	801a      	strh	r2, [r3, #0]
	calibrationData.values.HighCurrent.Reading = CurrentReading;
 800a170:	4b08      	ldr	r3, [pc, #32]	; (800a194 <SetHighCurrentCalibration+0x3c>)
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	611a      	str	r2, [r3, #16]
	calibrationData.values.HighCurrent.Actual = (int32_t)(CurrentActualLowWord + (CurrentActualHighWord << 16));
 800a176:	1cbb      	adds	r3, r7, #2
 800a178:	881a      	ldrh	r2, [r3, #0]
 800a17a:	003b      	movs	r3, r7
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	041b      	lsls	r3, r3, #16
 800a180:	18d2      	adds	r2, r2, r3
 800a182:	4b04      	ldr	r3, [pc, #16]	; (800a194 <SetHighCurrentCalibration+0x3c>)
 800a184:	615a      	str	r2, [r3, #20]
	StoreCalibrationData();
 800a186:	f000 f807 	bl	800a198 <StoreCalibrationData>
}
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	46bd      	mov	sp, r7
 800a18e:	b002      	add	sp, #8
 800a190:	bd80      	pop	{r7, pc}
 800a192:	46c0      	nop			; (mov r8, r8)
 800a194:	200009e4 	.word	0x200009e4

0800a198 <StoreCalibrationData>:
/**
 *  StoreCalibrationData writes the calibration data to flash memory.
 */
void StoreCalibrationData() {
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
	calibrationData.Checksum = CalculateChecksum();
 800a19c:	f000 f908 	bl	800a3b0 <CalculateChecksum>
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	001a      	movs	r2, r3
 800a1a4:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <StoreCalibrationData+0x24>)
 800a1a6:	831a      	strh	r2, [r3, #24]
	Flash_Write_Data( FLASH_STORAGE_PAGE, (void *)&calibrationData, (sizeof(CalibrationData) + 3) / 4);
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <StoreCalibrationData+0x24>)
 800a1aa:	4805      	ldr	r0, [pc, #20]	; (800a1c0 <StoreCalibrationData+0x28>)
 800a1ac:	2207      	movs	r2, #7
 800a1ae:	0019      	movs	r1, r3
 800a1b0:	f7f7 ffca 	bl	8002148 <Flash_Write_Data>
}
 800a1b4:	46c0      	nop			; (mov r8, r8)
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	46c0      	nop			; (mov r8, r8)
 800a1bc:	200009e4 	.word	0x200009e4
 800a1c0:	0800f800 	.word	0x0800f800

0800a1c4 <LoadCalibrationData>:
/**
 * LoadCalibrationData reads the data from flash memory into the structure provided
 */
void LoadCalibrationData() {
 800a1c4:	b5b0      	push	{r4, r5, r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
	memcpy(&calibrationData, (void *)FLASH_STORAGE_PAGE, sizeof(CalibrationData));
 800a1c8:	4b16      	ldr	r3, [pc, #88]	; (800a224 <LoadCalibrationData+0x60>)
 800a1ca:	4a17      	ldr	r2, [pc, #92]	; (800a228 <LoadCalibrationData+0x64>)
 800a1cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a1ce:	c313      	stmia	r3!, {r0, r1, r4}
 800a1d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a1d2:	c313      	stmia	r3!, {r0, r1, r4}
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	601a      	str	r2, [r3, #0]
	if (calibrationData.Checksum != CalculateChecksum()) {
 800a1d8:	4b12      	ldr	r3, [pc, #72]	; (800a224 <LoadCalibrationData+0x60>)
 800a1da:	8b1c      	ldrh	r4, [r3, #24]
 800a1dc:	f000 f8e8 	bl	800a3b0 <CalculateChecksum>
 800a1e0:	0003      	movs	r3, r0
 800a1e2:	429c      	cmp	r4, r3
 800a1e4:	d01b      	beq.n	800a21e <LoadCalibrationData+0x5a>
		calibrationData.values.LowVoltage.Reading = 0;
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <LoadCalibrationData+0x60>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	801a      	strh	r2, [r3, #0]
		calibrationData.values.LowVoltage.Actual = 0;
 800a1ec:	4b0d      	ldr	r3, [pc, #52]	; (800a224 <LoadCalibrationData+0x60>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	805a      	strh	r2, [r3, #2]
		calibrationData.values.HighVoltage.Reading = 1000;
 800a1f2:	4b0c      	ldr	r3, [pc, #48]	; (800a224 <LoadCalibrationData+0x60>)
 800a1f4:	22fa      	movs	r2, #250	; 0xfa
 800a1f6:	0092      	lsls	r2, r2, #2
 800a1f8:	809a      	strh	r2, [r3, #4]
		calibrationData.values.HighVoltage.Actual = 1000;
 800a1fa:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <LoadCalibrationData+0x60>)
 800a1fc:	22fa      	movs	r2, #250	; 0xfa
 800a1fe:	0092      	lsls	r2, r2, #2
 800a200:	80da      	strh	r2, [r3, #6]
		calibrationData.values.LowCurrent.Reading = 0;
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <LoadCalibrationData+0x60>)
 800a204:	2200      	movs	r2, #0
 800a206:	609a      	str	r2, [r3, #8]
		calibrationData.values.LowCurrent.Actual = 0;
 800a208:	4b06      	ldr	r3, [pc, #24]	; (800a224 <LoadCalibrationData+0x60>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	60da      	str	r2, [r3, #12]
		calibrationData.values.HighCurrent.Reading = 1000;
 800a20e:	4b05      	ldr	r3, [pc, #20]	; (800a224 <LoadCalibrationData+0x60>)
 800a210:	22fa      	movs	r2, #250	; 0xfa
 800a212:	0092      	lsls	r2, r2, #2
 800a214:	611a      	str	r2, [r3, #16]
		calibrationData.values.HighCurrent.Actual = 1000;
 800a216:	4b03      	ldr	r3, [pc, #12]	; (800a224 <LoadCalibrationData+0x60>)
 800a218:	22fa      	movs	r2, #250	; 0xfa
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	615a      	str	r2, [r3, #20]
	}
}
 800a21e:	46c0      	nop			; (mov r8, r8)
 800a220:	46bd      	mov	sp, r7
 800a222:	bdb0      	pop	{r4, r5, r7, pc}
 800a224:	200009e4 	.word	0x200009e4
 800a228:	0800f800 	.word	0x0800f800

0800a22c <GetCalibrationDataPtr>:

const uint8_t *GetCalibrationDataPtr() {
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
	return (uint8_t *)&calibrationData;
 800a230:	4b01      	ldr	r3, [pc, #4]	; (800a238 <GetCalibrationDataPtr+0xc>)
}
 800a232:	0018      	movs	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	200009e4 	.word	0x200009e4

0800a23c <GetVoltageCalibration>:
/**
 * GetVoltageCalibration calculates the slope and offset for the voltage measurements based on the calibration data from the flash memory
 */
void GetVoltageCalibration(double *m, double *c) {
 800a23c:	b5b0      	push	{r4, r5, r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]

	*m = (((double)calibrationData.values.HighVoltage.Actual) - ((double)calibrationData.values.LowVoltage.Actual))
 800a246:	4b2c      	ldr	r3, [pc, #176]	; (800a2f8 <GetVoltageCalibration+0xbc>)
 800a248:	2206      	movs	r2, #6
 800a24a:	5e9b      	ldrsh	r3, [r3, r2]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f7f7 fdb7 	bl	8001dc0 <__aeabi_i2d>
 800a252:	0004      	movs	r4, r0
 800a254:	000d      	movs	r5, r1
 800a256:	4b28      	ldr	r3, [pc, #160]	; (800a2f8 <GetVoltageCalibration+0xbc>)
 800a258:	2202      	movs	r2, #2
 800a25a:	5e9b      	ldrsh	r3, [r3, r2]
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7f7 fdaf 	bl	8001dc0 <__aeabi_i2d>
 800a262:	0002      	movs	r2, r0
 800a264:	000b      	movs	r3, r1
 800a266:	0020      	movs	r0, r4
 800a268:	0029      	movs	r1, r5
 800a26a:	f7f7 f9f1 	bl	8001650 <__aeabi_dsub>
 800a26e:	0002      	movs	r2, r0
 800a270:	000b      	movs	r3, r1
 800a272:	603a      	str	r2, [r7, #0]
 800a274:	607b      	str	r3, [r7, #4]
			/ (((double)calibrationData.values.HighVoltage.Reading) - ((double)calibrationData.values.LowVoltage.Reading));
 800a276:	4b20      	ldr	r3, [pc, #128]	; (800a2f8 <GetVoltageCalibration+0xbc>)
 800a278:	2104      	movs	r1, #4
 800a27a:	5e5b      	ldrsh	r3, [r3, r1]
 800a27c:	0018      	movs	r0, r3
 800a27e:	f7f7 fd9f 	bl	8001dc0 <__aeabi_i2d>
 800a282:	0004      	movs	r4, r0
 800a284:	000d      	movs	r5, r1
 800a286:	4b1c      	ldr	r3, [pc, #112]	; (800a2f8 <GetVoltageCalibration+0xbc>)
 800a288:	2100      	movs	r1, #0
 800a28a:	5e5b      	ldrsh	r3, [r3, r1]
 800a28c:	0018      	movs	r0, r3
 800a28e:	f7f7 fd97 	bl	8001dc0 <__aeabi_i2d>
 800a292:	0002      	movs	r2, r0
 800a294:	000b      	movs	r3, r1
 800a296:	0020      	movs	r0, r4
 800a298:	0029      	movs	r1, r5
 800a29a:	f7f7 f9d9 	bl	8001650 <__aeabi_dsub>
 800a29e:	0002      	movs	r2, r0
 800a2a0:	000b      	movs	r3, r1
 800a2a2:	6838      	ldr	r0, [r7, #0]
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	f7f6 fc23 	bl	8000af0 <__aeabi_ddiv>
 800a2aa:	0002      	movs	r2, r0
 800a2ac:	000b      	movs	r3, r1
	*m = (((double)calibrationData.values.HighVoltage.Actual) - ((double)calibrationData.values.LowVoltage.Actual))
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	600a      	str	r2, [r1, #0]
 800a2b2:	604b      	str	r3, [r1, #4]
	*c = ((double)calibrationData.values.LowVoltage.Actual) - (((double)calibrationData.values.LowVoltage.Reading) * *m);
 800a2b4:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <GetVoltageCalibration+0xbc>)
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	5e9b      	ldrsh	r3, [r3, r2]
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f7f7 fd80 	bl	8001dc0 <__aeabi_i2d>
 800a2c0:	0004      	movs	r4, r0
 800a2c2:	000d      	movs	r5, r1
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <GetVoltageCalibration+0xbc>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	5e9b      	ldrsh	r3, [r3, r2]
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f7f7 fd78 	bl	8001dc0 <__aeabi_i2d>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f7f6 fef9 	bl	80010cc <__aeabi_dmul>
 800a2da:	0002      	movs	r2, r0
 800a2dc:	000b      	movs	r3, r1
 800a2de:	0020      	movs	r0, r4
 800a2e0:	0029      	movs	r1, r5
 800a2e2:	f7f7 f9b5 	bl	8001650 <__aeabi_dsub>
 800a2e6:	0002      	movs	r2, r0
 800a2e8:	000b      	movs	r3, r1
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	600a      	str	r2, [r1, #0]
 800a2ee:	604b      	str	r3, [r1, #4]
}
 800a2f0:	46c0      	nop			; (mov r8, r8)
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	b004      	add	sp, #16
 800a2f6:	bdb0      	pop	{r4, r5, r7, pc}
 800a2f8:	200009e4 	.word	0x200009e4

0800a2fc <GetCurrentCalibration>:

/**
 * GetCurrentCalibration calculates the slope and offset for the current measurements based on the calibration data from the flash memory
 */
void GetCurrentCalibration(double *m, double *c) {
 800a2fc:	b5b0      	push	{r4, r5, r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]

	*m = (((double)calibrationData.values.HighCurrent.Actual) - ((double)calibrationData.values.LowCurrent.Actual))
 800a306:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <GetCurrentCalibration+0xb0>)
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	0018      	movs	r0, r3
 800a30c:	f7f7 fd58 	bl	8001dc0 <__aeabi_i2d>
 800a310:	0004      	movs	r4, r0
 800a312:	000d      	movs	r5, r1
 800a314:	4b25      	ldr	r3, [pc, #148]	; (800a3ac <GetCurrentCalibration+0xb0>)
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	0018      	movs	r0, r3
 800a31a:	f7f7 fd51 	bl	8001dc0 <__aeabi_i2d>
 800a31e:	0002      	movs	r2, r0
 800a320:	000b      	movs	r3, r1
 800a322:	0020      	movs	r0, r4
 800a324:	0029      	movs	r1, r5
 800a326:	f7f7 f993 	bl	8001650 <__aeabi_dsub>
 800a32a:	0002      	movs	r2, r0
 800a32c:	000b      	movs	r3, r1
 800a32e:	603a      	str	r2, [r7, #0]
 800a330:	607b      	str	r3, [r7, #4]
			/ (((double)calibrationData.values.HighCurrent.Reading) - ((double)calibrationData.values.LowCurrent.Reading));
 800a332:	4b1e      	ldr	r3, [pc, #120]	; (800a3ac <GetCurrentCalibration+0xb0>)
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	0018      	movs	r0, r3
 800a338:	f7f7 fd42 	bl	8001dc0 <__aeabi_i2d>
 800a33c:	0004      	movs	r4, r0
 800a33e:	000d      	movs	r5, r1
 800a340:	4b1a      	ldr	r3, [pc, #104]	; (800a3ac <GetCurrentCalibration+0xb0>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	0018      	movs	r0, r3
 800a346:	f7f7 fd3b 	bl	8001dc0 <__aeabi_i2d>
 800a34a:	0002      	movs	r2, r0
 800a34c:	000b      	movs	r3, r1
 800a34e:	0020      	movs	r0, r4
 800a350:	0029      	movs	r1, r5
 800a352:	f7f7 f97d 	bl	8001650 <__aeabi_dsub>
 800a356:	0002      	movs	r2, r0
 800a358:	000b      	movs	r3, r1
 800a35a:	6838      	ldr	r0, [r7, #0]
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	f7f6 fbc7 	bl	8000af0 <__aeabi_ddiv>
 800a362:	0002      	movs	r2, r0
 800a364:	000b      	movs	r3, r1
	*m = (((double)calibrationData.values.HighCurrent.Actual) - ((double)calibrationData.values.LowCurrent.Actual))
 800a366:	68f9      	ldr	r1, [r7, #12]
 800a368:	600a      	str	r2, [r1, #0]
 800a36a:	604b      	str	r3, [r1, #4]
	*c = ((double)calibrationData.values.LowCurrent.Actual) - (((double)calibrationData.values.LowCurrent.Reading) * *m);
 800a36c:	4b0f      	ldr	r3, [pc, #60]	; (800a3ac <GetCurrentCalibration+0xb0>)
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	0018      	movs	r0, r3
 800a372:	f7f7 fd25 	bl	8001dc0 <__aeabi_i2d>
 800a376:	0004      	movs	r4, r0
 800a378:	000d      	movs	r5, r1
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <GetCurrentCalibration+0xb0>)
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	0018      	movs	r0, r3
 800a380:	f7f7 fd1e 	bl	8001dc0 <__aeabi_i2d>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f7f6 fe9f 	bl	80010cc <__aeabi_dmul>
 800a38e:	0002      	movs	r2, r0
 800a390:	000b      	movs	r3, r1
 800a392:	0020      	movs	r0, r4
 800a394:	0029      	movs	r1, r5
 800a396:	f7f7 f95b 	bl	8001650 <__aeabi_dsub>
 800a39a:	0002      	movs	r2, r0
 800a39c:	000b      	movs	r3, r1
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	600a      	str	r2, [r1, #0]
 800a3a2:	604b      	str	r3, [r1, #4]
}
 800a3a4:	46c0      	nop			; (mov r8, r8)
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	b004      	add	sp, #16
 800a3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ac:	200009e4 	.word	0x200009e4

0800a3b0 <CalculateChecksum>:

#define CRC16 0x8005

uint16_t CalculateChecksum()
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af00      	add	r7, sp, #0
	const uint8_t *data = (uint8_t *)&calibrationData;
 800a3b6:	4b4a      	ldr	r3, [pc, #296]	; (800a4e0 <CalculateChecksum+0x130>)
 800a3b8:	61fb      	str	r3, [r7, #28]
	uint16_t size = sizeof(calibrationData.values); // Exclude the 16 bit Checksum in the data structure
 800a3ba:	231a      	movs	r3, #26
 800a3bc:	18fb      	adds	r3, r7, r3
 800a3be:	2218      	movs	r2, #24
 800a3c0:	801a      	strh	r2, [r3, #0]
    uint16_t out = 0;
 800a3c2:	2318      	movs	r3, #24
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	801a      	strh	r2, [r3, #0]
    int bits_read = 0, bit_flag;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	617b      	str	r3, [r7, #20]

    /* Sanity check: */
    if(data == NULL)
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d138      	bne.n	800a446 <CalculateChecksum+0x96>
        return 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e07e      	b.n	800a4d6 <CalculateChecksum+0x126>

    while(size > 0)
    {
        bit_flag = out >> 15;
 800a3d8:	2118      	movs	r1, #24
 800a3da:	187b      	adds	r3, r7, r1
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	0bdb      	lsrs	r3, r3, #15
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	607b      	str	r3, [r7, #4]

        /* Get next bit: */
        out <<= 1;
 800a3e4:	187a      	adds	r2, r7, r1
 800a3e6:	187b      	adds	r3, r7, r1
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	18db      	adds	r3, r3, r3
 800a3ec:	8013      	strh	r3, [r2, #0]
        out |= (*data >> bits_read) & 1; // item a) work from the least significant bits
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	001a      	movs	r2, r3
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	411a      	asrs	r2, r3
 800a3f8:	0013      	movs	r3, r2
 800a3fa:	b21b      	sxth	r3, r3
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	4013      	ands	r3, r2
 800a400:	b21a      	sxth	r2, r3
 800a402:	187b      	adds	r3, r7, r1
 800a404:	2000      	movs	r0, #0
 800a406:	5e1b      	ldrsh	r3, [r3, r0]
 800a408:	4313      	orrs	r3, r2
 800a40a:	b21a      	sxth	r2, r3
 800a40c:	187b      	adds	r3, r7, r1
 800a40e:	801a      	strh	r2, [r3, #0]

        /* Increment bit counter: */
        bits_read++;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	3301      	adds	r3, #1
 800a414:	617b      	str	r3, [r7, #20]
        if(bits_read > 7)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b07      	cmp	r3, #7
 800a41a:	dd0a      	ble.n	800a432 <CalculateChecksum+0x82>
        {
            bits_read = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]
            data++;
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	3301      	adds	r3, #1
 800a424:	61fb      	str	r3, [r7, #28]
            size--;
 800a426:	211a      	movs	r1, #26
 800a428:	187b      	adds	r3, r7, r1
 800a42a:	881a      	ldrh	r2, [r3, #0]
 800a42c:	187b      	adds	r3, r7, r1
 800a42e:	3a01      	subs	r2, #1
 800a430:	801a      	strh	r2, [r3, #0]
        }

        /* Cycle check: */
        if(bit_flag)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <CalculateChecksum+0x96>
            out ^= CRC16;
 800a438:	2218      	movs	r2, #24
 800a43a:	18bb      	adds	r3, r7, r2
 800a43c:	18ba      	adds	r2, r7, r2
 800a43e:	8812      	ldrh	r2, [r2, #0]
 800a440:	4928      	ldr	r1, [pc, #160]	; (800a4e4 <CalculateChecksum+0x134>)
 800a442:	404a      	eors	r2, r1
 800a444:	801a      	strh	r2, [r3, #0]
    while(size > 0)
 800a446:	231a      	movs	r3, #26
 800a448:	18fb      	adds	r3, r7, r3
 800a44a:	881b      	ldrh	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1c3      	bne.n	800a3d8 <CalculateChecksum+0x28>

    }

    // item b) "push out" the last 16 bits
    int i;
    for (i = 0; i < 16; ++i) {
 800a450:	2300      	movs	r3, #0
 800a452:	613b      	str	r3, [r7, #16]
 800a454:	e016      	b.n	800a484 <CalculateChecksum+0xd4>
        bit_flag = out >> 15;
 800a456:	2118      	movs	r1, #24
 800a458:	187b      	adds	r3, r7, r1
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	0bdb      	lsrs	r3, r3, #15
 800a45e:	b29b      	uxth	r3, r3
 800a460:	607b      	str	r3, [r7, #4]
        out <<= 1;
 800a462:	187a      	adds	r2, r7, r1
 800a464:	187b      	adds	r3, r7, r1
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	18db      	adds	r3, r3, r3
 800a46a:	8013      	strh	r3, [r2, #0]
        if(bit_flag)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <CalculateChecksum+0xce>
            out ^= CRC16;
 800a472:	187b      	adds	r3, r7, r1
 800a474:	187a      	adds	r2, r7, r1
 800a476:	8812      	ldrh	r2, [r2, #0]
 800a478:	491a      	ldr	r1, [pc, #104]	; (800a4e4 <CalculateChecksum+0x134>)
 800a47a:	404a      	eors	r2, r1
 800a47c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < 16; ++i) {
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	3301      	adds	r3, #1
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2b0f      	cmp	r3, #15
 800a488:	dde5      	ble.n	800a456 <CalculateChecksum+0xa6>
    }

    // item c) reverse the bits
    uint16_t crc = 0;
 800a48a:	230e      	movs	r3, #14
 800a48c:	18fb      	adds	r3, r7, r3
 800a48e:	2200      	movs	r2, #0
 800a490:	801a      	strh	r2, [r3, #0]
    i = 0x8000;
 800a492:	2380      	movs	r3, #128	; 0x80
 800a494:	021b      	lsls	r3, r3, #8
 800a496:	613b      	str	r3, [r7, #16]
    int j = 0x0001;
 800a498:	2301      	movs	r3, #1
 800a49a:	60bb      	str	r3, [r7, #8]
    for (; i != 0; i >>=1, j <<= 1) {
 800a49c:	e015      	b.n	800a4ca <CalculateChecksum+0x11a>
        if (i & out) crc |= j;
 800a49e:	2318      	movs	r3, #24
 800a4a0:	18fb      	adds	r3, r7, r3
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	d009      	beq.n	800a4be <CalculateChecksum+0x10e>
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	b21a      	sxth	r2, r3
 800a4ae:	210e      	movs	r1, #14
 800a4b0:	187b      	adds	r3, r7, r1
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	5e1b      	ldrsh	r3, [r3, r0]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	b21a      	sxth	r2, r3
 800a4ba:	187b      	adds	r3, r7, r1
 800a4bc:	801a      	strh	r2, [r3, #0]
    for (; i != 0; i >>=1, j <<= 1) {
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	105b      	asrs	r3, r3, #1
 800a4c2:	613b      	str	r3, [r7, #16]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	60bb      	str	r3, [r7, #8]
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e6      	bne.n	800a49e <CalculateChecksum+0xee>
    }

    return crc;
 800a4d0:	230e      	movs	r3, #14
 800a4d2:	18fb      	adds	r3, r7, r3
 800a4d4:	881b      	ldrh	r3, [r3, #0]
}
 800a4d6:	0018      	movs	r0, r3
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	b008      	add	sp, #32
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	200009e4 	.word	0x200009e4
 800a4e4:	ffff8005 	.word	0xffff8005

0800a4e8 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af02      	add	r7, sp, #8
 800a4ee:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	e019      	b.n	800a52e <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800a4fa:	4b15      	ldr	r3, [pc, #84]	; (800a550 <HAL_UART_TxCpltCallback+0x68>)
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	0092      	lsls	r2, r2, #2
 800a500:	58d3      	ldr	r3, [r2, r3]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	429a      	cmp	r2, r3
 800a508:	d10e      	bne.n	800a528 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800a50a:	4b11      	ldr	r3, [pc, #68]	; (800a550 <HAL_UART_TxCpltCallback+0x68>)
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	0092      	lsls	r2, r2, #2
 800a510:	58d3      	ldr	r3, [r2, r3]
 800a512:	22ac      	movs	r2, #172	; 0xac
 800a514:	5898      	ldr	r0, [r3, r2]
 800a516:	2308      	movs	r3, #8
 800a518:	18fb      	adds	r3, r7, r3
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	2300      	movs	r3, #0
 800a51e:	2200      	movs	r2, #0
 800a520:	2100      	movs	r1, #0
 800a522:	f002 fa39 	bl	800c998 <xTaskGenericNotifyFromISR>
	   		break;
 800a526:	e008      	b.n	800a53a <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3301      	adds	r3, #1
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <HAL_UART_TxCpltCallback+0x6c>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	001a      	movs	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4293      	cmp	r3, r2
 800a538:	dbdf      	blt.n	800a4fa <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <HAL_UART_TxCpltCallback+0x60>
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <HAL_UART_TxCpltCallback+0x70>)
 800a542:	2280      	movs	r2, #128	; 0x80
 800a544:	0552      	lsls	r2, r2, #21
 800a546:	601a      	str	r2, [r3, #0]
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800a548:	46c0      	nop			; (mov r8, r8)
 800a54a:	46bd      	mov	sp, r7
 800a54c:	b004      	add	sp, #16
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	200009d8 	.word	0x200009d8
 800a554:	200009e0 	.word	0x200009e0
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b087      	sub	sp, #28
 800a560:	af02      	add	r7, sp, #8
 800a562:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a564:	2300      	movs	r3, #0
 800a566:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	e043      	b.n	800a5f6 <HAL_UART_RxCpltCallback+0x9a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800a56e:	4b2b      	ldr	r3, [pc, #172]	; (800a61c <HAL_UART_RxCpltCallback+0xc0>)
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	0092      	lsls	r2, r2, #2
 800a574:	58d3      	ldr	r3, [r2, r3]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d138      	bne.n	800a5f0 <HAL_UART_RxCpltCallback+0x94>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800a57e:	4b27      	ldr	r3, [pc, #156]	; (800a61c <HAL_UART_RxCpltCallback+0xc0>)
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	0092      	lsls	r2, r2, #2
 800a584:	58d2      	ldr	r2, [r2, r3]
 800a586:	23a0      	movs	r3, #160	; 0xa0
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	5cd3      	ldrb	r3, [r2, r3]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d139      	bne.n	800a604 <HAL_UART_RxCpltCallback+0xa8>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800a590:	4b22      	ldr	r3, [pc, #136]	; (800a61c <HAL_UART_RxCpltCallback+0xc0>)
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	0092      	lsls	r2, r2, #2
 800a596:	58d3      	ldr	r3, [r2, r3]
 800a598:	33bc      	adds	r3, #188	; 0xbc
 800a59a:	0018      	movs	r0, r3
 800a59c:	4b1f      	ldr	r3, [pc, #124]	; (800a61c <HAL_UART_RxCpltCallback+0xc0>)
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	0092      	lsls	r2, r2, #2
 800a5a2:	58d3      	ldr	r3, [r2, r3]
 800a5a4:	22a6      	movs	r2, #166	; 0xa6
 800a5a6:	5c9b      	ldrb	r3, [r3, r2]
 800a5a8:	0019      	movs	r1, r3
 800a5aa:	f7fd fd5b 	bl	8008064 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800a5ae:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <HAL_UART_RxCpltCallback+0xc0>)
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	0092      	lsls	r2, r2, #2
 800a5b4:	58d3      	ldr	r3, [r2, r3]
 800a5b6:	6858      	ldr	r0, [r3, #4]
 800a5b8:	4b18      	ldr	r3, [pc, #96]	; (800a61c <HAL_UART_RxCpltCallback+0xc0>)
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	0092      	lsls	r2, r2, #2
 800a5be:	58d3      	ldr	r3, [r2, r3]
 800a5c0:	33a6      	adds	r3, #166	; 0xa6
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	0019      	movs	r1, r3
 800a5c6:	f7fc f8e1 	bl	800678c <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800a5ca:	4b14      	ldr	r3, [pc, #80]	; (800a61c <HAL_UART_RxCpltCallback+0xc0>)
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	0092      	lsls	r2, r2, #2
 800a5d0:	58d3      	ldr	r3, [r2, r3]
 800a5d2:	22b0      	movs	r2, #176	; 0xb0
 800a5d4:	589c      	ldr	r4, [r3, r2]
 800a5d6:	f001 fc9b 	bl	800bf10 <xTaskGetTickCountFromISR>
 800a5da:	0001      	movs	r1, r0
 800a5dc:	2308      	movs	r3, #8
 800a5de:	18fb      	adds	r3, r7, r3
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	9200      	str	r2, [sp, #0]
 800a5e4:	000a      	movs	r2, r1
 800a5e6:	2107      	movs	r1, #7
 800a5e8:	0020      	movs	r0, r4
 800a5ea:	f002 fc0b 	bl	800ce04 <xTimerGenericCommand>
    		}
    		break;
 800a5ee:	e009      	b.n	800a604 <HAL_UART_RxCpltCallback+0xa8>
    for (i = 0; i < numberHandlers; i++ )
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <HAL_UART_RxCpltCallback+0xc4>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	001a      	movs	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4293      	cmp	r3, r2
 800a600:	dbb5      	blt.n	800a56e <HAL_UART_RxCpltCallback+0x12>
 800a602:	e000      	b.n	800a606 <HAL_UART_RxCpltCallback+0xaa>
    		break;
 800a604:	46c0      	nop			; (mov r8, r8)
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <HAL_UART_RxCpltCallback+0xb8>
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <HAL_UART_RxCpltCallback+0xc8>)
 800a60e:	2280      	movs	r2, #128	; 0x80
 800a610:	0552      	lsls	r2, r2, #21
 800a612:	601a      	str	r2, [r3, #0]
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800a614:	46c0      	nop			; (mov r8, r8)
 800a616:	46bd      	mov	sp, r7
 800a618:	b005      	add	sp, #20
 800a61a:	bd90      	pop	{r4, r7, pc}
 800a61c:	200009d8 	.word	0x200009d8
 800a620:	200009e0 	.word	0x200009e0
 800a624:	e000ed04 	.word	0xe000ed04

0800a628 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a62e:	f3ef 8305 	mrs	r3, IPSR
 800a632:	60bb      	str	r3, [r7, #8]
  return(result);
 800a634:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a63a:	f3ef 8310 	mrs	r3, PRIMASK
 800a63e:	607b      	str	r3, [r7, #4]
  return(result);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d007      	beq.n	800a656 <osKernelInitialize+0x2e>
 800a646:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <osKernelInitialize+0x54>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d103      	bne.n	800a656 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800a64e:	2306      	movs	r3, #6
 800a650:	425b      	negs	r3, r3
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e00c      	b.n	800a670 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a656:	4b09      	ldr	r3, [pc, #36]	; (800a67c <osKernelInitialize+0x54>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d105      	bne.n	800a66a <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <osKernelInitialize+0x54>)
 800a660:	2201      	movs	r2, #1
 800a662:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a664:	2300      	movs	r3, #0
 800a666:	60fb      	str	r3, [r7, #12]
 800a668:	e002      	b.n	800a670 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800a66a:	2301      	movs	r3, #1
 800a66c:	425b      	negs	r3, r3
 800a66e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a670:	68fb      	ldr	r3, [r7, #12]
}
 800a672:	0018      	movs	r0, r3
 800a674:	46bd      	mov	sp, r7
 800a676:	b004      	add	sp, #16
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	46c0      	nop			; (mov r8, r8)
 800a67c:	20000a00 	.word	0x20000a00

0800a680 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a686:	f3ef 8305 	mrs	r3, IPSR
 800a68a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a68c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d109      	bne.n	800a6a6 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a692:	f3ef 8310 	mrs	r3, PRIMASK
 800a696:	607b      	str	r3, [r7, #4]
  return(result);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d007      	beq.n	800a6ae <osKernelStart+0x2e>
 800a69e:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <osKernelStart+0x58>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d103      	bne.n	800a6ae <osKernelStart+0x2e>
    stat = osErrorISR;
 800a6a6:	2306      	movs	r3, #6
 800a6a8:	425b      	negs	r3, r3
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	e00e      	b.n	800a6cc <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6ae:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <osKernelStart+0x58>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d107      	bne.n	800a6c6 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800a6b6:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <osKernelStart+0x58>)
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a6bc:	f001 fb24 	bl	800bd08 <vTaskStartScheduler>
      stat = osOK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e002      	b.n	800a6cc <osKernelStart+0x4c>
    } else {
      stat = osError;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	425b      	negs	r3, r3
 800a6ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
}
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b004      	add	sp, #16
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	46c0      	nop			; (mov r8, r8)
 800a6d8:	20000a00 	.word	0x20000a00

0800a6dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6dc:	b5b0      	push	{r4, r5, r7, lr}
 800a6de:	b090      	sub	sp, #64	; 0x40
 800a6e0:	af04      	add	r7, sp, #16
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6ec:	f3ef 8305 	mrs	r3, IPSR
 800a6f0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a6f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d000      	beq.n	800a6fa <osThreadNew+0x1e>
 800a6f8:	e090      	b.n	800a81c <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a6fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <osThreadNew+0x34>
 800a706:	4b48      	ldr	r3, [pc, #288]	; (800a828 <osThreadNew+0x14c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d100      	bne.n	800a710 <osThreadNew+0x34>
 800a70e:	e085      	b.n	800a81c <osThreadNew+0x140>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d100      	bne.n	800a718 <osThreadNew+0x3c>
 800a716:	e081      	b.n	800a81c <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800a718:	2380      	movs	r3, #128	; 0x80
 800a71a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a71c:	2318      	movs	r3, #24
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800a720:	2117      	movs	r1, #23
 800a722:	187b      	adds	r3, r7, r1
 800a724:	2200      	movs	r2, #0
 800a726:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800a728:	187b      	adds	r3, r7, r1
 800a72a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800a72c:	2301      	movs	r3, #1
 800a72e:	425b      	negs	r3, r3
 800a730:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d044      	beq.n	800a7c2 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <osThreadNew+0x6a>
        name = attr->name;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	2b00      	cmp	r3, #0
 800a758:	d007      	beq.n	800a76a <osThreadNew+0x8e>
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	2b38      	cmp	r3, #56	; 0x38
 800a75e:	d804      	bhi.n	800a76a <osThreadNew+0x8e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	4013      	ands	r3, r2
 800a768:	d001      	beq.n	800a76e <osThreadNew+0x92>
        return (NULL);
 800a76a:	2300      	movs	r3, #0
 800a76c:	e057      	b.n	800a81e <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	089b      	lsrs	r3, r3, #2
 800a77c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00e      	beq.n	800a7a4 <osThreadNew+0xc8>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	2ba7      	cmp	r3, #167	; 0xa7
 800a78c:	d90a      	bls.n	800a7a4 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a792:	2b00      	cmp	r3, #0
 800a794:	d006      	beq.n	800a7a4 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <osThreadNew+0xc8>
        mem = 1;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	623b      	str	r3, [r7, #32]
 800a7a2:	e010      	b.n	800a7c6 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10c      	bne.n	800a7c6 <osThreadNew+0xea>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d108      	bne.n	800a7c6 <osThreadNew+0xea>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d104      	bne.n	800a7c6 <osThreadNew+0xea>
          mem = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	623b      	str	r3, [r7, #32]
 800a7c0:	e001      	b.n	800a7c6 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d112      	bne.n	800a7f2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7d4:	68bd      	ldr	r5, [r7, #8]
 800a7d6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800a7d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	9302      	str	r3, [sp, #8]
 800a7de:	9201      	str	r2, [sp, #4]
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	002b      	movs	r3, r5
 800a7e6:	0022      	movs	r2, r4
 800a7e8:	f001 f8d9 	bl	800b99e <xTaskCreateStatic>
 800a7ec:	0003      	movs	r3, r0
 800a7ee:	613b      	str	r3, [r7, #16]
 800a7f0:	e014      	b.n	800a81c <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d111      	bne.n	800a81c <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68bc      	ldr	r4, [r7, #8]
 800a7fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	2310      	movs	r3, #16
 800a804:	18fb      	adds	r3, r7, r3
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	0023      	movs	r3, r4
 800a80e:	f001 f909 	bl	800ba24 <xTaskCreate>
 800a812:	0003      	movs	r3, r0
 800a814:	2b01      	cmp	r3, #1
 800a816:	d001      	beq.n	800a81c <osThreadNew+0x140>
          hTask = NULL;
 800a818:	2300      	movs	r3, #0
 800a81a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a81c:	693b      	ldr	r3, [r7, #16]
}
 800a81e:	0018      	movs	r0, r3
 800a820:	46bd      	mov	sp, r7
 800a822:	b00c      	add	sp, #48	; 0x30
 800a824:	bdb0      	pop	{r4, r5, r7, pc}
 800a826:	46c0      	nop			; (mov r8, r8)
 800a828:	20000a00 	.word	0x20000a00

0800a82c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	0018      	movs	r0, r3
 800a838:	f002 fd76 	bl	800d328 <pvTimerGetTimerID>
 800a83c:	0003      	movs	r3, r0
 800a83e:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <TimerCallback+0x26>
    callb->func (callb->arg);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	0018      	movs	r0, r3
 800a850:	4790      	blx	r2
  }
}
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	46bd      	mov	sp, r7
 800a856:	b004      	add	sp, #16
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08e      	sub	sp, #56	; 0x38
 800a860:	af02      	add	r7, sp, #8
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	607a      	str	r2, [r7, #4]
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	230b      	movs	r3, #11
 800a86a:	18fb      	adds	r3, r7, r3
 800a86c:	1c0a      	adds	r2, r1, #0
 800a86e:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a870:	2300      	movs	r3, #0
 800a872:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a874:	f3ef 8305 	mrs	r3, IPSR
 800a878:	61bb      	str	r3, [r7, #24]
  return(result);
 800a87a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d000      	beq.n	800a882 <osTimerNew+0x26>
 800a880:	e06b      	b.n	800a95a <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a882:	f3ef 8310 	mrs	r3, PRIMASK
 800a886:	617b      	str	r3, [r7, #20]
  return(result);
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <osTimerNew+0x3a>
 800a88e:	4b35      	ldr	r3, [pc, #212]	; (800a964 <osTimerNew+0x108>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b02      	cmp	r3, #2
 800a894:	d061      	beq.n	800a95a <osTimerNew+0xfe>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05e      	beq.n	800a95a <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a89c:	2008      	movs	r0, #8
 800a89e:	f002 fe8f 	bl	800d5c0 <pvPortMalloc>
 800a8a2:	0003      	movs	r3, r0
 800a8a4:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d056      	beq.n	800a95a <osTimerNew+0xfe>
      callb->func = func;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a8b8:	230b      	movs	r3, #11
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8c6:	e001      	b.n	800a8cc <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	425b      	negs	r3, r3
 800a8d0:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01c      	beq.n	800a916 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <osTimerNew+0x8e>
          name = attr->name;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d006      	beq.n	800a900 <osTimerNew+0xa4>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	2b2f      	cmp	r3, #47	; 0x2f
 800a8f8:	d902      	bls.n	800a900 <osTimerNew+0xa4>
          mem = 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	623b      	str	r3, [r7, #32]
 800a8fe:	e00c      	b.n	800a91a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d108      	bne.n	800a91a <osTimerNew+0xbe>
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <osTimerNew+0xbe>
            mem = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	623b      	str	r3, [r7, #32]
 800a914:	e001      	b.n	800a91a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10e      	bne.n	800a93e <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	69f9      	ldr	r1, [r7, #28]
 800a926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	4b0e      	ldr	r3, [pc, #56]	; (800a968 <osTimerNew+0x10c>)
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	000b      	movs	r3, r1
 800a932:	2101      	movs	r1, #1
 800a934:	f002 fa11 	bl	800cd5a <xTimerCreateStatic>
 800a938:	0003      	movs	r3, r0
 800a93a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a93c:	e00d      	b.n	800a95a <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a944:	69f9      	ldr	r1, [r7, #28]
 800a946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <osTimerNew+0x10c>)
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	000b      	movs	r3, r1
 800a950:	2101      	movs	r1, #1
 800a952:	f002 f9df 	bl	800cd14 <xTimerCreate>
 800a956:	0003      	movs	r3, r0
 800a958:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a95c:	0018      	movs	r0, r3
 800a95e:	46bd      	mov	sp, r7
 800a960:	b00c      	add	sp, #48	; 0x30
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000a00 	.word	0x20000a00
 800a968:	0800a82d 	.word	0x0800a82d

0800a96c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af02      	add	r7, sp, #8
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a97a:	f3ef 8305 	mrs	r3, IPSR
 800a97e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a980:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a982:	2b00      	cmp	r3, #0
 800a984:	d109      	bne.n	800a99a <osTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a986:	f3ef 8310 	mrs	r3, PRIMASK
 800a98a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d007      	beq.n	800a9a2 <osTimerStart+0x36>
 800a992:	4b12      	ldr	r3, [pc, #72]	; (800a9dc <osTimerStart+0x70>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b02      	cmp	r3, #2
 800a998:	d103      	bne.n	800a9a2 <osTimerStart+0x36>
    stat = osErrorISR;
 800a99a:	2306      	movs	r3, #6
 800a99c:	425b      	negs	r3, r3
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	e017      	b.n	800a9d2 <osTimerStart+0x66>
  }
  else if (hTimer == NULL) {
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d103      	bne.n	800a9b0 <osTimerStart+0x44>
    stat = osErrorParameter;
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	425b      	negs	r3, r3
 800a9ac:	617b      	str	r3, [r7, #20]
 800a9ae:	e010      	b.n	800a9d2 <osTimerStart+0x66>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	6938      	ldr	r0, [r7, #16]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	2104      	movs	r1, #4
 800a9bc:	f002 fa22 	bl	800ce04 <xTimerGenericCommand>
 800a9c0:	0003      	movs	r3, r0
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d102      	bne.n	800a9cc <osTimerStart+0x60>
      stat = osOK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	e002      	b.n	800a9d2 <osTimerStart+0x66>
    } else {
      stat = osErrorResource;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	425b      	negs	r3, r3
 800a9d0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a9d2:	697b      	ldr	r3, [r7, #20]
}
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	b006      	add	sp, #24
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	20000a00 	.word	0x20000a00

0800a9e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08c      	sub	sp, #48	; 0x30
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9f0:	f3ef 8305 	mrs	r3, IPSR
 800a9f4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a9f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d000      	beq.n	800a9fe <osSemaphoreNew+0x1e>
 800a9fc:	e08a      	b.n	800ab14 <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9fe:	f3ef 8310 	mrs	r3, PRIMASK
 800aa02:	617b      	str	r3, [r7, #20]
  return(result);
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d004      	beq.n	800aa14 <osSemaphoreNew+0x34>
 800aa0a:	4b45      	ldr	r3, [pc, #276]	; (800ab20 <osSemaphoreNew+0x140>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d100      	bne.n	800aa14 <osSemaphoreNew+0x34>
 800aa12:	e07f      	b.n	800ab14 <osSemaphoreNew+0x134>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d100      	bne.n	800aa1c <osSemaphoreNew+0x3c>
 800aa1a:	e07b      	b.n	800ab14 <osSemaphoreNew+0x134>
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d900      	bls.n	800aa26 <osSemaphoreNew+0x46>
 800aa24:	e076      	b.n	800ab14 <osSemaphoreNew+0x134>
    mem = -1;
 800aa26:	2301      	movs	r3, #1
 800aa28:	425b      	negs	r3, r3
 800aa2a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d015      	beq.n	800aa5e <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d006      	beq.n	800aa48 <osSemaphoreNew+0x68>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	2b4f      	cmp	r3, #79	; 0x4f
 800aa40:	d902      	bls.n	800aa48 <osSemaphoreNew+0x68>
        mem = 1;
 800aa42:	2301      	movs	r3, #1
 800aa44:	623b      	str	r3, [r7, #32]
 800aa46:	e00c      	b.n	800aa62 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d108      	bne.n	800aa62 <osSemaphoreNew+0x82>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d104      	bne.n	800aa62 <osSemaphoreNew+0x82>
          mem = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	623b      	str	r3, [r7, #32]
 800aa5c:	e001      	b.n	800aa62 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	3301      	adds	r3, #1
 800aa66:	d055      	beq.n	800ab14 <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d12b      	bne.n	800aac6 <osSemaphoreNew+0xe6>
        if (mem == 1) {
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d10b      	bne.n	800aa8c <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	2203      	movs	r2, #3
 800aa7a:	9200      	str	r2, [sp, #0]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	2100      	movs	r1, #0
 800aa80:	2001      	movs	r0, #1
 800aa82:	f000 fa02 	bl	800ae8a <xQueueGenericCreateStatic>
 800aa86:	0003      	movs	r3, r0
 800aa88:	627b      	str	r3, [r7, #36]	; 0x24
 800aa8a:	e006      	b.n	800aa9a <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	2100      	movs	r1, #0
 800aa90:	2001      	movs	r0, #1
 800aa92:	f000 fa45 	bl	800af20 <xQueueGenericCreate>
 800aa96:	0003      	movs	r3, r0
 800aa98:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d027      	beq.n	800aaf0 <osSemaphoreNew+0x110>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d024      	beq.n	800aaf0 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aaa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	f000 fadd 	bl	800b06c <xQueueGenericSend>
 800aab2:	0003      	movs	r3, r0
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d01b      	beq.n	800aaf0 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	0018      	movs	r0, r3
 800aabc:	f000 fd9a 	bl	800b5f4 <vQueueDelete>
            hSemaphore = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
 800aac4:	e014      	b.n	800aaf0 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d109      	bne.n	800aae0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	68b9      	ldr	r1, [r7, #8]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	0018      	movs	r0, r3
 800aad6:	f000 fa80 	bl	800afda <xQueueCreateCountingSemaphoreStatic>
 800aada:	0003      	movs	r3, r0
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24
 800aade:	e007      	b.n	800aaf0 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	0011      	movs	r1, r2
 800aae6:	0018      	movs	r0, r3
 800aae8:	f000 fa9d 	bl	800b026 <xQueueCreateCountingSemaphore>
 800aaec:	0003      	movs	r3, r0
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00e      	beq.n	800ab14 <osSemaphoreNew+0x134>
        if (attr != NULL) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <osSemaphoreNew+0x124>
          name = attr->name;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	61fb      	str	r3, [r7, #28]
 800ab02:	e001      	b.n	800ab08 <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ab08:	69fa      	ldr	r2, [r7, #28]
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	0011      	movs	r1, r2
 800ab0e:	0018      	movs	r0, r3
 800ab10:	f000 fec0 	bl	800b894 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab16:	0018      	movs	r0, r3
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	b00a      	add	sp, #40	; 0x28
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	46c0      	nop			; (mov r8, r8)
 800ab20:	20000a00 	.word	0x20000a00

0800ab24 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b08d      	sub	sp, #52	; 0x34
 800ab28:	af02      	add	r7, sp, #8
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab34:	f3ef 8305 	mrs	r3, IPSR
 800ab38:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab3a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d000      	beq.n	800ab42 <osMessageQueueNew+0x1e>
 800ab40:	e06f      	b.n	800ac22 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab42:	f3ef 8310 	mrs	r3, PRIMASK
 800ab46:	617b      	str	r3, [r7, #20]
  return(result);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d004      	beq.n	800ab58 <osMessageQueueNew+0x34>
 800ab4e:	4b37      	ldr	r3, [pc, #220]	; (800ac2c <osMessageQueueNew+0x108>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d100      	bne.n	800ab58 <osMessageQueueNew+0x34>
 800ab56:	e064      	b.n	800ac22 <osMessageQueueNew+0xfe>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d100      	bne.n	800ab60 <osMessageQueueNew+0x3c>
 800ab5e:	e060      	b.n	800ac22 <osMessageQueueNew+0xfe>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d05d      	beq.n	800ac22 <osMessageQueueNew+0xfe>
    mem = -1;
 800ab66:	2301      	movs	r3, #1
 800ab68:	425b      	negs	r3, r3
 800ab6a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d028      	beq.n	800abc4 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d011      	beq.n	800ab9e <osMessageQueueNew+0x7a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	2b4f      	cmp	r3, #79	; 0x4f
 800ab80:	d90d      	bls.n	800ab9e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d009      	beq.n	800ab9e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695a      	ldr	r2, [r3, #20]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	434b      	muls	r3, r1
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d302      	bcc.n	800ab9e <osMessageQueueNew+0x7a>
        mem = 1;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	623b      	str	r3, [r7, #32]
 800ab9c:	e014      	b.n	800abc8 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d110      	bne.n	800abc8 <osMessageQueueNew+0xa4>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10c      	bne.n	800abc8 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d108      	bne.n	800abc8 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d104      	bne.n	800abc8 <osMessageQueueNew+0xa4>
          mem = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	623b      	str	r3, [r7, #32]
 800abc2:	e001      	b.n	800abc8 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d10c      	bne.n	800abe8 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	691a      	ldr	r2, [r3, #16]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	2400      	movs	r4, #0
 800abdc:	9400      	str	r4, [sp, #0]
 800abde:	f000 f954 	bl	800ae8a <xQueueGenericCreateStatic>
 800abe2:	0003      	movs	r3, r0
 800abe4:	627b      	str	r3, [r7, #36]	; 0x24
 800abe6:	e00a      	b.n	800abfe <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d107      	bne.n	800abfe <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800abee:	68b9      	ldr	r1, [r7, #8]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	0018      	movs	r0, r3
 800abf6:	f000 f993 	bl	800af20 <xQueueGenericCreate>
 800abfa:	0003      	movs	r3, r0
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00e      	beq.n	800ac22 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <osMessageQueueNew+0xee>
        name = attr->name;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	e001      	b.n	800ac16 <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1a:	0011      	movs	r1, r2
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f000 fe39 	bl	800b894 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac24:	0018      	movs	r0, r3
 800ac26:	46bd      	mov	sp, r7
 800ac28:	b00b      	add	sp, #44	; 0x2c
 800ac2a:	bd90      	pop	{r4, r7, pc}
 800ac2c:	20000a00 	.word	0x20000a00

0800ac30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4a06      	ldr	r2, [pc, #24]	; (800ac58 <vApplicationGetIdleTaskMemory+0x28>)
 800ac40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	4a05      	ldr	r2, [pc, #20]	; (800ac5c <vApplicationGetIdleTaskMemory+0x2c>)
 800ac46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2280      	movs	r2, #128	; 0x80
 800ac4c:	601a      	str	r2, [r3, #0]
}
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	46bd      	mov	sp, r7
 800ac52:	b004      	add	sp, #16
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	46c0      	nop			; (mov r8, r8)
 800ac58:	20000a04 	.word	0x20000a04
 800ac5c:	20000aac 	.word	0x20000aac

0800ac60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4a06      	ldr	r2, [pc, #24]	; (800ac88 <vApplicationGetTimerTaskMemory+0x28>)
 800ac70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4a05      	ldr	r2, [pc, #20]	; (800ac8c <vApplicationGetTimerTaskMemory+0x2c>)
 800ac76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2280      	movs	r2, #128	; 0x80
 800ac7c:	0052      	lsls	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
}
 800ac80:	46c0      	nop			; (mov r8, r8)
 800ac82:	46bd      	mov	sp, r7
 800ac84:	b004      	add	sp, #16
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20000cac 	.word	0x20000cac
 800ac8c:	20000d54 	.word	0x20000d54

0800ac90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3308      	adds	r3, #8
 800ac9c:	001a      	movs	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	4252      	negs	r2, r2
 800aca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3308      	adds	r3, #8
 800acae:	001a      	movs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3308      	adds	r3, #8
 800acb8:	001a      	movs	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800acc4:	46c0      	nop			; (mov r8, r8)
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b002      	add	sp, #8
 800acca:	bd80      	pop	{r7, pc}

0800accc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	46bd      	mov	sp, r7
 800acde:	b002      	add	sp, #8
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	1c5a      	adds	r2, r3, #1
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	601a      	str	r2, [r3, #0]
}
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b004      	add	sp, #16
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	d103      	bne.n	800ad44 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	e00c      	b.n	800ad5e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3308      	adds	r3, #8
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	e002      	b.n	800ad52 <vListInsert+0x2c>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d2f6      	bcs.n	800ad4c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	601a      	str	r2, [r3, #0]
}
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	b004      	add	sp, #16
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	6892      	ldr	r2, [r2, #8]
 800ada8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	6852      	ldr	r2, [r2, #4]
 800adb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d103      	bne.n	800adc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	1e5a      	subs	r2, r3, #1
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
}
 800adda:	0018      	movs	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	b004      	add	sp, #16
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <xQueueGenericReset+0x18>
 800adf6:	b672      	cpsid	i
 800adf8:	e7fe      	b.n	800adf8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800adfa:	f002 fb49 	bl	800d490 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	434b      	muls	r3, r1
 800ae0c:	18d2      	adds	r2, r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae28:	1e59      	subs	r1, r3, #1
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	434b      	muls	r3, r1
 800ae30:	18d2      	adds	r2, r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2244      	movs	r2, #68	; 0x44
 800ae3a:	21ff      	movs	r1, #255	; 0xff
 800ae3c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2245      	movs	r2, #69	; 0x45
 800ae42:	21ff      	movs	r1, #255	; 0xff
 800ae44:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10d      	bne.n	800ae68 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d013      	beq.n	800ae7c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3310      	adds	r3, #16
 800ae58:	0018      	movs	r0, r3
 800ae5a:	f001 f9bb 	bl	800c1d4 <xTaskRemoveFromEventList>
 800ae5e:	1e03      	subs	r3, r0, #0
 800ae60:	d00c      	beq.n	800ae7c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae62:	f002 fb05 	bl	800d470 <vPortYield>
 800ae66:	e009      	b.n	800ae7c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3310      	adds	r3, #16
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	f7ff ff0f 	bl	800ac90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3324      	adds	r3, #36	; 0x24
 800ae76:	0018      	movs	r0, r3
 800ae78:	f7ff ff0a 	bl	800ac90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae7c:	f002 fb1a 	bl	800d4b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae80:	2301      	movs	r3, #1
}
 800ae82:	0018      	movs	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	b004      	add	sp, #16
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae8a:	b590      	push	{r4, r7, lr}
 800ae8c:	b089      	sub	sp, #36	; 0x24
 800ae8e:	af02      	add	r7, sp, #8
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
 800ae96:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <xQueueGenericCreateStatic+0x18>
 800ae9e:	b672      	cpsid	i
 800aea0:	e7fe      	b.n	800aea0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <xQueueGenericCreateStatic+0x22>
 800aea8:	b672      	cpsid	i
 800aeaa:	e7fe      	b.n	800aeaa <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <xQueueGenericCreateStatic+0x2e>
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <xQueueGenericCreateStatic+0x32>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e000      	b.n	800aebe <xQueueGenericCreateStatic+0x34>
 800aebc:	2300      	movs	r3, #0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <xQueueGenericCreateStatic+0x3c>
 800aec2:	b672      	cpsid	i
 800aec4:	e7fe      	b.n	800aec4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <xQueueGenericCreateStatic+0x48>
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <xQueueGenericCreateStatic+0x4c>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <xQueueGenericCreateStatic+0x4e>
 800aed6:	2300      	movs	r3, #0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <xQueueGenericCreateStatic+0x56>
 800aedc:	b672      	cpsid	i
 800aede:	e7fe      	b.n	800aede <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aee0:	2350      	movs	r3, #80	; 0x50
 800aee2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	2b50      	cmp	r3, #80	; 0x50
 800aee8:	d001      	beq.n	800aeee <xQueueGenericCreateStatic+0x64>
 800aeea:	b672      	cpsid	i
 800aeec:	e7fe      	b.n	800aeec <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00e      	beq.n	800af16 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2246      	movs	r2, #70	; 0x46
 800aefc:	2101      	movs	r1, #1
 800aefe:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af00:	2328      	movs	r3, #40	; 0x28
 800af02:	18fb      	adds	r3, r7, r3
 800af04:	781c      	ldrb	r4, [r3, #0]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	68b9      	ldr	r1, [r7, #8]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	0023      	movs	r3, r4
 800af12:	f000 f83b 	bl	800af8c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800af16:	697b      	ldr	r3, [r7, #20]
	}
 800af18:	0018      	movs	r0, r3
 800af1a:	46bd      	mov	sp, r7
 800af1c:	b007      	add	sp, #28
 800af1e:	bd90      	pop	{r4, r7, pc}

0800af20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af20:	b590      	push	{r4, r7, lr}
 800af22:	b08b      	sub	sp, #44	; 0x2c
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	1dfb      	adds	r3, r7, #7
 800af2c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <xQueueGenericCreate+0x18>
 800af34:	b672      	cpsid	i
 800af36:	e7fe      	b.n	800af36 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d102      	bne.n	800af44 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800af3e:	2300      	movs	r3, #0
 800af40:	61fb      	str	r3, [r7, #28]
 800af42:	e003      	b.n	800af4c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	4353      	muls	r3, r2
 800af4a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	3350      	adds	r3, #80	; 0x50
 800af50:	0018      	movs	r0, r3
 800af52:	f002 fb35 	bl	800d5c0 <pvPortMalloc>
 800af56:	0003      	movs	r3, r0
 800af58:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d010      	beq.n	800af82 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	3350      	adds	r3, #80	; 0x50
 800af64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2246      	movs	r2, #70	; 0x46
 800af6a:	2100      	movs	r1, #0
 800af6c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af6e:	1dfb      	adds	r3, r7, #7
 800af70:	781c      	ldrb	r4, [r3, #0]
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	68b9      	ldr	r1, [r7, #8]
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	0023      	movs	r3, r4
 800af7e:	f000 f805 	bl	800af8c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800af82:	69bb      	ldr	r3, [r7, #24]
	}
 800af84:	0018      	movs	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	b009      	add	sp, #36	; 0x24
 800af8a:	bd90      	pop	{r4, r7, pc}

0800af8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	001a      	movs	r2, r3
 800af9a:	1cfb      	adds	r3, r7, #3
 800af9c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d103      	bne.n	800afac <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	e002      	b.n	800afb2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	2101      	movs	r1, #1
 800afc2:	0018      	movs	r0, r3
 800afc4:	f7ff ff0d 	bl	800ade2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	1cfa      	adds	r2, r7, #3
 800afcc:	214c      	movs	r1, #76	; 0x4c
 800afce:	7812      	ldrb	r2, [r2, #0]
 800afd0:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afd2:	46c0      	nop			; (mov r8, r8)
 800afd4:	46bd      	mov	sp, r7
 800afd6:	b004      	add	sp, #16
 800afd8:	bd80      	pop	{r7, pc}

0800afda <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b088      	sub	sp, #32
 800afde:	af02      	add	r7, sp, #8
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <xQueueCreateCountingSemaphoreStatic+0x16>
 800afec:	b672      	cpsid	i
 800afee:	e7fe      	b.n	800afee <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d901      	bls.n	800affc <xQueueCreateCountingSemaphoreStatic+0x22>
 800aff8:	b672      	cpsid	i
 800affa:	e7fe      	b.n	800affa <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	2202      	movs	r2, #2
 800b002:	9200      	str	r2, [sp, #0]
 800b004:	2200      	movs	r2, #0
 800b006:	2100      	movs	r1, #0
 800b008:	f7ff ff3f 	bl	800ae8a <xQueueGenericCreateStatic>
 800b00c:	0003      	movs	r3, r0
 800b00e:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b01c:	697b      	ldr	r3, [r7, #20]
	}
 800b01e:	0018      	movs	r0, r3
 800b020:	46bd      	mov	sp, r7
 800b022:	b006      	add	sp, #24
 800b024:	bd80      	pop	{r7, pc}

0800b026 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <xQueueCreateCountingSemaphore+0x14>
 800b036:	b672      	cpsid	i
 800b038:	e7fe      	b.n	800b038 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d901      	bls.n	800b046 <xQueueCreateCountingSemaphore+0x20>
 800b042:	b672      	cpsid	i
 800b044:	e7fe      	b.n	800b044 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2202      	movs	r2, #2
 800b04a:	2100      	movs	r1, #0
 800b04c:	0018      	movs	r0, r3
 800b04e:	f7ff ff67 	bl	800af20 <xQueueGenericCreate>
 800b052:	0003      	movs	r3, r0
 800b054:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b062:	68fb      	ldr	r3, [r7, #12]
	}
 800b064:	0018      	movs	r0, r3
 800b066:	46bd      	mov	sp, r7
 800b068:	b004      	add	sp, #16
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08a      	sub	sp, #40	; 0x28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b07a:	2300      	movs	r3, #0
 800b07c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <xQueueGenericSend+0x20>
 800b088:	b672      	cpsid	i
 800b08a:	e7fe      	b.n	800b08a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d103      	bne.n	800b09a <xQueueGenericSend+0x2e>
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <xQueueGenericSend+0x32>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e000      	b.n	800b0a0 <xQueueGenericSend+0x34>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <xQueueGenericSend+0x3c>
 800b0a4:	b672      	cpsid	i
 800b0a6:	e7fe      	b.n	800b0a6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d103      	bne.n	800b0b6 <xQueueGenericSend+0x4a>
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d101      	bne.n	800b0ba <xQueueGenericSend+0x4e>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e000      	b.n	800b0bc <xQueueGenericSend+0x50>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <xQueueGenericSend+0x58>
 800b0c0:	b672      	cpsid	i
 800b0c2:	e7fe      	b.n	800b0c2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0c4:	f001 fa24 	bl	800c510 <xTaskGetSchedulerState>
 800b0c8:	1e03      	subs	r3, r0, #0
 800b0ca:	d102      	bne.n	800b0d2 <xQueueGenericSend+0x66>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <xQueueGenericSend+0x6a>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <xQueueGenericSend+0x6c>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d101      	bne.n	800b0e0 <xQueueGenericSend+0x74>
 800b0dc:	b672      	cpsid	i
 800b0de:	e7fe      	b.n	800b0de <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0e0:	f002 f9d6 	bl	800d490 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d302      	bcc.n	800b0f6 <xQueueGenericSend+0x8a>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d11e      	bne.n	800b134 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f000 faab 	bl	800b658 <prvCopyDataToQueue>
 800b102:	0003      	movs	r3, r0
 800b104:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	3324      	adds	r3, #36	; 0x24
 800b112:	0018      	movs	r0, r3
 800b114:	f001 f85e 	bl	800c1d4 <xTaskRemoveFromEventList>
 800b118:	1e03      	subs	r3, r0, #0
 800b11a:	d007      	beq.n	800b12c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b11c:	f002 f9a8 	bl	800d470 <vPortYield>
 800b120:	e004      	b.n	800b12c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b128:	f002 f9a2 	bl	800d470 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b12c:	f002 f9c2 	bl	800d4b4 <vPortExitCritical>
				return pdPASS;
 800b130:	2301      	movs	r3, #1
 800b132:	e05b      	b.n	800b1ec <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b13a:	f002 f9bb 	bl	800d4b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	e054      	b.n	800b1ec <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	2b00      	cmp	r3, #0
 800b146:	d106      	bne.n	800b156 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b148:	2314      	movs	r3, #20
 800b14a:	18fb      	adds	r3, r7, r3
 800b14c:	0018      	movs	r0, r3
 800b14e:	f001 f89d 	bl	800c28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b152:	2301      	movs	r3, #1
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b156:	f002 f9ad 	bl	800d4b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b15a:	f000 fe33 	bl	800bdc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b15e:	f002 f997 	bl	800d490 <vPortEnterCritical>
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	2244      	movs	r2, #68	; 0x44
 800b166:	5c9b      	ldrb	r3, [r3, r2]
 800b168:	b25b      	sxtb	r3, r3
 800b16a:	3301      	adds	r3, #1
 800b16c:	d103      	bne.n	800b176 <xQueueGenericSend+0x10a>
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	2244      	movs	r2, #68	; 0x44
 800b172:	2100      	movs	r1, #0
 800b174:	5499      	strb	r1, [r3, r2]
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	2245      	movs	r2, #69	; 0x45
 800b17a:	5c9b      	ldrb	r3, [r3, r2]
 800b17c:	b25b      	sxtb	r3, r3
 800b17e:	3301      	adds	r3, #1
 800b180:	d103      	bne.n	800b18a <xQueueGenericSend+0x11e>
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	2245      	movs	r2, #69	; 0x45
 800b186:	2100      	movs	r1, #0
 800b188:	5499      	strb	r1, [r3, r2]
 800b18a:	f002 f993 	bl	800d4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b18e:	1d3a      	adds	r2, r7, #4
 800b190:	2314      	movs	r3, #20
 800b192:	18fb      	adds	r3, r7, r3
 800b194:	0011      	movs	r1, r2
 800b196:	0018      	movs	r0, r3
 800b198:	f001 f88c 	bl	800c2b4 <xTaskCheckForTimeOut>
 800b19c:	1e03      	subs	r3, r0, #0
 800b19e:	d11e      	bne.n	800b1de <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f000 fb5d 	bl	800b862 <prvIsQueueFull>
 800b1a8:	1e03      	subs	r3, r0, #0
 800b1aa:	d011      	beq.n	800b1d0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	3310      	adds	r3, #16
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	0011      	movs	r1, r2
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f000 ffc9 	bl	800c14c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f000 fadc 	bl	800b77a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1c2:	f000 fe0b 	bl	800bddc <xTaskResumeAll>
 800b1c6:	1e03      	subs	r3, r0, #0
 800b1c8:	d18a      	bne.n	800b0e0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800b1ca:	f002 f951 	bl	800d470 <vPortYield>
 800b1ce:	e787      	b.n	800b0e0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f000 fad1 	bl	800b77a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1d8:	f000 fe00 	bl	800bddc <xTaskResumeAll>
 800b1dc:	e780      	b.n	800b0e0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f000 faca 	bl	800b77a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1e6:	f000 fdf9 	bl	800bddc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1ea:	2300      	movs	r3, #0
		}
	}
}
 800b1ec:	0018      	movs	r0, r3
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	b00a      	add	sp, #40	; 0x28
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1f4:	b590      	push	{r4, r7, lr}
 800b1f6:	b089      	sub	sp, #36	; 0x24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <xQueueGenericSendFromISR+0x1c>
 800b20c:	b672      	cpsid	i
 800b20e:	e7fe      	b.n	800b20e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d103      	bne.n	800b21e <xQueueGenericSendFromISR+0x2a>
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <xQueueGenericSendFromISR+0x2e>
 800b21e:	2301      	movs	r3, #1
 800b220:	e000      	b.n	800b224 <xQueueGenericSendFromISR+0x30>
 800b222:	2300      	movs	r3, #0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <xQueueGenericSendFromISR+0x38>
 800b228:	b672      	cpsid	i
 800b22a:	e7fe      	b.n	800b22a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d103      	bne.n	800b23a <xQueueGenericSendFromISR+0x46>
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b236:	2b01      	cmp	r3, #1
 800b238:	d101      	bne.n	800b23e <xQueueGenericSendFromISR+0x4a>
 800b23a:	2301      	movs	r3, #1
 800b23c:	e000      	b.n	800b240 <xQueueGenericSendFromISR+0x4c>
 800b23e:	2300      	movs	r3, #0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <xQueueGenericSendFromISR+0x54>
 800b244:	b672      	cpsid	i
 800b246:	e7fe      	b.n	800b246 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b248:	f002 f94c 	bl	800d4e4 <ulSetInterruptMaskFromISR>
 800b24c:	0003      	movs	r3, r0
 800b24e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b258:	429a      	cmp	r2, r3
 800b25a:	d302      	bcc.n	800b262 <xQueueGenericSendFromISR+0x6e>
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d12e      	bne.n	800b2c0 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b262:	2413      	movs	r4, #19
 800b264:	193b      	adds	r3, r7, r4
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	2145      	movs	r1, #69	; 0x45
 800b26a:	5c52      	ldrb	r2, [r2, r1]
 800b26c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	0018      	movs	r0, r3
 800b276:	f000 f9ef 	bl	800b658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b27a:	193b      	adds	r3, r7, r4
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b25b      	sxtb	r3, r3
 800b280:	3301      	adds	r3, #1
 800b282:	d111      	bne.n	800b2a8 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d016      	beq.n	800b2ba <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	3324      	adds	r3, #36	; 0x24
 800b290:	0018      	movs	r0, r3
 800b292:	f000 ff9f 	bl	800c1d4 <xTaskRemoveFromEventList>
 800b296:	1e03      	subs	r3, r0, #0
 800b298:	d00f      	beq.n	800b2ba <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00c      	beq.n	800b2ba <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	e008      	b.n	800b2ba <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2a8:	2313      	movs	r3, #19
 800b2aa:	18fb      	adds	r3, r7, r3
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	b259      	sxtb	r1, r3
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	2245      	movs	r2, #69	; 0x45
 800b2b8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	61fb      	str	r3, [r7, #28]
		{
 800b2be:	e001      	b.n	800b2c4 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	0018      	movs	r0, r3
 800b2c8:	f002 f912 	bl	800d4f0 <vClearInterruptMaskFromISR>

	return xReturn;
 800b2cc:	69fb      	ldr	r3, [r7, #28]
}
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	b009      	add	sp, #36	; 0x24
 800b2d4:	bd90      	pop	{r4, r7, pc}

0800b2d6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b08a      	sub	sp, #40	; 0x28
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d101      	bne.n	800b2f4 <xQueueReceive+0x1e>
 800b2f0:	b672      	cpsid	i
 800b2f2:	e7fe      	b.n	800b2f2 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d103      	bne.n	800b302 <xQueueReceive+0x2c>
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <xQueueReceive+0x30>
 800b302:	2301      	movs	r3, #1
 800b304:	e000      	b.n	800b308 <xQueueReceive+0x32>
 800b306:	2300      	movs	r3, #0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <xQueueReceive+0x3a>
 800b30c:	b672      	cpsid	i
 800b30e:	e7fe      	b.n	800b30e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b310:	f001 f8fe 	bl	800c510 <xTaskGetSchedulerState>
 800b314:	1e03      	subs	r3, r0, #0
 800b316:	d102      	bne.n	800b31e <xQueueReceive+0x48>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <xQueueReceive+0x4c>
 800b31e:	2301      	movs	r3, #1
 800b320:	e000      	b.n	800b324 <xQueueReceive+0x4e>
 800b322:	2300      	movs	r3, #0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <xQueueReceive+0x56>
 800b328:	b672      	cpsid	i
 800b32a:	e7fe      	b.n	800b32a <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b32c:	f002 f8b0 	bl	800d490 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b334:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01a      	beq.n	800b372 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	0011      	movs	r1, r2
 800b342:	0018      	movs	r0, r3
 800b344:	f000 f9f3 	bl	800b72e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	1e5a      	subs	r2, r3, #1
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d008      	beq.n	800b36a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	3310      	adds	r3, #16
 800b35c:	0018      	movs	r0, r3
 800b35e:	f000 ff39 	bl	800c1d4 <xTaskRemoveFromEventList>
 800b362:	1e03      	subs	r3, r0, #0
 800b364:	d001      	beq.n	800b36a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b366:	f002 f883 	bl	800d470 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b36a:	f002 f8a3 	bl	800d4b4 <vPortExitCritical>
				return pdPASS;
 800b36e:	2301      	movs	r3, #1
 800b370:	e062      	b.n	800b438 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d103      	bne.n	800b380 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b378:	f002 f89c 	bl	800d4b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b37c:	2300      	movs	r3, #0
 800b37e:	e05b      	b.n	800b438 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b386:	2314      	movs	r3, #20
 800b388:	18fb      	adds	r3, r7, r3
 800b38a:	0018      	movs	r0, r3
 800b38c:	f000 ff7e 	bl	800c28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b390:	2301      	movs	r3, #1
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b394:	f002 f88e 	bl	800d4b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b398:	f000 fd14 	bl	800bdc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b39c:	f002 f878 	bl	800d490 <vPortEnterCritical>
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	2244      	movs	r2, #68	; 0x44
 800b3a4:	5c9b      	ldrb	r3, [r3, r2]
 800b3a6:	b25b      	sxtb	r3, r3
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	d103      	bne.n	800b3b4 <xQueueReceive+0xde>
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	2244      	movs	r2, #68	; 0x44
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	5499      	strb	r1, [r3, r2]
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	2245      	movs	r2, #69	; 0x45
 800b3b8:	5c9b      	ldrb	r3, [r3, r2]
 800b3ba:	b25b      	sxtb	r3, r3
 800b3bc:	3301      	adds	r3, #1
 800b3be:	d103      	bne.n	800b3c8 <xQueueReceive+0xf2>
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	2245      	movs	r2, #69	; 0x45
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	5499      	strb	r1, [r3, r2]
 800b3c8:	f002 f874 	bl	800d4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3cc:	1d3a      	adds	r2, r7, #4
 800b3ce:	2314      	movs	r3, #20
 800b3d0:	18fb      	adds	r3, r7, r3
 800b3d2:	0011      	movs	r1, r2
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	f000 ff6d 	bl	800c2b4 <xTaskCheckForTimeOut>
 800b3da:	1e03      	subs	r3, r0, #0
 800b3dc:	d11e      	bne.n	800b41c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	f000 fa28 	bl	800b836 <prvIsQueueEmpty>
 800b3e6:	1e03      	subs	r3, r0, #0
 800b3e8:	d011      	beq.n	800b40e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	3324      	adds	r3, #36	; 0x24
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	0011      	movs	r1, r2
 800b3f2:	0018      	movs	r0, r3
 800b3f4:	f000 feaa 	bl	800c14c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f000 f9bd 	bl	800b77a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b400:	f000 fcec 	bl	800bddc <xTaskResumeAll>
 800b404:	1e03      	subs	r3, r0, #0
 800b406:	d191      	bne.n	800b32c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800b408:	f002 f832 	bl	800d470 <vPortYield>
 800b40c:	e78e      	b.n	800b32c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	0018      	movs	r0, r3
 800b412:	f000 f9b2 	bl	800b77a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b416:	f000 fce1 	bl	800bddc <xTaskResumeAll>
 800b41a:	e787      	b.n	800b32c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	0018      	movs	r0, r3
 800b420:	f000 f9ab 	bl	800b77a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b424:	f000 fcda 	bl	800bddc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	0018      	movs	r0, r3
 800b42c:	f000 fa03 	bl	800b836 <prvIsQueueEmpty>
 800b430:	1e03      	subs	r3, r0, #0
 800b432:	d100      	bne.n	800b436 <xQueueReceive+0x160>
 800b434:	e77a      	b.n	800b32c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b438:	0018      	movs	r0, r3
 800b43a:	46bd      	mov	sp, r7
 800b43c:	b00a      	add	sp, #40	; 0x28
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08a      	sub	sp, #40	; 0x28
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b452:	2300      	movs	r3, #0
 800b454:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <xQueueSemaphoreTake+0x20>
 800b45c:	b672      	cpsid	i
 800b45e:	e7fe      	b.n	800b45e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <xQueueSemaphoreTake+0x2c>
 800b468:	b672      	cpsid	i
 800b46a:	e7fe      	b.n	800b46a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b46c:	f001 f850 	bl	800c510 <xTaskGetSchedulerState>
 800b470:	1e03      	subs	r3, r0, #0
 800b472:	d102      	bne.n	800b47a <xQueueSemaphoreTake+0x3a>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <xQueueSemaphoreTake+0x3e>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <xQueueSemaphoreTake+0x40>
 800b47e:	2300      	movs	r3, #0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <xQueueSemaphoreTake+0x48>
 800b484:	b672      	cpsid	i
 800b486:	e7fe      	b.n	800b486 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b488:	f002 f802 	bl	800d490 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b490:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01d      	beq.n	800b4d4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	1e5a      	subs	r2, r3, #1
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d104      	bne.n	800b4b2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b4a8:	f001 f98c 	bl	800c7c4 <pvTaskIncrementMutexHeldCount>
 800b4ac:	0002      	movs	r2, r0
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d008      	beq.n	800b4cc <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	3310      	adds	r3, #16
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f000 fe88 	bl	800c1d4 <xTaskRemoveFromEventList>
 800b4c4:	1e03      	subs	r3, r0, #0
 800b4c6:	d001      	beq.n	800b4cc <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4c8:	f001 ffd2 	bl	800d470 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4cc:	f001 fff2 	bl	800d4b4 <vPortExitCritical>
				return pdPASS;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e08b      	b.n	800b5ec <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d108      	bne.n	800b4ec <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <xQueueSemaphoreTake+0xa4>
 800b4e0:	b672      	cpsid	i
 800b4e2:	e7fe      	b.n	800b4e2 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b4e4:	f001 ffe6 	bl	800d4b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	e07f      	b.n	800b5ec <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d106      	bne.n	800b500 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	18fb      	adds	r3, r7, r3
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f000 fec8 	bl	800c28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b500:	f001 ffd8 	bl	800d4b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b504:	f000 fc5e 	bl	800bdc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b508:	f001 ffc2 	bl	800d490 <vPortEnterCritical>
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	2244      	movs	r2, #68	; 0x44
 800b510:	5c9b      	ldrb	r3, [r3, r2]
 800b512:	b25b      	sxtb	r3, r3
 800b514:	3301      	adds	r3, #1
 800b516:	d103      	bne.n	800b520 <xQueueSemaphoreTake+0xe0>
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	2244      	movs	r2, #68	; 0x44
 800b51c:	2100      	movs	r1, #0
 800b51e:	5499      	strb	r1, [r3, r2]
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	2245      	movs	r2, #69	; 0x45
 800b524:	5c9b      	ldrb	r3, [r3, r2]
 800b526:	b25b      	sxtb	r3, r3
 800b528:	3301      	adds	r3, #1
 800b52a:	d103      	bne.n	800b534 <xQueueSemaphoreTake+0xf4>
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	2245      	movs	r2, #69	; 0x45
 800b530:	2100      	movs	r1, #0
 800b532:	5499      	strb	r1, [r3, r2]
 800b534:	f001 ffbe 	bl	800d4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b538:	003a      	movs	r2, r7
 800b53a:	230c      	movs	r3, #12
 800b53c:	18fb      	adds	r3, r7, r3
 800b53e:	0011      	movs	r1, r2
 800b540:	0018      	movs	r0, r3
 800b542:	f000 feb7 	bl	800c2b4 <xTaskCheckForTimeOut>
 800b546:	1e03      	subs	r3, r0, #0
 800b548:	d12e      	bne.n	800b5a8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	0018      	movs	r0, r3
 800b54e:	f000 f972 	bl	800b836 <prvIsQueueEmpty>
 800b552:	1e03      	subs	r3, r0, #0
 800b554:	d021      	beq.n	800b59a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800b55e:	f001 ff97 	bl	800d490 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	0018      	movs	r0, r3
 800b568:	f000 ffee 	bl	800c548 <xTaskPriorityInherit>
 800b56c:	0003      	movs	r3, r0
 800b56e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800b570:	f001 ffa0 	bl	800d4b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	3324      	adds	r3, #36	; 0x24
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	0011      	movs	r1, r2
 800b57c:	0018      	movs	r0, r3
 800b57e:	f000 fde5 	bl	800c14c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	0018      	movs	r0, r3
 800b586:	f000 f8f8 	bl	800b77a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b58a:	f000 fc27 	bl	800bddc <xTaskResumeAll>
 800b58e:	1e03      	subs	r3, r0, #0
 800b590:	d000      	beq.n	800b594 <xQueueSemaphoreTake+0x154>
 800b592:	e779      	b.n	800b488 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800b594:	f001 ff6c 	bl	800d470 <vPortYield>
 800b598:	e776      	b.n	800b488 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	0018      	movs	r0, r3
 800b59e:	f000 f8ec 	bl	800b77a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5a2:	f000 fc1b 	bl	800bddc <xTaskResumeAll>
 800b5a6:	e76f      	b.n	800b488 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	0018      	movs	r0, r3
 800b5ac:	f000 f8e5 	bl	800b77a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5b0:	f000 fc14 	bl	800bddc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	0018      	movs	r0, r3
 800b5b8:	f000 f93d 	bl	800b836 <prvIsQueueEmpty>
 800b5bc:	1e03      	subs	r3, r0, #0
 800b5be:	d100      	bne.n	800b5c2 <xQueueSemaphoreTake+0x182>
 800b5c0:	e762      	b.n	800b488 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d010      	beq.n	800b5ea <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800b5c8:	f001 ff62 	bl	800d490 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	f000 f82c 	bl	800b62c <prvGetDisinheritPriorityAfterTimeout>
 800b5d4:	0003      	movs	r3, r0
 800b5d6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	0011      	movs	r1, r2
 800b5e0:	0018      	movs	r0, r3
 800b5e2:	f001 f87b 	bl	800c6dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b5e6:	f001 ff65 	bl	800d4b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	b00a      	add	sp, #40	; 0x28
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <vQueueDelete+0x16>
 800b606:	b672      	cpsid	i
 800b608:	e7fe      	b.n	800b608 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	0018      	movs	r0, r3
 800b60e:	f000 f969 	bl	800b8e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2246      	movs	r2, #70	; 0x46
 800b616:	5c9b      	ldrb	r3, [r3, r2]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d103      	bne.n	800b624 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	0018      	movs	r0, r3
 800b620:	f002 f874 	bl	800d70c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b624:	46c0      	nop			; (mov r8, r8)
 800b626:	46bd      	mov	sp, r7
 800b628:	b004      	add	sp, #16
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d006      	beq.n	800b64a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2238      	movs	r2, #56	; 0x38
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	e001      	b.n	800b64e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b64e:	68fb      	ldr	r3, [r7, #12]
	}
 800b650:	0018      	movs	r0, r3
 800b652:	46bd      	mov	sp, r7
 800b654:	b004      	add	sp, #16
 800b656:	bd80      	pop	{r7, pc}

0800b658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b664:	2300      	movs	r3, #0
 800b666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10e      	bne.n	800b694 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d14e      	bne.n	800b71c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	0018      	movs	r0, r3
 800b684:	f000 ffce 	bl	800c624 <xTaskPriorityDisinherit>
 800b688:	0003      	movs	r3, r0
 800b68a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	605a      	str	r2, [r3, #4]
 800b692:	e043      	b.n	800b71c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d119      	bne.n	800b6ce <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6898      	ldr	r0, [r3, #8]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	0019      	movs	r1, r3
 800b6a6:	f002 fa79 	bl	800db9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	689a      	ldr	r2, [r3, #8]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	18d2      	adds	r2, r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d32b      	bcc.n	800b71c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	609a      	str	r2, [r3, #8]
 800b6cc:	e026      	b.n	800b71c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68d8      	ldr	r0, [r3, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	0019      	movs	r1, r3
 800b6da:	f002 fa5f 	bl	800db9c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	68da      	ldr	r2, [r3, #12]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e6:	425b      	negs	r3, r3
 800b6e8:	18d2      	adds	r2, r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d207      	bcs.n	800b70a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	425b      	negs	r3, r3
 800b704:	18d2      	adds	r2, r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d105      	bne.n	800b71c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	3b01      	subs	r3, #1
 800b71a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	1c5a      	adds	r2, r3, #1
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b724:	697b      	ldr	r3, [r7, #20]
}
 800b726:	0018      	movs	r0, r3
 800b728:	46bd      	mov	sp, r7
 800b72a:	b006      	add	sp, #24
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d018      	beq.n	800b772 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68da      	ldr	r2, [r3, #12]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b748:	18d2      	adds	r2, r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d303      	bcc.n	800b762 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68d9      	ldr	r1, [r3, #12]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	0018      	movs	r0, r3
 800b76e:	f002 fa15 	bl	800db9c <memcpy>
	}
}
 800b772:	46c0      	nop			; (mov r8, r8)
 800b774:	46bd      	mov	sp, r7
 800b776:	b002      	add	sp, #8
 800b778:	bd80      	pop	{r7, pc}

0800b77a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b782:	f001 fe85 	bl	800d490 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b786:	230f      	movs	r3, #15
 800b788:	18fb      	adds	r3, r7, r3
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	2145      	movs	r1, #69	; 0x45
 800b78e:	5c52      	ldrb	r2, [r2, r1]
 800b790:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b792:	e013      	b.n	800b7bc <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d016      	beq.n	800b7ca <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3324      	adds	r3, #36	; 0x24
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	f000 fd17 	bl	800c1d4 <xTaskRemoveFromEventList>
 800b7a6:	1e03      	subs	r3, r0, #0
 800b7a8:	d001      	beq.n	800b7ae <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b7aa:	f000 fdd3 	bl	800c354 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b7ae:	210f      	movs	r1, #15
 800b7b0:	187b      	adds	r3, r7, r1
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	187b      	adds	r3, r7, r1
 800b7ba:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7bc:	230f      	movs	r3, #15
 800b7be:	18fb      	adds	r3, r7, r3
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	b25b      	sxtb	r3, r3
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dce5      	bgt.n	800b794 <prvUnlockQueue+0x1a>
 800b7c8:	e000      	b.n	800b7cc <prvUnlockQueue+0x52>
					break;
 800b7ca:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2245      	movs	r2, #69	; 0x45
 800b7d0:	21ff      	movs	r1, #255	; 0xff
 800b7d2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b7d4:	f001 fe6e 	bl	800d4b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b7d8:	f001 fe5a 	bl	800d490 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b7dc:	230e      	movs	r3, #14
 800b7de:	18fb      	adds	r3, r7, r3
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	2144      	movs	r1, #68	; 0x44
 800b7e4:	5c52      	ldrb	r2, [r2, r1]
 800b7e6:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7e8:	e013      	b.n	800b812 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d016      	beq.n	800b820 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	3310      	adds	r3, #16
 800b7f6:	0018      	movs	r0, r3
 800b7f8:	f000 fcec 	bl	800c1d4 <xTaskRemoveFromEventList>
 800b7fc:	1e03      	subs	r3, r0, #0
 800b7fe:	d001      	beq.n	800b804 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800b800:	f000 fda8 	bl	800c354 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b804:	210e      	movs	r1, #14
 800b806:	187b      	adds	r3, r7, r1
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	187b      	adds	r3, r7, r1
 800b810:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b812:	230e      	movs	r3, #14
 800b814:	18fb      	adds	r3, r7, r3
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dce5      	bgt.n	800b7ea <prvUnlockQueue+0x70>
 800b81e:	e000      	b.n	800b822 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800b820:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2244      	movs	r2, #68	; 0x44
 800b826:	21ff      	movs	r1, #255	; 0xff
 800b828:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b82a:	f001 fe43 	bl	800d4b4 <vPortExitCritical>
}
 800b82e:	46c0      	nop			; (mov r8, r8)
 800b830:	46bd      	mov	sp, r7
 800b832:	b004      	add	sp, #16
 800b834:	bd80      	pop	{r7, pc}

0800b836 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b83e:	f001 fe27 	bl	800d490 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b84a:	2301      	movs	r3, #1
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	e001      	b.n	800b854 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b850:	2300      	movs	r3, #0
 800b852:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b854:	f001 fe2e 	bl	800d4b4 <vPortExitCritical>

	return xReturn;
 800b858:	68fb      	ldr	r3, [r7, #12]
}
 800b85a:	0018      	movs	r0, r3
 800b85c:	46bd      	mov	sp, r7
 800b85e:	b004      	add	sp, #16
 800b860:	bd80      	pop	{r7, pc}

0800b862 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b084      	sub	sp, #16
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b86a:	f001 fe11 	bl	800d490 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b876:	429a      	cmp	r2, r3
 800b878:	d102      	bne.n	800b880 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e001      	b.n	800b884 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b884:	f001 fe16 	bl	800d4b4 <vPortExitCritical>

	return xReturn;
 800b888:	68fb      	ldr	r3, [r7, #12]
}
 800b88a:	0018      	movs	r0, r3
 800b88c:	46bd      	mov	sp, r7
 800b88e:	b004      	add	sp, #16
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b89e:	2300      	movs	r3, #0
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	e015      	b.n	800b8d0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b8a4:	4b0e      	ldr	r3, [pc, #56]	; (800b8e0 <vQueueAddToRegistry+0x4c>)
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	00d2      	lsls	r2, r2, #3
 800b8aa:	58d3      	ldr	r3, [r2, r3]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10c      	bne.n	800b8ca <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	; (800b8e0 <vQueueAddToRegistry+0x4c>)
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	00d2      	lsls	r2, r2, #3
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b8ba:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <vQueueAddToRegistry+0x4c>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	18d3      	adds	r3, r2, r3
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b8c8:	e006      	b.n	800b8d8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b07      	cmp	r3, #7
 800b8d4:	d9e6      	bls.n	800b8a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b8d6:	46c0      	nop			; (mov r8, r8)
 800b8d8:	46c0      	nop			; (mov r8, r8)
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b004      	add	sp, #16
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20001154 	.word	0x20001154

0800b8e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	e018      	b.n	800b924 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b8f2:	4a10      	ldr	r2, [pc, #64]	; (800b934 <vQueueUnregisterQueue+0x50>)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	18d3      	adds	r3, r2, r3
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d10c      	bne.n	800b91e <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b904:	4b0b      	ldr	r3, [pc, #44]	; (800b934 <vQueueUnregisterQueue+0x50>)
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	00d2      	lsls	r2, r2, #3
 800b90a:	2100      	movs	r1, #0
 800b90c:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b90e:	4a09      	ldr	r2, [pc, #36]	; (800b934 <vQueueUnregisterQueue+0x50>)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	18d3      	adds	r3, r2, r3
 800b916:	3304      	adds	r3, #4
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]
				break;
 800b91c:	e006      	b.n	800b92c <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3301      	adds	r3, #1
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2b07      	cmp	r3, #7
 800b928:	d9e3      	bls.n	800b8f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b92a:	46c0      	nop			; (mov r8, r8)
 800b92c:	46c0      	nop			; (mov r8, r8)
 800b92e:	46bd      	mov	sp, r7
 800b930:	b004      	add	sp, #16
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20001154 	.word	0x20001154

0800b938 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b948:	f001 fda2 	bl	800d490 <vPortEnterCritical>
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	2244      	movs	r2, #68	; 0x44
 800b950:	5c9b      	ldrb	r3, [r3, r2]
 800b952:	b25b      	sxtb	r3, r3
 800b954:	3301      	adds	r3, #1
 800b956:	d103      	bne.n	800b960 <vQueueWaitForMessageRestricted+0x28>
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	2244      	movs	r2, #68	; 0x44
 800b95c:	2100      	movs	r1, #0
 800b95e:	5499      	strb	r1, [r3, r2]
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2245      	movs	r2, #69	; 0x45
 800b964:	5c9b      	ldrb	r3, [r3, r2]
 800b966:	b25b      	sxtb	r3, r3
 800b968:	3301      	adds	r3, #1
 800b96a:	d103      	bne.n	800b974 <vQueueWaitForMessageRestricted+0x3c>
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2245      	movs	r2, #69	; 0x45
 800b970:	2100      	movs	r1, #0
 800b972:	5499      	strb	r1, [r3, r2]
 800b974:	f001 fd9e 	bl	800d4b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d106      	bne.n	800b98e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	3324      	adds	r3, #36	; 0x24
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	68b9      	ldr	r1, [r7, #8]
 800b988:	0018      	movs	r0, r3
 800b98a:	f000 fbfd 	bl	800c188 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	0018      	movs	r0, r3
 800b992:	f7ff fef2 	bl	800b77a <prvUnlockQueue>
	}
 800b996:	46c0      	nop			; (mov r8, r8)
 800b998:	46bd      	mov	sp, r7
 800b99a:	b006      	add	sp, #24
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b99e:	b590      	push	{r4, r7, lr}
 800b9a0:	b08d      	sub	sp, #52	; 0x34
 800b9a2:	af04      	add	r7, sp, #16
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607a      	str	r2, [r7, #4]
 800b9aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <xTaskCreateStatic+0x18>
 800b9b2:	b672      	cpsid	i
 800b9b4:	e7fe      	b.n	800b9b4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <xTaskCreateStatic+0x22>
 800b9bc:	b672      	cpsid	i
 800b9be:	e7fe      	b.n	800b9be <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b9c0:	23a8      	movs	r3, #168	; 0xa8
 800b9c2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	2ba8      	cmp	r3, #168	; 0xa8
 800b9c8:	d001      	beq.n	800b9ce <xTaskCreateStatic+0x30>
 800b9ca:	b672      	cpsid	i
 800b9cc:	e7fe      	b.n	800b9cc <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d020      	beq.n	800ba16 <xTaskCreateStatic+0x78>
 800b9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d01d      	beq.n	800ba16 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	22a5      	movs	r2, #165	; 0xa5
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b9ec:	683c      	ldr	r4, [r7, #0]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	68b9      	ldr	r1, [r7, #8]
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	2318      	movs	r3, #24
 800b9fe:	18fb      	adds	r3, r7, r3
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	0023      	movs	r3, r4
 800ba08:	f000 f858 	bl	800babc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	0018      	movs	r0, r3
 800ba10:	f000 f8ec 	bl	800bbec <prvAddNewTaskToReadyList>
 800ba14:	e001      	b.n	800ba1a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba1a:	69bb      	ldr	r3, [r7, #24]
	}
 800ba1c:	0018      	movs	r0, r3
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	b009      	add	sp, #36	; 0x24
 800ba22:	bd90      	pop	{r4, r7, pc}

0800ba24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba24:	b590      	push	{r4, r7, lr}
 800ba26:	b08d      	sub	sp, #52	; 0x34
 800ba28:	af04      	add	r7, sp, #16
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	1dbb      	adds	r3, r7, #6
 800ba32:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba34:	1dbb      	adds	r3, r7, #6
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f001 fdc0 	bl	800d5c0 <pvPortMalloc>
 800ba40:	0003      	movs	r3, r0
 800ba42:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d010      	beq.n	800ba6c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ba4a:	20a8      	movs	r0, #168	; 0xa8
 800ba4c:	f001 fdb8 	bl	800d5c0 <pvPortMalloc>
 800ba50:	0003      	movs	r3, r0
 800ba52:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30
 800ba60:	e006      	b.n	800ba70 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	0018      	movs	r0, r3
 800ba66:	f001 fe51 	bl	800d70c <vPortFree>
 800ba6a:	e001      	b.n	800ba70 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d01a      	beq.n	800baac <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	22a5      	movs	r2, #165	; 0xa5
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba7e:	1dbb      	adds	r3, r7, #6
 800ba80:	881a      	ldrh	r2, [r3, #0]
 800ba82:	683c      	ldr	r4, [r7, #0]
 800ba84:	68b9      	ldr	r1, [r7, #8]
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9303      	str	r3, [sp, #12]
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	0023      	movs	r3, r4
 800ba9a:	f000 f80f 	bl	800babc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	0018      	movs	r0, r3
 800baa2:	f000 f8a3 	bl	800bbec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800baa6:	2301      	movs	r3, #1
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	e002      	b.n	800bab2 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800baac:	2301      	movs	r3, #1
 800baae:	425b      	negs	r3, r3
 800bab0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bab2:	69bb      	ldr	r3, [r7, #24]
	}
 800bab4:	0018      	movs	r0, r3
 800bab6:	46bd      	mov	sp, r7
 800bab8:	b009      	add	sp, #36	; 0x24
 800baba:	bd90      	pop	{r4, r7, pc}

0800babc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bacc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	001a      	movs	r2, r3
 800bad4:	21a5      	movs	r1, #165	; 0xa5
 800bad6:	f001 ffd5 	bl	800da84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	493e      	ldr	r1, [pc, #248]	; (800bbdc <prvInitialiseNewTask+0x120>)
 800bae2:	468c      	mov	ip, r1
 800bae4:	4463      	add	r3, ip
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	18d3      	adds	r3, r2, r3
 800baea:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	2207      	movs	r2, #7
 800baf0:	4393      	bics	r3, r2
 800baf2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2207      	movs	r2, #7
 800baf8:	4013      	ands	r3, r2
 800bafa:	d001      	beq.n	800bb00 <prvInitialiseNewTask+0x44>
 800bafc:	b672      	cpsid	i
 800bafe:	e7fe      	b.n	800bafe <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb00:	2300      	movs	r3, #0
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	e013      	b.n	800bb2e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	18d3      	adds	r3, r2, r3
 800bb0c:	7818      	ldrb	r0, [r3, #0]
 800bb0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb10:	2134      	movs	r1, #52	; 0x34
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	18d3      	adds	r3, r2, r3
 800bb16:	185b      	adds	r3, r3, r1
 800bb18:	1c02      	adds	r2, r0, #0
 800bb1a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	18d3      	adds	r3, r2, r3
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d006      	beq.n	800bb36 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	2b0f      	cmp	r3, #15
 800bb32:	d9e8      	bls.n	800bb06 <prvInitialiseNewTask+0x4a>
 800bb34:	e000      	b.n	800bb38 <prvInitialiseNewTask+0x7c>
		{
			break;
 800bb36:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	2243      	movs	r2, #67	; 0x43
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	2b37      	cmp	r3, #55	; 0x37
 800bb44:	d901      	bls.n	800bb4a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb46:	2337      	movs	r3, #55	; 0x37
 800bb48:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	6a3a      	ldr	r2, [r7, #32]
 800bb4e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	6a3a      	ldr	r2, [r7, #32]
 800bb54:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb58:	2200      	movs	r2, #0
 800bb5a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	3304      	adds	r3, #4
 800bb60:	0018      	movs	r0, r3
 800bb62:	f7ff f8b3 	bl	800accc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb68:	3318      	adds	r3, #24
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f7ff f8ae 	bl	800accc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	2238      	movs	r2, #56	; 0x38
 800bb7a:	1ad2      	subs	r2, r2, r3
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb84:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	22a0      	movs	r2, #160	; 0xa0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	22a4      	movs	r2, #164	; 0xa4
 800bb92:	2100      	movs	r1, #0
 800bb94:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	3354      	adds	r3, #84	; 0x54
 800bb9a:	224c      	movs	r2, #76	; 0x4c
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	0018      	movs	r0, r3
 800bba0:	f001 ff70 	bl	800da84 <memset>
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	4a0e      	ldr	r2, [pc, #56]	; (800bbe0 <prvInitialiseNewTask+0x124>)
 800bba8:	659a      	str	r2, [r3, #88]	; 0x58
 800bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbac:	4a0d      	ldr	r2, [pc, #52]	; (800bbe4 <prvInitialiseNewTask+0x128>)
 800bbae:	65da      	str	r2, [r3, #92]	; 0x5c
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	4a0d      	ldr	r2, [pc, #52]	; (800bbe8 <prvInitialiseNewTask+0x12c>)
 800bbb4:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	68f9      	ldr	r1, [r7, #12]
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f001 fbcb 	bl	800d358 <pxPortInitialiseStack>
 800bbc2:	0002      	movs	r2, r0
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbd4:	46c0      	nop			; (mov r8, r8)
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	b006      	add	sp, #24
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	3fffffff 	.word	0x3fffffff
 800bbe0:	200023d8 	.word	0x200023d8
 800bbe4:	20002440 	.word	0x20002440
 800bbe8:	200024a8 	.word	0x200024a8

0800bbec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbf4:	f001 fc4c 	bl	800d490 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbf8:	4b2a      	ldr	r3, [pc, #168]	; (800bca4 <prvAddNewTaskToReadyList+0xb8>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	4b29      	ldr	r3, [pc, #164]	; (800bca4 <prvAddNewTaskToReadyList+0xb8>)
 800bc00:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800bc02:	4b29      	ldr	r3, [pc, #164]	; (800bca8 <prvAddNewTaskToReadyList+0xbc>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d109      	bne.n	800bc1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bc0a:	4b27      	ldr	r3, [pc, #156]	; (800bca8 <prvAddNewTaskToReadyList+0xbc>)
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc10:	4b24      	ldr	r3, [pc, #144]	; (800bca4 <prvAddNewTaskToReadyList+0xb8>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d110      	bne.n	800bc3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc18:	f000 fbb6 	bl	800c388 <prvInitialiseTaskLists>
 800bc1c:	e00d      	b.n	800bc3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc1e:	4b23      	ldr	r3, [pc, #140]	; (800bcac <prvAddNewTaskToReadyList+0xc0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d109      	bne.n	800bc3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc26:	4b20      	ldr	r3, [pc, #128]	; (800bca8 <prvAddNewTaskToReadyList+0xbc>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d802      	bhi.n	800bc3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc34:	4b1c      	ldr	r3, [pc, #112]	; (800bca8 <prvAddNewTaskToReadyList+0xbc>)
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc3a:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <prvAddNewTaskToReadyList+0xc4>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	4b1b      	ldr	r3, [pc, #108]	; (800bcb0 <prvAddNewTaskToReadyList+0xc4>)
 800bc42:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc44:	4b1a      	ldr	r3, [pc, #104]	; (800bcb0 <prvAddNewTaskToReadyList+0xc4>)
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc50:	4b18      	ldr	r3, [pc, #96]	; (800bcb4 <prvAddNewTaskToReadyList+0xc8>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d903      	bls.n	800bc60 <prvAddNewTaskToReadyList+0x74>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5c:	4b15      	ldr	r3, [pc, #84]	; (800bcb4 <prvAddNewTaskToReadyList+0xc8>)
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc64:	0013      	movs	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	189b      	adds	r3, r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4a12      	ldr	r2, [pc, #72]	; (800bcb8 <prvAddNewTaskToReadyList+0xcc>)
 800bc6e:	189a      	adds	r2, r3, r2
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	3304      	adds	r3, #4
 800bc74:	0019      	movs	r1, r3
 800bc76:	0010      	movs	r0, r2
 800bc78:	f7ff f833 	bl	800ace2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc7c:	f001 fc1a 	bl	800d4b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc80:	4b0a      	ldr	r3, [pc, #40]	; (800bcac <prvAddNewTaskToReadyList+0xc0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d008      	beq.n	800bc9a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc88:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <prvAddNewTaskToReadyList+0xbc>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d201      	bcs.n	800bc9a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc96:	f001 fbeb 	bl	800d470 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc9a:	46c0      	nop			; (mov r8, r8)
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	b002      	add	sp, #8
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	46c0      	nop			; (mov r8, r8)
 800bca4:	20001668 	.word	0x20001668
 800bca8:	20001194 	.word	0x20001194
 800bcac:	20001674 	.word	0x20001674
 800bcb0:	20001684 	.word	0x20001684
 800bcb4:	20001670 	.word	0x20001670
 800bcb8:	20001198 	.word	0x20001198

0800bcbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d010      	beq.n	800bcf0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bcce:	4b0d      	ldr	r3, [pc, #52]	; (800bd04 <vTaskDelay+0x48>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <vTaskDelay+0x1e>
 800bcd6:	b672      	cpsid	i
 800bcd8:	e7fe      	b.n	800bcd8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800bcda:	f000 f873 	bl	800bdc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2100      	movs	r1, #0
 800bce2:	0018      	movs	r0, r3
 800bce4:	f000 ff84 	bl	800cbf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bce8:	f000 f878 	bl	800bddc <xTaskResumeAll>
 800bcec:	0003      	movs	r3, r0
 800bcee:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800bcf6:	f001 fbbb 	bl	800d470 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcfa:	46c0      	nop			; (mov r8, r8)
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	b004      	add	sp, #16
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	20001690 	.word	0x20001690

0800bd08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd08:	b590      	push	{r4, r7, lr}
 800bd0a:	b089      	sub	sp, #36	; 0x24
 800bd0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd16:	003a      	movs	r2, r7
 800bd18:	1d39      	adds	r1, r7, #4
 800bd1a:	2308      	movs	r3, #8
 800bd1c:	18fb      	adds	r3, r7, r3
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f7fe ff86 	bl	800ac30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd24:	683c      	ldr	r4, [r7, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	491e      	ldr	r1, [pc, #120]	; (800bda4 <vTaskStartScheduler+0x9c>)
 800bd2c:	481e      	ldr	r0, [pc, #120]	; (800bda8 <vTaskStartScheduler+0xa0>)
 800bd2e:	9202      	str	r2, [sp, #8]
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	2300      	movs	r3, #0
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	2300      	movs	r3, #0
 800bd38:	0022      	movs	r2, r4
 800bd3a:	f7ff fe30 	bl	800b99e <xTaskCreateStatic>
 800bd3e:	0002      	movs	r2, r0
 800bd40:	4b1a      	ldr	r3, [pc, #104]	; (800bdac <vTaskStartScheduler+0xa4>)
 800bd42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd44:	4b19      	ldr	r3, [pc, #100]	; (800bdac <vTaskStartScheduler+0xa4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	e001      	b.n	800bd56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd52:	2300      	movs	r3, #0
 800bd54:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d103      	bne.n	800bd64 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800bd5c:	f000 ff9c 	bl	800cc98 <xTimerCreateTimerTask>
 800bd60:	0003      	movs	r3, r0
 800bd62:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d113      	bne.n	800bd92 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800bd6a:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd6c:	4b10      	ldr	r3, [pc, #64]	; (800bdb0 <vTaskStartScheduler+0xa8>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3354      	adds	r3, #84	; 0x54
 800bd72:	001a      	movs	r2, r3
 800bd74:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <vTaskStartScheduler+0xac>)
 800bd76:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd78:	4b0f      	ldr	r3, [pc, #60]	; (800bdb8 <vTaskStartScheduler+0xb0>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	4252      	negs	r2, r2
 800bd7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd80:	4b0e      	ldr	r3, [pc, #56]	; (800bdbc <vTaskStartScheduler+0xb4>)
 800bd82:	2201      	movs	r2, #1
 800bd84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bd86:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <vTaskStartScheduler+0xb8>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd8c:	f001 fb4c 	bl	800d428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd90:	e004      	b.n	800bd9c <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3301      	adds	r3, #1
 800bd96:	d101      	bne.n	800bd9c <vTaskStartScheduler+0x94>
 800bd98:	b672      	cpsid	i
 800bd9a:	e7fe      	b.n	800bd9a <vTaskStartScheduler+0x92>
}
 800bd9c:	46c0      	nop			; (mov r8, r8)
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	b005      	add	sp, #20
 800bda2:	bd90      	pop	{r4, r7, pc}
 800bda4:	0800dd1c 	.word	0x0800dd1c
 800bda8:	0800c369 	.word	0x0800c369
 800bdac:	2000168c 	.word	0x2000168c
 800bdb0:	20001194 	.word	0x20001194
 800bdb4:	20000060 	.word	0x20000060
 800bdb8:	20001688 	.word	0x20001688
 800bdbc:	20001674 	.word	0x20001674
 800bdc0:	2000166c 	.word	0x2000166c

0800bdc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bdc8:	4b03      	ldr	r3, [pc, #12]	; (800bdd8 <vTaskSuspendAll+0x14>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	4b02      	ldr	r3, [pc, #8]	; (800bdd8 <vTaskSuspendAll+0x14>)
 800bdd0:	601a      	str	r2, [r3, #0]
}
 800bdd2:	46c0      	nop			; (mov r8, r8)
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	20001690 	.word	0x20001690

0800bddc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bde6:	2300      	movs	r3, #0
 800bde8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bdea:	4b3a      	ldr	r3, [pc, #232]	; (800bed4 <xTaskResumeAll+0xf8>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <xTaskResumeAll+0x1a>
 800bdf2:	b672      	cpsid	i
 800bdf4:	e7fe      	b.n	800bdf4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdf6:	f001 fb4b 	bl	800d490 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdfa:	4b36      	ldr	r3, [pc, #216]	; (800bed4 <xTaskResumeAll+0xf8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	1e5a      	subs	r2, r3, #1
 800be00:	4b34      	ldr	r3, [pc, #208]	; (800bed4 <xTaskResumeAll+0xf8>)
 800be02:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be04:	4b33      	ldr	r3, [pc, #204]	; (800bed4 <xTaskResumeAll+0xf8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d15b      	bne.n	800bec4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be0c:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <xTaskResumeAll+0xfc>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d057      	beq.n	800bec4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be14:	e02f      	b.n	800be76 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800be16:	4b31      	ldr	r3, [pc, #196]	; (800bedc <xTaskResumeAll+0x100>)
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3318      	adds	r3, #24
 800be22:	0018      	movs	r0, r3
 800be24:	f7fe ffb5 	bl	800ad92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3304      	adds	r3, #4
 800be2c:	0018      	movs	r0, r3
 800be2e:	f7fe ffb0 	bl	800ad92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be36:	4b2a      	ldr	r3, [pc, #168]	; (800bee0 <xTaskResumeAll+0x104>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d903      	bls.n	800be46 <xTaskResumeAll+0x6a>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be42:	4b27      	ldr	r3, [pc, #156]	; (800bee0 <xTaskResumeAll+0x104>)
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4a:	0013      	movs	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	189b      	adds	r3, r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4a24      	ldr	r2, [pc, #144]	; (800bee4 <xTaskResumeAll+0x108>)
 800be54:	189a      	adds	r2, r3, r2
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3304      	adds	r3, #4
 800be5a:	0019      	movs	r1, r3
 800be5c:	0010      	movs	r0, r2
 800be5e:	f7fe ff40 	bl	800ace2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be66:	4b20      	ldr	r3, [pc, #128]	; (800bee8 <xTaskResumeAll+0x10c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d302      	bcc.n	800be76 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800be70:	4b1e      	ldr	r3, [pc, #120]	; (800beec <xTaskResumeAll+0x110>)
 800be72:	2201      	movs	r2, #1
 800be74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be76:	4b19      	ldr	r3, [pc, #100]	; (800bedc <xTaskResumeAll+0x100>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1cb      	bne.n	800be16 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be84:	f000 fb20 	bl	800c4c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800be88:	4b19      	ldr	r3, [pc, #100]	; (800bef0 <xTaskResumeAll+0x114>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00f      	beq.n	800beb4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be94:	f000 f84c 	bl	800bf30 <xTaskIncrementTick>
 800be98:	1e03      	subs	r3, r0, #0
 800be9a:	d002      	beq.n	800bea2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800be9c:	4b13      	ldr	r3, [pc, #76]	; (800beec <xTaskResumeAll+0x110>)
 800be9e:	2201      	movs	r2, #1
 800bea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1f2      	bne.n	800be94 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800beae:	4b10      	ldr	r3, [pc, #64]	; (800bef0 <xTaskResumeAll+0x114>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800beb4:	4b0d      	ldr	r3, [pc, #52]	; (800beec <xTaskResumeAll+0x110>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bebc:	2301      	movs	r3, #1
 800bebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bec0:	f001 fad6 	bl	800d470 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bec4:	f001 faf6 	bl	800d4b4 <vPortExitCritical>

	return xAlreadyYielded;
 800bec8:	68bb      	ldr	r3, [r7, #8]
}
 800beca:	0018      	movs	r0, r3
 800becc:	46bd      	mov	sp, r7
 800bece:	b004      	add	sp, #16
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	46c0      	nop			; (mov r8, r8)
 800bed4:	20001690 	.word	0x20001690
 800bed8:	20001668 	.word	0x20001668
 800bedc:	20001628 	.word	0x20001628
 800bee0:	20001670 	.word	0x20001670
 800bee4:	20001198 	.word	0x20001198
 800bee8:	20001194 	.word	0x20001194
 800beec:	2000167c 	.word	0x2000167c
 800bef0:	20001678 	.word	0x20001678

0800bef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800befa:	4b04      	ldr	r3, [pc, #16]	; (800bf0c <xTaskGetTickCount+0x18>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf00:	687b      	ldr	r3, [r7, #4]
}
 800bf02:	0018      	movs	r0, r3
 800bf04:	46bd      	mov	sp, r7
 800bf06:	b002      	add	sp, #8
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	2000166c 	.word	0x2000166c

0800bf10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bf16:	2300      	movs	r3, #0
 800bf18:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bf1a:	4b04      	ldr	r3, [pc, #16]	; (800bf2c <xTaskGetTickCountFromISR+0x1c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf20:	683b      	ldr	r3, [r7, #0]
}
 800bf22:	0018      	movs	r0, r3
 800bf24:	46bd      	mov	sp, r7
 800bf26:	b002      	add	sp, #8
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	2000166c 	.word	0x2000166c

0800bf30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf3a:	4b4c      	ldr	r3, [pc, #304]	; (800c06c <xTaskIncrementTick+0x13c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d000      	beq.n	800bf44 <xTaskIncrementTick+0x14>
 800bf42:	e083      	b.n	800c04c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf44:	4b4a      	ldr	r3, [pc, #296]	; (800c070 <xTaskIncrementTick+0x140>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf4c:	4b48      	ldr	r3, [pc, #288]	; (800c070 <xTaskIncrementTick+0x140>)
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d117      	bne.n	800bf88 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf58:	4b46      	ldr	r3, [pc, #280]	; (800c074 <xTaskIncrementTick+0x144>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <xTaskIncrementTick+0x36>
 800bf62:	b672      	cpsid	i
 800bf64:	e7fe      	b.n	800bf64 <xTaskIncrementTick+0x34>
 800bf66:	4b43      	ldr	r3, [pc, #268]	; (800c074 <xTaskIncrementTick+0x144>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	4b42      	ldr	r3, [pc, #264]	; (800c078 <xTaskIncrementTick+0x148>)
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	4b40      	ldr	r3, [pc, #256]	; (800c074 <xTaskIncrementTick+0x144>)
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	4b40      	ldr	r3, [pc, #256]	; (800c078 <xTaskIncrementTick+0x148>)
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	4b40      	ldr	r3, [pc, #256]	; (800c07c <xTaskIncrementTick+0x14c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	4b3e      	ldr	r3, [pc, #248]	; (800c07c <xTaskIncrementTick+0x14c>)
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	f000 faa0 	bl	800c4c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf88:	4b3d      	ldr	r3, [pc, #244]	; (800c080 <xTaskIncrementTick+0x150>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d34e      	bcc.n	800c030 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf92:	4b38      	ldr	r3, [pc, #224]	; (800c074 <xTaskIncrementTick+0x144>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <xTaskIncrementTick+0x70>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e000      	b.n	800bfa2 <xTaskIncrementTick+0x72>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d004      	beq.n	800bfb0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfa6:	4b36      	ldr	r3, [pc, #216]	; (800c080 <xTaskIncrementTick+0x150>)
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	4252      	negs	r2, r2
 800bfac:	601a      	str	r2, [r3, #0]
					break;
 800bfae:	e03f      	b.n	800c030 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bfb0:	4b30      	ldr	r3, [pc, #192]	; (800c074 <xTaskIncrementTick+0x144>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d203      	bcs.n	800bfd0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bfc8:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <xTaskIncrementTick+0x150>)
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	601a      	str	r2, [r3, #0]
						break;
 800bfce:	e02f      	b.n	800c030 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f7fe fedc 	bl	800ad92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d004      	beq.n	800bfec <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	3318      	adds	r3, #24
 800bfe6:	0018      	movs	r0, r3
 800bfe8:	f7fe fed3 	bl	800ad92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff0:	4b24      	ldr	r3, [pc, #144]	; (800c084 <xTaskIncrementTick+0x154>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d903      	bls.n	800c000 <xTaskIncrementTick+0xd0>
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffc:	4b21      	ldr	r3, [pc, #132]	; (800c084 <xTaskIncrementTick+0x154>)
 800bffe:	601a      	str	r2, [r3, #0]
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c004:	0013      	movs	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	189b      	adds	r3, r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4a1e      	ldr	r2, [pc, #120]	; (800c088 <xTaskIncrementTick+0x158>)
 800c00e:	189a      	adds	r2, r3, r2
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	3304      	adds	r3, #4
 800c014:	0019      	movs	r1, r3
 800c016:	0010      	movs	r0, r2
 800c018:	f7fe fe63 	bl	800ace2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c020:	4b1a      	ldr	r3, [pc, #104]	; (800c08c <xTaskIncrementTick+0x15c>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c026:	429a      	cmp	r2, r3
 800c028:	d3b3      	bcc.n	800bf92 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800c02a:	2301      	movs	r3, #1
 800c02c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c02e:	e7b0      	b.n	800bf92 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c030:	4b16      	ldr	r3, [pc, #88]	; (800c08c <xTaskIncrementTick+0x15c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c036:	4914      	ldr	r1, [pc, #80]	; (800c088 <xTaskIncrementTick+0x158>)
 800c038:	0013      	movs	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	189b      	adds	r3, r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	585b      	ldr	r3, [r3, r1]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d907      	bls.n	800c056 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c046:	2301      	movs	r3, #1
 800c048:	617b      	str	r3, [r7, #20]
 800c04a:	e004      	b.n	800c056 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c04c:	4b10      	ldr	r3, [pc, #64]	; (800c090 <xTaskIncrementTick+0x160>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <xTaskIncrementTick+0x160>)
 800c054:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c056:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <xTaskIncrementTick+0x164>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800c05e:	2301      	movs	r3, #1
 800c060:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c062:	697b      	ldr	r3, [r7, #20]
}
 800c064:	0018      	movs	r0, r3
 800c066:	46bd      	mov	sp, r7
 800c068:	b006      	add	sp, #24
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20001690 	.word	0x20001690
 800c070:	2000166c 	.word	0x2000166c
 800c074:	20001620 	.word	0x20001620
 800c078:	20001624 	.word	0x20001624
 800c07c:	20001680 	.word	0x20001680
 800c080:	20001688 	.word	0x20001688
 800c084:	20001670 	.word	0x20001670
 800c088:	20001198 	.word	0x20001198
 800c08c:	20001194 	.word	0x20001194
 800c090:	20001678 	.word	0x20001678
 800c094:	2000167c 	.word	0x2000167c

0800c098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c09e:	4b25      	ldr	r3, [pc, #148]	; (800c134 <vTaskSwitchContext+0x9c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0a6:	4b24      	ldr	r3, [pc, #144]	; (800c138 <vTaskSwitchContext+0xa0>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0ac:	e03d      	b.n	800c12a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800c0ae:	4b22      	ldr	r3, [pc, #136]	; (800c138 <vTaskSwitchContext+0xa0>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c0b4:	4b21      	ldr	r3, [pc, #132]	; (800c13c <vTaskSwitchContext+0xa4>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	607b      	str	r3, [r7, #4]
 800c0ba:	e007      	b.n	800c0cc <vTaskSwitchContext+0x34>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <vTaskSwitchContext+0x2e>
 800c0c2:	b672      	cpsid	i
 800c0c4:	e7fe      	b.n	800c0c4 <vTaskSwitchContext+0x2c>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	607b      	str	r3, [r7, #4]
 800c0cc:	491c      	ldr	r1, [pc, #112]	; (800c140 <vTaskSwitchContext+0xa8>)
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	0013      	movs	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	189b      	adds	r3, r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	585b      	ldr	r3, [r3, r1]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d0ee      	beq.n	800c0bc <vTaskSwitchContext+0x24>
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	0013      	movs	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	189b      	adds	r3, r3, r2
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4a15      	ldr	r2, [pc, #84]	; (800c140 <vTaskSwitchContext+0xa8>)
 800c0ea:	189b      	adds	r3, r3, r2
 800c0ec:	603b      	str	r3, [r7, #0]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	605a      	str	r2, [r3, #4]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	3308      	adds	r3, #8
 800c100:	429a      	cmp	r2, r3
 800c102:	d104      	bne.n	800c10e <vTaskSwitchContext+0x76>
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	605a      	str	r2, [r3, #4]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	68da      	ldr	r2, [r3, #12]
 800c114:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <vTaskSwitchContext+0xac>)
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	4b08      	ldr	r3, [pc, #32]	; (800c13c <vTaskSwitchContext+0xa4>)
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <vTaskSwitchContext+0xac>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3354      	adds	r3, #84	; 0x54
 800c124:	001a      	movs	r2, r3
 800c126:	4b08      	ldr	r3, [pc, #32]	; (800c148 <vTaskSwitchContext+0xb0>)
 800c128:	601a      	str	r2, [r3, #0]
}
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	46bd      	mov	sp, r7
 800c12e:	b002      	add	sp, #8
 800c130:	bd80      	pop	{r7, pc}
 800c132:	46c0      	nop			; (mov r8, r8)
 800c134:	20001690 	.word	0x20001690
 800c138:	2000167c 	.word	0x2000167c
 800c13c:	20001670 	.word	0x20001670
 800c140:	20001198 	.word	0x20001198
 800c144:	20001194 	.word	0x20001194
 800c148:	20000060 	.word	0x20000060

0800c14c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <vTaskPlaceOnEventList+0x14>
 800c15c:	b672      	cpsid	i
 800c15e:	e7fe      	b.n	800c15e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c160:	4b08      	ldr	r3, [pc, #32]	; (800c184 <vTaskPlaceOnEventList+0x38>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	3318      	adds	r3, #24
 800c166:	001a      	movs	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	0011      	movs	r1, r2
 800c16c:	0018      	movs	r0, r3
 800c16e:	f7fe fdda 	bl	800ad26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2101      	movs	r1, #1
 800c176:	0018      	movs	r0, r3
 800c178:	f000 fd3a 	bl	800cbf0 <prvAddCurrentTaskToDelayedList>
}
 800c17c:	46c0      	nop			; (mov r8, r8)
 800c17e:	46bd      	mov	sp, r7
 800c180:	b002      	add	sp, #8
 800c182:	bd80      	pop	{r7, pc}
 800c184:	20001194 	.word	0x20001194

0800c188 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <vTaskPlaceOnEventListRestricted+0x16>
 800c19a:	b672      	cpsid	i
 800c19c:	e7fe      	b.n	800c19c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c19e:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <vTaskPlaceOnEventListRestricted+0x48>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3318      	adds	r3, #24
 800c1a4:	001a      	movs	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	0011      	movs	r1, r2
 800c1aa:	0018      	movs	r0, r3
 800c1ac:	f7fe fd99 	bl	800ace2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d002      	beq.n	800c1bc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	425b      	negs	r3, r3
 800c1ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	0011      	movs	r1, r2
 800c1c2:	0018      	movs	r0, r3
 800c1c4:	f000 fd14 	bl	800cbf0 <prvAddCurrentTaskToDelayedList>
	}
 800c1c8:	46c0      	nop			; (mov r8, r8)
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	b004      	add	sp, #16
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20001194 	.word	0x20001194

0800c1d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <xTaskRemoveFromEventList+0x1a>
 800c1ea:	b672      	cpsid	i
 800c1ec:	e7fe      	b.n	800c1ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	3318      	adds	r3, #24
 800c1f2:	0018      	movs	r0, r3
 800c1f4:	f7fe fdcd 	bl	800ad92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1f8:	4b1e      	ldr	r3, [pc, #120]	; (800c274 <xTaskRemoveFromEventList+0xa0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d11d      	bne.n	800c23c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	3304      	adds	r3, #4
 800c204:	0018      	movs	r0, r3
 800c206:	f7fe fdc4 	bl	800ad92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20e:	4b1a      	ldr	r3, [pc, #104]	; (800c278 <xTaskRemoveFromEventList+0xa4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	429a      	cmp	r2, r3
 800c214:	d903      	bls.n	800c21e <xTaskRemoveFromEventList+0x4a>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21a:	4b17      	ldr	r3, [pc, #92]	; (800c278 <xTaskRemoveFromEventList+0xa4>)
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c222:	0013      	movs	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	189b      	adds	r3, r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	4a14      	ldr	r2, [pc, #80]	; (800c27c <xTaskRemoveFromEventList+0xa8>)
 800c22c:	189a      	adds	r2, r3, r2
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	3304      	adds	r3, #4
 800c232:	0019      	movs	r1, r3
 800c234:	0010      	movs	r0, r2
 800c236:	f7fe fd54 	bl	800ace2 <vListInsertEnd>
 800c23a:	e007      	b.n	800c24c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	3318      	adds	r3, #24
 800c240:	001a      	movs	r2, r3
 800c242:	4b0f      	ldr	r3, [pc, #60]	; (800c280 <xTaskRemoveFromEventList+0xac>)
 800c244:	0011      	movs	r1, r2
 800c246:	0018      	movs	r0, r3
 800c248:	f7fe fd4b 	bl	800ace2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c250:	4b0c      	ldr	r3, [pc, #48]	; (800c284 <xTaskRemoveFromEventList+0xb0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c256:	429a      	cmp	r2, r3
 800c258:	d905      	bls.n	800c266 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c25a:	2301      	movs	r3, #1
 800c25c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c25e:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <xTaskRemoveFromEventList+0xb4>)
 800c260:	2201      	movs	r2, #1
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	e001      	b.n	800c26a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800c266:	2300      	movs	r3, #0
 800c268:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c26a:	68fb      	ldr	r3, [r7, #12]
}
 800c26c:	0018      	movs	r0, r3
 800c26e:	46bd      	mov	sp, r7
 800c270:	b004      	add	sp, #16
 800c272:	bd80      	pop	{r7, pc}
 800c274:	20001690 	.word	0x20001690
 800c278:	20001670 	.word	0x20001670
 800c27c:	20001198 	.word	0x20001198
 800c280:	20001628 	.word	0x20001628
 800c284:	20001194 	.word	0x20001194
 800c288:	2000167c 	.word	0x2000167c

0800c28c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <vTaskInternalSetTimeOutState+0x20>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <vTaskInternalSetTimeOutState+0x24>)
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	605a      	str	r2, [r3, #4]
}
 800c2a4:	46c0      	nop			; (mov r8, r8)
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	b002      	add	sp, #8
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20001680 	.word	0x20001680
 800c2b0:	2000166c 	.word	0x2000166c

0800c2b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <xTaskCheckForTimeOut+0x14>
 800c2c4:	b672      	cpsid	i
 800c2c6:	e7fe      	b.n	800c2c6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <xTaskCheckForTimeOut+0x1e>
 800c2ce:	b672      	cpsid	i
 800c2d0:	e7fe      	b.n	800c2d0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800c2d2:	f001 f8dd 	bl	800d490 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <xTaskCheckForTimeOut+0x98>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	d102      	bne.n	800c2f4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	617b      	str	r3, [r7, #20]
 800c2f2:	e024      	b.n	800c33e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4b15      	ldr	r3, [pc, #84]	; (800c350 <xTaskCheckForTimeOut+0x9c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d007      	beq.n	800c310 <xTaskCheckForTimeOut+0x5c>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	429a      	cmp	r2, r3
 800c308:	d302      	bcc.n	800c310 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c30a:	2301      	movs	r3, #1
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	e016      	b.n	800c33e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d20c      	bcs.n	800c334 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	1ad2      	subs	r2, r2, r3
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	0018      	movs	r0, r3
 800c32a:	f7ff ffaf 	bl	800c28c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c32e:	2300      	movs	r3, #0
 800c330:	617b      	str	r3, [r7, #20]
 800c332:	e004      	b.n	800c33e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2200      	movs	r2, #0
 800c338:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c33a:	2301      	movs	r3, #1
 800c33c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c33e:	f001 f8b9 	bl	800d4b4 <vPortExitCritical>

	return xReturn;
 800c342:	697b      	ldr	r3, [r7, #20]
}
 800c344:	0018      	movs	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	b006      	add	sp, #24
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	2000166c 	.word	0x2000166c
 800c350:	20001680 	.word	0x20001680

0800c354 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c358:	4b02      	ldr	r3, [pc, #8]	; (800c364 <vTaskMissedYield+0x10>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	46c0      	nop			; (mov r8, r8)
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	2000167c 	.word	0x2000167c

0800c368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c370:	f000 f84e 	bl	800c410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c374:	4b03      	ldr	r3, [pc, #12]	; (800c384 <prvIdleTask+0x1c>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d9f9      	bls.n	800c370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c37c:	f001 f878 	bl	800d470 <vPortYield>
		prvCheckTasksWaitingTermination();
 800c380:	e7f6      	b.n	800c370 <prvIdleTask+0x8>
 800c382:	46c0      	nop			; (mov r8, r8)
 800c384:	20001198 	.word	0x20001198

0800c388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c38e:	2300      	movs	r3, #0
 800c390:	607b      	str	r3, [r7, #4]
 800c392:	e00c      	b.n	800c3ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	0013      	movs	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	189b      	adds	r3, r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	4a14      	ldr	r2, [pc, #80]	; (800c3f0 <prvInitialiseTaskLists+0x68>)
 800c3a0:	189b      	adds	r3, r3, r2
 800c3a2:	0018      	movs	r0, r3
 800c3a4:	f7fe fc74 	bl	800ac90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	607b      	str	r3, [r7, #4]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b37      	cmp	r3, #55	; 0x37
 800c3b2:	d9ef      	bls.n	800c394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <prvInitialiseTaskLists+0x6c>)
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	f7fe fc6a 	bl	800ac90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3bc:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <prvInitialiseTaskLists+0x70>)
 800c3be:	0018      	movs	r0, r3
 800c3c0:	f7fe fc66 	bl	800ac90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3c4:	4b0d      	ldr	r3, [pc, #52]	; (800c3fc <prvInitialiseTaskLists+0x74>)
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	f7fe fc62 	bl	800ac90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3cc:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <prvInitialiseTaskLists+0x78>)
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	f7fe fc5e 	bl	800ac90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3d4:	4b0b      	ldr	r3, [pc, #44]	; (800c404 <prvInitialiseTaskLists+0x7c>)
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f7fe fc5a 	bl	800ac90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <prvInitialiseTaskLists+0x80>)
 800c3de:	4a05      	ldr	r2, [pc, #20]	; (800c3f4 <prvInitialiseTaskLists+0x6c>)
 800c3e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3e2:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <prvInitialiseTaskLists+0x84>)
 800c3e4:	4a04      	ldr	r2, [pc, #16]	; (800c3f8 <prvInitialiseTaskLists+0x70>)
 800c3e6:	601a      	str	r2, [r3, #0]
}
 800c3e8:	46c0      	nop			; (mov r8, r8)
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	b002      	add	sp, #8
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20001198 	.word	0x20001198
 800c3f4:	200015f8 	.word	0x200015f8
 800c3f8:	2000160c 	.word	0x2000160c
 800c3fc:	20001628 	.word	0x20001628
 800c400:	2000163c 	.word	0x2000163c
 800c404:	20001654 	.word	0x20001654
 800c408:	20001620 	.word	0x20001620
 800c40c:	20001624 	.word	0x20001624

0800c410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c416:	e01a      	b.n	800c44e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800c418:	f001 f83a 	bl	800d490 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c41c:	4b10      	ldr	r3, [pc, #64]	; (800c460 <prvCheckTasksWaitingTermination+0x50>)
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3304      	adds	r3, #4
 800c428:	0018      	movs	r0, r3
 800c42a:	f7fe fcb2 	bl	800ad92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c42e:	4b0d      	ldr	r3, [pc, #52]	; (800c464 <prvCheckTasksWaitingTermination+0x54>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	1e5a      	subs	r2, r3, #1
 800c434:	4b0b      	ldr	r3, [pc, #44]	; (800c464 <prvCheckTasksWaitingTermination+0x54>)
 800c436:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c438:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <prvCheckTasksWaitingTermination+0x58>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	1e5a      	subs	r2, r3, #1
 800c43e:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <prvCheckTasksWaitingTermination+0x58>)
 800c440:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800c442:	f001 f837 	bl	800d4b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	0018      	movs	r0, r3
 800c44a:	f000 f80f 	bl	800c46c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c44e:	4b06      	ldr	r3, [pc, #24]	; (800c468 <prvCheckTasksWaitingTermination+0x58>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1e0      	bne.n	800c418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c456:	46c0      	nop			; (mov r8, r8)
 800c458:	46c0      	nop			; (mov r8, r8)
 800c45a:	46bd      	mov	sp, r7
 800c45c:	b002      	add	sp, #8
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	2000163c 	.word	0x2000163c
 800c464:	20001668 	.word	0x20001668
 800c468:	20001650 	.word	0x20001650

0800c46c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3354      	adds	r3, #84	; 0x54
 800c478:	0018      	movs	r0, r3
 800c47a:	f001 fb0b 	bl	800da94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	22a5      	movs	r2, #165	; 0xa5
 800c482:	5c9b      	ldrb	r3, [r3, r2]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48c:	0018      	movs	r0, r3
 800c48e:	f001 f93d 	bl	800d70c <vPortFree>
				vPortFree( pxTCB );
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	0018      	movs	r0, r3
 800c496:	f001 f939 	bl	800d70c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c49a:	e010      	b.n	800c4be <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	22a5      	movs	r2, #165	; 0xa5
 800c4a0:	5c9b      	ldrb	r3, [r3, r2]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d104      	bne.n	800c4b0 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	f001 f92f 	bl	800d70c <vPortFree>
	}
 800c4ae:	e006      	b.n	800c4be <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	22a5      	movs	r2, #165	; 0xa5
 800c4b4:	5c9b      	ldrb	r3, [r3, r2]
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d001      	beq.n	800c4be <prvDeleteTCB+0x52>
 800c4ba:	b672      	cpsid	i
 800c4bc:	e7fe      	b.n	800c4bc <prvDeleteTCB+0x50>
	}
 800c4be:	46c0      	nop			; (mov r8, r8)
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	b002      	add	sp, #8
 800c4c4:	bd80      	pop	{r7, pc}
	...

0800c4c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4ce:	4b0e      	ldr	r3, [pc, #56]	; (800c508 <prvResetNextTaskUnblockTime+0x40>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <prvResetNextTaskUnblockTime+0x14>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e000      	b.n	800c4de <prvResetNextTaskUnblockTime+0x16>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d004      	beq.n	800c4ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4e2:	4b0a      	ldr	r3, [pc, #40]	; (800c50c <prvResetNextTaskUnblockTime+0x44>)
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	4252      	negs	r2, r2
 800c4e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4ea:	e008      	b.n	800c4fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c4ec:	4b06      	ldr	r3, [pc, #24]	; (800c508 <prvResetNextTaskUnblockTime+0x40>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	4b04      	ldr	r3, [pc, #16]	; (800c50c <prvResetNextTaskUnblockTime+0x44>)
 800c4fc:	601a      	str	r2, [r3, #0]
}
 800c4fe:	46c0      	nop			; (mov r8, r8)
 800c500:	46bd      	mov	sp, r7
 800c502:	b002      	add	sp, #8
 800c504:	bd80      	pop	{r7, pc}
 800c506:	46c0      	nop			; (mov r8, r8)
 800c508:	20001620 	.word	0x20001620
 800c50c:	20001688 	.word	0x20001688

0800c510 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c516:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <xTaskGetSchedulerState+0x30>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c51e:	2301      	movs	r3, #1
 800c520:	607b      	str	r3, [r7, #4]
 800c522:	e008      	b.n	800c536 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c524:	4b07      	ldr	r3, [pc, #28]	; (800c544 <xTaskGetSchedulerState+0x34>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d102      	bne.n	800c532 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c52c:	2302      	movs	r3, #2
 800c52e:	607b      	str	r3, [r7, #4]
 800c530:	e001      	b.n	800c536 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c532:	2300      	movs	r3, #0
 800c534:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c536:	687b      	ldr	r3, [r7, #4]
	}
 800c538:	0018      	movs	r0, r3
 800c53a:	46bd      	mov	sp, r7
 800c53c:	b002      	add	sp, #8
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20001674 	.word	0x20001674
 800c544:	20001690 	.word	0x20001690

0800c548 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c554:	2300      	movs	r3, #0
 800c556:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d056      	beq.n	800c60c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c562:	4b2d      	ldr	r3, [pc, #180]	; (800c618 <xTaskPriorityInherit+0xd0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c568:	429a      	cmp	r2, r3
 800c56a:	d246      	bcs.n	800c5fa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	db06      	blt.n	800c582 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c574:	4b28      	ldr	r3, [pc, #160]	; (800c618 <xTaskPriorityInherit+0xd0>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	2238      	movs	r2, #56	; 0x38
 800c57c:	1ad2      	subs	r2, r2, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6959      	ldr	r1, [r3, #20]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58a:	0013      	movs	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	189b      	adds	r3, r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4a22      	ldr	r2, [pc, #136]	; (800c61c <xTaskPriorityInherit+0xd4>)
 800c594:	189b      	adds	r3, r3, r2
 800c596:	4299      	cmp	r1, r3
 800c598:	d101      	bne.n	800c59e <xTaskPriorityInherit+0x56>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e000      	b.n	800c5a0 <xTaskPriorityInherit+0x58>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d022      	beq.n	800c5ea <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	0018      	movs	r0, r3
 800c5aa:	f7fe fbf2 	bl	800ad92 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5ae:	4b1a      	ldr	r3, [pc, #104]	; (800c618 <xTaskPriorityInherit+0xd0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5bc:	4b18      	ldr	r3, [pc, #96]	; (800c620 <xTaskPriorityInherit+0xd8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d903      	bls.n	800c5cc <xTaskPriorityInherit+0x84>
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c8:	4b15      	ldr	r3, [pc, #84]	; (800c620 <xTaskPriorityInherit+0xd8>)
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d0:	0013      	movs	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	189b      	adds	r3, r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4a10      	ldr	r2, [pc, #64]	; (800c61c <xTaskPriorityInherit+0xd4>)
 800c5da:	189a      	adds	r2, r3, r2
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	3304      	adds	r3, #4
 800c5e0:	0019      	movs	r1, r3
 800c5e2:	0010      	movs	r0, r2
 800c5e4:	f7fe fb7d 	bl	800ace2 <vListInsertEnd>
 800c5e8:	e004      	b.n	800c5f4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <xTaskPriorityInherit+0xd0>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	e008      	b.n	800c60c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5fe:	4b06      	ldr	r3, [pc, #24]	; (800c618 <xTaskPriorityInherit+0xd0>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	429a      	cmp	r2, r3
 800c606:	d201      	bcs.n	800c60c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c608:	2301      	movs	r3, #1
 800c60a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c60c:	68fb      	ldr	r3, [r7, #12]
	}
 800c60e:	0018      	movs	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	b004      	add	sp, #16
 800c614:	bd80      	pop	{r7, pc}
 800c616:	46c0      	nop			; (mov r8, r8)
 800c618:	20001194 	.word	0x20001194
 800c61c:	20001198 	.word	0x20001198
 800c620:	20001670 	.word	0x20001670

0800c624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d044      	beq.n	800c6c4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c63a:	4b25      	ldr	r3, [pc, #148]	; (800c6d0 <xTaskPriorityDisinherit+0xac>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	429a      	cmp	r2, r3
 800c642:	d001      	beq.n	800c648 <xTaskPriorityDisinherit+0x24>
 800c644:	b672      	cpsid	i
 800c646:	e7fe      	b.n	800c646 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d101      	bne.n	800c654 <xTaskPriorityDisinherit+0x30>
 800c650:	b672      	cpsid	i
 800c652:	e7fe      	b.n	800c652 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c658:	1e5a      	subs	r2, r3, #1
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c666:	429a      	cmp	r2, r3
 800c668:	d02c      	beq.n	800c6c4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d128      	bne.n	800c6c4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	3304      	adds	r3, #4
 800c676:	0018      	movs	r0, r3
 800c678:	f7fe fb8b 	bl	800ad92 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	2238      	movs	r2, #56	; 0x38
 800c68a:	1ad2      	subs	r2, r2, r3
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c694:	4b0f      	ldr	r3, [pc, #60]	; (800c6d4 <xTaskPriorityDisinherit+0xb0>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d903      	bls.n	800c6a4 <xTaskPriorityDisinherit+0x80>
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a0:	4b0c      	ldr	r3, [pc, #48]	; (800c6d4 <xTaskPriorityDisinherit+0xb0>)
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a8:	0013      	movs	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	189b      	adds	r3, r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4a09      	ldr	r2, [pc, #36]	; (800c6d8 <xTaskPriorityDisinherit+0xb4>)
 800c6b2:	189a      	adds	r2, r3, r2
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	0019      	movs	r1, r3
 800c6ba:	0010      	movs	r0, r2
 800c6bc:	f7fe fb11 	bl	800ace2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
	}
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	b004      	add	sp, #16
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	20001194 	.word	0x20001194
 800c6d4:	20001670 	.word	0x20001670
 800c6d8:	20001198 	.word	0x20001198

0800c6dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d05d      	beq.n	800c7b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800c6fc:	b672      	cpsid	i
 800c6fe:	e7fe      	b.n	800c6fe <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	429a      	cmp	r2, r3
 800c708:	d902      	bls.n	800c710 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	e002      	b.n	800c716 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c714:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d047      	beq.n	800c7b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	429a      	cmp	r2, r3
 800c728:	d142      	bne.n	800c7b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c72a:	4b23      	ldr	r3, [pc, #140]	; (800c7b8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	693a      	ldr	r2, [r7, #16]
 800c730:	429a      	cmp	r2, r3
 800c732:	d101      	bne.n	800c738 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800c734:	b672      	cpsid	i
 800c736:	e7fe      	b.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	db04      	blt.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	2238      	movs	r2, #56	; 0x38
 800c750:	1ad2      	subs	r2, r2, r3
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	6959      	ldr	r1, [r3, #20]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	0013      	movs	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	189b      	adds	r3, r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4a15      	ldr	r2, [pc, #84]	; (800c7bc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800c766:	189b      	adds	r3, r3, r2
 800c768:	4299      	cmp	r1, r3
 800c76a:	d101      	bne.n	800c770 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <vTaskPriorityDisinheritAfterTimeout+0x96>
 800c770:	2300      	movs	r3, #0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d01c      	beq.n	800c7b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3304      	adds	r3, #4
 800c77a:	0018      	movs	r0, r3
 800c77c:	f7fe fb09 	bl	800ad92 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c784:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d903      	bls.n	800c794 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c790:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c798:	0013      	movs	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	189b      	adds	r3, r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4a06      	ldr	r2, [pc, #24]	; (800c7bc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800c7a2:	189a      	adds	r2, r3, r2
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	0019      	movs	r1, r3
 800c7aa:	0010      	movs	r0, r2
 800c7ac:	f7fe fa99 	bl	800ace2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7b0:	46c0      	nop			; (mov r8, r8)
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	b006      	add	sp, #24
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	20001194 	.word	0x20001194
 800c7bc:	20001198 	.word	0x20001198
 800c7c0:	20001670 	.word	0x20001670

0800c7c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c7c8:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <pvTaskIncrementMutexHeldCount+0x20>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d004      	beq.n	800c7da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c7d0:	4b04      	ldr	r3, [pc, #16]	; (800c7e4 <pvTaskIncrementMutexHeldCount+0x20>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7d6:	3201      	adds	r2, #1
 800c7d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c7da:	4b02      	ldr	r3, [pc, #8]	; (800c7e4 <pvTaskIncrementMutexHeldCount+0x20>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
	}
 800c7de:	0018      	movs	r0, r3
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20001194 	.word	0x20001194

0800c7e8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c7f2:	f000 fe4d 	bl	800d490 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c7f6:	4b1e      	ldr	r3, [pc, #120]	; (800c870 <ulTaskNotifyTake+0x88>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	22a0      	movs	r2, #160	; 0xa0
 800c7fc:	589b      	ldr	r3, [r3, r2]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10e      	bne.n	800c820 <ulTaskNotifyTake+0x38>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c802:	4b1b      	ldr	r3, [pc, #108]	; (800c870 <ulTaskNotifyTake+0x88>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	22a4      	movs	r2, #164	; 0xa4
 800c808:	2101      	movs	r1, #1
 800c80a:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d006      	beq.n	800c820 <ulTaskNotifyTake+0x38>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	2101      	movs	r1, #1
 800c816:	0018      	movs	r0, r3
 800c818:	f000 f9ea 	bl	800cbf0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c81c:	f000 fe28 	bl	800d470 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c820:	f000 fe48 	bl	800d4b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c824:	f000 fe34 	bl	800d490 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c828:	4b11      	ldr	r3, [pc, #68]	; (800c870 <ulTaskNotifyTake+0x88>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	22a0      	movs	r2, #160	; 0xa0
 800c82e:	589b      	ldr	r3, [r3, r2]
 800c830:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00e      	beq.n	800c856 <ulTaskNotifyTake+0x6e>
			{
				if( xClearCountOnExit != pdFALSE )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d005      	beq.n	800c84a <ulTaskNotifyTake+0x62>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c83e:	4b0c      	ldr	r3, [pc, #48]	; (800c870 <ulTaskNotifyTake+0x88>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	22a0      	movs	r2, #160	; 0xa0
 800c844:	2100      	movs	r1, #0
 800c846:	5099      	str	r1, [r3, r2]
 800c848:	e005      	b.n	800c856 <ulTaskNotifyTake+0x6e>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c84a:	4b09      	ldr	r3, [pc, #36]	; (800c870 <ulTaskNotifyTake+0x88>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	3a01      	subs	r2, #1
 800c852:	21a0      	movs	r1, #160	; 0xa0
 800c854:	505a      	str	r2, [r3, r1]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c856:	4b06      	ldr	r3, [pc, #24]	; (800c870 <ulTaskNotifyTake+0x88>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	22a4      	movs	r2, #164	; 0xa4
 800c85c:	2100      	movs	r1, #0
 800c85e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 800c860:	f000 fe28 	bl	800d4b4 <vPortExitCritical>

		return ulReturn;
 800c864:	68fb      	ldr	r3, [r7, #12]
	}
 800c866:	0018      	movs	r0, r3
 800c868:	46bd      	mov	sp, r7
 800c86a:	b004      	add	sp, #16
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	46c0      	nop			; (mov r8, r8)
 800c870:	20001194 	.word	0x20001194

0800c874 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c874:	b580      	push	{r7, lr}
 800c876:	b088      	sub	sp, #32
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	603b      	str	r3, [r7, #0]
 800c880:	1dfb      	adds	r3, r7, #7
 800c882:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c884:	2301      	movs	r3, #1
 800c886:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <xTaskGenericNotify+0x1e>
 800c88e:	b672      	cpsid	i
 800c890:	e7fe      	b.n	800c890 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 800c896:	f000 fdfb 	bl	800d490 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d004      	beq.n	800c8aa <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	22a0      	movs	r2, #160	; 0xa0
 800c8a4:	589a      	ldr	r2, [r3, r2]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c8aa:	2317      	movs	r3, #23
 800c8ac:	18fb      	adds	r3, r7, r3
 800c8ae:	69ba      	ldr	r2, [r7, #24]
 800c8b0:	21a4      	movs	r1, #164	; 0xa4
 800c8b2:	5c52      	ldrb	r2, [r2, r1]
 800c8b4:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	22a4      	movs	r2, #164	; 0xa4
 800c8ba:	2102      	movs	r1, #2
 800c8bc:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800c8be:	1dfb      	adds	r3, r7, #7
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d828      	bhi.n	800c918 <xTaskGenericNotify+0xa4>
 800c8c6:	009a      	lsls	r2, r3, #2
 800c8c8:	4b2f      	ldr	r3, [pc, #188]	; (800c988 <xTaskGenericNotify+0x114>)
 800c8ca:	18d3      	adds	r3, r2, r3
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	22a0      	movs	r2, #160	; 0xa0
 800c8d4:	589a      	ldr	r2, [r3, r2]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	21a0      	movs	r1, #160	; 0xa0
 800c8de:	505a      	str	r2, [r3, r1]
					break;
 800c8e0:	e01a      	b.n	800c918 <xTaskGenericNotify+0xa4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	22a0      	movs	r2, #160	; 0xa0
 800c8e6:	589b      	ldr	r3, [r3, r2]
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	21a0      	movs	r1, #160	; 0xa0
 800c8ee:	505a      	str	r2, [r3, r1]
					break;
 800c8f0:	e012      	b.n	800c918 <xTaskGenericNotify+0xa4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	21a0      	movs	r1, #160	; 0xa0
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	505a      	str	r2, [r3, r1]
					break;
 800c8fa:	e00d      	b.n	800c918 <xTaskGenericNotify+0xa4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c8fc:	2317      	movs	r3, #23
 800c8fe:	18fb      	adds	r3, r7, r3
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b02      	cmp	r3, #2
 800c904:	d004      	beq.n	800c910 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	21a0      	movs	r1, #160	; 0xa0
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c90e:	e003      	b.n	800c918 <xTaskGenericNotify+0xa4>
						xReturn = pdFAIL;
 800c910:	2300      	movs	r3, #0
 800c912:	61fb      	str	r3, [r7, #28]
					break;
 800c914:	e000      	b.n	800c918 <xTaskGenericNotify+0xa4>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 800c916:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c918:	2317      	movs	r3, #23
 800c91a:	18fb      	adds	r3, r7, r3
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d12b      	bne.n	800c97a <xTaskGenericNotify+0x106>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	3304      	adds	r3, #4
 800c926:	0018      	movs	r0, r3
 800c928:	f7fe fa33 	bl	800ad92 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c930:	4b16      	ldr	r3, [pc, #88]	; (800c98c <xTaskGenericNotify+0x118>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	429a      	cmp	r2, r3
 800c936:	d903      	bls.n	800c940 <xTaskGenericNotify+0xcc>
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93c:	4b13      	ldr	r3, [pc, #76]	; (800c98c <xTaskGenericNotify+0x118>)
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c944:	0013      	movs	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	189b      	adds	r3, r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4a10      	ldr	r2, [pc, #64]	; (800c990 <xTaskGenericNotify+0x11c>)
 800c94e:	189a      	adds	r2, r3, r2
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	3304      	adds	r3, #4
 800c954:	0019      	movs	r1, r3
 800c956:	0010      	movs	r0, r2
 800c958:	f7fe f9c3 	bl	800ace2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <xTaskGenericNotify+0xf4>
 800c964:	b672      	cpsid	i
 800c966:	e7fe      	b.n	800c966 <xTaskGenericNotify+0xf2>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96c:	4b09      	ldr	r3, [pc, #36]	; (800c994 <xTaskGenericNotify+0x120>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c972:	429a      	cmp	r2, r3
 800c974:	d901      	bls.n	800c97a <xTaskGenericNotify+0x106>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c976:	f000 fd7b 	bl	800d470 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c97a:	f000 fd9b 	bl	800d4b4 <vPortExitCritical>

		return xReturn;
 800c97e:	69fb      	ldr	r3, [r7, #28]
	}
 800c980:	0018      	movs	r0, r3
 800c982:	46bd      	mov	sp, r7
 800c984:	b008      	add	sp, #32
 800c986:	bd80      	pop	{r7, pc}
 800c988:	0800df44 	.word	0x0800df44
 800c98c:	20001670 	.word	0x20001670
 800c990:	20001198 	.word	0x20001198
 800c994:	20001194 	.word	0x20001194

0800c998 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	603b      	str	r3, [r7, #0]
 800c9a4:	1dfb      	adds	r3, r7, #7
 800c9a6:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <xTaskGenericNotifyFromISR+0x1e>
 800c9b2:	b672      	cpsid	i
 800c9b4:	e7fe      	b.n	800c9b4 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9ba:	f000 fd93 	bl	800d4e4 <ulSetInterruptMaskFromISR>
 800c9be:	0003      	movs	r3, r0
 800c9c0:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d004      	beq.n	800c9d2 <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	22a0      	movs	r2, #160	; 0xa0
 800c9cc:	589a      	ldr	r2, [r3, r2]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c9d2:	2313      	movs	r3, #19
 800c9d4:	18fb      	adds	r3, r7, r3
 800c9d6:	69ba      	ldr	r2, [r7, #24]
 800c9d8:	21a4      	movs	r1, #164	; 0xa4
 800c9da:	5c52      	ldrb	r2, [r2, r1]
 800c9dc:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	22a4      	movs	r2, #164	; 0xa4
 800c9e2:	2102      	movs	r1, #2
 800c9e4:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800c9e6:	1dfb      	adds	r3, r7, #7
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b04      	cmp	r3, #4
 800c9ec:	d828      	bhi.n	800ca40 <xTaskGenericNotifyFromISR+0xa8>
 800c9ee:	009a      	lsls	r2, r3, #2
 800c9f0:	4b3b      	ldr	r3, [pc, #236]	; (800cae0 <xTaskGenericNotifyFromISR+0x148>)
 800c9f2:	18d3      	adds	r3, r2, r3
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	22a0      	movs	r2, #160	; 0xa0
 800c9fc:	589a      	ldr	r2, [r3, r2]
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	431a      	orrs	r2, r3
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	21a0      	movs	r1, #160	; 0xa0
 800ca06:	505a      	str	r2, [r3, r1]
					break;
 800ca08:	e01a      	b.n	800ca40 <xTaskGenericNotifyFromISR+0xa8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	22a0      	movs	r2, #160	; 0xa0
 800ca0e:	589b      	ldr	r3, [r3, r2]
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	21a0      	movs	r1, #160	; 0xa0
 800ca16:	505a      	str	r2, [r3, r1]
					break;
 800ca18:	e012      	b.n	800ca40 <xTaskGenericNotifyFromISR+0xa8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	21a0      	movs	r1, #160	; 0xa0
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	505a      	str	r2, [r3, r1]
					break;
 800ca22:	e00d      	b.n	800ca40 <xTaskGenericNotifyFromISR+0xa8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ca24:	2313      	movs	r3, #19
 800ca26:	18fb      	adds	r3, r7, r3
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d004      	beq.n	800ca38 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	21a0      	movs	r1, #160	; 0xa0
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ca36:	e003      	b.n	800ca40 <xTaskGenericNotifyFromISR+0xa8>
						xReturn = pdFAIL;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	61fb      	str	r3, [r7, #28]
					break;
 800ca3c:	e000      	b.n	800ca40 <xTaskGenericNotifyFromISR+0xa8>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 800ca3e:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ca40:	2313      	movs	r3, #19
 800ca42:	18fb      	adds	r3, r7, r3
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d140      	bne.n	800cacc <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <xTaskGenericNotifyFromISR+0xbe>
 800ca52:	b672      	cpsid	i
 800ca54:	e7fe      	b.n	800ca54 <xTaskGenericNotifyFromISR+0xbc>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca56:	4b23      	ldr	r3, [pc, #140]	; (800cae4 <xTaskGenericNotifyFromISR+0x14c>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d11d      	bne.n	800ca9a <xTaskGenericNotifyFromISR+0x102>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	3304      	adds	r3, #4
 800ca62:	0018      	movs	r0, r3
 800ca64:	f7fe f995 	bl	800ad92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	4b1e      	ldr	r3, [pc, #120]	; (800cae8 <xTaskGenericNotifyFromISR+0x150>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d903      	bls.n	800ca7c <xTaskGenericNotifyFromISR+0xe4>
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca78:	4b1b      	ldr	r3, [pc, #108]	; (800cae8 <xTaskGenericNotifyFromISR+0x150>)
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca80:	0013      	movs	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	189b      	adds	r3, r3, r2
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4a18      	ldr	r2, [pc, #96]	; (800caec <xTaskGenericNotifyFromISR+0x154>)
 800ca8a:	189a      	adds	r2, r3, r2
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	0019      	movs	r1, r3
 800ca92:	0010      	movs	r0, r2
 800ca94:	f7fe f925 	bl	800ace2 <vListInsertEnd>
 800ca98:	e007      	b.n	800caaa <xTaskGenericNotifyFromISR+0x112>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	3318      	adds	r3, #24
 800ca9e:	001a      	movs	r2, r3
 800caa0:	4b13      	ldr	r3, [pc, #76]	; (800caf0 <xTaskGenericNotifyFromISR+0x158>)
 800caa2:	0011      	movs	r1, r2
 800caa4:	0018      	movs	r0, r3
 800caa6:	f7fe f91c 	bl	800ace2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caae:	4b11      	ldr	r3, [pc, #68]	; (800caf4 <xTaskGenericNotifyFromISR+0x15c>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d909      	bls.n	800cacc <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	e002      	b.n	800cacc <xTaskGenericNotifyFromISR+0x134>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800cac6:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <xTaskGenericNotifyFromISR+0x160>)
 800cac8:	2201      	movs	r2, #1
 800caca:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	0018      	movs	r0, r3
 800cad0:	f000 fd0e 	bl	800d4f0 <vClearInterruptMaskFromISR>

		return xReturn;
 800cad4:	69fb      	ldr	r3, [r7, #28]
	}
 800cad6:	0018      	movs	r0, r3
 800cad8:	46bd      	mov	sp, r7
 800cada:	b008      	add	sp, #32
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	46c0      	nop			; (mov r8, r8)
 800cae0:	0800df58 	.word	0x0800df58
 800cae4:	20001690 	.word	0x20001690
 800cae8:	20001670 	.word	0x20001670
 800caec:	20001198 	.word	0x20001198
 800caf0:	20001628 	.word	0x20001628
 800caf4:	20001194 	.word	0x20001194
 800caf8:	2000167c 	.word	0x2000167c

0800cafc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d101      	bne.n	800cb10 <vTaskNotifyGiveFromISR+0x14>
 800cb0c:	b672      	cpsid	i
 800cb0e:	e7fe      	b.n	800cb0e <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb14:	f000 fce6 	bl	800d4e4 <ulSetInterruptMaskFromISR>
 800cb18:	0003      	movs	r3, r0
 800cb1a:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cb1c:	200f      	movs	r0, #15
 800cb1e:	183b      	adds	r3, r7, r0
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	21a4      	movs	r1, #164	; 0xa4
 800cb24:	5c52      	ldrb	r2, [r2, r1]
 800cb26:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	22a4      	movs	r2, #164	; 0xa4
 800cb2c:	2102      	movs	r1, #2
 800cb2e:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	22a0      	movs	r2, #160	; 0xa0
 800cb34:	589b      	ldr	r3, [r3, r2]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	21a0      	movs	r1, #160	; 0xa0
 800cb3c:	505a      	str	r2, [r3, r1]

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb3e:	183b      	adds	r3, r7, r0
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d140      	bne.n	800cbc8 <vTaskNotifyGiveFromISR+0xcc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <vTaskNotifyGiveFromISR+0x56>
 800cb4e:	b672      	cpsid	i
 800cb50:	e7fe      	b.n	800cb50 <vTaskNotifyGiveFromISR+0x54>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb52:	4b21      	ldr	r3, [pc, #132]	; (800cbd8 <vTaskNotifyGiveFromISR+0xdc>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d11d      	bne.n	800cb96 <vTaskNotifyGiveFromISR+0x9a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	0018      	movs	r0, r3
 800cb60:	f7fe f917 	bl	800ad92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb68:	4b1c      	ldr	r3, [pc, #112]	; (800cbdc <vTaskNotifyGiveFromISR+0xe0>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d903      	bls.n	800cb78 <vTaskNotifyGiveFromISR+0x7c>
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb74:	4b19      	ldr	r3, [pc, #100]	; (800cbdc <vTaskNotifyGiveFromISR+0xe0>)
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb7c:	0013      	movs	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	189b      	adds	r3, r3, r2
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4a16      	ldr	r2, [pc, #88]	; (800cbe0 <vTaskNotifyGiveFromISR+0xe4>)
 800cb86:	189a      	adds	r2, r3, r2
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	0019      	movs	r1, r3
 800cb8e:	0010      	movs	r0, r2
 800cb90:	f7fe f8a7 	bl	800ace2 <vListInsertEnd>
 800cb94:	e007      	b.n	800cba6 <vTaskNotifyGiveFromISR+0xaa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	3318      	adds	r3, #24
 800cb9a:	001a      	movs	r2, r3
 800cb9c:	4b11      	ldr	r3, [pc, #68]	; (800cbe4 <vTaskNotifyGiveFromISR+0xe8>)
 800cb9e:	0011      	movs	r1, r2
 800cba0:	0018      	movs	r0, r3
 800cba2:	f7fe f89e 	bl	800ace2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <vTaskNotifyGiveFromISR+0xec>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d909      	bls.n	800cbc8 <vTaskNotifyGiveFromISR+0xcc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <vTaskNotifyGiveFromISR+0xc6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	e002      	b.n	800cbc8 <vTaskNotifyGiveFromISR+0xcc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <vTaskNotifyGiveFromISR+0xf0>)
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	0018      	movs	r0, r3
 800cbcc:	f000 fc90 	bl	800d4f0 <vClearInterruptMaskFromISR>
	}
 800cbd0:	46c0      	nop			; (mov r8, r8)
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	b006      	add	sp, #24
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20001690 	.word	0x20001690
 800cbdc:	20001670 	.word	0x20001670
 800cbe0:	20001198 	.word	0x20001198
 800cbe4:	20001628 	.word	0x20001628
 800cbe8:	20001194 	.word	0x20001194
 800cbec:	2000167c 	.word	0x2000167c

0800cbf0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cbfa:	4b21      	ldr	r3, [pc, #132]	; (800cc80 <prvAddCurrentTaskToDelayedList+0x90>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc00:	4b20      	ldr	r3, [pc, #128]	; (800cc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3304      	adds	r3, #4
 800cc06:	0018      	movs	r0, r3
 800cc08:	f7fe f8c3 	bl	800ad92 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	d10b      	bne.n	800cc2a <prvAddCurrentTaskToDelayedList+0x3a>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d008      	beq.n	800cc2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc18:	4b1a      	ldr	r3, [pc, #104]	; (800cc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	1d1a      	adds	r2, r3, #4
 800cc1e:	4b1a      	ldr	r3, [pc, #104]	; (800cc88 <prvAddCurrentTaskToDelayedList+0x98>)
 800cc20:	0011      	movs	r1, r2
 800cc22:	0018      	movs	r0, r3
 800cc24:	f7fe f85d 	bl	800ace2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc28:	e026      	b.n	800cc78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	18d3      	adds	r3, r2, r3
 800cc30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc32:	4b14      	ldr	r3, [pc, #80]	; (800cc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d209      	bcs.n	800cc56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc42:	4b12      	ldr	r3, [pc, #72]	; (800cc8c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	4b0f      	ldr	r3, [pc, #60]	; (800cc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3304      	adds	r3, #4
 800cc4c:	0019      	movs	r1, r3
 800cc4e:	0010      	movs	r0, r2
 800cc50:	f7fe f869 	bl	800ad26 <vListInsert>
}
 800cc54:	e010      	b.n	800cc78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc56:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	0019      	movs	r1, r3
 800cc62:	0010      	movs	r0, r2
 800cc64:	f7fe f85f 	bl	800ad26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d202      	bcs.n	800cc78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cc72:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	601a      	str	r2, [r3, #0]
}
 800cc78:	46c0      	nop			; (mov r8, r8)
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	b004      	add	sp, #16
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	2000166c 	.word	0x2000166c
 800cc84:	20001194 	.word	0x20001194
 800cc88:	20001654 	.word	0x20001654
 800cc8c:	20001624 	.word	0x20001624
 800cc90:	20001620 	.word	0x20001620
 800cc94:	20001688 	.word	0x20001688

0800cc98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc98:	b590      	push	{r4, r7, lr}
 800cc9a:	b089      	sub	sp, #36	; 0x24
 800cc9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cca2:	f000 faff 	bl	800d2a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cca6:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <xTimerCreateTimerTask+0x6c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d020      	beq.n	800ccf0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ccb6:	003a      	movs	r2, r7
 800ccb8:	1d39      	adds	r1, r7, #4
 800ccba:	2308      	movs	r3, #8
 800ccbc:	18fb      	adds	r3, r7, r3
 800ccbe:	0018      	movs	r0, r3
 800ccc0:	f7fd ffce 	bl	800ac60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ccc4:	683c      	ldr	r4, [r7, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	490f      	ldr	r1, [pc, #60]	; (800cd08 <xTimerCreateTimerTask+0x70>)
 800cccc:	480f      	ldr	r0, [pc, #60]	; (800cd0c <xTimerCreateTimerTask+0x74>)
 800ccce:	9202      	str	r2, [sp, #8]
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	0022      	movs	r2, r4
 800ccda:	f7fe fe60 	bl	800b99e <xTaskCreateStatic>
 800ccde:	0002      	movs	r2, r0
 800cce0:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <xTimerCreateTimerTask+0x78>)
 800cce2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cce4:	4b0a      	ldr	r3, [pc, #40]	; (800cd10 <xTimerCreateTimerTask+0x78>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800ccec:	2301      	movs	r3, #1
 800ccee:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <xTimerCreateTimerTask+0x62>
 800ccf6:	b672      	cpsid	i
 800ccf8:	e7fe      	b.n	800ccf8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
}
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	b005      	add	sp, #20
 800cd02:	bd90      	pop	{r4, r7, pc}
 800cd04:	200016c4 	.word	0x200016c4
 800cd08:	0800dd24 	.word	0x0800dd24
 800cd0c:	0800cf09 	.word	0x0800cf09
 800cd10:	200016c8 	.word	0x200016c8

0800cd14 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cd14:	b590      	push	{r4, r7, lr}
 800cd16:	b089      	sub	sp, #36	; 0x24
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800cd22:	2030      	movs	r0, #48	; 0x30
 800cd24:	f000 fc4c 	bl	800d5c0 <pvPortMalloc>
 800cd28:	0003      	movs	r3, r0
 800cd2a:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00e      	beq.n	800cd50 <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cd32:	683c      	ldr	r4, [r7, #0]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	0023      	movs	r3, r4
 800cd44:	f000 f835 	bl	800cdb2 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	222c      	movs	r2, #44	; 0x2c
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800cd50:	697b      	ldr	r3, [r7, #20]
	}
 800cd52:	0018      	movs	r0, r3
 800cd54:	46bd      	mov	sp, r7
 800cd56:	b007      	add	sp, #28
 800cd58:	bd90      	pop	{r4, r7, pc}

0800cd5a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cd5a:	b590      	push	{r4, r7, lr}
 800cd5c:	b089      	sub	sp, #36	; 0x24
 800cd5e:	af02      	add	r7, sp, #8
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
 800cd66:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cd68:	2330      	movs	r3, #48	; 0x30
 800cd6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	2b30      	cmp	r3, #48	; 0x30
 800cd70:	d001      	beq.n	800cd76 <xTimerCreateStatic+0x1c>
 800cd72:	b672      	cpsid	i
 800cd74:	e7fe      	b.n	800cd74 <xTimerCreateStatic+0x1a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <xTimerCreateStatic+0x26>
 800cd7c:	b672      	cpsid	i
 800cd7e:	e7fe      	b.n	800cd7e <xTimerCreateStatic+0x24>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00e      	beq.n	800cda8 <xTimerCreateStatic+0x4e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cd8a:	683c      	ldr	r4, [r7, #0]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	68b9      	ldr	r1, [r7, #8]
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	0023      	movs	r3, r4
 800cd9c:	f000 f809 	bl	800cdb2 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	222c      	movs	r2, #44	; 0x2c
 800cda4:	2101      	movs	r1, #1
 800cda6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800cda8:	697b      	ldr	r3, [r7, #20]
	}
 800cdaa:	0018      	movs	r0, r3
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b007      	add	sp, #28
 800cdb0:	bd90      	pop	{r4, r7, pc}

0800cdb2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	60b9      	str	r1, [r7, #8]
 800cdbc:	607a      	str	r2, [r7, #4]
 800cdbe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <prvInitialiseNewTimer+0x18>
 800cdc6:	b672      	cpsid	i
 800cdc8:	e7fe      	b.n	800cdc8 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d015      	beq.n	800cdfc <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cdd0:	f000 fa68 	bl	800d2a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	683a      	ldr	r2, [r7, #0]
 800cdea:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	69ba      	ldr	r2, [r7, #24]
 800cdf0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	f7fd ff68 	bl	800accc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cdfc:	46c0      	nop			; (mov r8, r8)
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	b004      	add	sp, #16
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce04:	b590      	push	{r4, r7, lr}
 800ce06:	b08b      	sub	sp, #44	; 0x2c
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <xTimerGenericCommand+0x1c>
 800ce1c:	b672      	cpsid	i
 800ce1e:	e7fe      	b.n	800ce1e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce20:	4b1c      	ldr	r3, [pc, #112]	; (800ce94 <xTimerGenericCommand+0x90>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d030      	beq.n	800ce8a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce28:	2414      	movs	r4, #20
 800ce2a:	193b      	adds	r3, r7, r4
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce30:	193b      	adds	r3, r7, r4
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ce36:	193b      	adds	r3, r7, r4
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	2b05      	cmp	r3, #5
 800ce40:	dc19      	bgt.n	800ce76 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce42:	f7ff fb65 	bl	800c510 <xTaskGetSchedulerState>
 800ce46:	0003      	movs	r3, r0
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d109      	bne.n	800ce60 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce4c:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <xTimerGenericCommand+0x90>)
 800ce4e:	6818      	ldr	r0, [r3, #0]
 800ce50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce52:	1939      	adds	r1, r7, r4
 800ce54:	2300      	movs	r3, #0
 800ce56:	f7fe f909 	bl	800b06c <xQueueGenericSend>
 800ce5a:	0003      	movs	r3, r0
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce5e:	e014      	b.n	800ce8a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce60:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <xTimerGenericCommand+0x90>)
 800ce62:	6818      	ldr	r0, [r3, #0]
 800ce64:	2314      	movs	r3, #20
 800ce66:	18f9      	adds	r1, r7, r3
 800ce68:	2300      	movs	r3, #0
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f7fe f8fe 	bl	800b06c <xQueueGenericSend>
 800ce70:	0003      	movs	r3, r0
 800ce72:	627b      	str	r3, [r7, #36]	; 0x24
 800ce74:	e009      	b.n	800ce8a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce76:	4b07      	ldr	r3, [pc, #28]	; (800ce94 <xTimerGenericCommand+0x90>)
 800ce78:	6818      	ldr	r0, [r3, #0]
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	2314      	movs	r3, #20
 800ce7e:	18f9      	adds	r1, r7, r3
 800ce80:	2300      	movs	r3, #0
 800ce82:	f7fe f9b7 	bl	800b1f4 <xQueueGenericSendFromISR>
 800ce86:	0003      	movs	r3, r0
 800ce88:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	b00b      	add	sp, #44	; 0x2c
 800ce92:	bd90      	pop	{r4, r7, pc}
 800ce94:	200016c4 	.word	0x200016c4

0800ce98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cea2:	4b18      	ldr	r3, [pc, #96]	; (800cf04 <prvProcessExpiredTimer+0x6c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	3304      	adds	r3, #4
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f7fd ff6e 	bl	800ad92 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d119      	bne.n	800cef2 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	699a      	ldr	r2, [r3, #24]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	18d1      	adds	r1, r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f000 f8b6 	bl	800d03c <prvInsertTimerInActiveList>
 800ced0:	1e03      	subs	r3, r0, #0
 800ced2:	d00e      	beq.n	800cef2 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	2300      	movs	r3, #0
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	2300      	movs	r3, #0
 800cede:	2100      	movs	r1, #0
 800cee0:	f7ff ff90 	bl	800ce04 <xTimerGenericCommand>
 800cee4:	0003      	movs	r3, r0
 800cee6:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <prvProcessExpiredTimer+0x5a>
 800ceee:	b672      	cpsid	i
 800cef0:	e7fe      	b.n	800cef0 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	0010      	movs	r0, r2
 800cefa:	4798      	blx	r3
}
 800cefc:	46c0      	nop			; (mov r8, r8)
 800cefe:	46bd      	mov	sp, r7
 800cf00:	b004      	add	sp, #16
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	200016bc 	.word	0x200016bc

0800cf08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf10:	2308      	movs	r3, #8
 800cf12:	18fb      	adds	r3, r7, r3
 800cf14:	0018      	movs	r0, r3
 800cf16:	f000 f851 	bl	800cfbc <prvGetNextExpireTime>
 800cf1a:	0003      	movs	r3, r0
 800cf1c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	0011      	movs	r1, r2
 800cf24:	0018      	movs	r0, r3
 800cf26:	f000 f803 	bl	800cf30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf2a:	f000 f8c9 	bl	800d0c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf2e:	e7ef      	b.n	800cf10 <prvTimerTask+0x8>

0800cf30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf3a:	f7fe ff43 	bl	800bdc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf3e:	2308      	movs	r3, #8
 800cf40:	18fb      	adds	r3, r7, r3
 800cf42:	0018      	movs	r0, r3
 800cf44:	f000 f85a 	bl	800cffc <prvSampleTimeNow>
 800cf48:	0003      	movs	r3, r0
 800cf4a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d129      	bne.n	800cfa6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10c      	bne.n	800cf72 <prvProcessTimerOrBlockTask+0x42>
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d808      	bhi.n	800cf72 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800cf60:	f7fe ff3c 	bl	800bddc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	0011      	movs	r1, r2
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	f7ff ff94 	bl	800ce98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf70:	e01b      	b.n	800cfaa <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d006      	beq.n	800cf86 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf78:	4b0e      	ldr	r3, [pc, #56]	; (800cfb4 <prvProcessTimerOrBlockTask+0x84>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	425a      	negs	r2, r3
 800cf80:	4153      	adcs	r3, r2
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf86:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <prvProcessTimerOrBlockTask+0x88>)
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	0019      	movs	r1, r3
 800cf94:	f7fe fcd0 	bl	800b938 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf98:	f7fe ff20 	bl	800bddc <xTaskResumeAll>
 800cf9c:	1e03      	subs	r3, r0, #0
 800cf9e:	d104      	bne.n	800cfaa <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800cfa0:	f000 fa66 	bl	800d470 <vPortYield>
}
 800cfa4:	e001      	b.n	800cfaa <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800cfa6:	f7fe ff19 	bl	800bddc <xTaskResumeAll>
}
 800cfaa:	46c0      	nop			; (mov r8, r8)
 800cfac:	46bd      	mov	sp, r7
 800cfae:	b004      	add	sp, #16
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	46c0      	nop			; (mov r8, r8)
 800cfb4:	200016c0 	.word	0x200016c0
 800cfb8:	200016c4 	.word	0x200016c4

0800cfbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfc4:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <prvGetNextExpireTime+0x3c>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	425a      	negs	r2, r3
 800cfcc:	4153      	adcs	r3, r2
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	001a      	movs	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d105      	bne.n	800cfea <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfde:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <prvGetNextExpireTime+0x3c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	e001      	b.n	800cfee <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cfea:	2300      	movs	r3, #0
 800cfec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cfee:	68fb      	ldr	r3, [r7, #12]
}
 800cff0:	0018      	movs	r0, r3
 800cff2:	46bd      	mov	sp, r7
 800cff4:	b004      	add	sp, #16
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	200016bc 	.word	0x200016bc

0800cffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d004:	f7fe ff76 	bl	800bef4 <xTaskGetTickCount>
 800d008:	0003      	movs	r3, r0
 800d00a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800d00c:	4b0a      	ldr	r3, [pc, #40]	; (800d038 <prvSampleTimeNow+0x3c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	429a      	cmp	r2, r3
 800d014:	d205      	bcs.n	800d022 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800d016:	f000 f8eb 	bl	800d1f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	601a      	str	r2, [r3, #0]
 800d020:	e002      	b.n	800d028 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d028:	4b03      	ldr	r3, [pc, #12]	; (800d038 <prvSampleTimeNow+0x3c>)
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800d02e:	68fb      	ldr	r3, [r7, #12]
}
 800d030:	0018      	movs	r0, r3
 800d032:	46bd      	mov	sp, r7
 800d034:	b004      	add	sp, #16
 800d036:	bd80      	pop	{r7, pc}
 800d038:	200016cc 	.word	0x200016cc

0800d03c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d04a:	2300      	movs	r3, #0
 800d04c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d812      	bhi.n	800d088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	1ad2      	subs	r2, r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d302      	bcc.n	800d076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d070:	2301      	movs	r3, #1
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	e01b      	b.n	800d0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d076:	4b10      	ldr	r3, [pc, #64]	; (800d0b8 <prvInsertTimerInActiveList+0x7c>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3304      	adds	r3, #4
 800d07e:	0019      	movs	r1, r3
 800d080:	0010      	movs	r0, r2
 800d082:	f7fd fe50 	bl	800ad26 <vListInsert>
 800d086:	e012      	b.n	800d0ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d206      	bcs.n	800d09e <prvInsertTimerInActiveList+0x62>
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	429a      	cmp	r2, r3
 800d096:	d302      	bcc.n	800d09e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d098:	2301      	movs	r3, #1
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	e007      	b.n	800d0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d09e:	4b07      	ldr	r3, [pc, #28]	; (800d0bc <prvInsertTimerInActiveList+0x80>)
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	0019      	movs	r1, r3
 800d0a8:	0010      	movs	r0, r2
 800d0aa:	f7fd fe3c 	bl	800ad26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0ae:	697b      	ldr	r3, [r7, #20]
}
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	b006      	add	sp, #24
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	200016c0 	.word	0x200016c0
 800d0bc:	200016bc 	.word	0x200016bc

0800d0c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0c0:	b590      	push	{r4, r7, lr}
 800d0c2:	b08d      	sub	sp, #52	; 0x34
 800d0c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0c6:	e07f      	b.n	800d1c8 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0c8:	2208      	movs	r2, #8
 800d0ca:	18bb      	adds	r3, r7, r2
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	da0f      	bge.n	800d0f2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0d2:	18bb      	adds	r3, r7, r2
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <prvProcessReceivedCommands+0x22>
 800d0de:	b672      	cpsid	i
 800d0e0:	e7fe      	b.n	800d0e0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	6858      	ldr	r0, [r3, #4]
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	0019      	movs	r1, r3
 800d0f0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d0f2:	2208      	movs	r2, #8
 800d0f4:	18bb      	adds	r3, r7, r2
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	db65      	blt.n	800d1c8 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d0fc:	18bb      	adds	r3, r7, r2
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d004      	beq.n	800d114 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	3304      	adds	r3, #4
 800d10e:	0018      	movs	r0, r3
 800d110:	f7fd fe3f 	bl	800ad92 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d114:	1d3b      	adds	r3, r7, #4
 800d116:	0018      	movs	r0, r3
 800d118:	f7ff ff70 	bl	800cffc <prvSampleTimeNow>
 800d11c:	0003      	movs	r3, r0
 800d11e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800d120:	2308      	movs	r3, #8
 800d122:	18fb      	adds	r3, r7, r3
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2b09      	cmp	r3, #9
 800d128:	d84d      	bhi.n	800d1c6 <prvProcessReceivedCommands+0x106>
 800d12a:	009a      	lsls	r2, r3, #2
 800d12c:	4b2e      	ldr	r3, [pc, #184]	; (800d1e8 <prvProcessReceivedCommands+0x128>)
 800d12e:	18d3      	adds	r3, r2, r3
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d134:	2408      	movs	r4, #8
 800d136:	193b      	adds	r3, r7, r4
 800d138:	685a      	ldr	r2, [r3, #4]
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	699b      	ldr	r3, [r3, #24]
 800d13e:	18d1      	adds	r1, r2, r3
 800d140:	193b      	adds	r3, r7, r4
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	69fa      	ldr	r2, [r7, #28]
 800d146:	6a38      	ldr	r0, [r7, #32]
 800d148:	f7ff ff78 	bl	800d03c <prvInsertTimerInActiveList>
 800d14c:	1e03      	subs	r3, r0, #0
 800d14e:	d03b      	beq.n	800d1c8 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d154:	6a3a      	ldr	r2, [r7, #32]
 800d156:	0010      	movs	r0, r2
 800d158:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d132      	bne.n	800d1c8 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d162:	193b      	adds	r3, r7, r4
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	6a3b      	ldr	r3, [r7, #32]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	18d2      	adds	r2, r2, r3
 800d16c:	6a38      	ldr	r0, [r7, #32]
 800d16e:	2300      	movs	r3, #0
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	2300      	movs	r3, #0
 800d174:	2100      	movs	r1, #0
 800d176:	f7ff fe45 	bl	800ce04 <xTimerGenericCommand>
 800d17a:	0003      	movs	r3, r0
 800d17c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d121      	bne.n	800d1c8 <prvProcessReceivedCommands+0x108>
 800d184:	b672      	cpsid	i
 800d186:	e7fe      	b.n	800d186 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d188:	2308      	movs	r3, #8
 800d18a:	18fb      	adds	r3, r7, r3
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <prvProcessReceivedCommands+0xde>
 800d19a:	b672      	cpsid	i
 800d19c:	e7fe      	b.n	800d19c <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	699a      	ldr	r2, [r3, #24]
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	18d1      	adds	r1, r2, r3
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	69fa      	ldr	r2, [r7, #28]
 800d1aa:	6a38      	ldr	r0, [r7, #32]
 800d1ac:	f7ff ff46 	bl	800d03c <prvInsertTimerInActiveList>
					break;
 800d1b0:	e00a      	b.n	800d1c8 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	222c      	movs	r2, #44	; 0x2c
 800d1b6:	5c9b      	ldrb	r3, [r3, r2]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d105      	bne.n	800d1c8 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	0018      	movs	r0, r3
 800d1c0:	f000 faa4 	bl	800d70c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d1c4:	e000      	b.n	800d1c8 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800d1c6:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1c8:	4b08      	ldr	r3, [pc, #32]	; (800d1ec <prvProcessReceivedCommands+0x12c>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2208      	movs	r2, #8
 800d1ce:	18b9      	adds	r1, r7, r2
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	0018      	movs	r0, r3
 800d1d4:	f7fe f87f 	bl	800b2d6 <xQueueReceive>
 800d1d8:	1e03      	subs	r3, r0, #0
 800d1da:	d000      	beq.n	800d1de <prvProcessReceivedCommands+0x11e>
 800d1dc:	e774      	b.n	800d0c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d1de:	46c0      	nop			; (mov r8, r8)
 800d1e0:	46c0      	nop			; (mov r8, r8)
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	b00b      	add	sp, #44	; 0x2c
 800d1e6:	bd90      	pop	{r4, r7, pc}
 800d1e8:	0800df6c 	.word	0x0800df6c
 800d1ec:	200016c4 	.word	0x200016c4

0800d1f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1f6:	e03e      	b.n	800d276 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1f8:	4b28      	ldr	r3, [pc, #160]	; (800d29c <prvSwitchTimerLists+0xac>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d202:	4b26      	ldr	r3, [pc, #152]	; (800d29c <prvSwitchTimerLists+0xac>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3304      	adds	r3, #4
 800d210:	0018      	movs	r0, r3
 800d212:	f7fd fdbe 	bl	800ad92 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	0010      	movs	r0, r2
 800d21e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	69db      	ldr	r3, [r3, #28]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d126      	bne.n	800d276 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	18d3      	adds	r3, r2, r3
 800d230:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	429a      	cmp	r2, r3
 800d238:	d90e      	bls.n	800d258 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d246:	4b15      	ldr	r3, [pc, #84]	; (800d29c <prvSwitchTimerLists+0xac>)
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3304      	adds	r3, #4
 800d24e:	0019      	movs	r1, r3
 800d250:	0010      	movs	r0, r2
 800d252:	f7fd fd68 	bl	800ad26 <vListInsert>
 800d256:	e00e      	b.n	800d276 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	2300      	movs	r3, #0
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	2300      	movs	r3, #0
 800d262:	2100      	movs	r1, #0
 800d264:	f7ff fdce 	bl	800ce04 <xTimerGenericCommand>
 800d268:	0003      	movs	r3, r0
 800d26a:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <prvSwitchTimerLists+0x86>
 800d272:	b672      	cpsid	i
 800d274:	e7fe      	b.n	800d274 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d276:	4b09      	ldr	r3, [pc, #36]	; (800d29c <prvSwitchTimerLists+0xac>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1bb      	bne.n	800d1f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d280:	4b06      	ldr	r3, [pc, #24]	; (800d29c <prvSwitchTimerLists+0xac>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d286:	4b06      	ldr	r3, [pc, #24]	; (800d2a0 <prvSwitchTimerLists+0xb0>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	4b04      	ldr	r3, [pc, #16]	; (800d29c <prvSwitchTimerLists+0xac>)
 800d28c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800d28e:	4b04      	ldr	r3, [pc, #16]	; (800d2a0 <prvSwitchTimerLists+0xb0>)
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	601a      	str	r2, [r3, #0]
}
 800d294:	46c0      	nop			; (mov r8, r8)
 800d296:	46bd      	mov	sp, r7
 800d298:	b006      	add	sp, #24
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	200016bc 	.word	0x200016bc
 800d2a0:	200016c0 	.word	0x200016c0

0800d2a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d2aa:	f000 f8f1 	bl	800d490 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d2ae:	4b16      	ldr	r3, [pc, #88]	; (800d308 <prvCheckForValidListAndQueue+0x64>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d123      	bne.n	800d2fe <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800d2b6:	4b15      	ldr	r3, [pc, #84]	; (800d30c <prvCheckForValidListAndQueue+0x68>)
 800d2b8:	0018      	movs	r0, r3
 800d2ba:	f7fd fce9 	bl	800ac90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d2be:	4b14      	ldr	r3, [pc, #80]	; (800d310 <prvCheckForValidListAndQueue+0x6c>)
 800d2c0:	0018      	movs	r0, r3
 800d2c2:	f7fd fce5 	bl	800ac90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d2c6:	4b13      	ldr	r3, [pc, #76]	; (800d314 <prvCheckForValidListAndQueue+0x70>)
 800d2c8:	4a10      	ldr	r2, [pc, #64]	; (800d30c <prvCheckForValidListAndQueue+0x68>)
 800d2ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d2cc:	4b12      	ldr	r3, [pc, #72]	; (800d318 <prvCheckForValidListAndQueue+0x74>)
 800d2ce:	4a10      	ldr	r2, [pc, #64]	; (800d310 <prvCheckForValidListAndQueue+0x6c>)
 800d2d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d2d2:	4b12      	ldr	r3, [pc, #72]	; (800d31c <prvCheckForValidListAndQueue+0x78>)
 800d2d4:	4a12      	ldr	r2, [pc, #72]	; (800d320 <prvCheckForValidListAndQueue+0x7c>)
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	9100      	str	r1, [sp, #0]
 800d2da:	2110      	movs	r1, #16
 800d2dc:	200a      	movs	r0, #10
 800d2de:	f7fd fdd4 	bl	800ae8a <xQueueGenericCreateStatic>
 800d2e2:	0002      	movs	r2, r0
 800d2e4:	4b08      	ldr	r3, [pc, #32]	; (800d308 <prvCheckForValidListAndQueue+0x64>)
 800d2e6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d2e8:	4b07      	ldr	r3, [pc, #28]	; (800d308 <prvCheckForValidListAndQueue+0x64>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d006      	beq.n	800d2fe <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d2f0:	4b05      	ldr	r3, [pc, #20]	; (800d308 <prvCheckForValidListAndQueue+0x64>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a0b      	ldr	r2, [pc, #44]	; (800d324 <prvCheckForValidListAndQueue+0x80>)
 800d2f6:	0011      	movs	r1, r2
 800d2f8:	0018      	movs	r0, r3
 800d2fa:	f7fe facb 	bl	800b894 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2fe:	f000 f8d9 	bl	800d4b4 <vPortExitCritical>
}
 800d302:	46c0      	nop			; (mov r8, r8)
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	200016c4 	.word	0x200016c4
 800d30c:	20001694 	.word	0x20001694
 800d310:	200016a8 	.word	0x200016a8
 800d314:	200016bc 	.word	0x200016bc
 800d318:	200016c0 	.word	0x200016c0
 800d31c:	20001770 	.word	0x20001770
 800d320:	200016d0 	.word	0x200016d0
 800d324:	0800dd2c 	.word	0x0800dd2c

0800d328 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <pvTimerGetTimerID+0x16>
 800d33a:	b672      	cpsid	i
 800d33c:	e7fe      	b.n	800d33c <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800d33e:	f000 f8a7 	bl	800d490 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 800d348:	f000 f8b4 	bl	800d4b4 <vPortExitCritical>

	return pvReturn;
 800d34c:	68bb      	ldr	r3, [r7, #8]
}
 800d34e:	0018      	movs	r0, r3
 800d350:	46bd      	mov	sp, r7
 800d352:	b004      	add	sp, #16
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3b04      	subs	r3, #4
 800d368:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2280      	movs	r2, #128	; 0x80
 800d36e:	0452      	lsls	r2, r2, #17
 800d370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3b04      	subs	r3, #4
 800d376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3b04      	subs	r3, #4
 800d382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d384:	4a08      	ldr	r2, [pc, #32]	; (800d3a8 <pxPortInitialiseStack+0x50>)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3b14      	subs	r3, #20
 800d38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	3b20      	subs	r3, #32
 800d39a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d39c:	68fb      	ldr	r3, [r7, #12]
}
 800d39e:	0018      	movs	r0, r3
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	b004      	add	sp, #16
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	46c0      	nop			; (mov r8, r8)
 800d3a8:	0800d3ad 	.word	0x0800d3ad

0800d3ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3b6:	4b08      	ldr	r3, [pc, #32]	; (800d3d8 <prvTaskExitError+0x2c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	d001      	beq.n	800d3c2 <prvTaskExitError+0x16>
 800d3be:	b672      	cpsid	i
 800d3c0:	e7fe      	b.n	800d3c0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800d3c2:	b672      	cpsid	i
	while( ulDummy == 0 )
 800d3c4:	46c0      	nop			; (mov r8, r8)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d0fc      	beq.n	800d3c6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d3cc:	46c0      	nop			; (mov r8, r8)
 800d3ce:	46c0      	nop			; (mov r8, r8)
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	b002      	add	sp, #8
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	46c0      	nop			; (mov r8, r8)
 800d3d8:	20000010 	.word	0x20000010

0800d3dc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800d3e0:	46c0      	nop			; (mov r8, r8)
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
	...

0800d3f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800d3f0:	4a0b      	ldr	r2, [pc, #44]	; (800d420 <pxCurrentTCBConst2>)
 800d3f2:	6813      	ldr	r3, [r2, #0]
 800d3f4:	6818      	ldr	r0, [r3, #0]
 800d3f6:	3020      	adds	r0, #32
 800d3f8:	f380 8809 	msr	PSP, r0
 800d3fc:	2002      	movs	r0, #2
 800d3fe:	f380 8814 	msr	CONTROL, r0
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800d408:	46ae      	mov	lr, r5
 800d40a:	bc08      	pop	{r3}
 800d40c:	bc04      	pop	{r2}
 800d40e:	b662      	cpsie	i
 800d410:	4718      	bx	r3
 800d412:	46c0      	nop			; (mov r8, r8)
 800d414:	46c0      	nop			; (mov r8, r8)
 800d416:	46c0      	nop			; (mov r8, r8)
 800d418:	46c0      	nop			; (mov r8, r8)
 800d41a:	46c0      	nop			; (mov r8, r8)
 800d41c:	46c0      	nop			; (mov r8, r8)
 800d41e:	46c0      	nop			; (mov r8, r8)

0800d420 <pxCurrentTCBConst2>:
 800d420:	20001194 	.word	0x20001194
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800d424:	46c0      	nop			; (mov r8, r8)
 800d426:	46c0      	nop			; (mov r8, r8)

0800d428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800d42c:	4b0e      	ldr	r3, [pc, #56]	; (800d468 <xPortStartScheduler+0x40>)
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	4b0d      	ldr	r3, [pc, #52]	; (800d468 <xPortStartScheduler+0x40>)
 800d432:	21ff      	movs	r1, #255	; 0xff
 800d434:	0409      	lsls	r1, r1, #16
 800d436:	430a      	orrs	r2, r1
 800d438:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800d43a:	4b0b      	ldr	r3, [pc, #44]	; (800d468 <xPortStartScheduler+0x40>)
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	4b0a      	ldr	r3, [pc, #40]	; (800d468 <xPortStartScheduler+0x40>)
 800d440:	21ff      	movs	r1, #255	; 0xff
 800d442:	0609      	lsls	r1, r1, #24
 800d444:	430a      	orrs	r2, r1
 800d446:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800d448:	f000 f898 	bl	800d57c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d44c:	4b07      	ldr	r3, [pc, #28]	; (800d46c <xPortStartScheduler+0x44>)
 800d44e:	2200      	movs	r2, #0
 800d450:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800d452:	f7ff ffcd 	bl	800d3f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d456:	f7fe fe1f 	bl	800c098 <vTaskSwitchContext>
	prvTaskExitError();
 800d45a:	f7ff ffa7 	bl	800d3ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	0018      	movs	r0, r3
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	46c0      	nop			; (mov r8, r8)
 800d468:	e000ed20 	.word	0xe000ed20
 800d46c:	20000010 	.word	0x20000010

0800d470 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800d474:	4b05      	ldr	r3, [pc, #20]	; (800d48c <vPortYield+0x1c>)
 800d476:	2280      	movs	r2, #128	; 0x80
 800d478:	0552      	lsls	r2, r2, #21
 800d47a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800d47c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d480:	f3bf 8f6f 	isb	sy
}
 800d484:	46c0      	nop			; (mov r8, r8)
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	46c0      	nop			; (mov r8, r8)
 800d48c:	e000ed04 	.word	0xe000ed04

0800d490 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800d494:	b672      	cpsid	i
    uxCriticalNesting++;
 800d496:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <vPortEnterCritical+0x20>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	1c5a      	adds	r2, r3, #1
 800d49c:	4b04      	ldr	r3, [pc, #16]	; (800d4b0 <vPortEnterCritical+0x20>)
 800d49e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800d4a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d4a4:	f3bf 8f6f 	isb	sy
}
 800d4a8:	46c0      	nop			; (mov r8, r8)
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	46c0      	nop			; (mov r8, r8)
 800d4b0:	20000010 	.word	0x20000010

0800d4b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4b8:	4b09      	ldr	r3, [pc, #36]	; (800d4e0 <vPortExitCritical+0x2c>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <vPortExitCritical+0x10>
 800d4c0:	b672      	cpsid	i
 800d4c2:	e7fe      	b.n	800d4c2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800d4c4:	4b06      	ldr	r3, [pc, #24]	; (800d4e0 <vPortExitCritical+0x2c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	1e5a      	subs	r2, r3, #1
 800d4ca:	4b05      	ldr	r3, [pc, #20]	; (800d4e0 <vPortExitCritical+0x2c>)
 800d4cc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800d4ce:	4b04      	ldr	r3, [pc, #16]	; (800d4e0 <vPortExitCritical+0x2c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d100      	bne.n	800d4d8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800d4d6:	b662      	cpsie	i
    }
}
 800d4d8:	46c0      	nop			; (mov r8, r8)
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	46c0      	nop			; (mov r8, r8)
 800d4e0:	20000010 	.word	0x20000010

0800d4e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800d4e4:	f3ef 8010 	mrs	r0, PRIMASK
 800d4e8:	b672      	cpsid	i
 800d4ea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800d4ec:	46c0      	nop			; (mov r8, r8)
 800d4ee:	0018      	movs	r0, r3

0800d4f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800d4f0:	f380 8810 	msr	PRIMASK, r0
 800d4f4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800d4f6:	46c0      	nop			; (mov r8, r8)
	...

0800d500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d500:	f3ef 8009 	mrs	r0, PSP
 800d504:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <pxCurrentTCBConst>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	3820      	subs	r0, #32
 800d50a:	6010      	str	r0, [r2, #0]
 800d50c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800d50e:	4644      	mov	r4, r8
 800d510:	464d      	mov	r5, r9
 800d512:	4656      	mov	r6, sl
 800d514:	465f      	mov	r7, fp
 800d516:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800d518:	b508      	push	{r3, lr}
 800d51a:	b672      	cpsid	i
 800d51c:	f7fe fdbc 	bl	800c098 <vTaskSwitchContext>
 800d520:	b662      	cpsie	i
 800d522:	bc0c      	pop	{r2, r3}
 800d524:	6811      	ldr	r1, [r2, #0]
 800d526:	6808      	ldr	r0, [r1, #0]
 800d528:	3010      	adds	r0, #16
 800d52a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800d52c:	46a0      	mov	r8, r4
 800d52e:	46a9      	mov	r9, r5
 800d530:	46b2      	mov	sl, r6
 800d532:	46bb      	mov	fp, r7
 800d534:	f380 8809 	msr	PSP, r0
 800d538:	3820      	subs	r0, #32
 800d53a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800d53c:	4718      	bx	r3
 800d53e:	46c0      	nop			; (mov r8, r8)

0800d540 <pxCurrentTCBConst>:
 800d540:	20001194 	.word	0x20001194
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800d544:	46c0      	nop			; (mov r8, r8)
 800d546:	46c0      	nop			; (mov r8, r8)

0800d548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800d54e:	f7ff ffc9 	bl	800d4e4 <ulSetInterruptMaskFromISR>
 800d552:	0003      	movs	r3, r0
 800d554:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d556:	f7fe fceb 	bl	800bf30 <xTaskIncrementTick>
 800d55a:	1e03      	subs	r3, r0, #0
 800d55c:	d003      	beq.n	800d566 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800d55e:	4b06      	ldr	r3, [pc, #24]	; (800d578 <xPortSysTickHandler+0x30>)
 800d560:	2280      	movs	r2, #128	; 0x80
 800d562:	0552      	lsls	r2, r2, #21
 800d564:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	0018      	movs	r0, r3
 800d56a:	f7ff ffc1 	bl	800d4f0 <vClearInterruptMaskFromISR>
}
 800d56e:	46c0      	nop			; (mov r8, r8)
 800d570:	46bd      	mov	sp, r7
 800d572:	b002      	add	sp, #8
 800d574:	bd80      	pop	{r7, pc}
 800d576:	46c0      	nop			; (mov r8, r8)
 800d578:	e000ed04 	.word	0xe000ed04

0800d57c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800d580:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <prvSetupTimerInterrupt+0x34>)
 800d582:	2200      	movs	r2, #0
 800d584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800d586:	4b0b      	ldr	r3, [pc, #44]	; (800d5b4 <prvSetupTimerInterrupt+0x38>)
 800d588:	2200      	movs	r2, #0
 800d58a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d58c:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <prvSetupTimerInterrupt+0x3c>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	22fa      	movs	r2, #250	; 0xfa
 800d592:	0091      	lsls	r1, r2, #2
 800d594:	0018      	movs	r0, r3
 800d596:	f7f2 fdb7 	bl	8000108 <__udivsi3>
 800d59a:	0003      	movs	r3, r0
 800d59c:	001a      	movs	r2, r3
 800d59e:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <prvSetupTimerInterrupt+0x40>)
 800d5a0:	3a01      	subs	r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800d5a4:	4b02      	ldr	r3, [pc, #8]	; (800d5b0 <prvSetupTimerInterrupt+0x34>)
 800d5a6:	2207      	movs	r2, #7
 800d5a8:	601a      	str	r2, [r3, #0]
}
 800d5aa:	46c0      	nop			; (mov r8, r8)
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	e000e010 	.word	0xe000e010
 800d5b4:	e000e018 	.word	0xe000e018
 800d5b8:	20000004 	.word	0x20000004
 800d5bc:	e000e014 	.word	0xe000e014

0800d5c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800d5cc:	f7fe fbfa 	bl	800bdc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d5d0:	4b49      	ldr	r3, [pc, #292]	; (800d6f8 <pvPortMalloc+0x138>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d5d8:	f000 f8e0 	bl	800d79c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d5dc:	4b47      	ldr	r3, [pc, #284]	; (800d6fc <pvPortMalloc+0x13c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	d000      	beq.n	800d5e8 <pvPortMalloc+0x28>
 800d5e6:	e079      	b.n	800d6dc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d012      	beq.n	800d614 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800d5ee:	2208      	movs	r2, #8
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	189b      	adds	r3, r3, r2
 800d5f4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2207      	movs	r2, #7
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	d00a      	beq.n	800d614 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2207      	movs	r2, #7
 800d602:	4393      	bics	r3, r2
 800d604:	3308      	adds	r3, #8
 800d606:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2207      	movs	r2, #7
 800d60c:	4013      	ands	r3, r2
 800d60e:	d001      	beq.n	800d614 <pvPortMalloc+0x54>
 800d610:	b672      	cpsid	i
 800d612:	e7fe      	b.n	800d612 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d060      	beq.n	800d6dc <pvPortMalloc+0x11c>
 800d61a:	4b39      	ldr	r3, [pc, #228]	; (800d700 <pvPortMalloc+0x140>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	429a      	cmp	r2, r3
 800d622:	d85b      	bhi.n	800d6dc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d624:	4b37      	ldr	r3, [pc, #220]	; (800d704 <pvPortMalloc+0x144>)
 800d626:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800d628:	4b36      	ldr	r3, [pc, #216]	; (800d704 <pvPortMalloc+0x144>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d62e:	e004      	b.n	800d63a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	429a      	cmp	r2, r3
 800d642:	d903      	bls.n	800d64c <pvPortMalloc+0x8c>
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1f1      	bne.n	800d630 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d64c:	4b2a      	ldr	r3, [pc, #168]	; (800d6f8 <pvPortMalloc+0x138>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	697a      	ldr	r2, [r7, #20]
 800d652:	429a      	cmp	r2, r3
 800d654:	d042      	beq.n	800d6dc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2208      	movs	r2, #8
 800d65c:	189b      	adds	r3, r3, r2
 800d65e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	1ad2      	subs	r2, r2, r3
 800d670:	2308      	movs	r3, #8
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	429a      	cmp	r2, r3
 800d676:	d916      	bls.n	800d6a6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d678:	697a      	ldr	r2, [r7, #20]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	18d3      	adds	r3, r2, r3
 800d67e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2207      	movs	r2, #7
 800d684:	4013      	ands	r3, r2
 800d686:	d001      	beq.n	800d68c <pvPortMalloc+0xcc>
 800d688:	b672      	cpsid	i
 800d68a:	e7fe      	b.n	800d68a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	685a      	ldr	r2, [r3, #4]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	1ad2      	subs	r2, r2, r3
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	0018      	movs	r0, r3
 800d6a2:	f000 f8db 	bl	800d85c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d6a6:	4b16      	ldr	r3, [pc, #88]	; (800d700 <pvPortMalloc+0x140>)
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	1ad2      	subs	r2, r2, r3
 800d6b0:	4b13      	ldr	r3, [pc, #76]	; (800d700 <pvPortMalloc+0x140>)
 800d6b2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d6b4:	4b12      	ldr	r3, [pc, #72]	; (800d700 <pvPortMalloc+0x140>)
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	4b13      	ldr	r3, [pc, #76]	; (800d708 <pvPortMalloc+0x148>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d203      	bcs.n	800d6c8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6c0:	4b0f      	ldr	r3, [pc, #60]	; (800d700 <pvPortMalloc+0x140>)
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	4b10      	ldr	r3, [pc, #64]	; (800d708 <pvPortMalloc+0x148>)
 800d6c6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <pvPortMalloc+0x13c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	431a      	orrs	r2, r3
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6dc:	f7fe fb7e 	bl	800bddc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2207      	movs	r2, #7
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	d001      	beq.n	800d6ec <pvPortMalloc+0x12c>
 800d6e8:	b672      	cpsid	i
 800d6ea:	e7fe      	b.n	800d6ea <pvPortMalloc+0x12a>
	return pvReturn;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
}
 800d6ee:	0018      	movs	r0, r3
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	b006      	add	sp, #24
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	46c0      	nop			; (mov r8, r8)
 800d6f8:	200023c8 	.word	0x200023c8
 800d6fc:	200023d4 	.word	0x200023d4
 800d700:	200023cc 	.word	0x200023cc
 800d704:	200023c0 	.word	0x200023c0
 800d708:	200023d0 	.word	0x200023d0

0800d70c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d035      	beq.n	800d78a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d71e:	2308      	movs	r3, #8
 800d720:	425b      	negs	r3, r3
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	18d3      	adds	r3, r2, r3
 800d726:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	4b18      	ldr	r3, [pc, #96]	; (800d794 <vPortFree+0x88>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4013      	ands	r3, r2
 800d736:	d101      	bne.n	800d73c <vPortFree+0x30>
 800d738:	b672      	cpsid	i
 800d73a:	e7fe      	b.n	800d73a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d001      	beq.n	800d748 <vPortFree+0x3c>
 800d744:	b672      	cpsid	i
 800d746:	e7fe      	b.n	800d746 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	4b11      	ldr	r3, [pc, #68]	; (800d794 <vPortFree+0x88>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4013      	ands	r3, r2
 800d752:	d01a      	beq.n	800d78a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d116      	bne.n	800d78a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	4b0c      	ldr	r3, [pc, #48]	; (800d794 <vPortFree+0x88>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	43db      	mvns	r3, r3
 800d766:	401a      	ands	r2, r3
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d76c:	f7fe fb2a 	bl	800bdc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	4b08      	ldr	r3, [pc, #32]	; (800d798 <vPortFree+0x8c>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	18d2      	adds	r2, r2, r3
 800d77a:	4b07      	ldr	r3, [pc, #28]	; (800d798 <vPortFree+0x8c>)
 800d77c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	0018      	movs	r0, r3
 800d782:	f000 f86b 	bl	800d85c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d786:	f7fe fb29 	bl	800bddc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d78a:	46c0      	nop			; (mov r8, r8)
 800d78c:	46bd      	mov	sp, r7
 800d78e:	b004      	add	sp, #16
 800d790:	bd80      	pop	{r7, pc}
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	200023d4 	.word	0x200023d4
 800d798:	200023cc 	.word	0x200023cc

0800d79c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7a2:	23c0      	movs	r3, #192	; 0xc0
 800d7a4:	011b      	lsls	r3, r3, #4
 800d7a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7a8:	4b26      	ldr	r3, [pc, #152]	; (800d844 <prvHeapInit+0xa8>)
 800d7aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2207      	movs	r2, #7
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	d00c      	beq.n	800d7ce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3307      	adds	r3, #7
 800d7b8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2207      	movs	r2, #7
 800d7be:	4393      	bics	r3, r2
 800d7c0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	1ad2      	subs	r2, r2, r3
 800d7c8:	4b1e      	ldr	r3, [pc, #120]	; (800d844 <prvHeapInit+0xa8>)
 800d7ca:	18d3      	adds	r3, r2, r3
 800d7cc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7d2:	4b1d      	ldr	r3, [pc, #116]	; (800d848 <prvHeapInit+0xac>)
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7d8:	4b1b      	ldr	r3, [pc, #108]	; (800d848 <prvHeapInit+0xac>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	18d3      	adds	r3, r2, r3
 800d7e4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7e6:	2208      	movs	r2, #8
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	1a9b      	subs	r3, r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2207      	movs	r2, #7
 800d7f2:	4393      	bics	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	4b14      	ldr	r3, [pc, #80]	; (800d84c <prvHeapInit+0xb0>)
 800d7fa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800d7fc:	4b13      	ldr	r3, [pc, #76]	; (800d84c <prvHeapInit+0xb0>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2200      	movs	r2, #0
 800d802:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d804:	4b11      	ldr	r3, [pc, #68]	; (800d84c <prvHeapInit+0xb0>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2200      	movs	r2, #0
 800d80a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	1ad2      	subs	r2, r2, r3
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d81a:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <prvHeapInit+0xb0>)
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <prvHeapInit+0xb4>)
 800d828:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	685a      	ldr	r2, [r3, #4]
 800d82e:	4b09      	ldr	r3, [pc, #36]	; (800d854 <prvHeapInit+0xb8>)
 800d830:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <prvHeapInit+0xbc>)
 800d834:	2280      	movs	r2, #128	; 0x80
 800d836:	0612      	lsls	r2, r2, #24
 800d838:	601a      	str	r2, [r3, #0]
}
 800d83a:	46c0      	nop			; (mov r8, r8)
 800d83c:	46bd      	mov	sp, r7
 800d83e:	b004      	add	sp, #16
 800d840:	bd80      	pop	{r7, pc}
 800d842:	46c0      	nop			; (mov r8, r8)
 800d844:	200017c0 	.word	0x200017c0
 800d848:	200023c0 	.word	0x200023c0
 800d84c:	200023c8 	.word	0x200023c8
 800d850:	200023d0 	.word	0x200023d0
 800d854:	200023cc 	.word	0x200023cc
 800d858:	200023d4 	.word	0x200023d4

0800d85c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d864:	4b27      	ldr	r3, [pc, #156]	; (800d904 <prvInsertBlockIntoFreeList+0xa8>)
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	e002      	b.n	800d870 <prvInsertBlockIntoFreeList+0x14>
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	429a      	cmp	r2, r3
 800d878:	d8f7      	bhi.n	800d86a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	68ba      	ldr	r2, [r7, #8]
 800d884:	18d3      	adds	r3, r2, r3
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d108      	bne.n	800d89e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	685a      	ldr	r2, [r3, #4]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	18d2      	adds	r2, r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	18d2      	adds	r2, r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d118      	bne.n	800d8e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	4b14      	ldr	r3, [pc, #80]	; (800d908 <prvInsertBlockIntoFreeList+0xac>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d00d      	beq.n	800d8da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685a      	ldr	r2, [r3, #4]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	18d2      	adds	r2, r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	601a      	str	r2, [r3, #0]
 800d8d8:	e008      	b.n	800d8ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8da:	4b0b      	ldr	r3, [pc, #44]	; (800d908 <prvInsertBlockIntoFreeList+0xac>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	e003      	b.n	800d8ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d002      	beq.n	800d8fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8fa:	46c0      	nop			; (mov r8, r8)
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	b004      	add	sp, #16
 800d900:	bd80      	pop	{r7, pc}
 800d902:	46c0      	nop			; (mov r8, r8)
 800d904:	200023c0 	.word	0x200023c0
 800d908:	200023c8 	.word	0x200023c8

0800d90c <MCP3462_ADCInit>:
#include "main.h"
#include "cmsis_os.h"
#include "spi.h"
#include "MCP3462.h"

void MCP3462_ADCInit() {
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0

	uint8_t TX_Data[19];

	// Reset the MCP3462
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800d912:	2390      	movs	r3, #144	; 0x90
 800d914:	05db      	lsls	r3, r3, #23
 800d916:	2201      	movs	r2, #1
 800d918:	2110      	movs	r1, #16
 800d91a:	0018      	movs	r0, r3
 800d91c:	f7f7 f94b 	bl	8004bb6 <HAL_GPIO_WritePin>
//	osDelay(50);
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800d920:	2390      	movs	r3, #144	; 0x90
 800d922:	05db      	lsls	r3, r3, #23
 800d924:	2200      	movs	r2, #0
 800d926:	2110      	movs	r1, #16
 800d928:	0018      	movs	r0, r3
 800d92a:	f7f7 f944 	bl	8004bb6 <HAL_GPIO_WritePin>
//	osDelay(50);

	TX_Data[0] = 0b01000110;	// Device = 1 - write starting at register 1
 800d92e:	1d3b      	adds	r3, r7, #4
 800d930:	2246      	movs	r2, #70	; 0x46
 800d932:	701a      	strb	r2, [r3, #0]
	TX_Data[1] = MCP3462_CLK_INT_AMCLK | MCP3462_CurrentNone | MCP3462_CONVERSION;
 800d934:	1d3b      	adds	r3, r7, #4
 800d936:	2233      	movs	r2, #51	; 0x33
 800d938:	705a      	strb	r2, [r3, #1]
	TX_Data[2] = MCP3462_AMCLK_PRESCALE2 | MCP3462_OSR_512;
 800d93a:	1d3b      	adds	r3, r7, #4
 800d93c:	2250      	movs	r2, #80	; 0x50
 800d93e:	709a      	strb	r2, [r3, #2]
//	TX_Data[3] = MCP3462_BIAS_1 | MCP3462_GAIN_1_3 | MCP3462_AZ_MUX_DISABLED;
	TX_Data[3] = MCP3462_BIAS_1 | MCP3462_GAIN_1 | MCP3462_AZ_MUX_DISABLED;
 800d940:	1d3b      	adds	r3, r7, #4
 800d942:	2288      	movs	r2, #136	; 0x88
 800d944:	70da      	strb	r2, [r3, #3]
	TX_Data[4] = MCP3462_MODE_CONTINUOUS | MCP3462_FORMAT_32_17_D | MCP3462_CRC16_16 | MCP3462_CRC_DISABLE | MCP3462_OFFCAL_DISABLE | MCP3462_GAINCAL_DISABLE;
 800d946:	1d3b      	adds	r3, r7, #4
 800d948:	22f0      	movs	r2, #240	; 0xf0
 800d94a:	711a      	strb	r2, [r3, #4]
	TX_Data[5] = MCP3462_IRQ_STATE | MCP3462_FAST_COMMAND;
 800d94c:	1d3b      	adds	r3, r7, #4
 800d94e:	2206      	movs	r2, #6
 800d950:	715a      	strb	r2, [r3, #5]
	TX_Data[6] = MCP3462_VINPOS_CH0 | MCP3462_VINNEG_AGND;
 800d952:	1d3b      	adds	r3, r7, #4
 800d954:	2208      	movs	r2, #8
 800d956:	719a      	strb	r2, [r3, #6]
//	TX_Data[7] = 0b00000000; 	// Scan 0		|
	TX_Data[7] = MCP3462_DMCLK64;
 800d958:	1d3b      	adds	r3, r7, #4
 800d95a:	2280      	movs	r2, #128	; 0x80
 800d95c:	71da      	strb	r2, [r3, #7]
	TX_Data[8] = 0b00000000; 	// Scan 1		|
 800d95e:	1d3b      	adds	r3, r7, #4
 800d960:	2200      	movs	r2, #0
 800d962:	721a      	strb	r2, [r3, #8]
	TX_Data[9] = 0b00000011; 	// Scan 2		| Scanning channels 0 and 1
 800d964:	1d3b      	adds	r3, r7, #4
 800d966:	2203      	movs	r2, #3
 800d968:	725a      	strb	r2, [r3, #9]
	TX_Data[10] = 0x00;
 800d96a:	1d3b      	adds	r3, r7, #4
 800d96c:	2200      	movs	r2, #0
 800d96e:	729a      	strb	r2, [r3, #10]
	TX_Data[11] = 0x00;
 800d970:	1d3b      	adds	r3, r7, #4
 800d972:	2200      	movs	r2, #0
 800d974:	72da      	strb	r2, [r3, #11]
	TX_Data[12] = 0x01;			// No delay
 800d976:	1d3b      	adds	r3, r7, #4
 800d978:	2201      	movs	r2, #1
 800d97a:	731a      	strb	r2, [r3, #12]
	TX_Data[13] = 0x00;
 800d97c:	1d3b      	adds	r3, r7, #4
 800d97e:	2200      	movs	r2, #0
 800d980:	735a      	strb	r2, [r3, #13]
	TX_Data[14] = 0x00;
 800d982:	1d3b      	adds	r3, r7, #4
 800d984:	2200      	movs	r2, #0
 800d986:	739a      	strb	r2, [r3, #14]
	TX_Data[15] = 0x00;			// Offset Calibration
 800d988:	1d3b      	adds	r3, r7, #4
 800d98a:	2200      	movs	r2, #0
 800d98c:	73da      	strb	r2, [r3, #15]
	TX_Data[16] = 0x00;
 800d98e:	1d3b      	adds	r3, r7, #4
 800d990:	2200      	movs	r2, #0
 800d992:	741a      	strb	r2, [r3, #16]
	TX_Data[17] = 0x00;
 800d994:	1d3b      	adds	r3, r7, #4
 800d996:	2200      	movs	r2, #0
 800d998:	745a      	strb	r2, [r3, #17]
	TX_Data[18] = 0x00;			// Gain Calibration
 800d99a:	1d3b      	adds	r3, r7, #4
 800d99c:	2200      	movs	r2, #0
 800d99e:	749a      	strb	r2, [r3, #18]

	HAL_SPI_Transmit(&hspi1, TX_Data, sizeof(TX_Data), 5000);
 800d9a0:	4b08      	ldr	r3, [pc, #32]	; (800d9c4 <MCP3462_ADCInit+0xb8>)
 800d9a2:	1d39      	adds	r1, r7, #4
 800d9a4:	4808      	ldr	r0, [pc, #32]	; (800d9c8 <MCP3462_ADCInit+0xbc>)
 800d9a6:	2213      	movs	r2, #19
 800d9a8:	f7f8 f974 	bl	8005c94 <HAL_SPI_Transmit>

	// Deselect the MCP3462 to end the command
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800d9ac:	2390      	movs	r3, #144	; 0x90
 800d9ae:	05db      	lsls	r3, r3, #23
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	2110      	movs	r1, #16
 800d9b4:	0018      	movs	r0, r3
 800d9b6:	f7f7 f8fe 	bl	8004bb6 <HAL_GPIO_WritePin>

}
 800d9ba:	46c0      	nop			; (mov r8, r8)
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	b006      	add	sp, #24
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	46c0      	nop			; (mov r8, r8)
 800d9c4:	00001388 	.word	0x00001388
 800d9c8:	200005d4 	.word	0x200005d4

0800d9cc <MCP3462_ADCRead>:

uint8_t MCP3462_ADCRead(int32_t *value, uint8_t *channel) {
 800d9cc:	b5b0      	push	{r4, r5, r7, lr}
 800d9ce:	b08a      	sub	sp, #40	; 0x28
 800d9d0:	af02      	add	r7, sp, #8
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	61fb      	str	r3, [r7, #28]
	uint8_t TX_Data[5];
	uint8_t RX_Data[5];

	TX_Data[0] = 0b01000011;		// Read register 0
 800d9da:	2514      	movs	r5, #20
 800d9dc:	197b      	adds	r3, r7, r5
 800d9de:	2243      	movs	r2, #67	; 0x43
 800d9e0:	701a      	strb	r2, [r3, #0]

	RX_Data[0] = 0xa0;	//Status
 800d9e2:	240c      	movs	r4, #12
 800d9e4:	193b      	adds	r3, r7, r4
 800d9e6:	22a0      	movs	r2, #160	; 0xa0
 800d9e8:	701a      	strb	r2, [r3, #0]
	RX_Data[1] = 0x0a;	//Data 24:31
 800d9ea:	193b      	adds	r3, r7, r4
 800d9ec:	220a      	movs	r2, #10
 800d9ee:	705a      	strb	r2, [r3, #1]
	RX_Data[2] = 0xa0;	//Data 16:23
 800d9f0:	193b      	adds	r3, r7, r4
 800d9f2:	22a0      	movs	r2, #160	; 0xa0
 800d9f4:	709a      	strb	r2, [r3, #2]
	RX_Data[3] = 0x0a;	//Data 08:15
 800d9f6:	193b      	adds	r3, r7, r4
 800d9f8:	220a      	movs	r2, #10
 800d9fa:	70da      	strb	r2, [r3, #3]
	RX_Data[4] = 0xa0;	//Data 00:07
 800d9fc:	193b      	adds	r3, r7, r4
 800d9fe:	22a0      	movs	r2, #160	; 0xa0
 800da00:	711a      	strb	r2, [r3, #4]

	// Select the MCP3462
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800da02:	2390      	movs	r3, #144	; 0x90
 800da04:	05db      	lsls	r3, r3, #23
 800da06:	2200      	movs	r2, #0
 800da08:	2110      	movs	r1, #16
 800da0a:	0018      	movs	r0, r3
 800da0c:	f7f7 f8d3 	bl	8004bb6 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, TX_Data, RX_Data, sizeof(TX_Data), 5000);
 800da10:	193a      	adds	r2, r7, r4
 800da12:	1979      	adds	r1, r7, r5
 800da14:	4818      	ldr	r0, [pc, #96]	; (800da78 <MCP3462_ADCRead+0xac>)
 800da16:	4b19      	ldr	r3, [pc, #100]	; (800da7c <MCP3462_ADCRead+0xb0>)
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	2305      	movs	r3, #5
 800da1c:	f7f8 fa9a 	bl	8005f54 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800da20:	2390      	movs	r3, #144	; 0x90
 800da22:	05db      	lsls	r3, r3, #23
 800da24:	2201      	movs	r2, #1
 800da26:	2110      	movs	r1, #16
 800da28:	0018      	movs	r0, r3
 800da2a:	f7f7 f8c4 	bl	8004bb6 <HAL_GPIO_WritePin>


	if (RX_Data[2] & 1) {
 800da2e:	193b      	adds	r3, r7, r4
 800da30:	789b      	ldrb	r3, [r3, #2]
 800da32:	001a      	movs	r2, r3
 800da34:	2301      	movs	r3, #1
 800da36:	4013      	ands	r3, r2
 800da38:	d001      	beq.n	800da3e <MCP3462_ADCRead+0x72>
		val = 0xFFFF0000;
 800da3a:	4b11      	ldr	r3, [pc, #68]	; (800da80 <MCP3462_ADCRead+0xb4>)
 800da3c:	61fb      	str	r3, [r7, #28]
	}
	val |=  (RX_Data[3] << 8);
 800da3e:	210c      	movs	r1, #12
 800da40:	187b      	adds	r3, r7, r1
 800da42:	78db      	ldrb	r3, [r3, #3]
 800da44:	021b      	lsls	r3, r3, #8
 800da46:	001a      	movs	r2, r3
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	61fb      	str	r3, [r7, #28]
	val |= RX_Data[4];
 800da4e:	187b      	adds	r3, r7, r1
 800da50:	791b      	ldrb	r3, [r3, #4]
 800da52:	001a      	movs	r2, r3
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	4313      	orrs	r3, r2
 800da58:	61fb      	str	r3, [r7, #28]
	*value = val;
 800da5a:	69fa      	ldr	r2, [r7, #28]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	601a      	str	r2, [r3, #0]
	*channel = RX_Data[1] >> 4;
 800da60:	187b      	adds	r3, r7, r1
 800da62:	785b      	ldrb	r3, [r3, #1]
 800da64:	091b      	lsrs	r3, r3, #4
 800da66:	b2da      	uxtb	r2, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	701a      	strb	r2, [r3, #0]

	return RX_Data[0];
 800da6c:	187b      	adds	r3, r7, r1
 800da6e:	781b      	ldrb	r3, [r3, #0]
}
 800da70:	0018      	movs	r0, r3
 800da72:	46bd      	mov	sp, r7
 800da74:	b008      	add	sp, #32
 800da76:	bdb0      	pop	{r4, r5, r7, pc}
 800da78:	200005d4 	.word	0x200005d4
 800da7c:	00001388 	.word	0x00001388
 800da80:	ffff0000 	.word	0xffff0000

0800da84 <memset>:
 800da84:	0003      	movs	r3, r0
 800da86:	1882      	adds	r2, r0, r2
 800da88:	4293      	cmp	r3, r2
 800da8a:	d100      	bne.n	800da8e <memset+0xa>
 800da8c:	4770      	bx	lr
 800da8e:	7019      	strb	r1, [r3, #0]
 800da90:	3301      	adds	r3, #1
 800da92:	e7f9      	b.n	800da88 <memset+0x4>

0800da94 <_reclaim_reent>:
 800da94:	4b2d      	ldr	r3, [pc, #180]	; (800db4c <_reclaim_reent+0xb8>)
 800da96:	b570      	push	{r4, r5, r6, lr}
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	0004      	movs	r4, r0
 800da9c:	4283      	cmp	r3, r0
 800da9e:	d042      	beq.n	800db26 <_reclaim_reent+0x92>
 800daa0:	69c3      	ldr	r3, [r0, #28]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <_reclaim_reent+0x28>
 800daa6:	2500      	movs	r5, #0
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	42ab      	cmp	r3, r5
 800daac:	d140      	bne.n	800db30 <_reclaim_reent+0x9c>
 800daae:	69e3      	ldr	r3, [r4, #28]
 800dab0:	6819      	ldr	r1, [r3, #0]
 800dab2:	2900      	cmp	r1, #0
 800dab4:	d002      	beq.n	800dabc <_reclaim_reent+0x28>
 800dab6:	0020      	movs	r0, r4
 800dab8:	f000 f87a 	bl	800dbb0 <_free_r>
 800dabc:	6961      	ldr	r1, [r4, #20]
 800dabe:	2900      	cmp	r1, #0
 800dac0:	d002      	beq.n	800dac8 <_reclaim_reent+0x34>
 800dac2:	0020      	movs	r0, r4
 800dac4:	f000 f874 	bl	800dbb0 <_free_r>
 800dac8:	69e1      	ldr	r1, [r4, #28]
 800daca:	2900      	cmp	r1, #0
 800dacc:	d002      	beq.n	800dad4 <_reclaim_reent+0x40>
 800dace:	0020      	movs	r0, r4
 800dad0:	f000 f86e 	bl	800dbb0 <_free_r>
 800dad4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dad6:	2900      	cmp	r1, #0
 800dad8:	d002      	beq.n	800dae0 <_reclaim_reent+0x4c>
 800dada:	0020      	movs	r0, r4
 800dadc:	f000 f868 	bl	800dbb0 <_free_r>
 800dae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dae2:	2900      	cmp	r1, #0
 800dae4:	d002      	beq.n	800daec <_reclaim_reent+0x58>
 800dae6:	0020      	movs	r0, r4
 800dae8:	f000 f862 	bl	800dbb0 <_free_r>
 800daec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800daee:	2900      	cmp	r1, #0
 800daf0:	d002      	beq.n	800daf8 <_reclaim_reent+0x64>
 800daf2:	0020      	movs	r0, r4
 800daf4:	f000 f85c 	bl	800dbb0 <_free_r>
 800daf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dafa:	2900      	cmp	r1, #0
 800dafc:	d002      	beq.n	800db04 <_reclaim_reent+0x70>
 800dafe:	0020      	movs	r0, r4
 800db00:	f000 f856 	bl	800dbb0 <_free_r>
 800db04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800db06:	2900      	cmp	r1, #0
 800db08:	d002      	beq.n	800db10 <_reclaim_reent+0x7c>
 800db0a:	0020      	movs	r0, r4
 800db0c:	f000 f850 	bl	800dbb0 <_free_r>
 800db10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800db12:	2900      	cmp	r1, #0
 800db14:	d002      	beq.n	800db1c <_reclaim_reent+0x88>
 800db16:	0020      	movs	r0, r4
 800db18:	f000 f84a 	bl	800dbb0 <_free_r>
 800db1c:	6a23      	ldr	r3, [r4, #32]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <_reclaim_reent+0x92>
 800db22:	0020      	movs	r0, r4
 800db24:	4798      	blx	r3
 800db26:	bd70      	pop	{r4, r5, r6, pc}
 800db28:	5949      	ldr	r1, [r1, r5]
 800db2a:	2900      	cmp	r1, #0
 800db2c:	d108      	bne.n	800db40 <_reclaim_reent+0xac>
 800db2e:	3504      	adds	r5, #4
 800db30:	69e3      	ldr	r3, [r4, #28]
 800db32:	68d9      	ldr	r1, [r3, #12]
 800db34:	2d80      	cmp	r5, #128	; 0x80
 800db36:	d1f7      	bne.n	800db28 <_reclaim_reent+0x94>
 800db38:	0020      	movs	r0, r4
 800db3a:	f000 f839 	bl	800dbb0 <_free_r>
 800db3e:	e7b6      	b.n	800daae <_reclaim_reent+0x1a>
 800db40:	680e      	ldr	r6, [r1, #0]
 800db42:	0020      	movs	r0, r4
 800db44:	f000 f834 	bl	800dbb0 <_free_r>
 800db48:	0031      	movs	r1, r6
 800db4a:	e7ee      	b.n	800db2a <_reclaim_reent+0x96>
 800db4c:	20000060 	.word	0x20000060

0800db50 <__libc_init_array>:
 800db50:	b570      	push	{r4, r5, r6, lr}
 800db52:	2600      	movs	r6, #0
 800db54:	4c0c      	ldr	r4, [pc, #48]	; (800db88 <__libc_init_array+0x38>)
 800db56:	4d0d      	ldr	r5, [pc, #52]	; (800db8c <__libc_init_array+0x3c>)
 800db58:	1b64      	subs	r4, r4, r5
 800db5a:	10a4      	asrs	r4, r4, #2
 800db5c:	42a6      	cmp	r6, r4
 800db5e:	d109      	bne.n	800db74 <__libc_init_array+0x24>
 800db60:	2600      	movs	r6, #0
 800db62:	f000 f87f 	bl	800dc64 <_init>
 800db66:	4c0a      	ldr	r4, [pc, #40]	; (800db90 <__libc_init_array+0x40>)
 800db68:	4d0a      	ldr	r5, [pc, #40]	; (800db94 <__libc_init_array+0x44>)
 800db6a:	1b64      	subs	r4, r4, r5
 800db6c:	10a4      	asrs	r4, r4, #2
 800db6e:	42a6      	cmp	r6, r4
 800db70:	d105      	bne.n	800db7e <__libc_init_array+0x2e>
 800db72:	bd70      	pop	{r4, r5, r6, pc}
 800db74:	00b3      	lsls	r3, r6, #2
 800db76:	58eb      	ldr	r3, [r5, r3]
 800db78:	4798      	blx	r3
 800db7a:	3601      	adds	r6, #1
 800db7c:	e7ee      	b.n	800db5c <__libc_init_array+0xc>
 800db7e:	00b3      	lsls	r3, r6, #2
 800db80:	58eb      	ldr	r3, [r5, r3]
 800db82:	4798      	blx	r3
 800db84:	3601      	adds	r6, #1
 800db86:	e7f2      	b.n	800db6e <__libc_init_array+0x1e>
 800db88:	0800df94 	.word	0x0800df94
 800db8c:	0800df94 	.word	0x0800df94
 800db90:	0800df98 	.word	0x0800df98
 800db94:	0800df94 	.word	0x0800df94

0800db98 <__retarget_lock_acquire_recursive>:
 800db98:	4770      	bx	lr

0800db9a <__retarget_lock_release_recursive>:
 800db9a:	4770      	bx	lr

0800db9c <memcpy>:
 800db9c:	2300      	movs	r3, #0
 800db9e:	b510      	push	{r4, lr}
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d100      	bne.n	800dba6 <memcpy+0xa>
 800dba4:	bd10      	pop	{r4, pc}
 800dba6:	5ccc      	ldrb	r4, [r1, r3]
 800dba8:	54c4      	strb	r4, [r0, r3]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	e7f8      	b.n	800dba0 <memcpy+0x4>
	...

0800dbb0 <_free_r>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	0005      	movs	r5, r0
 800dbb4:	2900      	cmp	r1, #0
 800dbb6:	d010      	beq.n	800dbda <_free_r+0x2a>
 800dbb8:	1f0c      	subs	r4, r1, #4
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	da00      	bge.n	800dbc2 <_free_r+0x12>
 800dbc0:	18e4      	adds	r4, r4, r3
 800dbc2:	0028      	movs	r0, r5
 800dbc4:	f000 f83e 	bl	800dc44 <__malloc_lock>
 800dbc8:	4a1d      	ldr	r2, [pc, #116]	; (800dc40 <_free_r+0x90>)
 800dbca:	6813      	ldr	r3, [r2, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d105      	bne.n	800dbdc <_free_r+0x2c>
 800dbd0:	6063      	str	r3, [r4, #4]
 800dbd2:	6014      	str	r4, [r2, #0]
 800dbd4:	0028      	movs	r0, r5
 800dbd6:	f000 f83d 	bl	800dc54 <__malloc_unlock>
 800dbda:	bd70      	pop	{r4, r5, r6, pc}
 800dbdc:	42a3      	cmp	r3, r4
 800dbde:	d908      	bls.n	800dbf2 <_free_r+0x42>
 800dbe0:	6820      	ldr	r0, [r4, #0]
 800dbe2:	1821      	adds	r1, r4, r0
 800dbe4:	428b      	cmp	r3, r1
 800dbe6:	d1f3      	bne.n	800dbd0 <_free_r+0x20>
 800dbe8:	6819      	ldr	r1, [r3, #0]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	1809      	adds	r1, r1, r0
 800dbee:	6021      	str	r1, [r4, #0]
 800dbf0:	e7ee      	b.n	800dbd0 <_free_r+0x20>
 800dbf2:	001a      	movs	r2, r3
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <_free_r+0x4e>
 800dbfa:	42a3      	cmp	r3, r4
 800dbfc:	d9f9      	bls.n	800dbf2 <_free_r+0x42>
 800dbfe:	6811      	ldr	r1, [r2, #0]
 800dc00:	1850      	adds	r0, r2, r1
 800dc02:	42a0      	cmp	r0, r4
 800dc04:	d10b      	bne.n	800dc1e <_free_r+0x6e>
 800dc06:	6820      	ldr	r0, [r4, #0]
 800dc08:	1809      	adds	r1, r1, r0
 800dc0a:	1850      	adds	r0, r2, r1
 800dc0c:	6011      	str	r1, [r2, #0]
 800dc0e:	4283      	cmp	r3, r0
 800dc10:	d1e0      	bne.n	800dbd4 <_free_r+0x24>
 800dc12:	6818      	ldr	r0, [r3, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	1841      	adds	r1, r0, r1
 800dc18:	6011      	str	r1, [r2, #0]
 800dc1a:	6053      	str	r3, [r2, #4]
 800dc1c:	e7da      	b.n	800dbd4 <_free_r+0x24>
 800dc1e:	42a0      	cmp	r0, r4
 800dc20:	d902      	bls.n	800dc28 <_free_r+0x78>
 800dc22:	230c      	movs	r3, #12
 800dc24:	602b      	str	r3, [r5, #0]
 800dc26:	e7d5      	b.n	800dbd4 <_free_r+0x24>
 800dc28:	6820      	ldr	r0, [r4, #0]
 800dc2a:	1821      	adds	r1, r4, r0
 800dc2c:	428b      	cmp	r3, r1
 800dc2e:	d103      	bne.n	800dc38 <_free_r+0x88>
 800dc30:	6819      	ldr	r1, [r3, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	1809      	adds	r1, r1, r0
 800dc36:	6021      	str	r1, [r4, #0]
 800dc38:	6063      	str	r3, [r4, #4]
 800dc3a:	6054      	str	r4, [r2, #4]
 800dc3c:	e7ca      	b.n	800dbd4 <_free_r+0x24>
 800dc3e:	46c0      	nop			; (mov r8, r8)
 800dc40:	20002514 	.word	0x20002514

0800dc44 <__malloc_lock>:
 800dc44:	b510      	push	{r4, lr}
 800dc46:	4802      	ldr	r0, [pc, #8]	; (800dc50 <__malloc_lock+0xc>)
 800dc48:	f7ff ffa6 	bl	800db98 <__retarget_lock_acquire_recursive>
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	46c0      	nop			; (mov r8, r8)
 800dc50:	20002510 	.word	0x20002510

0800dc54 <__malloc_unlock>:
 800dc54:	b510      	push	{r4, lr}
 800dc56:	4802      	ldr	r0, [pc, #8]	; (800dc60 <__malloc_unlock+0xc>)
 800dc58:	f7ff ff9f 	bl	800db9a <__retarget_lock_release_recursive>
 800dc5c:	bd10      	pop	{r4, pc}
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	20002510 	.word	0x20002510

0800dc64 <_init>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	46c0      	nop			; (mov r8, r8)
 800dc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc6a:	bc08      	pop	{r3}
 800dc6c:	469e      	mov	lr, r3
 800dc6e:	4770      	bx	lr

0800dc70 <_fini>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	46c0      	nop			; (mov r8, r8)
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr
